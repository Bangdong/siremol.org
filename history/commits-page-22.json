{"Page":22,"TotalPages":28,"commits":[{"author":"chryswoods","date":"2008-09-25T22:06:09.644585Z","commit":"675","message":"I've moved all MPI communication in SireMPI into a private communicator (so it won't interfere\nwith other libraries), and I have also solved the QMutex problem by using a pointer\nto a QMutex (as it was, I think, caused by a static mutex being used by a destructor of a static\nobject, after the static mutex had already been destroyed - changing the static mutex so that\nit is a pointer means that it is now not destroyed, but does raise the problem of locking\nthe creation of the mutex...\n\n"},{"author":"chryswoods","date":"2008-09-25T15:57:17.952706Z","commit":"674","message":"I am continuing to debug the MPI implementation. I have also added a sire_python executable\nthat provides an MPI-aware python interpreter.\n\nSo far, a simulation will run on the master node (communicated via MPI), but, while it will\nrun on a remote node, the energies are rubbish! Also, I am getting some QMutex errors reported\nonce the node has been returned to the cluster.\n\n"},{"author":"chryswoods","date":"2008-09-24T10:06:39.253536Z","commit":"673","message":"I've fixed the move of ThirdParty code and have also removed unused extra code (SqliteDriver,\nTest and UnitTest - I will be using CTest for unit testing)\n\n"},{"author":"chryswoods","date":"2008-09-24T07:53:54.050753Z","commit":"672","message":"I've fixed the streaming problems with RanGenerator (I had missed the last integer from the \ngenerator state), and I have also moved the third party code out of a separate library and\ninto the library that uses that code.\n\nThe MPI simulation is still crashing (now at PropertyMap::operator[](const QString\u0026)) and\nit also deadlocks occaisonally at mpipromise.wait()\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2008-09-23T07:53:14.295831Z","commit":"671","message":"I've finished writing MPISim, and now SireMove fully compiles and links. Now for Python wrapping \nand testing :-)\n\n\n"},{"author":"chryswoods","date":"2008-09-22T15:56:12.631012Z","commit":"670","message":"I've done most of the work of integrating the SireMPI code into SireMove. MPISimWorker really\nsimplifies LocalSim and ThreadSim as well (so much so that I think the name of this class\nis wrong!)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-09-22T07:54:18.731179Z","commit":"669","message":"I've written most of the MPISimWorker class. I need to run and catch my bus now! \n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-09-21T14:43:18.450983Z","commit":"668","message":"I've got SireMPI to compile and link. I now need to connect it to SireMove (by updating MPISim and \nMPISimWorker) and then it can be tested.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-09-20T14:35:45.538398Z","commit":"667","message":"I've nearly finished the rewrite of SireMPI - the new code is much cleaner and more logically\narranged.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-09-19T10:41:26.882461Z","commit":"666","message":"I am in the process of splitting out the MPI code that is not specific to SireMove so that\nit can be used by other modules (if necessary). In the process I have also upgraded the \nCMake files so that they work with cmake 2.6 (and have bumped up the minimum requirement\nto cmake 2.6)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-09-18T12:23:59.257037Z","commit":"665","message":"I'm trying to get the MPI backend to actually run a simulation - so far I am just getting deadlocks\nand segfaults... The code is filled with debug statements...\n\n\n"},{"author":"chryswoods","date":"2008-09-17T12:37:01.013587Z","commit":"664","message":"Fixing some compile errors on Linux...\n\n"},{"author":"chryswoods","date":"2008-09-15T22:57:09.343825Z","commit":"663","message":"I've added a little more system information to the file header. This will allow me to debug\nproblems caused by different compilers or operating systems (although, hopefully the files\nwill be highly portable!)\n\n"},{"author":"chryswoods","date":"2008-09-15T19:46:23.050789Z","commit":"662","message":"I've finished adding the header data. The file header now contains lots of metadata\nthat should help manage the provedance of sire files.\n\n"},{"author":"chryswoods","date":"2008-09-15T17:57:48.325179Z","commit":"661","message":"I've nearly finished updating the header data, but must now make some dinner!\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2008-09-15T17:12:47.146473Z","commit":"660","message":"I'm adding some more data to the file header...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-09-15T11:59:43.876600Z","commit":"659","message":"I've got full save and load to a binary file format now, with version data for all of the libraries,\nand also header data saying which libraries are needed to load a file. This is used by the python\nwrappers to import the necessary modules before the file is loaded (thereby allowing scripts\nlike test/SireStream/testload.py that loads an entire system in only three lines).\n\n"},{"author":"chryswoods","date":"2008-09-14T23:38:01.920423Z","commit":"658","message":"I've (finally) added proper shared object support to SharedDataStream, so that shared objects\nare only streamed once, and then referenced. This cuts the data requirement for the water\nbox from 9 MB to 4 MB.\n\nI have also now added data compression, and set up adding a header to the object data file format.\nThis has further reduced the space needed for the water box to 420 kB.\n\n"},{"author":"chryswoods","date":"2008-09-12T15:05:18.126587Z","commit":"657","message":"I've got streaming of the System working! test/SireStream/teststreaming.py shows that a system\ncan be streamed to binary data, then re-read, returning the same energies and energy components.\n\nGreat :-)\n\n"},{"author":"chryswoods","date":"2008-09-11T13:41:39.164352Z","commit":"656","message":"I've now got the object registration scheme and binary load/save code implemented for all of\nthe modules of Sire. I've tested a lot, and most work. There is a problem loading System\nfrom its binary data (e.g. test/SireStream/teststreaming.py). I will investigate further.\n\n"},{"author":"chryswoods","date":"2008-09-11T07:50:24.308702Z","commit":"655","message":"I've now got the object registrars working for SireCAS.\n\n"},{"author":"chryswoods","date":"2008-09-11T07:49:56.393551Z","commit":"654","message":"I've now got the object registrars working for SireCAS.\n\n"},{"author":"chryswoods","date":"2008-09-10T21:01:26.702921Z","commit":"653","message":"I've done some of the support work necessary to allow the python conversion from void code to work.\nStill a little more to do...\n\nCode is probably broken!\n\n"},{"author":"chryswoods","date":"2008-09-10T21:00:07.578898Z","commit":"652","message":"I've worked out how to allow void pointers to be converted to python objects (I have built\na type registry built on top of QMetaType). This now allows my objects to be easily saved\nand restored to binary blobs without any user involvement (the user doesn't have to \nguess the type of the data - they just load it!)\n\n"},{"author":"chryswoods","date":"2008-09-09T15:51:20.316310Z","commit":"651","message":"I'm adding some code that will let me better test the streaming functions. However, this code\nis itself broken...\n\n"},{"author":"chryswoods","date":"2008-09-08T15:44:22.664558Z","commit":"650","message":"I've fixed the infinite recursion bug when streaming a system, and streaming now completes without\nerror. However, the MPI job hangs before extracting the data. I am now writing some tests of the \nstreaming and extraction functions.\n\n"},{"author":"chryswoods","date":"2008-09-07T16:29:25.771278Z","commit":"649","message":"I've cleaned up the MPI code enough that is now all compiles and links. The test/SireMove/simulation.py\nscript works, but the MPI code still needs testing.\n\n"},{"author":"chryswoods","date":"2008-09-06T15:02:52.116445Z","commit":"648","message":"I've updated all of the exceptions so that they can be packed into a binary QByteArray.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-09-05T15:57:06.937946Z","commit":"647","message":"I've got the packing of exceptions to binary data arrays working, and the test of it works too!\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-09-03T20:26:08.864719Z","commit":"646","message":"I think that I've worked out how errors will be propagated from worker nodes to the master node and\nfrom worker threads to the master thread.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2008-09-03T15:51:45.906059Z","commit":"645","message":"Making progress implementing the MPI functionality\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2008-09-03T07:51:27.086772Z","commit":"644","message":"I'm making good progress sorting out how the MPI communication will work.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-08-08T21:07:24.713235Z","commit":"643","message":"I'm filling in the classes that I need for the MPI runs to work...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-08-08T17:05:32.092936Z","commit":"642","message":"I've added the framework to allow identification and manipulation of remote nodes that \nare accessed via MPI. This is the first step to allowing the simulation to be run\non these remote nodes.\n\n"},{"author":"chryswoods","date":"2008-08-07T10:39:21.295384Z","commit":"641","message":"I've turned off OpenMP and now the background simulation seems to be working\n(see test/SireMove/simulation.py)\n\n"},{"author":"chryswoods","date":"2008-08-07T09:16:07.875379Z","commit":"640","message":"I forgot to commit changes I had previously made to the python wrappers...\n\n"},{"author":"chryswoods","date":"2008-08-06T15:59:15.722347Z","commit":"639","message":"I've found the cause of the crash - the openMP on the Mac can't cope if OMP_PARALLEL starts in a\nbackground thread. The problem is that the gomp_thread() function returns 0 as it has not\nbeen properly initialised. It works correctly on linux though, so for the moment I will\njust disable openMP on mac.\n\n"},{"author":"chryswoods","date":"2008-08-06T14:24:09.367290Z","commit":"638","message":"I've just upgraded to XCode 3.1, which includes gcc 4.2, and I found that RTTI stopped working\n(even though my RTTI test code said that it was still working...)\n\nSomething is going wrong with symbol hiding, so I have turned symbol hiding off and the RTTI\nproblems have gone away (symbol hiding has to be turned off for BOTH the core library\nand for the python bindings)\n\n"},{"author":"chryswoods","date":"2008-08-01T16:02:19.858051Z","commit":"637","message":"Debugging my broken threaded code...\n\n"},{"author":"chryswoods","date":"2008-08-01T13:20:39.446876Z","commit":"636","message":"The SimController and Simulation classes appear to be working. Now to write a ThreadSim so that I can \nrun in the background...\n\n"},{"author":"chryswoods","date":"2008-07-31T16:52:32.334717Z","commit":"635","message":"I think I've worked out how I will allow threaded control of a running simulation. I've written\na SimController class and have implemented it with the SameMoves class in moves.cpp. Now I just\nneed to write a ThreadSimulation to go with it...\n\n"},{"author":"chryswoods","date":"2008-07-28T14:04:19.119799Z","commit":"634","message":"I've written a simulation class that provides a handle for a running simulation. This will be used\nto transparently hide the details of simulations that are running in background threads, or running\non remote nodes via MPI.\n\n"},{"author":"chryswoods","date":"2008-07-18T07:55:16.431191Z","commit":"633","message":"I've finished writing SystemMonitors and have integrated it with System.\n\n"},{"author":"chryswoods","date":"2008-07-17T07:55:12.251275Z","commit":"632","message":"I'm now working on SystemMonitors and have added some ID classes to identify individual\nsystem monitors.\n\n"},{"author":"chryswoods","date":"2008-07-16T07:52:11.465744Z","commit":"631","message":"I've written the base classes of SystemMonitor and have also wrapped up QList\u003cMove\u003e\n\n\n"},{"author":"chryswoods","date":"2008-07-15T07:53:53.933814Z","commit":"630","message":"I've written and wrapped the WeightedMoves class.\n\n"},{"author":"chryswoods","date":"2008-07-14T07:52:35.741487Z","commit":"629","message":"I've written the 'Moves' classes... (not compiled though as I have to go and catch my bus!)\n\n"},{"author":"chryswoods","date":"2008-07-11T21:55:38.168789Z","commit":"628","message":"Small bug in RigidBodyMC - I wasn't recalculating the old energy properly!\n\nNow the acceptance ratio is better (near 50%) and it is a little faster (3.2 - 3.5s for 1000 moves)\n\n"},{"author":"chryswoods","date":"2008-07-11T21:38:33.233830Z","commit":"627","message":"I've wrapped up parts of SireMove and have got RigidBodyMC working (see test/SireMove/rigidbodymc.py)\n\nSire takes about 4.5s to do 1000 moves, which is over twice as long as ProtoMS (which takes 2.0s)\n\nAt least it is able to make some moves now :-)\n\n"},{"author":"chryswoods","date":"2008-07-11T16:40:19.449269Z","commit":"626","message":"I've added Python wrapping for SireSystem...\n\n"},{"author":"chryswoods","date":"2008-07-11T16:39:34.292862Z","commit":"625","message":"I've moved Move and Moves into SireMove and am in the progress of updating the SireMove classes\nto fit with the new design. In particular, I am adapting Sampler so that it operates\non a MoleculeGroup that it contains. This makes things much easier and removes the dependency\nof Sampler on System.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-07-11T15:04:12.686285Z","commit":"624","message":"I've now finished writing the System class. Now I just need the move classes and I can finally\nget back to running some simulations...\n\n"},{"author":"chryswoods","date":"2008-07-10T16:59:43.863163Z","commit":"623","message":"I'm now working on the SireSystem module.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-07-09T20:39:28.909893Z","commit":"622","message":"Commit didn't add the latest current-speed...\n\n"},{"author":"chryswoods","date":"2008-07-09T20:37:37.502985Z","commit":"621","message":"I've updated CountFlops so that counting flops now adds a negligable amount to the runtime\n(as it uses thread-local storage so does not require any atomic operations or blocking).\n\nAn added bonus is that I can now count and report flops individually from each thread.\n\nThe new current speed of test/speed/water_energy_speed.py are in ideas/current_speed, and\nthe top speed is 845.1 MFLOPS.\n\n"},{"author":"chryswoods","date":"2008-07-09T15:48:03.430928Z","commit":"620","message":"It looks like the forcefield energy expressions are now working (see test/SireFF/forcefields.py)\n\nI'm nearly ready to run a simulation!\n\n"},{"author":"chryswoods","date":"2008-07-09T14:09:31.924219Z","commit":"619","message":"I've integrated clone_const_reference so that all functions that need it now use it automatically :-)\n\nIt all appears to work as well\n\n"},{"author":"chryswoods","date":"2008-07-09T07:53:35.638369Z","commit":"618","message":"I've fixed some bugs with FFMolGroup and have also added a clone_const_reference return policy\nso that const references to base classes in python are now cloned, so that the correct derived\ntype is returned to python.\n\n"},{"author":"chryswoods","date":"2008-07-08T11:29:23.170100Z","commit":"617","message":"I've filled in the missing code of ForceFields and it all now compiles and links...\n\nI've also allowed the FFComponent derived classes to be fully exposed to Python.\n\n"},{"author":"chryswoods","date":"2008-07-08T07:50:42.007070Z","commit":"616","message":"I've added the code to build the index for the forcefield expressions.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-07-07T15:40:06.071405Z","commit":"615","message":"I am working on the code that allows the use of complex forcefield expressions.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-07-05T14:00:37.805688Z","commit":"614","message":"I've cleaned up the code so that now powers are expanded correctly. The code all compiles, is wrapped\nand links.\n\n"},{"author":"chryswoods","date":"2008-07-03T14:22:10.717795Z","commit":"613","message":"I am fixing problems with the python wrapping of FFID...\n\n"},{"author":"chryswoods","date":"2008-07-03T13:57:07.144808Z","commit":"612","message":"I've added code to allow a SireCAS expression to be expanded in terms of a powers of a symbol.\nIt's not perfect, but it does (most of) the job. Certainly enough for what I need in ForceFields...\n\n"},{"author":"chryswoods","date":"2008-07-03T07:52:02.997296Z","commit":"611","message":"I'm continuing to work on ForceFields. As part of this I am now having to write code that\nallows SireCAS expression to be factorised (so that I can extract the scale and power\nfor the symbols in an energy expression)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-07-02T15:52:41.823464Z","commit":"610","message":"I am working on adding in the ForceFields class, which holds and manages collections of forcefields.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-07-01T11:07:33.674045Z","commit":"609","message":"I've tested making intramolecular moves with the intra-forcefield, and it all appears to be working\nwell. The forcefield is very fast, calculating the intramolecular energy of a box of 1690 waters in\njust 6 ms. (this compares to 200-400ms to calculate the intermolecular energy)\n\n\n"},{"author":"chryswoods","date":"2008-06-30T13:05:33.114424Z","commit":"608","message":"Angle energies also appear to work!\n\n(see test/SireMM/internalff.py)\n\n"},{"author":"chryswoods","date":"2008-06-30T12:22:02.307817Z","commit":"607","message":"I've fixed some bugs so that now I can calculate intramolecular bond energies!\n\n(see test/SireMM/internalff.h)\n\n"},{"author":"chryswoods","date":"2008-06-30T10:29:21.097794Z","commit":"606","message":"I have exposed the operators and free functions of SireCAS (and other modules)\n\n"},{"author":"chryswoods","date":"2008-06-27T07:45:52.535820Z","commit":"605","message":"I've written some bond hunter classes that can automatically derive the connectivity of a molecule,\nand I have used these classes to test the Connectivity class (and fixing some bugs in the process).\n\n\n"},{"author":"chryswoods","date":"2008-06-21T20:39:27.118514Z","commit":"604","message":"I've been testing the change in energy code in InterCLJFF, and it seems to work. I fixed a bug, and \nnow a move of a molecule then back results in the same energy.\n\nI've also timed 500 moves (see the 'sire' app), and Sire currently runs at about the same speed\nas ProtoMS 2.1 (500 moves per second).\n\nSire is a bit faster though when the timing code is switched off, though it is currently doing\nless work than ProtoMS.\n\n"},{"author":"chryswoods","date":"2008-06-20T23:11:56.031714Z","commit":"603","message":"I've just tested the code without the timing functions, and I get good scaling over two\nprocessors, and run at 447.5 MFLOPs on one core (energy calculated in 0.440 s) and\n841.5 MFLOPS on two cores (energy calculated in 0.234 s). This is quite a bit better\nthan ProtoMS, which does the energy in 0.850 s - and doesn't even perform the same\nnumber of flops!\n\n"},{"author":"chryswoods","date":"2008-06-20T22:34:27.835118Z","commit":"602","message":"I used shark (provided as part of the developer tools on the mac) to perform a time profile\nof sire, and found that I lost a lot of time doing;\n\nmol0.isEmpty() or mol1.isEmpty()\n\nThis is because mol?.isEmpty() was calling mol.nCutGroups() == 0, which was calling\n(partialmolecule).selection(), which was creating a copy of an AtomSelection! Removing this\ncall and replacing it with a direct count of the CoordGroupArray has significantly sped up\nSire. Isn't profiling great!\n\nSee ideas/current-speed for the full details, but now on two cores, Sire is running\nat over 1/2 a GFLOP!\n\n"},{"author":"chryswoods","date":"2008-06-20T12:29:41.257642Z","commit":"601","message":"I've added some more SSE code to the CLJPotential and have simplified the core loop\n(I don't think that I gain much by skipping dummy atoms - and the timings seem to agree)\n\n\n"},{"author":"chryswoods","date":"2008-06-20T11:13:22.720897Z","commit":"600","message":"I've written a benchmark script to test the speed of Sire versus the maximum realisable speed\nof the processor. Sire doesn't do too badly - but there is room for improvement.\n\nI've also updated the compiler flags so that code optimised for the processor that is used\nto compile Sire is produced.\n\n"},{"author":"chryswoods","date":"2008-06-19T21:53:39.095495Z","commit":"599","message":"I've added some code that lets me estimate the minimum FLOP speed for the code.\n\nSo far my core 2 is at around a sustained 200 MFLOPs, which is only about 10-15% of its peak \ncapacity...\n\n"},{"author":"chryswoods","date":"2008-06-19T14:19:51.021006Z","commit":"598","message":"I've now validated that ProtoMS and Sire give the same energies (if ProtoMS is set into\nSIRE_COMPATIBILITY_MODE, where solvent molecules use their set centers, and solvent\ncutoffs are calculated using closest atom distances instead of center distances)\n\n"},{"author":"chryswoods","date":"2008-06-19T07:52:56.021757Z","commit":"597","message":"I've fixed a small bug with PeriodicBox - the test use less than / greater than when it should\nhave been less than or equals and greater than or equals. This was the cause of the slight difference\nin energy using a periodic box and no cutoffs. Now Sire agrees with ProtoMS (when the same definition\nof the solvent center is used).\n\n"},{"author":"chryswoods","date":"2008-06-18T21:12:40.121375Z","commit":"596","message":"I am still comparing against ProtoMS. I've optimised the spaces (Cartesian and PeriodicBox) to use\nSSE which makes them both comfortably faster than ProtoMS for the same calculation :-)\n\nHowever, while I get agreement in energy for Cartesian with no cutoff, I get different energies\nto ProtoMS using PeriodicBox or using a cutoff. There are some reasons (see techdocs/differences_to_protoms)\nbut I am still concerned...\n\n"},{"author":"chryswoods","date":"2008-06-18T21:10:16.916342Z","commit":"595","message":"Added code to expose the mathematical constants...\n\n"},{"author":"chryswoods","date":"2008-06-16T19:58:17.924881Z","commit":"594","message":"I've fixed a bug in Inter2B3DFF where the AABoxes of the molecules weren't being updated properly. This\nhas let me use the array of AABoxes directly in the energy calculation, which speeds it up quite\na bit!\n\n"},{"author":"chryswoods","date":"2008-06-15T14:35:02.320660Z","commit":"593","message":"Here are the wrappers needed to run the water box speed test. This includes automatic\nconversion of PackedArray2D to a python list of lists.\n\n"},{"author":"chryswoods","date":"2008-06-15T14:33:59.922878Z","commit":"592","message":"I've wrapped up enough that the water speed test works!\n\ntest/speed/water_energy_speed.py now calculates the energy of a box of water.\n\n"},{"author":"chryswoods","date":"2008-06-14T11:29:16.458463Z","commit":"591","message":"I've moved Spier so that it is in its own top-level directory. I want to make sure that\nI separate the development of the core libraries from the development of any applications\n(or wrappers)\n\n"},{"author":"chryswoods","date":"2008-06-14T11:23:44.851741Z","commit":"590","message":"Cleaning up the directory...\n\n"},{"author":"chryswoods","date":"2008-06-14T11:20:41.143958Z","commit":"589","message":"I've updated the code to allow python wrapping of SireMM\n\n"},{"author":"chryswoods","date":"2008-06-14T11:19:29.099146Z","commit":"588","message":"I've added Python wrapping of SireMM\n\n"},{"author":"chryswoods","date":"2008-06-13T17:50:58.099029Z","commit":"587","message":"I've wrapped up the molecule view ID classes and they seem to work. I can write code like this;\n\natoms = p38.selectAll( ResName(\"ala\").atoms() )\n\nfor atom in p38.atoms( ResName(\"ala\") + AtomName(\"ca\") ):\n    print atom.name(), atom.residue().name(), atom.residue().number()\n\nca = p38.atom( (ResName(\"ala\") + AtomName(\"ca\"))[3] )\n\nCool! :-)\n\n"},{"author":"chryswoods","date":"2008-06-13T17:34:30.924957Z","commit":"586","message":"I've finished up the molecule view ID classes so that they (and their addition operators) can\nall be exposed to Python. The Python wrappers are compiling now - I'll have to wait until they're\ndone before I can see if they have worked!\n\n\n"},{"author":"chryswoods","date":"2008-06-13T15:05:19.472732Z","commit":"585","message":"I've wrapped up more of SireMol!\n\n"},{"author":"chryswoods","date":"2008-06-13T14:41:04.061808Z","commit":"584","message":"I've fixed some bugs exposed as I wrapped up more of SireMol.\n\n"},{"author":"chryswoods","date":"2008-06-11T16:43:04.276222Z","commit":"583","message":"Enabling the code so that I can wrap up the other molecule view properties.\n\n"},{"author":"chryswoods","date":"2008-06-11T16:42:00.541103Z","commit":"582","message":"I've wrapped up the properties of the other molecule views.\n\n"},{"author":"chryswoods","date":"2008-06-11T15:34:34.477865Z","commit":"581","message":"I've wrapped up some of the more advanced parts of SireMol!\n\n"},{"author":"chryswoods","date":"2008-06-11T15:33:36.095017Z","commit":"580","message":"I've done some work to allow more of the advanced parts of SireMol to be wrapped in Python\n\n"},{"author":"chryswoods","date":"2008-06-10T21:17:45.736500Z","commit":"579","message":"I've added the wrappers for Atom::metadata()\n\n"},{"author":"chryswoods","date":"2008-06-09T15:29:49.272253Z","commit":"578","message":"I've managed to get the code that wraps up the atom.property() class working. This is the first\nstep to fully exposing the dynamic property system to Python.\n\n"},{"author":"chryswoods","date":"2008-06-09T11:40:25.795536Z","commit":"577","message":"I've now wrapped SireFF and have automated the wrapping of Property classes.\n\n"},{"author":"chryswoods","date":"2008-06-06T20:59:56.263088Z","commit":"576","message":"I've wrapped up SireIO and I can now load up a PDB file of molecules in python!\n\nThere is some more work to do to make the wrappers more fluid, and I still need to wrap\nSireFF and SireMM, but things are beginning to move forward now :-)\n\n"}]}