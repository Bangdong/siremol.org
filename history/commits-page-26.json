{"Page":26,"TotalPages":28,"commits":[{"author":"chryswoods","date":"2007-05-06T21:07:36.433753Z","commit":"275","message":"I am working on the preferential sampling sampler (PrefSampler)\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-05-06T16:01:16.211706Z","commit":"274","message":"I'm working on the Sampler class (I've written UniformSampler and am writing tests for it). There is a crash after deserialising the sampler - I think that this is related to deserialising the RanGenerator.\n\nCode compiles, links and runs, though siretest crashes after deserialising a UniformSampler.\n\n"},{"author":"chryswoods","date":"2007-05-06T12:19:43.002613Z","commit":"273","message":"I've fixed the bugs :-)\n\nThe code compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-05T22:11:45.497739Z","commit":"272","message":"Still testing and fixing bugs in ForceFields...\n\nCode compiles, links and runs, but there are two errors when running siretest\n\n"},{"author":"chryswoods","date":"2007-05-05T14:06:28.511438Z","commit":"271","message":"Woops - deleted _Mol.main.cpp by mistake!\n\nThis version compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-05T13:46:46.004054Z","commit":"270","message":"I've fixed the bugs in the group forcefields, and have added more \"change\" molecule tests. In doing so I have also added all of the move fnctions to a basic form of MoleculeMover, and in doing so removed all of the move functions from Molecule, Residue, NewAtom, EditMol and EditRes. This has allowed me to simplify the python wrappers for these classes.\n\nCode compiles, links and runs well, with siretest completing without error.\n\n"},{"author":"chryswoods","date":"2007-05-05T06:25:39.813063Z","commit":"269","message":"I've finished updating all of the code to use the new Molecules class. It seems to work quite well, and I like the new syntax and API of the class (it makes things a lot more straightforward).\n\nI've been playing with changing molecules in the forcefields, and there is now a failure with the InterGroupLJFF - I think that the problem is that my change code does not take into account that the molecule may exist in more than one group at the same time. I will need to update all three of the InterGroup???FF classes to take account of this.\n\nCode compiles, links and runs, and siretest has two errors, both related to InterGroupLJFF.\n\n"},{"author":"chryswoods","date":"2007-05-03T16:09:55.195379Z","commit":"268","message":"Adding tests for changing molecules has thrown up the problem of me having no good container for molecules (e.g. I am using QVector\u003cPartialMolecule\u003e, QHash\u003cMoleculeID,PartialMolecule\u003e, QList\u003cMolecule\u003e etc.). This is a pain, as it means that I am over-cluttering my functions with various overloads. I've decided to bite the bullet and add a small, light-weight Molecules class, which holds molecules indexed by their ID, and has converting constructors so that implicit conversions can be used instead of lots of overloaded functions.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-05-03T14:35:06.864275Z","commit":"267","message":"I've added yet more tests of ForceFields, and have fixed more bugs!\n\nCode compiles, links and runs, and siretest runs without error.\n\n"},{"author":"chryswoods","date":"2007-05-03T12:34:50.220177Z","commit":"266","message":"I've added more unit tests for the forcefields and have fixed the bugs that were thrown up.\n\nThe code compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-02T20:54:35.271316Z","commit":"265","message":"I've rounded out the forcefields unit tests (they all work ;-), though I have still more to do.\n\nCode compiles, links and runs well, and siretest runs without error.\n\n"},{"author":"chryswoods","date":"2007-05-02T15:49:51.095124Z","commit":"264","message":"I am now unit testing the forcefield classes - and am fixing bugs!\n\nI've also added some syntactic sugar that allows easy addition of containers of lots of partial molecules.\n\nCode compiles, links and runs, though some of the new tests fail.\n\n"},{"author":"chryswoods","date":"2007-05-02T07:24:47.211487Z","commit":"263","message":"Merging the users/chryswoods branch into devel.\n\nThis merge;\n\n* Fits PartialMolecule into a new molecule design, based around MoleculeView\n* Adds the MoleculeView class hierarchy\n* Makes PartialMolecule into a const-class, with controller classes\n  used to change it (PropertyExtractor, MoleculeMover, AtomSelector)\n* Moves all of the forcefields over to this new design\n* Adds more unit tests, cleans up the unit test library a little\n* Changes CoordGroup over to using placement new so that the \n  shared pointer is also the pointer to the coordinate array\n* Updates lots of SireSystem!\n* Changes PairMatrix so that it uses a plain array\n\nCode compiles, links and runs well, with siretest completing without error.\n\nThe command to perform this merge was;\n\nsvn merge -r 219:262 ../users/chryswoods/ ./\n\nI have verified that this code is now identical to version 262 of users/chryswoods\n\n"},{"author":"chryswoods","date":"2007-05-02T06:55:59.272719Z","commit":"262","message":"I've fixed the bug that was causing what I thought was an infinite loop in water_mc_speed.py - I had not cleared the 'need_total_recalc' flag in InterGroupCoulombFF, so it was calculating the energy from scratch for each move!\n\nI have writen new unit tests to discover the problem with MolproFF. Indoing so, I have added a skeleton unit test, to speed up the creation of new ones, and have also moved the addition of tests torun into SireUnitTest, so that they don't all need to be included in the siretest executable.\n\nUsing this, and some more debugging, I have fixed MolproFF which now produces the correct energies.\n\nCode compiles, links and runs, and siretest completes without error. The code is finally working again (well, at least as well as it was before Easter!)\n\n"},{"author":"chryswoods","date":"2007-04-30T20:59:48.606730Z","commit":"261","message":"I've finished updating everything to use the new CoordGroup and CoordGroupEditor classes. Things seem to work (siretest completes without error, though there are still problems with some of the example scripts). The new class doesn't appear to have had any impact on the speed of the code (it seems to now be marginally slower!)\n\nThe results from water_mc_speed.py on my laptop is below...\n\nLoading the molecules...\n... took 345 ms\nParametising the molecules...\n... took 1068 ms\n(859 molecules in group A, 820 in group B)\nCalculating the energy...\nInterCLJFF  -16364.0932341 kcal mol-1\nCoulomb =  -19298.4644394\nLJ =  2934.3712053\n... took 3547 ms\nInterCoulombFF  -19298.4644394 kcal mol-1\nCoulomb =  -19298.4644394\n... took 1645 ms\nInterLJFF  2934.3712053 kcal mol-1\nLJ =  2934.3712053\n... took 1615 ms\nCalculating the energy...\nCLJ_partials  -16364.0932341 kcal mol-1\nCoulomb =  -19298.4644394\nLJ =  2934.3712053\n... took 3248 ms\nLJ_partials  2934.3712053 kcal mol-1\n... took 1627 ms\nCoulomb partials  -19298.4644394 kcal mol-1\n... took 1552 ms\nInterCLJFF  -16364.0932341 kcal mol-1\n... took 84 ms (11904.761905 moves per second)\nChanging took 1 ms\nInterCLJFF  -16213.2669612 kcal mol-1\nCoulomb =  -19298.7820661\nLJ =  3085.51510489\n... took 6 ms\nInterLJFF  3085.51510489 kcal mol-1\nLJ =  3085.51510489\n... took 4 ms\n1000 moves of InterCLJFF took 5998 ms\n1000 moves of InterCoulombFF took 4941 ms\n1000 moves of InterLJFF took 4733 ms\n1000 moves of CLJ_partials took 6290 ms\nCode entered infinite loop here...\n\n\n"},{"author":"chryswoods","date":"2007-04-30T19:43:54.302823Z","commit":"260","message":"I've moved the new CoordGroup classes into position...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-04-30T19:42:39.099279Z","commit":"259","message":"Committing the removal of the old version of CoordGroup...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-04-30T19:41:35.556064Z","commit":"258","message":"I've nearly finished making the new CoordGroup and CoordGroupEditor classes. The tests run well, though I need to now put the code in the right place as I think that it is getting confused with having two copies of CoordGroup! (I am getting a weird segfault in the last test).\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-04-30T15:55:44.979182Z","commit":"257","message":"I have created a new version of the CoordGroup class that uses placement new to allow the same pointer to refer both to the metadata about the coordgroup and to point at the array of coordinates - this should improve performance as it removes pointer-of-a-pointer lookups.\n\nI'm adding this code to SireUnitTest as I am writing unit tests for the new CoordGroup class. Once it is ready, and fully tested, I will replace the existing CoordGroup class.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-04-30T13:37:22.525122Z","commit":"256","message":"\nAll of the code now compiles, links and runs, and siretest completes without error. There are however\nsome problems with some of the scripts, which I will have to fix. The speed of the code also \nseems a bit low - here are the results of water_mc_speed.py running on my Pentium M 1.4GHz laptop...\n\nLoading the molecules...\n... took 322 ms\nParametising the molecules...\n... took 1064 ms\n(875 molecules in group A, 804 in group B)\nCalculating the energy...\nInterCLJFF  -16364.0932341 kcal mol-1\nCoulomb =  -19298.4644394\nLJ =  2934.3712053\n... took 2077 ms\nInterCoulombFF  -19298.4644394 kcal mol-1\nCoulomb =  -19298.4644394\n.. took 1593 ms\nInterLJFF  2934.3712053 kcal mol-1\nLJ =  2934.3712053\n... took 1477 ms\nCalculating the energy...\nCLJ_partials  -16364.0932341 kcal mol-1\nCoulomb =  -19298.4644394\nLJ =  2934.3712053\n... took 1977 ms\nLJ_partials  2934.3712053 kcal mol-1\n... took 1404 ms\nCoulomb partials  -19298.4644394 kcal mol-1\n... took 1518 ms\nInterCLJFF  -16364.0932341 kcal mol-1\n... took 86 ms (11627.906977 moves per second)\nChanging took 0 ms\nInterCLJFF  -16213.2669612 kcal mol-1\nCoulomb =  -19298.7820661\nLJ =  3085.51510489\n... took 6 ms\nInterLJFF  3085.51510489 kcal mol-1\nLJ =  3085.51510489\n... took 4 ms\n1000 moves of InterCLJFF took 5908 ms\n1000 moves of InterCoulombFF took 4808 ms\n1000 moves of InterLJFF took 4559 ms\n1000 moves of CLJ_partials took 6265 ms\nScript froze at 100% CPU utilization here...\n\n\n"},{"author":"chryswoods","date":"2007-04-30T10:42:15.627695Z","commit":"255","message":"I have fixed the failures of the SharedPolyPointer tests. The cause was me not correctly handling assignment when my pointer was null - I used;\n\nqAtomicAssign(d, ptr);\n\nThis requires that 'd' is non-null (as it will do d-\u003eref().unref())\n\nI've changed it to;\n\nif (d)\n  qAtomicAssign(d, ptr);\nelse\n{\n  d = ptr;\n  d-\u003eref.ref();\n}\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-04-30T08:46:53.238393Z","commit":"254","message":"I am seriously debugging the SharedPolyPointer class....\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-04-29T15:40:04.046581Z","commit":"253","message":"I've fixed the unit test failures for AtomSelection - they were all caused by the move to it being a const-class!\n\nThere is still an error with SharedPolyPointer, which is causing me grief!\n\nCode compiles, links and runs, though fails tests.\n\n"},{"author":"chryswoods","date":"2007-04-29T12:31:58.544873Z","commit":"252","message":"I've fixed a bug in SharedPolyPointer which was causing a segfault when using the assignment operator - essentially in template\u003cclass S\u003eoperator=(const S*) I was calling operator=\u003cT\u003e(T*), which called template\u003cclass S\u003e version rather than the non-template operator=(T*) version. \n\nI've also fixed a segfault when running siretest caused by MoleculeInfo::shared_null not being initialised before MolDataView::shared_null - I will have to change all of my shared_null initialisors so that they use functions, thereby removing the reliance on the order of initialisation of static variables (something I should have remembered is unreliable!)\n\nCode compiles, links and runs, though doesn't work, and siretest fails with errors in the AtomSelection tests...\n\n"},{"author":"chryswoods","date":"2007-04-26T15:48:27.911763Z","commit":"251","message":"The code now all compiles and links! It doesn't work though - siretest crashes with a segfault in SharedPolyPointer\u003cPropertyBase\u003e::operator==(const PropertyBase\u0026)....\n\nAlso, some of the test/example scripts may need to be updated.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-04-25T10:22:47.052576Z","commit":"250","message":"I've now updated most of SireSystem, with it nearly all compiling now. My next step will be sorting out where the Sampler class should go - I'd really like it to be part of MoleculeGroup, but I am having trouble figuring out how to achieve that...\n\nCode is still broken\n\n"},{"author":"chryswoods","date":"2007-04-23T14:26:52.253830Z","commit":"249","message":"I am now back to fixing and coding SireSystem - at least it now feels like I am making progress ;-)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-04-23T13:47:47.559495Z","commit":"248","message":"SireMM and Squire now compile and link, as do their python wrappers. I am now exactly back to where I was at the beginning of last week, with just SireSystem to sort out :-)\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-04-22T20:49:16.561748Z","commit":"247","message":"SireMol's python wrapping compiles and links, as does SireFF and its wrapping. I have to update SireMM and Squire, then I think that I will be back where I was at the beginning of this week....!\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-04-22T15:45:07.118081Z","commit":"246","message":"I've changed PartialMolecule now fully over to being a const-class and have fleshed out the AtomSelector class. I have added the space wra\npping function to MoleculeMover and have also created a test program that uses placement new to achieve the design I have in mind for the\nCoordGroup class (to avoid pointer-to-a-pointer problems - see techdocs/testplacementnew.cpp)\n\nSireMol compiles and links, and the python wrapping looks like it is compiling well as well :-)\n\nOf course the rest of the code is now even more broken... Why can I not ever just fix it all and get it all working???\n\n"},{"author":"chryswoods","date":"2007-04-20T15:40:53.855326Z","commit":"245","message":"Cleaning up the SimSystem and SireSystem APIs has forced me to further refine the SireMol APIs. I've changed AtomSelection to be a const-class, have added MolDataView as a base class to all MoleculeViews, have added AtomSelector and MoleculeMover as the classes that will select parts of a molecule and move parts of a molecule, and I plan to make all MoleculeView classes (including Molecule, PartialMolecule, NewAtom and Residue) into const classes.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-04-19T19:54:59.708824Z","commit":"244","message":"I'm making good progress with SimSystem and SystemData. I've cleaned up the code so that now adding to the SystemData will map the molecule into the system box, then returning the result so that it can be used when adding to ForceFields.\n\nI've made a small change to the behaviour of the FFBase::add() functions - now the whole molecule is changed whenever a difference is noticed when adding a molecule to an existing molecule. The reason for this is to prevent errors whereby a small part of a molecule with a totally different version is added - the user will use the selection to say what is being added, not what has changed, so using the selection would be a mistake in this case.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-04-19T15:39:18.925860Z","commit":"243","message":"I am cleaning up the API of SimSystem (by adding CheckPoint and QuerySystem), and have also added the stubs for the SystemMonitors class.\n\nI've decided to remove constraints from the SimSystem class because they were too complicated to add there - constraints need move information, and I think are better off placed as part of moves (meaning that the user will need to be careful that they use constrained moves on the parts of the system that they wish to be constrained!)\n\nCode is still broken\n\n"},{"author":"chryswoods","date":"2007-04-19T11:01:54.330641Z","commit":"242","message":"All of Squire and its python wrappers now compile and link. Finally I am onto fixing SireSystem.\n\nCode is still broken.\n\n"},{"author":"chryswoods","date":"2007-04-18T15:50:06.926584Z","commit":"241","message":"I am *still* working on MolproFF - it is taking forever! However, I have cleaned up a lot of code, especially by adding MoleculeView (common base class of all classes that are views of a molecule) and also by adding PropertyExtractor, which will be used to extract all properties from molecule view objects. \n\nI have nearly finished MolproFF now, having finally sorted out my issues with CutGroupID!\n\nCode is still broken.\n\n"},{"author":"chryswoods","date":"2007-04-17T14:58:45.587667Z","commit":"240","message":"I'm still working on MolproFF - it's slow going but I am slowly getting there. I had a fright with the way that PartialMolecule returned CoordGroups and AtomicProperties, as the CutGroupIDs of the returned groups are unusable (as CutGroups that have no selected atoms are not returned). I thought that this may impact the SireMM forcefields, but it doesn't. It does however affect the current iteration of MolproFF, so I will need to think more about how to write it...\n\nCode is still broken.\n\n"},{"author":"chryswoods","date":"2007-04-16T16:33:00.849446Z","commit":"239","message":"I've finished SireMM and am now working on Squire. MolproSession, MolproCalculator and MolproProcessor are complete, and the interface for MolproFF is pretty complete - I am now just filling in MolproFF functions\n\n(and then must do SireSystem..!)\n\nI've updated MoleculeGroup and MoleculeGroups to better work with PartialMolecule.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-04-15T22:16:45.218148Z","commit":"238","message":"SireMM (and PyWrap_SireMM) now compiles and links. SireMol compiles and links, though there are some missing functions preventing PyWrap_SireMol from linking. From the looks of it, only SireSystem and Squire are now still broken :-)\n\nCode is still broken.\n\n"},{"author":"chryswoods","date":"2007-04-15T16:20:40.548182Z","commit":"237","message":"I've now got CLJFF, CoulombFF, LJFF, InterCLJFF, InterCoulombFF, InterLJFF and InterGroupCLJFF compiling!\n\nCode is still broken.\n\n"},{"author":"chryswoods","date":"2007-04-15T09:54:59.692930Z","commit":"236","message":"Making good progress with SireMM. I've fully updated CLJFF and CoulombFF, and have got most of InterCLJFF working. I've added \"need_total_recalc\" to InterCLJFF so that a complete energy recalculation can be required. This also prevents the caching of change-data, which could be useful for moves that move a lot (e.g. MD) or for the local copy of remote forcefields (as the local copy will not be used for an energy calculation, so should not cache change-data).\n\nCode is still broken.\n\n"},{"author":"chryswoods","date":"2007-04-14T21:58:57.624073Z","commit":"235","message":"So... very... nearly...  there... !\n\nI've updated PartialMolecule so that it can perform the job of masking properties and coordinates according to the atoms selected - this mremoves this code from all of the forcefields ;-)\n\nI've got SireMol, SireFF and lots of SireMM compiling now - I've just done CLJFF and have reached InterCLJFF. Not too much more to go now :-)\n\nCode is still broken.\n\n"},{"author":"chryswoods","date":"2007-04-13T10:25:11.325774Z","commit":"234","message":"I've now got FFCalculator compiling and linking - just FFWorker (FFLocalWorker, FFThreadWorker) to go, and then I can move on to SireMM.\n\nCode is still broken...\n\n"},{"author":"chryswoods","date":"2007-04-10T16:25:32.281882Z","commit":"233","message":"I have now got ForceFieldsBase and ForceFields to compile, and have completed a lot of SireFF now. The only remaining parts are filling in the missing functions of FFCalculator, FFLocalWorker, FFWorker and FFThreadWorker.\n\nI have yet to move on to fixing SireMM...\n\nCode is still broken\n\n"},{"author":"chryswoods","date":"2007-04-08T22:11:14.472754Z","commit":"232","message":"Still implementing the ForceFields class....\n\nCode is still broken\n\n"},{"author":"chryswoods","date":"2007-04-07T22:20:23.609326Z","commit":"231","message":"I am continuing to fix the code. I've updated the ForceFields API and am implementing the updated functions. I have also switched PairMatrix over to using a C array (hopefully will improve its speed!) and have updated CLJFF and InterCLJFF to use the PartialMolecule interface. I am currently in two minds over whether CLJFF should be split from FFBase so that forcefields can multiply inherit from it if they want CLJ functionality (e.g. can inherit from CLJFF if want CLJ in bond/angle/dihedral forcefield, though perhaps the best solution is to create combined forcefields, as it is not efficient to build CLJ from Coul + LJ, so it would probably not be efficient to do bond/angle/dihedral/CLJ from the combination of each of those...)\n\nCode is still broken....\n\n"},{"author":"chryswoods","date":"2007-04-06T15:36:56.206609Z","commit":"230","message":"Now that SireMol compiles and links I am working on getting SireFF working again. I have completed up to ForceFields...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-03-30T15:49:26.435578Z","commit":"229","message":"I am still fixing the code - I have now got SireMol compiling and linking without problems, and am\nnow working on the Python wrapping of SireMol.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-03-26T13:57:44.296269Z","commit":"228","message":"I am now fixing the rest of the code so that is works with the new PartialMolecule bias and also so that it will work with the new ForceField interface (and new SireBase::Property) - what a lot of changes all at once ;-)\n\nThe code is broken.\n\n"},{"author":"chryswoods","date":"2007-03-26T11:10:00.519062Z","commit":"227","message":"I've updated SwitchingFunction, CombiningRules and Space to all be derived from Property.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-03-26T08:51:09.806359Z","commit":"226","message":"Moved Property to SireBase and added MoleculeProperty to SireMol (a Molecule-specialised version of Property). This will allow Space and SwitchingFunction to be made into properties as well.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-03-23T15:43:50.911128Z","commit":"225","message":"PartialMolecule is a lot more useful than I thought - I've realised when updating the SystemData API that I could use PartialMolecule in MoleculeGroup, rather than using Molecule. This will allow moves to be performed on parts of molecules using the same code base as moves performed on whole molecules! In particular, RigidBodyMC could do rigid body translation and rotation of individual residues or atoms using the same code as for molecules. And if the deltas are held as molecular properties, then the different MC moves could use different properties for each type.\n\nAlso I've realised that the easiest way to do grand canonical would be to have the move add or remove atoms from the MoleculeGroup that it was passed.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-03-22T16:48:31.243071Z","commit":"224","message":"I am still working on extending the ForceField API across to the entire program.\n\nA key change now is that I have created PartialMolecule, which can represent any part of a molecule all the way from an Atom, through Residue to a Molecule, with everything in between. This has very much simplified the ForceField API, which is now beginning to look a little less oppressive than it did! \n\nThe hierarchy of classes are;\n\nFFBase forcefields (do the work)\n    |\nForceField - provides implicit sharing and consistent interface\n    |\nFFCalculator - provides the server-side handle for a forcefield,\n    |          used on the server side of a Processor\n    |          (e.g. MolproCalculator). A calculator performs\n    |          the work for the forcefield in the current thread\n    |\nFFWorker - provides the client-side handle for a forcefield\n    |      and calls the forcefield via the FFCalculator\n    |      (e.g. FFThreadWorker). A worker can run the work\n    |      of the forcefield in a background or remote thread\n    |\nForceFields - provides the interface to collections of forcefields,\n              either interfaced directly via ForceField objects, or \n              interfaced on remote threads/processors via FFWorker objects.\n              (e.g. ForceFields vs. ClusterForceFields)\n\n"},{"author":"chryswoods","date":"2007-03-21T22:37:24.444303Z","commit":"223","message":"I am taking the API from FFBase and am beginning to transpose it to ForceField, FFWorker, FFCalculator and ForceFields\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-03-21T16:46:09.854194Z","commit":"222","message":"I am now cleaning up and filling in the complete forcefield interface so that I can complete the FFCalculator, FFWorker and FFProcessor classes.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-03-20T14:03:16.168682Z","commit":"221","message":"There was a bug in SireUnits, where the conversion from bohr radii to angstrom was 1 / 0.529, rather than 0.529. There was also another bug in MolproFF, where the point charges for the lattice used coordinates in angstrom (as specified in the molpro manual) but really needed to be in bohr radii. There was also another set of bugs in the InterGroup*FF forcefields, where the delta energy calcualtion set the total energy to the delta value, rather than changing the total energy by the delta value.\n\nOnce these bugs were fixed, I have finally got a correct and working MolproFF forcefield, and can compare it to a classical electrostatic approximation! This is great, as it means that I have now been able to show that Tip4P is a good approximation for the QM electrostatic energy, thereby showing that my idea may actually work ;-)  (see test/Squire/molproff.py for this test)\n\nCode compiles, links and runs well\n\n"},{"author":"chryswoods","date":"2007-03-20T09:28:08.555711Z","commit":"220","message":"I've added some more units to the python SireUnits file, and have also added python versions of the unit conversion functions. I am currently investigating problems in MolproFF, where I may be using the wrong units for the lattice points in the command file...\n\n"},{"author":"chryswoods","date":"2007-03-20T09:26:36.989952Z","commit":"219","message":"These two files did not merge correctly, for some weird reason? I'm committing these now to fix the last merge.\n\n"},{"author":"chryswoods","date":"2007-03-19T23:13:54.357353Z","commit":"218","message":"Merging the users/chryswoods branch into devel.\n\nThis merge;\n\n* Moves all forcefields over to using a common design\n* Adds InterGroupCLJFF, and Coulomb and LJ versions of the forcefields\n* Adds automatic C++ to python container conversions\n* Adds automatic C++ copy constructor to python copy.copy() function\n* Adds several new python tests, include MC-like tests\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-03-19T10:08:39.129416Z","commit":"217","message":"I've cleaned up some of the python tests - they now show Sire doing some pretty cool things!\n\ntest/speed/water_mc_speed.py  - this is the old test/test.py, with a few cleanings\ntest/SireCluster/threadff.py  - this has been fixed, and more forcefields have been added.\n                                This runs three forcefields in parallel!\ntest/Squire/threadmolpro.py   - this is a MolproFF version of threadff.py - two Molpro  \n                                instances are run in parallel!\n\nCode compiles, links and runs well\n\n"},{"author":"chryswoods","date":"2007-03-16T21:51:59.828567Z","commit":"216","message":"I have finished updating the CLJ forcefields (CLJFF, InterCLJFF, InterGroupCLJFF) and they are now all wrapped in python, and all appear to give the right energy when tested in test/test.py.\n\nThey are a bit slower than the old InterCLJFF, but I have some ideas of how to profile it and improve things a bit! ;-)\n\nCode compiles, links and appears to run well.\n\n"},{"author":"chryswoods","date":"2007-03-16T16:44:22.418108Z","commit":"215","message":"I am now switching the CLJ forcefields over to use the same design pattern as the Coulomb and LJ forcefields. I have updated CLJFF and InterCLJFF and now just need to do InterGroupCLJFF. There is a lot of similarity between LJFF, CoulombFF and CLJFF, so perhaps I should at some point in the future look at how common code can be abstracted into a shared base or template?\n\nI am still coding, so the code is broken!\n\n"},{"author":"chryswoods","date":"2007-03-16T15:09:11.304668Z","commit":"214","message":"I have added coulomb equivalents of the LJ specific forcefields (added CoulombFF, InterCoulombFF, InterGroupCoulombFF). The addition was quite straightforward, and the new forcefields have been wrapped in Python and tested in test/test.py (giving the same coulomb energy as the coulomb component of InterCLJFF).\n\nCode compiles, links and runs well\n\n"},{"author":"chryswoods","date":"2007-03-16T11:51:30.262010Z","commit":"213","message":"I've updated the python wrapping to add a __copy__ function that uses the copy constructor (so that my classes now work with copy.copy).\n\nI have wrapped up InterGroupLJFF, fixed its used of FFBase::Groups, and have updated the test/test.py script to test that a set of InterGroupLJFF forcefields return the same energy as a single InterLJFF forcefield, which itself gives the same energy as the LJ component of InterCLJFF! Also, 1000 moves on the combination of InterGroupLJFF forcefields takes the same time as 1000 moves on InterLJFF, so I am pretty pleased!\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-03-15T17:20:59.465912Z","commit":"212","message":"I've fixed some bugs and added a little extra python wrapping that allowed me to use Sire to do a real calculation - well, it could correctly orientate frames from a ProtoMS trajectory of NMA in water, and it could map waters to periodic boundaries and remove waters beyond the cutoff.\n\nThere was a small bug in the the quaternion code expected to be passed a normalised vector, but didn't complain if it didn't. I now check, and normalise if necessary.\n\nCode compiles, links and runs and works well.\n\n"},{"author":"chryswoods","date":"2007-03-09T16:41:29.952915Z","commit":"211","message":"I have written the InterGroupLJFF and it now compiles and links. I've still got to wrap it in python and test it, but the code seems clean and straightforward.\n\nCode compiles, links and runs.\n\n"},{"author":"chryswoods","date":"2007-03-09T09:08:02.621876Z","commit":"210","message":"This is a commit of code that has been speed-tested compared to ProtoMS. \n\nBox of water, periodic boundaries, time to complete 1000 MC moves\n(Sire is still using semi-fake moves, though is calculating the\n change in energy correctly)\n\nTest conducted on my work desktop (PentiumD 3.4GHz)\n\n(version numbers for Sire are the gcode respository numbers)\n\nCutoff  Sire(209)              ProtoMS2.1(724)    Relative speed\n        cljff     ljff                           cljff    ljff\n5.0     1269      1378         448                35%     32%\n10.0    1717      1871         892                51%     47%\n15.0    2845      2990         1832               64%     61%\n20.0    4601      5036         3350               72%     66%\n40.0    5660      6256         8772              154%    140%\n80.0    5824      6413         9665              165%    150%\n\nThese results show that Sire is within the same ballpark as ProtoMS,\nbut that optimisation work still needs to be performed. In addition,\nthis also suggests that there may be some inefficiencies in the\ncutoff with Sire, as it rapidly overtakes ProtoMS when fewer\ninteractions are discarded. Also, LJFF is consistently slower than\nCLJFF despite it doing less work! (though LJFF does not use hard\ncoded geometric combining rules)\n\nPart of the reason for the poor performance is that the energy calculations\nare much slower than they could be. My optimised Tip4PFF can calculate\nthe energy for the water box in 250ms, while InterCLJFF takes 1055ms and\nInterLJFF takes 1182ms. There is thus a theoretical 4x improvement\npossible (though all of this will not be realised in a general forcefield).\n\nAlso, I have updated test/test.py to checkpoint the InterLJFF object at\neach move (so that it's more like a normal MC move). Checkpointing \nand restoring InterLJFF 1000 times had only a small impact on the run time\n\n(without checkpointing, 1000 moves took 2998-3157ms, while with \n checkpointing it takes 3214-3264ms)\n\nThe cost is about 200ms per 1000 moves, which is acceptable given how\ncheckpointing allows the energy difference calculation to use a single\npass rather than two passes (which I believe would cost more than 0.2ms \nper move). Also, this is only an extra 4 minutes per million moves, and\njust 40 minutes for 10M moves, which is of the order number of moves\nthat I anticipate being most common.\n\nCode compiles, links and runs well\n\n"},{"author":"chryswoods","date":"2007-03-08T22:26:11.663495Z","commit":"209","message":"Beginning work on the InterGroupLJFF forcefield, used to calculate the LJ energies between two groups of molecules.\n\nCode compiles, links and runs.\n\n"},{"author":"chryswoods","date":"2007-03-08T21:07:51.343452Z","commit":"208","message":"The InterLJFF forcefield appears to work, giving the same energy as the LJ component of the InterCLJFF forcefield, and it is pretty quick (the individual moves are as fast as InterCLJFF, though it is about 20-30% slower than ProtoMS - though the moves are in python).\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-03-08T17:42:24.201998Z","commit":"207","message":"I've written InterLJFF (LJFF equivalent of InterCLJFF) that uses the up-to-date design, and looks pretty clean (if I do say so myself ;-)\n\nI've wrapped it up in Python, and it now needs to be tested.\n\nUnlike InterCLJFF, InterLJFF is now complete, and has complete functionality for adding, removing or changing any part of any molecules (and even allow partial molecules).\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-03-08T12:35:12.907424Z","commit":"206","message":"I've got LJFF to compile (though needs testing) and have also added LJPair to represent a combined pair of LJParameters. I've also provided the Py++ wrapping of both of these new classes.\n\nCode compiles, links and appears to run well.\n\n"},{"author":"chryswoods","date":"2007-03-07T16:40:45.504341Z","commit":"205","message":"I am writing the LJFF (forcefield for only LJ interactions). This will complement MolproFF and will allow for a full QM/MM interaction energy to be calculated. I am writing LJFF using what I have learned from writing CLJFF and MolproFF, and am happy now that its design represents the best I could do, and therefore I plan to use this design to rework CLJFF.\n\nCode is broken (I've got to break now so I can catch my bus!)\n\n"},{"author":"chryswoods","date":"2007-03-06T11:28:51.020784Z","commit":"204","message":"I've added the code to convert from Molpro energy units (hartrees) to Sire energy units (kcal mol-1) and have also added the origin energy (so that Molpro QM energies are of the same magnitude as the MM energies).\n\nThe Molpro QM energies appear to be very insensitive to moving the QM molecule - indeed, the difference in energy between just the QM molecule and the QM molecule surrounded by MM lattice points is only 0.0002 hartrees (~0.1 kcal mol-1). This seems really small to me, and is probably a result of an error on my part.\n\nCode compiles, links and runs\n\n"},{"author":"chryswoods","date":"2007-03-04T17:39:30.422224Z","commit":"203","message":"The deadlocking issue effects both Qt 4.1 and 4.2, so I have upgraded to Qt 4.2 on my laptop and this will be a minimum requirement if the user wants to include Molpro support. I have added code to make this fix portable.\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-03-02T11:29:41.435246Z","commit":"202","message":"After much painful debugging I have got the MolproFF working, and producing what I think is the right energy. The deadlocking problem was caused by the small output buffer of QProcess. Basically;\n\n(1) Sire uses RPC to request an energy calculation\n(2) Molpro performs the calculation, then writes lots of status output to stdout\n(3) The QProcess stdout buffer becomes full\n(4) Molpro blocks on a write, waiting for the stdout buffer to be cleared or read\n(5) Sire is still blocked waiting for Molpro's response, so is unable to clear or read the buffer\n\nMy solution was to ignore stdout and to send the information I need to stderr (and to read that instead). It's not the best solution.\n\nI think that QProcess may have gone through some changes between Qt 4.1 and Qt 4.2 as I didn't see this behaviour on my laptop (Qt 4.1) while I did no my desktop (Qt 4.2). Also, 4.2 introduces new input/output functions for QProcess, which may have lead to a change in code. I'll take a look at this at home when I can get back on my laptop. If this is not the case, then the fix I have introduced works only for Qt 4.2 (and currently Unix as well) so I will need to investigate another more robust solution.\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-03-01T16:46:18.513680Z","commit":"201","message":"I've now got MolproFF appearing to work, and appearing to give the right energy (a test script that converts the molpro command file to PDB shows the right structure). However, I am not totally happy as it does freeze for some unknown reason - lots of bughunting to do still...!\n\nCode compiles, links and works in a fashion..!\n\n"},{"author":"chryswoods","date":"2007-02-28T16:46:35.714414Z","commit":"200","message":"I'm trying to get MolproFF to give the right energy....\n\nCode compiles, links and runs, but MolproFF still does not work\n\n"},{"author":"chryswoods","date":"2007-02-26T16:45:46.289421Z","commit":"199","message":"I've finally integrated Molpro deeply within Sire. MolproFF can now call Molpro to calculate a QM/MM energy. Of course, it is still a fake energy, but this is better than nothing :-)\n\nNote to self - QTextStream and QProcess don't seem to work well together\n             - *Do not* use QProcess::environment() - this is empty. Use\n               QProcess::systemEnvironment() instead!\n\nCode compiles, links and runs. python test/test.py gives the wrong answer.\n\n"},{"author":"chryswoods","date":"2007-02-26T08:35:52.137620Z","commit":"198","message":"I am now testing MolproFF - The code compiles, but test/test.py causes a segfault.\n\nCode compiles, links but MolproFF doesn't work.\n\n"},{"author":"chryswoods","date":"2007-02-25T11:27:29.096303Z","commit":"197","message":"I've fixed some compile errors on my laptop (Qt4.1 and gcc4) and have also fixed the errors in SireCAS that I'd written unit tests for at the last commit.\n\nI've moved the Qt wrappers back so that they are compatible with Qt4.1 (they were originally for \u003e= Qt4.2). There may be some compile errors now on Qt4.2 due to the renaming of the \"readLink\" function to \"symLinkTarget\".\n\nCode compiles, links and appears to run well.\n\n"},{"author":"chryswoods","date":"2007-02-23T16:48:41.076085Z","commit":"196","message":"I've added the SireCAS operators, and also uncovered a bug in SireCAS which I've added a test case for (which fails!)\n\nI'll fix the bug before the next version!\n\nCode compiles, links, but siretest has failures.\n\n"},{"author":"chryswoods","date":"2007-02-20T14:19:29.933136Z","commit":"195","message":"I've finished adding QDataStream and __str__ operators to all of the python wrappers.\n\nI've also fixed some compile and link problems that had snuck into the last version\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-02-19T16:44:49.615669Z","commit":"194","message":"I've added the ability for the Py++ generator to automatically expose __str__ and the QDataStream streaming operators. The wrappers are now becoming pretty functional!\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-02-19T12:28:47.624101Z","commit":"193","message":"I've added Python (Py++) wrapping of Squire, and have also switched to using Py++ to wrap up Qt classes.\n\nCode compiles, links and runs well\n\n"},{"author":"chryswoods","date":"2007-02-18T17:34:26.477333Z","commit":"192","message":"I have finished off adding explicit implicitly_convertible sections, and from/to python container conversions for all Sire modules. The only remaining things that now need to be done for the python wrapping are exposing SireCAS operators and exposing \"__str__\" functions.\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-02-17T22:44:12.260474Z","commit":"191","message":"Silly me - I added a temp file by mistake - this commit removes it!\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-02-17T22:38:49.515447Z","commit":"190","message":"I've added the automatic custom rvalues conversions to/from Qt containers and Python containers for most of the Sire python modules! This has really improved the quality of the user interface!\n\nI have also cleaned up the SireMaths::Vector header file, moving some code around, moving comments to the cpp file, and using qMemCopy for the copy assignment and copy constructor.\n\nCode compiles, links and runs well!\n\n"},{"author":"chryswoods","date":"2007-02-17T11:22:40.250711Z","commit":"189","message":"I've exposed lots of SireMol containers to python - the to/from python converters are really nice and easy to use, and make it very easy to manage exposed containers, very easy for the user to use those containers, and also the resulting code doesn't require much memory to compile (\u003c 200 MB, compared to \u003e500MB for the fully exposed containers).\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-02-16T23:04:07.796003Z","commit":"188","message":"I have fixed some compile errors for gcc4 and Qt 4.1, and have also added some explicit implicitly_convertible lines to the python wrapping.\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-02-16T16:44:00.543068Z","commit":"187","message":"I've been switching the python wrappers of Qt templates over to use to/from python container converters. This, I believe, leads to a more natural user interface in python, as the user should not worry about converting a vector to a list, or a tuple to a set etc.\n\nI've also applied the same logic to the ParameterMap, which is now created from a dictionary - this is much nicer than trying to use logic operators (what was I on!?)\n\nCode compiles, links and runs well :-)\n\n"},{"author":"chryswoods","date":"2007-02-14T19:24:56.968944Z","commit":"186","message":"Merging the users/chryswoods branch into devel.\n\nThis merge;\n\n* Adds Molpro forcefields (QM/MM at last!)\n* Adds Processors and workers so that calculations can run in parallel\n* Uses NewAtom a lot - I will switch over to NewAtom from Atom (eventually)\n* Adds a copyright and license notice to each source file\n* Replaces nearly all hand-wrapped python with Py++ auto-generated wrappers\n\nThe command to perform this merge was;\n\nsvn merge -r 143:185 ../users/chryswoods/ ./\n\nThere then had to be a lot of fixing, as there were several conflicts (why? I couldn't work it out).\n\nI've verified that this copy is identical to version 185 of users/chryswoods.\n\n"},{"author":"chryswoods","date":"2007-02-14T11:29:03.388811Z","commit":"185","message":"I have now finished the rough wrapping of all of the Sire modules! :-)\n\nThey now all compile, link and work, and the most important test python scripts also now work again (e.g. test/test.py and test/SireCluster/threadff.py). The wrappers are very, very nice, and I am very impressed with the quality of Py++.\n\nThere are now only a few remaining issues, all of which should be straightforward to fix once I have the time (...if I ever have the time ;-)\n\n(1) SireCAS operators still need wrapping - e.g. Symbol + Symbol, Integer * Expression\n\n(2) I need to work out how to expose the polymorphism of ForceField and other SharedPolyPointer classes to python... I am thinking about creating a new \"held_type\" holder in python that will be able to see that ForceField is really a SharedPolyPointer...\n\n(3) I need to expose automatic list -\u003e class conversions, e.g. list -\u003e ParameterMap etc.\n\n(4) I need to expose SireDB operators (atom0_name == \"CA\" \u0026\u0026 res0_num == 32)\n\n(5) There are a load of Qt template classes that need to be exposed, including QVector\u003cCoordGroup\u003e, QVector\u003cAtom\u003e etc.\n\nI have yet to decide how I will wrap the Qt template classes - I could use Py++, though I think that then I would have to heavily customise the wrappers to ensure that they do not produce different output for different Qt versions (I want to remain source compatible with Qt 4.1.0 if possible).\n\nDespite all of this, the code compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-02-14T09:27:42.859795Z","commit":"184","message":"SireMM is now auto-wrapped (including all of those annoying bond/angle/dihedral template classes!). I've now broken the back of learning Py++ and have to say that Py++ is very, very good. Now that I understand the code, I am able to excercise a lot of control over the generated bindings. I have even now sorted the problem of including base classes from different namespaces, and having class specific includes.\n\nCode compiles, links and runs, but python scripts don't yet run\n\n"},{"author":"chryswoods","date":"2007-02-13T16:39:18.856892Z","commit":"183","message":"I'm filling in the wrappers of missing template classes so that the python scripts will one day run again :-)\n\nIt's not quite there yet however....\n\n"},{"author":"chryswoods","date":"2007-02-13T15:43:54.283311Z","commit":"182","message":"I have filled in more of the auto-wrappers, and have also worked out how to force Py++ to add base classes that have not been exposed to python (I do like how easy it is in python to completely replace annoying functions! ;-)\n\nCode compiles, links and runs, though python scripts are broken\n\n"},{"author":"chryswoods","date":"2007-02-12T16:41:56.104290Z","commit":"181","message":"I've now auto-wrapped SireIO, SireFF, SireMaths and SireMM.\n\nThere are some problems with SireMM - InterCLJFF is wrapped as noncopyable!\n\nCode compiles, links and runs, but the scripts are broken.\n\n"},{"author":"chryswoods","date":"2007-02-12T11:46:03.388916Z","commit":"180","message":"I've added the auto-wrappers for SireCluster and SireDB now as well.\n\nCode compiles, links and runs\n\n"},{"author":"chryswoods","date":"2007-02-12T10:46:09.840993Z","commit":"179","message":"I've now added the auto-wrapping of SireCAS. The operators for SireCAS have yet to be wrapped, but otherwise things look ok (though the auto-conversion of ExBase to Expression is broken, and also the auto-conversion of x==3 to SymbolValue is broken - it converts to SymbolExpression!)\n\nCode compiles, links and runs\n\n"},{"author":"chryswoods","date":"2007-02-12T09:26:35.006572Z","commit":"178","message":"I've added the missing wrapper for QList\u003cMolecule\u003e, and now the main python test scripts work (test/test.py and test/SireCluster/threadff.py).\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-02-12T09:16:45.136546Z","commit":"177","message":"The automatic Py++ wrapping of SireMol, SireSystem and SireBase now works. I've still got a few problems to fix, but it is now good enough for me to move through the rest of the modules and switch them over as well.\n\nCode compiles, links and runs, but the python tests will not work.\n\n"},{"author":"chryswoods","date":"2007-02-11T19:28:16.787815Z","commit":"176","message":"I have now got all of the Sire.Mol wrappers compiling and linking. There are quite a few issues to fix though;\n\n(1) Base classes that are not wrapped are not included in the wrappers (e.g. SireMaths::Vector is not wrapped with SireMol::Atom!)\n\n(2) For some reason, ID types are implicitly convertible from ints, even though they have explicit constructors\n\n(3) I am missing a load of template classes\n\n(4) I need to wrap up the other modules, as they are needed so that the python test scripts still work\n\nCode compiles, links and still runs (though python scripts don't work)\n\n"}]}