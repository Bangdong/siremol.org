{"Page":16,"TotalPages":28,"commits":[{"author":"chryswoods","date":"2010-05-21T23:17:48.153357Z","commit":"1275","message":"I've filled in all of the code for the dynamics classes, and have generated\nthe python wrappers. All of the corelib code compiles, while I am still\nwaiting for the python wrappers to compile... They may work ;-)\n\nCode is broken (probably)\n\n"},{"author":"chryswoods","date":"2010-05-21T14:05:19.086261Z","commit":"1274","message":"I've made more progress with the dynamics code while I've been waiting for the \nMPI code to compile on HLRB (Itanium). The MPI code now works on the Itanium system,\nwith mpirun -np 4 sire_python test/SireCluster/testcluster.py working as expected :-)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-05-21T07:57:31.747008Z","commit":"1273","message":"Continuing to make progress with the integrator classes - but must now\nrun to catch my bus\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-05-21T07:40:23.961333Z","commit":"1272","message":"I've gone back to working on the integrator classes so that I can run dynamics calculations.\nI've updated the APIs of the Move classes so that they can take PropertyMap maps in \ntheir constructors. This simplifies the usage of these classes if lots of non-standard\nproperties are required\n\nCode is broken\n\n"},{"author":"julienmich","date":"2010-05-20T23:40:16.900276Z","commit":"1271","message":"Test commit of the movermove class (implementation incomplete)\n"},{"author":"chryswoods","date":"2010-05-20T09:59:02.994793Z","commit":"1270","message":"I've created a branch for Julien in corelib and python2. This branch is copied from the\ncurrent (working!) \"devel\" branch.\n\nBeing based on \"devel\", this branch does not include the new rewrite of Sire\nto switch over to Siren (as this is occuring in the \"chryswoods\" branch).\n\nAt some point, a whole lot of merging will need to take place :-)\n\n"},{"author":"chryswoods","date":"2010-05-20T09:27:47.954488Z","commit":"1269","message":"I've fixed critical bugs in the new IdentityConstraint, SpaceWrapper and QMChargeConstraint\ncode, which all involved them not updating the system in certain circumstances.\n\nI've also updated sire_python to use the MPI C bindings rather than the C++ bindings.\n\nIn addition, I've now successfully compiled this code (including wrappers) on\nItanium2. Sire is becoming really portable :-)\n\n"},{"author":"chryswoods","date":"2010-05-17T10:56:37.676357Z","commit":"1268","message":"I've ported SireCluster/mpi to the C MPI API. I've found that the C++ MPI API is not widely\nsupported, and has caused me difficulties, so I've replaced the C++ calls with their\nC equivalents. Tests on my laptop show that it is working.\n\n"},{"author":"chryswoods","date":"2010-05-17T07:54:26.425916Z","commit":"1267","message":"I'm now finishing up the dynamics code - this commit updates the dynamics\ntest by running a simulations of a box of neon.\n\n"},{"author":"chryswoods","date":"2010-05-16T13:42:50.883199Z","commit":"1266","message":"I forgot to fix TrajectoryMonitor that also uses QTemporaryFile - this commit\nincludes this fix.\n\n"},{"author":"chryswoods","date":"2010-05-16T13:01:36.270172Z","commit":"1265","message":"I've fixed a small bug in the saving of the temporary filename\n\n"},{"author":"chryswoods","date":"2010-05-16T12:28:36.649005Z","commit":"1264","message":"I've added a workaround for QTemporaryFile losing the filename when it is closed.\n\n"},{"author":"chryswoods","date":"2010-05-16T11:24:10.354502Z","commit":"1263","message":"I've fixed a small bug in the constraints that meant that the code incorrectly thought\nthat the constraints weren't satisfied.\n\n"},{"author":"chryswoods","date":"2010-05-15T16:18:35.822340Z","commit":"1262","message":"I've played around with improving the generation of the API documentation\n\n"},{"author":"chryswoods","date":"2010-05-14T19:47:24.157618Z","commit":"1261","message":"I've exposed the MolID operator functions in System, thus allowing you to write;\n\nmol = system[ MolName(\"ethane\") ]\n\n"},{"author":"chryswoods","date":"2010-05-14T19:25:50.276364Z","commit":"1260","message":"I've fixed another SSE compile bug, now in PeriodicBox, and I have also fixed\nthe lookup-by-name bug in MoleculeGroup.\n\n"},{"author":"chryswoods","date":"2010-05-14T15:46:37.061532Z","commit":"1259","message":"I've fixed the compile bug if SSE is not enabled that Julien spotted\n\n"},{"author":"chryswoods","date":"2010-05-14T14:28:07.062593Z","commit":"1258","message":"I've fixed bugs in the code (weight, rather than 1 - weight was used by Mover), have\nadded a cap to the Cube output, have changed the energy in Cube to kcal mol-1 rather\nthan hartree, have added a charge accumulator in PolariseCharges, have added \nAngleComponent and DihedralComponent constraints (which will need to be renamed\nas they clash with SireMM::DihedralComponent and SireMM::AngleComponent) and\nhave added convenience .measure() functions to Evaluator\n\n"},{"author":"chryswoods","date":"2010-05-13T14:57:56.440886Z","commit":"1257","message":"I've got most of the PolariseCharges constraint working, and the changes in \ncharge look reasonable...\n\n"},{"author":"chryswoods","date":"2010-05-11T22:01:52.617461Z","commit":"1256","message":"I've made more progress on the polarise charges constraint\n\n"},{"author":"chryswoods","date":"2010-05-11T12:44:26.760896Z","commit":"1255","message":"I'm making progress with the PolariseCharges constraint, and have also fixed\na bug in SimStore and TrajectoryMonitor that caused small systems or PDB\nfiles to be corrupted or lost (as their data was not correctly flushed to disk)\n\n"},{"author":"chryswoods","date":"2010-05-10T22:02:08.910810Z","commit":"1254","message":"I've provided stubs for the PolariseCharges class, and have worked out roughly\nwhat should be written...\n\n"},{"author":"chryswoods","date":"2010-05-10T14:37:08.288645Z","commit":"1253","message":"I've fixed small bugs in rational and ComponentConstraint\n\n"},{"author":"chryswoods","date":"2010-05-10T12:55:08.308152Z","commit":"1252","message":"I've added the python wrappers for the Cube class\n\n"},{"author":"chryswoods","date":"2010-05-10T12:49:48.648360Z","commit":"1251","message":"I've fixed the bug that was causing all of the constraints to be continually\nre-evaluated - I was incrementing the version after calling collectStatistics()\n\n"},{"author":"chryswoods","date":"2010-05-07T15:03:37.902431Z","commit":"1250","message":"I've written a gaussian cube writer so that I can visualise the potential grids.\n\n"},{"author":"chryswoods","date":"2010-05-05T14:28:26.590435Z","commit":"1249","message":"I've fixed a small bug with IdentityConstraint where it was not properly applying\nthe constraint from the direct apply constraint function.\n\n"},{"author":"chryswoods","date":"2010-05-05T14:03:08.263397Z","commit":"1248","message":"I've fixed a small bug in ForceFields and have been debugging some problems\nI've been experiencing with the identity constraint.\n\n"},{"author":"chryswoods","date":"2010-05-05T11:37:25.304553Z","commit":"1247","message":"I think that I've fixed a bug in SireCAS where it was not properly recognising\nwhen an expression was zero. This was what caused my remainder code in ForceFields\nto exit with errors about remainders that were not dimensionally correct.\n\n"},{"author":"chryswoods","date":"2010-05-04T11:52:11.925728Z","commit":"1246","message":"I've got Sire and the python wrappers to now all compile, link and install. Time to debug and test.\n\n"},{"author":"chryswoods","date":"2010-05-03T14:53:00.076055Z","commit":"1245","message":"I've got sire all compiling again with the new field and potential code. I've created\nthe python wrappers and am now seeing if they compile...\n\nCode is broken (probably)\n\n"},{"author":"chryswoods","date":"2010-04-30T15:54:32.569261Z","commit":"1244","message":"I've made good progress integrating the field and potential code into the forcefields.\nI've now just got to finish updating all of the potentials to fill in the necessary\ncode (InterCLJPotential is complete)\n\n"},{"author":"chryswoods","date":"2010-04-28T14:27:43.893407Z","commit":"1243","message":"I've added a hierarchy of Probe classes as I am working on adding fields and \npotentials to the forcefield classes. The API is now set, I've just got\nto fill in all of the code... (and there is a lot)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-04-23T16:43:57.737881Z","commit":"1242","message":"I've written PotentialTable, GridPotentialTable and MolPotentialTable, and have \ngot these to compile (and have produced the python wrappers). Now to get these\nall linked and tested, then to add the code to the forcefields to actually\ncalculate these quantities...!\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-04-23T11:53:17.150846Z","commit":"1241","message":"I've finished FieldTable and have got it compiled and wrapped in Python. Now I can\ncopy this over to make PotentialTable...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-04-22T14:37:26.610625Z","commit":"1240","message":"I've filled in the code for MolFieldTable and GridFieldTable - I'll tackle FieldTable\nafter coffee...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-04-22T07:55:17.421694Z","commit":"1239","message":"I'm continuing work fleshing out the APIs of FieldTable and ForceTable, and filling in the\nnecessary functions.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-04-21T15:45:33.291142Z","commit":"1238","message":"I'm continuing work on the polarisable MM forcefield - for this I need to be able to get the\npotential and field from the forcefields - for this I am writing the FieldTable and PotentialTable\nclasses (which are like ForceTable) - and for these I have written the Grid hierarchy of \nclasses (which provide 3D grids). The grid classes are finished, compile, link, wrap in \npython and have been tested - now its back to the FieldTable and PotentialTable classes...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-04-16T12:14:03.459115Z","commit":"1237","message":"I've finished writing the bulk of the WHAM code and have wrapped it in Python (as part of the \nSoiree module). Everything compiles and links, but it now needs to be tested...\n\n"},{"author":"chryswoods","date":"2010-04-15T15:57:14.326059Z","commit":"1236","message":"I've moved WHAM to the new Soiree module. Soiree was always going to be the name\nof the post-simulation (early evening) analysis module, which will contain all of\nthose analysis tools that will help investigate a simulation after it has finished\nrunning.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-04-15T15:37:08.842190Z","commit":"1235","message":"I'm continuing to make progress with the WHAM code, however have noticed that as it \ndepends on Symbol, it can't be in SireMaths (as SireCAS depends on SireMaths).\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-04-13T10:46:17.430151Z","commit":"1234","message":"I'm working on writing a solver for the WHAM equations...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-04-12T15:45:50.367896Z","commit":"1233","message":"I've been testing and debugging the new delta / constraint code. It appears to now be working.\nThe following script has a series of connected, interesting constraints;\n\n(1) 2 charge constraints that calculate the AM1BCC charges for the subtrate\n    every time it changes conformation\n\n(2) Property constraint that sets a restraint in RestraintFF to match the value\n    of R0\n\n(3) Component constraint that calculates R from the current substrate geometry\n\n(4) Component constraint that calculates lambda from the current value of R\n\nTogether these constraints allow an umbrella potential to be set (using R0),\nwhich will force the substrate to explore different geometries along R, and\nto have different values of R change lambda so that the LJ parameters\nand AM1BCC charges can be mapped from reactant to product.\n\nCool :-)\n\nfrom Sire.IO import *\nfrom Sire.Squire import *\nfrom Sire.Mol import *\nfrom Sire.Vol import *\nfrom Sire.System import *\nfrom Sire.MM import *\nfrom Sire.FF import *\nfrom Sire.Maths import *\nfrom Sire.Move import *\nfrom Sire.Base import *\nfrom Sire.CAS import *\nfrom Sire.Qt import *\n\nimport os\n\nprotoms_dir = \"%s/Work/ProtoMS\" % os.getenv(\"HOME\")\n\namber_params = [ \"%s/parameter/amber99.ff\" % protoms_dir,\n                 \"%s/parameter/gaff.ff\" % protoms_dir,\n                 \"%s/parameter/solvents.ff\" % protoms_dir ]\n\nreactant_params = \"reactant_substrate.template\"\nproduct_params = \"product_substrate.template\"\n\nreactant_name = \"chorismate\"\nproduct_name = \"prephenate\"\n\npdbfile = \"free_022_0030.pdb\"\nxscfile = \"free_022_0030.xsc\"\n\nmols = PDB().read(pdbfile)\n\nsubstrate = mols.moleculeAt(0).molecule()\n\nwaters = mols\nwaters.remove(substrate.number())\n\ndef getProtoMS(params):\n    protoms = ProtoMS(\"%s/protoms2\" % protoms_dir)\n\n    for param in amber_params:\n        protoms.addParameterFile(param)\n\n    if params:\n        protoms.addParameterFile(params)\n\n    return protoms\n\nreactant = substrate.edit().renumber().rename(reactant_name).commit()\nproduct = substrate.edit().renumber().rename(product_name).commit()\n\nprint reactant\nprint product\n\nprotoms = getProtoMS(reactant_params)\n\nprint \"Parameterising the reactant...\"\nreactant = protoms.parameterise(reactant, ProtoMS.SOLUTE)\n\nprint \"Parameterising the product...\"\nprotoms = getProtoMS(product_params)\nproduct = protoms.parameterise(product, ProtoMS.SOLUTE)\n\nprint reactant\nprint product\n\nsubstrate = reactant.edit() \\\n                    .setProperty(\"reactant_charge\", reactant.property(\"charge\")) \\\n                    .setProperty(\"reactant_LJ\", reactant.property(\"LJ\")) \\\n                    .setProperty(\"product_charge\", product.property(\"charge\")) \\\n                    .setProperty(\"product_LJ\", product.property(\"LJ\")) \\\n                    .setProperty(\"reactant_z-matrix\", reactant.property(\"z-matrix\")) \\\n                    .setProperty(\"product_z-matrix\", product.property(\"z-matrix\")) \\\n                    .setProperty(\"reactant_connectivity\", reactant.property(\"connectivity\")) \\\n                    .setProperty(\"product_connectivity\", product.property(\"connectivity\")) \\\n                    .commit()\n\nrestraintff = RestraintFF(\"RestraintFF\")\n\nlam = Symbol(\"lambda\")\nk = 2000.0\nstart = -1.8\nend = 1.8\nr01 = DoubleDistanceRestraint.r01()\nr23 = DoubleDistanceRestraint.r23()\n\nr0 = Symbol(\"r0\")\n\nC = substrate.atom(AtomName(\"C\"))\nO3 = substrate.atom(AtomName(\"O3\"))\nC3 = substrate.atom(AtomName(\"C3\"))\nC9 = substrate.atom(AtomName(\"C9\"))\n\nrestraint = DoubleDistanceRestraint(C, O3, C3, C9, k * ( r01 - r23 - r0 )**2 ) \n\nrestraintff.add( restraint )\n\nrestraintff.setValue(r0, -1.8)\n\nprint restraint\nprint restraintff\nprint restraintff.energy()\n\nmopac = Mopac()\nmopac.setTotalCharge(-2)\n\nqmff = QMFF(\"QMFF\")\nqmff.setQuantumProgram(mopac)\nqmff.add(substrate)\n\nsubstrate = MoleculeGroup(\"substrate\", substrate)\n\nsystem = System()\nsystem.setConstant(r0, -1.8)\nsystem.add(substrate)\nsystem.add(qmff)\nsystem.add(restraintff)\n\nsystem.add( PropertyConstraint( \"r0\", FFName(\"RestraintFF\"), r0 ) )\n\nr = Symbol(\"r\")\n\nsystem.setConstant(r, -1.8)\n\nsystem.add( ComponentConstraint( lam, Max( 0.0, Min( 1.0, (r + 1.8) / 3.6 ) ) ) )\n\nr01 = DoubleDistanceComponent.r01()\nr23 = DoubleDistanceComponent.r23()\n\nsystem.add( DoubleDistanceComponent( r, C, O3, C3, C9, r01 - r23 ) )\n\nam1bcc = AM1BCC()\nam1bcc.setTotalCharge(-2)\n\nsystem.add( QMChargeConstraint(substrate, am1bcc, {\"connectivity\" : \"reactant_connectivity\",\n                                                   \"charge\" : \"reactant_charge\"}) )\n\nsystem.add( QMChargeConstraint(substrate, am1bcc, {\"connectivity\" : \"product_connectivity\",\n                                                   \"charge\" : \"product_charge\"}) )\n\nprint \"Apply constraints\"\nsystem.applyConstraints()\n\nprint \"Energies...\"\nprint system.energy()\nprint system.energies()\nprint system.constants()\n\nmol = system[MGIdx(0)][MolIdx(0)].molecule()\nprint mol.evaluate().charge( {\"charge\" : \"reactant_charge\" } ), mol.property(\"reactant_charge\")\nprint mol.evaluate().charge( {\"charge\" : \"product_charge\" } ), mol.property(\"product_charge\")\n\nreactant_move = ZMatMove(substrate)\nreactant_move.setZMatrixProperty( \"reactant_z-matrix\" )\n\nproduct_move = ZMatMove(substrate)\nproduct_move.setZMatrixProperty( \"product_z-matrix\" )\n\nprint \"Moves...\"\n\nfor r in range(-180, 181, 20):\n    system.setConstant( r0, 0.01*r)\n\n    # get lambda for this value of r\n    lam = (r + 180.0) / 360.0\n\n    # use lambda to weight the choice of z-matrix\n    moves = WeightedMoves()\n    moves.add( reactant_move, 1 - lam )\n    moves.add( product_move, lam )\n\n    for i in range(0,5):\n        print \"Perform moves...\"\n        system = moves.move(system, 5, True)\n        print \"DONE!\"\n        print 0.01*r, i, system.energy(), moves\n        print system.energies()\n        print system.constants()\n\n        mol = system[MGIdx(0)][MolIdx(0)].molecule()\n        print mol.property(\"reactant_charge\")\n        print mol.property(\"product_charge\")\n\n    PDB().write(system.molecules(), \"test%004d.pdb\" % (r+180))\n\n\n"},{"author":"chryswoods","date":"2010-04-12T11:14:51.539349Z","commit":"1232","message":"I've finished porting all of the code to the new constraint / delta system. All code and all python\nwrappers now compile and link. Now it all needs to be tested...\n\n"},{"author":"chryswoods","date":"2010-04-08T10:45:11.441397Z","commit":"1231","message":"I'm continuing to make progress integrating the new delta code into the constraints. I've finished\nthe property and component constraints and have begun work on the molecule constraints\n(I've got SpaceWrapper and PerturbationConstraint to compile - still need to do IdentityConstraint\nand ChargeConstraint, before then going on to what triggered all of this - GeometryComponent\nand DistanceComponent)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-03-24T08:56:10.461982Z","commit":"1230","message":"I've finished (finally!) writing PropertyConstraint and am now making good progress\non ComponentConstraint. PropertyConstraint was a lot more complicated than it\noriginally appeared, with lots of corner cases!\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-03-23T22:47:10.858125Z","commit":"1229","message":"I am continuing to update the constraint code so that it uses deltas. It is quite complicated...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-03-20T18:03:59.381021Z","commit":"1228","message":"I think that I've finished the Delta class - I've fully tested it in \ntest/SireSystem/testdelta.py\n\nI've had to modify the design a little to account for deltas that don't\nchange anything, e.g. Delta( lambda, 0.0, 0.0 ) - I can't just ignore\nthese as these are necessary to allow changes to be reversed, e.g.\n\nDelta( lambda, 0.0, 1.0 ) + Delta( lambda, 0.0, 0.0 )\n\nshould equal\n\nDelta( lambda, 0.0, 0.0 )\n\nmeaning that lambda won't change. This has slightly complicated\nthe involves() and isEmpty() functions, as\n\nDelta( lambda, 0.0, 0.0 ).isEmpty() should be true, but\nDelta( lambda, 0.0, 0.0 ).isNull() should be false, and\nDelta( lambda, 0.0, 0.0 ).involves(lambda) should be false\n(as lambda isn't changing)\n\nCode compiles and appears to work - next step is changing\nthe constraint code (and system change code) so that it \nuses Delta... \n\n"},{"author":"chryswoods","date":"2010-03-19T16:58:10.752424Z","commit":"1227","message":"I'm making good progress with the delta class - I'm working on the code used to merge\ntwo deltas together. I've worked out how this should work;\n\nthe pre-delta parts (old) should agree completely in the two deltas to merge,\nas they should both be from the same start\n\nthe post-delta parts come from the right hand delta, e.g. delta0 + delta1 would\nresult in a delta that contains the versions in delta1 if there are any\nshared parts\n\nCode compiles and links, though the delta code is unfinished\n\n"},{"author":"chryswoods","date":"2010-03-18T22:38:03.205503Z","commit":"1226","message":"I'm continuing to work on the Delta class. The new constraint system will use mutable \nconstraints that will take a single delta, apply constraints to create a larger,\nmerged delta, and then this single delta will be applied to the system in one\ngo. This will allow easier detection of circular constraints, and will also\nmean that the system is modified just once, rather than nconstraints times.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-03-18T13:35:26.333959Z","commit":"1225","message":"The dependencies between molecules, components and properties in the system constraints are\nnow getting a little complicated (particular in my umbrella sampling simulation). To solve\nthis, I am slightly rewriting the constraints so that they work using Delta objects\n(which record what changes). This will allow constraint dependencies to be generated\non the fly, and will also simplify and optimise the actual calculation of the constraints\n(as now they will know what has changed)\n\nI'm in the process of writing the Delta class... interupted by the graduate talks\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-03-17T10:37:34.190272Z","commit":"1224","message":"I've fixed the bugs with SireCluster - the MPI code now all works, and test/SireCluster/remotenode.py\ncorrectly runs WorkTest on the remote node, with full encryption of the WorkPackets, and a single-threaded\nMPI 1 backend :-)\n\n"},{"author":"chryswoods","date":"2010-03-16T23:03:13.654258Z","commit":"1223","message":"I've got NetFrontend and NetBackend working - test/SireCluster/remotenode.py demonstrates\nthe running of a WorkPacket by sending SireCluster::network::Message objects (which are\nserialised, compressed, encrypted and signed transparently to the user of the API).\n\nThere is a small bug caused by me losing the UID of the host somewhere - this has\ntriggered a security exception in a high-level part of the code that can't work\nout why the host UID is wrong...\n\n"},{"author":"chryswoods","date":"2010-03-16T11:21:18.821768Z","commit":"1222","message":"I've fixed compile problems on Linux - this version seems to work as well as the version on Mac\n(SireSec also now works properly on Linux - this means that MPI messages are now automatically\nsigned and encrypted)\n\n"},{"author":"chryswoods","date":"2010-03-16T08:55:36.584567Z","commit":"1221","message":"I've added the code to allow Replies to be sent to messages, and have used this to write the\nNetFrontend class. The reply code tries to minimise memory use by posting replies into \npigeon holes, and having the code wait until a reply is posted into a pigeon hole.\nThis is better than the old design of creating placeholders for replies and then\npolling those.\n\nCode is untested as I have to run for the bus\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-03-15T21:33:17.889210Z","commit":"1220","message":"I've added and fixed code to add geometry components which can be monitored and used to\ndrive components in a system.\n\nI've also added more code to the new SireCluster design, which now allows resource reservation\nrequests to be made, and responded to (with backends for those resources now added to \na NetBackends registry object)\n\n"},{"author":"chryswoods","date":"2010-03-11T23:21:00.638470Z","commit":"1219","message":"I've added a GeometryComponent set of classes to the devel branch - these allow system components\nto be set that follow the geometry of the system, e.g. distances between atoms. This allows\nthese components to then be monitored (via existing component monitor classes), or used\nto feed into constraints (e.g. used to control lambda, which is used to control the potential).\n\nI'm adding this to allow me to perform umbrella sampling (need geometry monitoring) where\nthe forcefield changes to match the value of the (geometric) reaction coordinate.\n\nCode compiles and links, but needs testing.\n\n"},{"author":"chryswoods","date":"2010-03-05T23:37:48.585527Z","commit":"1218","message":"I'm continuing to build and debug SireCluster...\n\n"},{"author":"chryswoods","date":"2010-03-05T17:50:25.931146Z","commit":"1217","message":"I've reorganised SireCluster to move non-public classes into MPI, resources or network.\nThe cryptlib errors have been fixed and resources deleted correctly before \nSireSec_end is called. I've also cleaned up initialisation to ensure that the\ncluster has started cleanly before scripts are run.\n\n"},{"author":"chryswoods","date":"2010-03-05T15:09:51.043044Z","commit":"1216","message":"I'm now working to create the NetFrontend and NetBackend that will allow high level Node objects\nto control remote resources\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-03-01T23:26:39.073323Z","commit":"1215","message":"I've added acknowledgement of message sends and receives, so that it is possible for the \ncode to wait until a message has definitely been sent, and also wait until a message\nhas definitely been received (signalled by the recipient sending back an \nacknowledgement message)\n\nThis seems to work for shutdown, although I have some annoying cryptlib problems\nas it intercepts SIGCHLD, which I think is causing problems with OpenMPI\n(as I don't intercept SIGCHLD...)\n\n"},{"author":"chryswoods","date":"2010-02-28T17:38:03.159603Z","commit":"1214","message":"I've made a lot of progress with SireCluster, and have now successfully got\nsigned, compressed and encrypted messages being sent between processes using\nMPI.\n\n"},{"author":"chryswoods","date":"2010-02-26T23:37:26.666381Z","commit":"1213","message":"I'm debugging the initialisation of SireCluster - things are currently weird...\n\n"},{"author":"chryswoods","date":"2010-02-26T18:39:05.352003Z","commit":"1212","message":"I've been working on SireCluster, having designed most of the network message transmission\nlayer (which integrates encryption using SireSec), and abstracting away the actual\nnetwork protocol (so all MPI is now restricted to just mpi/mpicluster.cpp). I've also\nsorted out how to run all MPI from a single thread, so that it should work with\nolder MPI imlpementations (which are not thread safe, which don't have C++ bindings\nand which are missing newer functions).\n\n"},{"author":"chryswoods","date":"2010-02-23T15:23:24.205528Z","commit":"1211","message":"I've fixed some of the python wrappers to remove troublesome include files ;-)\n\n"},{"author":"chryswoods","date":"2010-02-23T15:18:09.911629Z","commit":"1210","message":"I've fixed a range of small compile and configure errors for Sire on Linux using an old Qt (4.2.1) \nand an old version of boost\n\n"},{"author":"chryswoods","date":"2010-02-23T15:08:35.502211Z","commit":"1209","message":"I've fixed the compile of cryptlib with SireSec on linux caused by the lack of -fPIC in the\ncompile options of cryptlib (as I am linking the static cryptlib library into the \ndynamic SireSec library)\n\n"},{"author":"chryswoods","date":"2010-02-22T21:22:31.400504Z","commit":"1208","message":"I've written and tested the SignedPubPriLock class, which compresses, encrypts and then signs\nthe data (or verifies, decrypts and uncompresses the data). This is tested in \ntest/SireSec/testsignkeys.py\n\n"},{"author":"chryswoods","date":"2010-02-22T08:47:32.555124Z","commit":"1207","message":"I've written the function used to process data through three consecutive envelopes. It compiles\nand links, but I have yet to test it...\n\n"},{"author":"chryswoods","date":"2010-02-21T17:24:24.505329Z","commit":"1206","message":"I've fixed SignatureLock so that it now works (it can sign and verify using PublicKey and PrivateKey).\n\nI've also updated Lock so that it can encrypt/sign and decrypt/verify files.\n\nThe next (last step!) is to tie this together to create a full signing lock which \ncompresses, encrypts and then signs data. This will be used in SireCluster to allow\nall messages to be compressed, encrypted and signed. This will prevent eavesdropping,\nand will allow each node to verify the owner of a workpacket and the integrity of that\nworkpacket.\n\n"},{"author":"chryswoods","date":"2010-02-18T18:08:01.110199Z","commit":"1205","message":"I've added a lock that can sign and verify the data (SignatureLock). I'll change\nthe API so that it is more less like a lock and more than a signing device\n\n"},{"author":"chryswoods","date":"2010-02-17T16:54:46.310665Z","commit":"1204","message":"I've moved the private key data so that it is not held directly in the private\nkey object, and have fully implemented the thread-locality (and have filled\nin the full API)\n\n"},{"author":"chryswoods","date":"2010-02-17T14:14:19.499033Z","commit":"1203","message":"I've got the code working that seperates the storage of public keys from private keys,\nand that can print the public key (and stream it). This is all demonstrated / tested\nin test/SireSec/testkeys.py\n\n"},{"author":"chryswoods","date":"2010-02-15T18:11:33.173302Z","commit":"1202","message":"I've updated the enveloping code so that the data is compressed, then encrypted automatically\n(with the output from the encryption envelope piped straight into the input of the\nencryption envelope - and of course vice-versa for decrypting and decompressing).\n\nThe next step is to pipe compression -\u003e encryption -\u003e signing so that I have\nsigned, encrypted and compressed messages.\n\n"},{"author":"chryswoods","date":"2010-02-13T14:26:43.125042Z","commit":"1201","message":"I've got the basics of public/private key cryptography working, and am able to generate \nthe public and private keys, and correctly encrypt and decrypt data (e.g. set\ntest/SireSec/testkeys.py)\n\n"},{"author":"chryswoods","date":"2010-02-12T23:43:56.442561Z","commit":"1200","message":"I'm in the process of writing the public/private key classes.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-02-12T22:11:06.401209Z","commit":"1199","message":"I've got the password-based encryption code working - test/SireSec/testcrypt.py now\nshows basic password-based encryption of some strings\n\n"},{"author":"chryswoods","date":"2010-02-12T17:31:13.325614Z","commit":"1198","message":"I've made progress with the design of SireSec, the module that provides an easy\ninterface to the cryptographic routines provided by cryptlib. SireSec will be\nused by SireCluster as a means of securing messages and authenticating users\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-02-09T23:11:46.167529Z","commit":"1197","message":"I've moved the MPI code that handles messages into a SireCluster::network namespace,\nso that I can have a general messaging layer that sits on top of MPI (and eventually\nalso TCP, shared memory, silo/login etc.). Also, I've decided to build security\nand encryption directly into the message layer, so have added SireSec, which\nwill provide a thin layer around the cryptlib security library. This has been\nadded directly into Sire, built using cmake.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-02-06T18:34:41.663690Z","commit":"1196","message":"I've further debugged SireCluster and have got the code working for reserving multiple resources.\nThe threadnode.py test creates a 50 thread job, running WorkTest in each of thoses threads.\n\n"},{"author":"chryswoods","date":"2010-02-05T22:05:55.176318Z","commit":"1195","message":"I've debugged SireCluster and running multiple jobs at once now seems to work without\nerror. The next step is to integrate this with the MPI code so that I can debug\nMPI-run workpackets.\n\n"},{"author":"chryswoods","date":"2010-02-05T16:56:13.157783Z","commit":"1194","message":"I've been debugging SireCluster (using test/SireCluster/threadnode.py). I've fixed a lot of bugs,\nbut it now segfaults when the workpacket has finished...\n\n"},{"author":"chryswoods","date":"2010-02-04T22:33:21.535902Z","commit":"1193","message":"In celebration of Sire's fifth birthday tomorrow, I'm committing the dump of the original subversion\nrepository used to develop Sire, and a copy of all of the original subversion commit comments.\n\nThe code has come a long way in five years!\n\nThe dump file is bzipped, and can be loaded using the commands;\n\nbunzip2 orig_sire_repository.dump.bz2\nsvnadmin create orig_sire_repository\nsvnadmin load orig_sire_repository \u003c orig_sire_repository.dump\n\nsvn co file:///path/to/orig_sire_repository orig_sire\n\nThis repository contains the development of Sire from the first line of code\n(when Sire was known as ProtoMS3, and was just going to be a re-write of \nProtoMS2 in C++, on 5 Feb 2005), to the version that was first committed into the\ngoogle code repository (version 831 in the original repository, version\n2 for the google repository, code from 25 July 2006, committed to google\non 7 August 2006).\n\nProtoMS3 was renamed to Sire when I moved to Wales, in July 2005, so the\nname is not yet 5 years old. However, tomorrow is the code's official\nbirthday :-)\n\nPut together, across the two repositories, there have been now over\n2020 source code commits, thus averaging 400 per year. Admittedly though,\n831 of those commits were in the 18 months... Since then, I've only managed\nabout 300 commits a year...!\n\n"},{"author":"chryswoods","date":"2010-02-04T22:12:17.734478Z","commit":"1192","message":"I've updated sire_python to work with Siren and the new SireCluster. Surprisingly, it worked\nfirst time ;-)\n\n"},{"author":"chryswoods","date":"2010-02-03T22:44:28.559772Z","commit":"1191","message":"I'm debugging the new SireCluster routines. I've also seen that typedef super is much cleaner\nthan my (admittedly over-engineered) super() functions, so I've switched the code.\n\nCode compiles, links, but doesn't work properly.\n\n"},{"author":"chryswoods","date":"2010-02-03T14:09:41.898478Z","commit":"1190","message":"I've fixed bugs in the restraint code - now it is possible to run simulations using\ndouble distance restraints that are controlled using lambda (i.e. I can run enzyme\nreaction simulations using umbrella sampling!)\n\n"},{"author":"chryswoods","date":"2010-02-02T22:46:24.388611Z","commit":"1189","message":"I've filled in the missing functions of SireCluster and have got it linked. I've also\nsorted out the Python wrappers and am now in the process or testing them all.\n\nCode compiles, links and runs, though Sire.Cluster does not work as I would hope...\n\n"},{"author":"chryswoods","date":"2010-02-02T16:48:57.240056Z","commit":"1188","message":"Continuing to port the new SireCluster code. Everything compiles (with MPI disabled), but\nthere are now link errors from missing functions.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-02-01T13:16:44.967525Z","commit":"1187","message":"I've fixed a small bug in the implementation of the perturbation constraint.\n\n"},{"author":"chryswoods","date":"2010-01-31T22:55:36.744241Z","commit":"1186","message":"I'm continuing to make progress with the re-written SireCluster. I've added a Thread\nclass to Siren to provide a wrapper around QThread that automatically handles\nthread registration, naming and uses /dev/urandom to seed qRand (necessary\nfor truly unique QUuids!)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-01-29T17:47:05.544021Z","commit":"1185","message":"I've fully implemented Node, Nodes, Promise, Promises and the code necessary to automatically\nsubsume the local thread if it is idle waiting for a job to complete (so thus removing\nthe need for the 'borrowThisThread' hack!)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-01-29T12:01:45.331991Z","commit":"1184","message":"I'm making progress implementing the new design for SireCluster\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-01-28T20:50:27.943018Z","commit":"1183","message":"I'm finalising the design of SireCluster. Node and Nodes are now handles for WorkQueue objects.\nA WorkQueue provides the job scheduler that is used to schedule WorkPacket jobs on the \nvarious Backend resources that are communicated to via the Frontend objects.\n\ne.g. Promise result = Node.submit(workpacket);\n\n     Node::submit(workpacket) -\u003e WorkQueue::submit(workpacket)\n\n     WorkQueue has a collection of DormatFrontends, that represent\n     free resources. WorkQueue schedules the WorkPacket to one\n     of these resources, in doing so activating the DormantFrontend\n     creating the ActiveFrontend.\n\n     The WorkPacket is passed to ActiveFrontend, which is used to\n     communicate the WorkPacket to ActiveBackend, which is the handle\n     for the backend resource that actually processes and runs the job.\n\n     (phew!)\n\nFrom the users point of view, they now just create a load of workpackets, \nand then do;\n\npromises = nodes.submit(workpackets)\n\npromises.wait()\n\nfor promise in promises:\n    result = promise.result() # raises exception if result is error\n\n    ... do stuff with the result\n    \n\nThe only final part of the design to clean up is how to control whether or\nnot one WorkPacket can resubmit itself - e.g. providing dependencies\nbetween workpackets so that replica exchange moves can be made\nwithout going back to the user.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-01-27T21:46:43.681853Z","commit":"1182","message":"I've added a test_mpi.cpp source file that should help new users debug problems with\ntheir MPI setup, and easily discover if their MPI installation can support Sire.\n\n"},{"author":"chryswoods","date":"2010-01-27T16:16:43.612456Z","commit":"1181","message":"**MERGE**\n\nI've merged in the latest changes on the devel branch into users/chryswoods via the command;\n\nsvn merge -r 1147:1180 ../../devel/\n\nWith this merge I am also committing some of the work I've done on Cluster.\n\n"},{"author":"chryswoods","date":"2010-01-27T12:35:41.067959Z","commit":"1180","message":"**IMPORTANT BUGFIX**\n\nI've found a bug in the updating of LJ parameters that can affect the validity\nof single topology simulations. This has not affected any production simulations\nrun so far (as far as I am aware - to test run test/SireMove/test_for_leaks.py\non your .s3 restart file, and it will print errors if you are affected by \nthis bug). I've fixed the offending code. I strongly encourage you to update\nto this version if you are planning to run single topology simulations.\n\n"},{"author":"chryswoods","date":"2010-01-26T13:16:10.113053Z","commit":"1179","message":"I've updated the CMakeLists files so that the Fortran/C++ interface detection works in \ncmake 2.8. I've made sure that the new code still works with cmake 2.6\n\n"},{"author":"chryswoods","date":"2010-01-25T16:58:55.422400Z","commit":"1178","message":"I've started work on Cluster, which required that I write a Semaphore class.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-01-24T14:50:55.310257Z","commit":"1177","message":"I've finished writing the new ResourceManager class. This replaces the code that performed\nsimilar functionality in MPICluster, though is more flexible and better able to cope\nwith different types of backends (e.g. thread or GPU backends) which can appear and\ndisappear dynamically during the lifetime of the program.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-01-24T12:41:29.375262Z","commit":"1176","message":"I've moved all of the ported code over to use Mutex and WaitCondition, so that it can be interupted\nby ending for-ages.\n\nCode is broken\n\n"}]}