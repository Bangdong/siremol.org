{"Page":14,"TotalPages":28,"commits":[{"author":"chryswoods","date":"2012-01-18T15:55:21.056183Z","commit":"1475","message":"Adding in the python wrappers for the SireSim library.\n\nCode compiles, links and runs without problem\n\n"},{"author":"chryswoods","date":"2012-01-18T15:54:32.137578Z","commit":"1474","message":"I've added the \"SireSim\" library, which will provide high-level classes for the running \nof different types of simulation. This will make Sire easier to use as it will provide\nan easy interface to Sire that by-passes the complex Python setup.\n\nCode compiles, links and runs as expected\n\n"},{"author":"chryswoods","date":"2012-01-17T15:32:51.597752Z","commit":"1473","message":"Committing the associated python wrappers with the last commit\n\nCode compiles, links and runs as expected\n\n"},{"author":"chryswoods","date":"2012-01-17T15:32:27.825120Z","commit":"1472","message":"I've adapted EnergyMonitor so that it can use the molecules from a passed MoleculeView,\nor from an IDAssigner. I've also added an EnergyMonitor test script to debug and check\nthat the monitor is working :-)\n\nCode compiles, links and runs as expected\n\n"},{"author":"chryswoods","date":"2012-01-16T16:22:03.230787Z","commit":"1471","message":"I've added in the python wrappers for the new IDAssigner class.\n\nCode compiles, links and runs as expected\n\n"},{"author":"chryswoods","date":"2012-01-16T16:21:23.790358Z","commit":"1470","message":"I've added an \"IDAssigner\" class that can be used to find which molecules are close to \nidentity points, without actually updating those molecules. I will update EnergyMonitor\nto use the IDAssigner class, so that it can use the concept of identity points without\nneeding to apply the identity constraint.\n\nCode is working, compiles, and the idassigner.py test performs as expected\n\n"},{"author":"julienmich@gmail.com","date":"2012-01-12T15:44:48.890794Z","commit":"1469","message":"Updated CMakelists to remove some files not currently under version control. Modified other objects to complete the implementation of energytable \n"},{"author":"chryswoods","date":"2012-01-05T11:47:20.380609Z","commit":"1468","message":"Fixed a small compile bug on linux (gcc seems to get confused by the repeated typedef of\nPairMatrix\u003cdouble\u003e, leading to a lot of error output!)\n\nCode compiles, works and appears to run as expected\n\n"},{"author":"chryswoods","date":"2012-01-05T11:35:09.168469Z","commit":"1467","message":"I've fixed a bug in EnergyMonitor that meant that it was not saving and restoring the averaged\nenergies correctly\n\nCode compiles, links and runs as expected\n\n"},{"author":"chryswoods","date":"2012-01-04T12:30:00.323807Z","commit":"1466","message":"Fixed the broken EnergyMonitor test case!! :-)\n\n"},{"author":"chryswoods","date":"2012-01-04T12:29:36.446036Z","commit":"1465","message":"Here are the completed python wrappers for the working EnergyMonitor class :-)\n\nCode compiles, links and runs as expected\n\n"},{"author":"chryswoods","date":"2012-01-04T12:26:25.446552Z","commit":"1464","message":"I've got the EnergyMonitor code working, and can now calculate and accumulate coulomb\nand LJ energies of molecule views :-)\n\nCode compiles, links and runs as expected.\n\n"},{"author":"chryswoods","date":"2012-01-03T15:31:25.892952Z","commit":"1463","message":"I've upgraded Py++ to version 1.0 on my macbook (lion), and have regenerated all of the\npython wrappers. I have also added the wrappers for EnergyMonitor.\n\nCode compiles, links and runs as expected\n\n"},{"author":"chryswoods","date":"2012-01-03T15:29:42.997090Z","commit":"1462","message":"I've added in the start of the EnergyMonitor class that will be used to monitor\nligand-protein and ligand-water interactions during a binding simulation. I have\nalso fixed a bug in the compilation of the Py++ 1.0 python wrappers.\n\nCode compiles, links and runs as expected\n\n"},{"author":"chryswoods","date":"2012-01-03T10:54:09.770603Z","commit":"1461","message":"I'm committing the python wrappers that accompany the last devel branch of Sire.\n\nThe code compiles, links and runs without problems\n\n"},{"author":"chryswoods","date":"2012-01-03T10:53:30.763436Z","commit":"1460","message":"I'm committing the work performed to create the fast InterCLJFF forcefield. The forcefield is still\nbuggy, but is a bit faster than InterCLJFF. This work is likely to influence the design of the\nforcefields in Acqire (and future Sire), but it is unlikely that FastInterCLJFF will replace\nInterCLJFF in this version of Sire. You should not use FastInterCLJFF in your code.\n\nCode compiles, links and runs without problems\n\n"},{"author":"chryswoods","date":"2011-12-01T15:39:06.381511Z","commit":"1459","message":"I've added in a monitor so that the progress, speed, energy usage and health of a workpacket can\nbe recorded during computation, and am integrating this together with the WorkQueue so that \na WorkPacket can be processed in chunks.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-11-29T17:59:08.607595Z","commit":"1458","message":"A small amount of code to fix a big bug! I implemented the parallel version of TestPacket\nand came across a weird bug as the code crashed at the end of processing. It ended up\nbeing caused by TestPacket not properly returning the next object at the end of processing.\n\nThis has revealed that I have a problem in the design due to the WorkQueue not being\nable to detect when a WorkPacket has finished, or is still in need of processing. \nI think that the answer is that I need to say that the WorkQueue keeps running \na WorkPacket while a packet is being returned. I must then separate out the \nstatistics / health score associated with a job run from the actual run, so that it\ncan be returned separately to the queue.\n\nCode compiles, links and sirentest runs as expected.\n\n"},{"author":"chryswoods","date":"2011-11-28T09:40:23.599594Z","commit":"1457","message":"I've added some unit tests to TestReport so that I can demonstrate the concept during\nmy meeting with the SSI today\n\n"},{"author":"chryswoods","date":"2011-11-24T17:39:30.252970Z","commit":"1456","message":"I've got the whole code to compile and link, and can now successfully submit workpackets\nfor background computation :-)\n\nCode is working, and sirentest is behaving as expected\n\n"},{"author":"chryswoods","date":"2011-11-24T15:01:25.176141Z","commit":"1455","message":"Been working on the Promise so that it can handle partial results, and will \"reduce\"\nthings correctly :-)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-11-24T12:42:34.400530Z","commit":"1454","message":"I've added the code to allow multiple threads (sub-threads) to run as part of the same thread group,\nand have linked this to WorkQueue. I've written the code, using boost::function and boost::bind\nto allow arbitrary functions to be run, which is now linked to WorkQueue to allow the single-threaded\nor multi-threaded processing of WorkPackets (together with reporting of results). I've added in the \nconcepts of map/reduce to complement the concepts of work queue, workers on a shared workspace, and\nworkers sharing messages. This should allow most parallelisation schemes to be addressed using\nthe same, familiar API.\n\nI have also added the header files for the header-only libraries I use in boost into the Siren\ndirectory. This removes one dependency, which should aid porting and installation...\n\nCode is broken - have to go to lunch!\n\n"},{"author":"chryswoods","date":"2011-11-22T18:02:14.071975Z","commit":"1453","message":"I've made a lot of progress implementing the WorkQueue and supporting classes. The WorkQueue\nmanages virtual resources, while the actual WorkPackets are processed on real threads, which\nare moved between a paused and non-paused state as they are moved from being active to\ninactive (or background to foreground, blocked or not blocked etc.)\n\nCode is broken - need to go get some dinner :-)\n\n"},{"author":"chryswoods","date":"2011-11-22T12:02:03.924581Z","commit":"1452","message":"I'm filling in the code that schedules WorkPackets in the background thread.\n\nCode is broken (I've got to go to lunch!)\n\n"},{"author":"julienmich@gmail.com","date":"2011-11-21T17:51:30.591375Z","commit":"1451","message":"Added amber parameters, modified forcefields to have a pure virtual energy() function. Create energytable (does not work yet)\n"},{"author":"chryswoods","date":"2011-11-21T17:50:56.212323Z","commit":"1450","message":"I've switched Thread over to using boost::function and boost::bind so that I can\nstart up background threads to run arbitrary functions (with arguments ;-)). I've\nused this to start up the background thread that manages the WorkQueue.\n\nCode compiles, links and runs, and sirentest behaves as expected.\n\n"},{"author":"chryswoods","date":"2011-11-21T15:37:24.406909Z","commit":"1449","message":"I found a crash in for_ages that was caused by a Block pointer being set to null without\nupdating the global registry. To prevent these crashes in the future, I have rewritten\nthe block classes so that they hold a explicitly shared pointer to the block, so that\nfor_ages can hold a weak pointer to the block (the new BlockRef class). This has made\nthe code a little more bulletproof ;-)\n\nCode compiles, links and runs, and sirentest runs as expected.\n\n"},{"author":"chryswoods","date":"2011-11-18T18:48:04.332001Z","commit":"1448","message":"I think that I have fixed all of the visible problems with static data, deadlocks etc.\nthat I saw in sirentest. It now runs correctly on my macbook and seems pretty bulletproof.\nThere are still some issues, e.g. in WaitCondition it is possible that that signal\nto end for_ages could be sent just before the WaitCondition sleeps, such that it never\ngets the signal. I've \"fixed\" this by making sure that several signals are sent during\nprogram shutdown, but I think that for_ages::end() should be marked as being something\nthat should be sent multiple times, and should not be used for general thread control...\n(after all, for_ages should only come along infrequently...)\n\nCode compiles, links and sirentest performs as expected :-)\n\n\n"},{"author":"chryswoods","date":"2011-11-17T17:59:58.396255Z","commit":"1447","message":"I've got the background threads working and have done a lot of debugging of the code \n(the background threads started in TestPacket::test() all seem to work correctly).\n\nRan into a problem that the order of static deletion is killing the code at shutdown.\nI've added a Static class to handle the registration of static data, and will now have\nto go through the code and switch all global data over to using it...\n\nCode compiles, links and runs\nsirentest runs without errors except that it occasionally segfaults at exit...\n\n"},{"author":"chryswoods","date":"2011-11-16T16:59:35.449853Z","commit":"1446","message":"I've added in the actual threading code, filled in most of the functions of WorkQueue,\nWorkPacket, WorkSpace, Promise and WorkQueueItem and have written Thread and ThreadPool.\n\nThe code now all compiles and links, and I am beginning to test the threading code\nin TestPacket::test - at the moment, I am getting a crash when sirentest exits.\n\n"},{"author":"chryswoods","date":"2011-11-15T19:06:29.031625Z","commit":"1445","message":"I'm continuing to sketch out the relationships between;\n\nWorkQueue     - holds the queue of jobs, represented by\nWorkQueueItem - the actual jobs listed in the queue, scheduled by\nWorkScheduler - the virtual base class of schedulers that schedules jobs,\nWorkPacket    - the actual job to run\nPromise       - the handle to the job, and space for the result\nWorkSpace     - the way that parallel jobs, interactive jobs and co-located jobs\n                can communicate\n\nLots of thinking and design work today :-)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-11-15T12:58:05.558662Z","commit":"1444","message":"I've begun sketching out the classes needed to implement the WorkQueue. I have decided that\nusers should never handle threads directly, but should instead treat everythign like\na cluster queue\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-11-15T11:29:22.153726Z","commit":"1443","message":"I've realised that the Thread classes should not be publicly visible, and that users\nshould just interact with a WorkQueue. I am going to refactor this part of the code,\nbut will commit the old version just in case...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-11-14T12:51:58.493550Z","commit":"1442","message":"I've added in the Promise class (and support functions) so that the results of future calculations\ncan be handled. There is a close overlap between Promise and Thread, with PromiseData and ThreadData\nneeding to be aware of, and interact with each other.\n\nCode is broken (off to lunch!)\n\n"},{"author":"chryswoods","date":"2011-11-14T10:39:51.074059Z","commit":"1441","message":"I've added the code used to implement the SystemSemaphore (using a background thread to\nhandle the actual communication with the semaphore). This now needs me to finish the \nthreading code, so that the SysSemWorkPacket can be run...!\n\nCode is working :-)\n\n"},{"author":"chryswoods","date":"2011-11-04T17:09:44.995225Z","commit":"1440","message":"I've finished adapting all of the main block classes so that they can be\ninterupted safely by for_ages. I am now working on SystemSemaphore, which\nI am expanding to provided non-blocking acquire and tryAcquire, and also\nthe ability to acquire multiple resources in one go. This class is providing\nan interesting example of using WorkPacket and WorkSpace as I am setting it\nup to use a background thread that runs a WorkPacket, and communicate with\nthat thread via the WorkSpace\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-11-04T12:04:35.439959Z","commit":"1439","message":"I've filled in the missing functions and cleaned the API of Block a little to \nmake the names of the functions more obvious. Code now compiles and links. I need\nto add the break code to Mutex, ReadWriteLock, Semaphore and SystemSemaphore, then\nadd some tests :-)\n\nCode is working\n\n"},{"author":"chryswoods","date":"2011-11-04T10:37:38.496850Z","commit":"1438","message":"I've filled in broken code so that it now all compiles. I've added the interfaces to Block\nso that the block classes can tell for_ages when they are about to sleep, when they are\nwoken up, and to check if they should keep sleeping.\n\nCode compiles but does not link\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-11-03T17:31:51.230679Z","commit":"1437","message":"I've (finally!) finished working on for_ages and have moved all of the thread-blocking\nprimitives over to using Siren::Block as the virtual base class. Now to check each one\nso that they can be properly interupted when for_ages::end() is called...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-11-02T12:09:48.012164Z","commit":"1436","message":"Still working on for_ages... But it is coming together as I have realised that\nall blocking types (Semaphore, Mutex, Lock, WaitCondition) should be abstracted\ninto a Block base class.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-11-01T16:38:30.567243Z","commit":"1435","message":"I'm continuing to work on for_ages... Requires a lot of thought to make sure that\nthe threads will all work the right way...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-10-31T17:25:11.712438Z","commit":"1434","message":"I've continued to work on the threading classes and have changed for_ages and WaitCondition\nso that WaitCondition is more tightly integrated, e.g. it doesn't need to poll the for_ages\nstate every 5 seconds, and is now woken up when the end of for_ages is signalled. This should\nstop threads waking and sleeping all the time, which would hurt performance.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-10-31T12:02:23.446947Z","commit":"1433","message":"I'm working on the CPUThread and for_ages classes.\n\nCode is broken (I'm going to lunch!)\n\n"},{"author":"chryswoods","date":"2011-10-26T15:54:49.501260Z","commit":"1432","message":"I've filled in the WorkSpace class and am sorting out how inter-process communication\nwill work. I have decided to create the skeleton of the messaging scheme, so that \nthis can be extended in Acquire.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-10-26T13:03:56.507399Z","commit":"1431","message":"I've fixed a bug in StringList (incorrect comparison function) and have added in the missing\ncode in WorkPacket.\n\nCode compiles and works, with sirentest reporting everything is ok :-)\n\n"},{"author":"chryswoods","date":"2011-10-26T11:05:44.960153Z","commit":"1430","message":"I've continued to work on the WorkPacket class. It is filled in, and I am now in the\nprocess of cleaning up the testing infrastructure so that writing unit tests is \nas painless as possible (if it is ever painless...)\n\nCode is broken and I am off to lunch\n\n"},{"author":"chryswoods","date":"2011-10-26T09:45:09.444504Z","commit":"1429","message":"I'm now working on the Siren threading classes, and have decided to move WorkPacket\ninto Siren from Acquire. This is because I am going to unite the intra-process \nthreading model with the inter-process Acquire model, and use WorkPacket as a way\nof parallelising the code at all levels\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-10-24T12:12:56.361000Z","commit":"1428","message":"I've sorted out the unit testing infrastructure and reporting code. It is now easy to \nwrite class-level unit tests and get a full report of those tests. The report is held\nas a TestReport object, which can be queried, and also streamed / saved, thus simplifying\nthe process of writing the infrastructure that will support the automatic running and\nreporting of these tests.\n\nCode is working :-)\n\n"},{"author":"chryswoods","date":"2011-10-20T11:11:29.914774Z","commit":"1427","message":"I've been working on filling in the TestReport classes so that I can run unit tests\nand get the results ;-). In doing this, I've ported over the toString functions\nfrom Sire/Siren to this standalone Siren\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-10-19T15:53:39.672534Z","commit":"1426","message":"I've got the code compiling and working, with the sirentest executable now available to run\nautomatic unit tests of all of the classes :-)\n\nI've fixed bugs in the registration of classes (including a weird bug in which the \nQAtomicPointer that held the class registry was reset to zero between static initialisation\nand running the main function - weird! I worked around it by removing the thread-safe\ncode used for static initialisation).\n\nCode is finally working :-)\n\n"},{"author":"chryswoods","date":"2011-10-19T11:02:23.364742Z","commit":"1425","message":"I've added the editor classes and defined how the Interface system will work. I've filled\nin missing functionality and now everything compiles and links. The next step is to\nadd the \"sirentest\" executable so that I can start testing and debugging the code.\n\nCode compiles and links, but is unlikely to work\n\n"},{"author":"chryswoods","date":"2011-10-13T16:03:59.043787Z","commit":"1424","message":"I've made more progress with the design of the mutable classes and interfaces.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-10-13T11:09:22.173559Z","commit":"1423","message":"I'm sorting out the way of declaring interfaces to classes, and have added in String and\nStringList caches of the class names and interfaces to ensure speedy lookup\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-10-12T16:01:47.154974Z","commit":"1422","message":"I've added some time and date classes, and the backtrace code, so that I can have\nfully detailed and featured exception classes. Most of the code now compiles and \nlinks - it is very nearly there :-)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-10-12T11:31:25.260670Z","commit":"1421","message":"I've filled in all of StringList and the exception classes and am now looking towards\nthe threading classes.\n\nCode does not compile. Code is broken\n\n"},{"author":"chryswoods","date":"2011-10-07T16:55:39.282238Z","commit":"1420","message":"I've filled in Siren::ByteArray and have sorted out the type-safe copying and\ncomparison functions (so that object_a == object_b will always perform consistently,\neven if object_a inherits from object_b, e.g. \n(object_a == object_b) == (object_b == object_a) for all cases.\n\nCode compiles but there are link errors from missing functions\n \n"},{"author":"chryswoods","date":"2011-10-07T10:30:35.246922Z","commit":"1419","message":"I've finished implementing all of the functions of Siren::String. This now provides \na unicode, translatable string class, which follows the Siren::Object rules\n(const object), and which ensures that the program only stores one copy\nof each unique string, thus minimising memory usage / improving string\ncomparison times, and reducing the size of streamed data files.\n\nSiren::String compiles without error, but the rest of the code is broken :-(\n\n"},{"author":"chryswoods","date":"2011-10-06T15:37:39.027051Z","commit":"1418","message":"I've made progress filling in the functions of Siren::String. I have decided to \nuse atomic reference counting to ensure that only one copy of a string is held\nin memory at any one time. This will make creating and deleting strings a little\nslow, but will speed up string comparison, and significantly reduce memory\nusage for cases where strings are repeated (e.g. names of atoms)\n\n"},{"author":"chryswoods","date":"2011-10-06T10:57:43.183151Z","commit":"1417","message":"I've filled in sufficient code for everything to compile, although a lot of functions\nare missing, and a lot remains to be written.\n\nCode is broken - link errors because of missing functions\n\n"},{"author":"chryswoods","date":"2011-10-06T08:57:24.412923Z","commit":"1416","message":"Sorting out the \"detail\" directory....\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-10-06T08:40:45.602575Z","commit":"1415","message":"Finally got internet installed at home, so can commit the last weeks code. I have been working\nthrough Siren and copying across / rewriting the code necessary to make Siren into a\nstandalone library. I've added in a \"Number\" class, which represents generic numbers,\nand a \"String\" class, which is a wrapper around QString, to represent generic strings.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2011-09-29T16:17:57.720376Z","commit":"1414","message":"Making good progress porting across the Sire/Siren classes into Siren. I've simplified\nand consolidated the design considerably, and now have Siren::Object as the global\nbase class, and Siren::Obj as the general, weakly-typed reference class. I've\ndeliberately designed Siren so that novice and inexperienced C++ developers should\nfind it easy to understand and create Siren classes, and the burden of adding in\nboilerplate code has been removed to a couple of macros that are easy to include.\n\nCode does not compile or work, but it is getting there :-)\n\n"},{"author":"chryswoods","date":"2011-09-28T16:11:39.118683Z","commit":"1413","message":"Committing the initial source code developed during the software project. Siren\nhas been extracted from Sire and the dependencies on third party code (e.g. Qt4)\nare being reduced / removed. I am also taking the opportunity on simplifying\nthe design of Siren, and of implementing the type metadata system using\nmacros rather than complicated template functions (much simpler and more\nlight-weight).\n\nCode does not compile, link or work, this being a first commit and all... ;-)\n\n"},{"author":"chryswoods","date":"2011-09-28T16:07:11.276593Z","commit":"1412","message":"Created a new directory to hold the code that is being developed as part\nof the EPSRC-funded software development project. This is a sandpit\nin which the three stages of the Aspire and Acquire projects will\nbe developed, and in which the rewritten parts of Sire (e.g. Siren)\nwill be copied/extended.\n\n"},{"author":"julienmich@gmail.com","date":"2011-06-04T00:59:33.065404Z","commit":"1411","message":"Commit of the wrappers. \n"},{"author":"julienmich@gmail.com","date":"2011-05-27T16:27:43.633945Z","commit":"1410","message":"Changed writing/reading of perturbations files to better deal with the potential of internal dofs. the python setup scripts have been updated accordingly. \n"},{"author":"julienmich@gmail.com","date":"2011-05-11T16:09:51.554965Z","commit":"1409","message":"There was a problem in InternalMoveSingle, synched_molgroup was never updated and thus InternalMoveSingle would \nfail to synchronize the correct perturbed solutes after for instance, two replicas were swapped.\n\n"},{"author":"julienmich","date":"2011-04-08T03:25:44.988127Z","commit":"1408","message":"Fixed a bug in InternalMoveSingle. Calling system.update() twice with different \nsets of  molecules before evaluating the energy skips evaluation of the IntraGroupCLJ force field\nenergies (and maybe others, tests so far done in the gas phase with a single molecule)\n\n"},{"author":"julienmich","date":"2011-04-07T20:01:43.523987Z","commit":"1407","message":"IntraSoftCLJ potential seems to work, yeahhh \n\n"},{"author":"julienmich","date":"2011-04-07T01:18:14.476177Z","commit":"1406","message":"Working on a IntraSoftCLJPotential and associated Intra and IntraGroup force fields. \n\nCode is broken.\n\n"},{"author":"julienmich","date":"2011-04-05T22:10:26.095969Z","commit":"1405","message":"Fixed a few bugs in the parsing of dihedral potentials. Code is flaky\n"},{"author":"julienmich","date":"2011-04-05T03:29:29.572247Z","commit":"1404","message":"Small mods to perturbations library to load initial and final amber atom types\n"},{"author":"julienmich","date":"2011-03-30T23:48:44.536716Z","commit":"1403","message":"Created a specialised internalmove class to synch the coordinates of the perturbed solutes. \nIt should eventually be possible to use internalmove and have a constraint to update the perturbed \nsolutes coordinates after the reference solute has moved\n"},{"author":"julienmich@gmail.com","date":"2011-03-25T16:50:59.822738Z","commit":"1402","message":"Support for impropers. Now debugging on various test cases\n"},{"author":"julienmich","date":"2011-03-25T01:02:38.578043Z","commit":"1401","message":"Can now perturb internals. Implementation needs to be improved and tested on many solutes.\n"},{"author":"julienmich@gmail.com","date":"2011-03-24T17:16:03.017589Z","commit":"1400","message":"Progressing with perturbationslibrary. Can now perturb charges and LJ terms. Started first version of the code to deal with internals \n"},{"author":"chryswoods","date":"2011-03-24T05:22:09.690274Z","commit":"1399","message":"Fixed a compile bug caused by a missing header file\n\n"},{"author":"julienmich","date":"2011-03-23T23:43:48.761307Z","commit":"1398","message":"More work on perturbations library. Stuck on a compilation error \n\nIn file included from /home/julien/software/devel/sire/corelib/src/libs/sireglobal.h:14,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireError/exception.h:39,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireError/version_error.h:32,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireStream/version_error.h:32,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireStream/datastream.h:38,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireBase/sharedpolypointer.hpp:32,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireBase/property.h:32,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireIO/iobase.h:35,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireIO/perturbationslibrary.h:32,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireIO/perturbationslibrary.cpp:32:\n/usr/include/qt4/QtCore/qmetatype.h: In static member function ‘static int QMetaTypeId2\u003cT\u003e::qt_metatype_id() [with T = SireMol::AtomProperty\u003cSireUnits::Dimension::PhysUnit\u003c0, 0, 0, 1, 0, 0, 0\u003e \u003e]’:\n/usr/include/qt4/QtCore/qmetatype.h:210:   instantiated from ‘int qMetaTypeId(T*) [with T = SireMol::AtomProperty\u003cSireUnits::Dimension::PhysUnit\u003c0, 0, 0, 1, 0, 0, 0\u003e \u003e]’\n/home/julien/software/devel/sire/corelib/src/libs/SireMol/atomproperty.hpp:368:   instantiated from ‘static const char* SireMol::AtomProperty\u003cT\u003e::typeName() [with T = SireUnits::Dimension::PhysUnit\u003c0, 0, 0, 1, 0, 0, 0\u003e]’\n/home/julien/software/devel/sire/corelib/src/libs/SireBase/property.h:516:   instantiated from ‘const T\u0026 SireBase::Property::asA() const [with T = SireMol::AtomProperty\u003cSireUnits::Dimension::PhysUnit\u003c0, 0, 0, 1, 0, 0, 0\u003e \u003e]’\n/home/julien/software/devel/sire/corelib/src/libs/SireMol/moleculeview.h:291:   instantiated from ‘static void SireMol::MoleculeView::setProperty(SireMol::MoleculeData\u0026, const QString\u0026, const Index\u0026, const T\u0026) [with Index = SireMol::CGAtomIdx, PropType = SireMol::AtomProperty\u003cSireUnits::Dimension::PhysUnit\u003c0, 0, 0, 1, 0, 0, 0\u003e \u003e, T = SireUnits::Dimension::PhysUnit\u003c0, 0, 0, 1, 0, 0, 0\u003e]’\n/home/julien/software/devel/sire/corelib/src/libs/SireMol/atom.h:245:   instantiated from ‘void SireMol::Atom::setProperty(const QString\u0026, const T\u0026) [with T = SireUnits::Dimension::PhysUnit\u003c0, 0, 0, 1, 0, 0, 0\u003e]’\n/home/julien/software/devel/sire/corelib/src/libs/SireMol/editor.hpp:186:   instantiated from ‘Parent\u0026 SireMol::Editor\u003cParent, T\u003e::setProperty(const SireBase::PropertyName\u0026, const V\u0026) [with V = SireUnits::Dimension::Charge, Parent = SireMol::AtomEditor, T = SireMol::Atom]’\n/home/julien/software/devel/sire/corelib/src/libs/SireIO/perturbationslibrary.cpp:555:   instantiated from here\n/usr/include/qt4/QtCore/qmetatype.h:200: error: ‘qt_metatype_id’ is not a member of ‘QMetaTypeId\u003cSireMol::AtomProperty\u003cSireUnits::Dimension::PhysUnit\u003c0, 0, 0, 1, 0, 0, 0\u003e \u003e \u003e’\n\n\n"},{"author":"julienmich","date":"2011-03-23T12:09:45.489618Z","commit":"1397","message":"Code works again, but only parses charges \u0026 LJ parameters. Must add error checking. \n\n"},{"author":"julienmich","date":"2011-03-23T11:40:43.304812Z","commit":"1396","message":"More work on perturbations library. Code is broken\n\n"},{"author":"julienmich","date":"2011-03-23T00:00:39.326760Z","commit":"1395","message":"commit of recent wrappers\n"},{"author":"julienmich","date":"2011-03-22T23:56:23.146964Z","commit":"1394","message":"Initial work on a perturbations library class\n"},{"author":"julienmich","date":"2011-02-11T23:15:02.795547Z","commit":"1393","message":"Bugfix - the scale factor of the CHARMMSwitchingfunction was incorrectly evaluated, resulting \nin wrong energies \n\n"},{"author":"julienmich@gmail.com","date":"2011-02-10T20:02:46.173152Z","commit":"1392","message":"Implementing velocity rescaling in velocity verlet for NVT simulations. Code does not really work yet\n\n"},{"author":"chryswoods","date":"2010-12-07T23:14:01.334542Z","commit":"1391","message":"Committing a bugfix in SireBase::Process that prevents a hang when the job\nis killed if the child processes don't die. Now, if the children don't die,\nthen a warning is printed to prompt the user to check their status.\n\n"},{"author":"chryswoods","date":"2010-12-01T12:45:02.663989Z","commit":"1390","message":"I've benchmarked the new fast forcefield code (just for total energy calculations). The\nnew code is about 50% to 500% faster :-). It gives the right answer for the infinite\ncartesian space, but is currently wrong for the periodic box. The trick to getting\nthe speed seems to have been putting the space.beyond() tests in the main loop over\npatches and CutGroups, and thus not calling the \"addEnergy\" function loads of times.\nAlso, using space.beyond(cutoff, cutgroup.aaBox(), patch.aaBox()) seems to make a \nbig affect. The next step now is to enhance SwitchingFunction so that it has both\na nearCutoff() and a farCutoff(), and to adapt space so that it has a \"before\" function\nas well as the \"beyond\" function (both of these are so that I can then use switchingfunction\nto implement a multi-resolution forcefield).\n\nCode all seems to work\n\n"},{"author":"chryswoods","date":"2010-11-29T22:52:28.862838Z","commit":"1389","message":"I've made a lot of progress with the fast CLJ forcefield. It is nearly ready for some\nsimple benchmarks (e.g test/speed/water_energy_speed.py), although I forgot that\nI have to implement the code that copies the parameters out of the beads...!\n\nCode compiles and links, and the non-fast forcefield code should work ok.\n\n"},{"author":"chryswoods","date":"2010-11-22T16:05:17.943489Z","commit":"1388","message":"Updated ZMatrix so that it automatically works out the correct order in which to build\natoms, so that dependent atoms are built after the atoms on which they depend.\n\ncorelib/devel code is broken\ncorelib/branches/users/julienmich code is working\n\n"},{"author":"chryswoods","date":"2010-11-22T08:55:25.185055Z","commit":"1387","message":"I've added back the BeadNum and AtomBeads classes, and added some more python wrappers\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-11-21T23:04:14.820523Z","commit":"1386","message":"I've filled in many of the new Bead and Beading classes, and now corelib\ncompiles and links without error. I am compiling the python wrappers now,\nalthough they are likely to have errors, and definitely won't link.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-11-21T17:58:05.844146Z","commit":"1385","message":"I've committed my progress to date with the beading classes. These allow the user\nto specify beads, which may be used for everything from coarse graining through\nrigid body dynamics to specifying how a cutoff should be applied in a forcefield.\n\nThis is a major addition to the code, and is also the model for how the \nCutGroup class will be removed (as Bead will eventually replace CutGroup).\n\nCode is broken (very broken!!!)\n\n"},{"author":"julienmich","date":"2010-11-19T16:55:03.938389Z","commit":"1384","message":"Minor tweak to the amber parse so crd files can be read even if they contain velocities\n"},{"author":"chryswoods","date":"2010-11-16T22:13:41.696923Z","commit":"1383","message":"BUGFIX: Fixed a critical bug in Sire that was causing incorrect energy evaluation.\n\nThe bug is very specific, and does not affect previously published simulations.\nThe bug is in InterGroup**FF, and causes the energy of the ith molecule in group\n0 and the energy of the ith molecule in group 1 to be neglected. As the majority\nof use cases for Sire involve 1 or 2 molecules in group0, and multiple molecules\nin group1, this means that only the energy between the group0 molecules and the \nfirst one or two molecules in group1 are skipped (and these molecules tend to \nbe on the edge of the solvent box, so outside of the cutoff of the molecules \nin group0).\n\nThis bug has been fixed, and it is recommended that you update your code if\nyou are using Sire.\n\n"},{"author":"chryswoods","date":"2010-11-14T21:42:49.479857Z","commit":"1382","message":"I've finished coding the Patch and Patches classes, and have finished and tested\nthe modifications to CoordGroupArray that allow CoordGroups to be added and\nremoved from the array. With these code changes, I can now divide beads between\npatches, repatch, and update the patching, all reasonably efficiently.\nThe next step is to integrate this with FastInterCLJFF, so that it then\nuses domain-decomposition and an efficient memory layout for the \ncoordinates and parameters. This should (hopefully!) significantly\nspeed up the evaluation of the non-bonded energies and forces,\nespecially on systems with interesting memory architectures.\n\n"},{"author":"julienmich","date":"2010-11-12T17:46:05.859811Z","commit":"1381","message":"Changed the parsing of crd files in the amber module because it was sensitive to subtle \ndifferences in the way leap and sander write crd files (whether or not they leave trailing white spaces).\n\nUpdated amber.zmatrices to deal with HID, HIE\n\nUpdated ambersim.py to double check total energies at the end of the simulation\n\n"},{"author":"chryswoods","date":"2010-11-08T21:07:30.905350Z","commit":"1380","message":"I've fixed a bug in the streaming of RigidBodyMC that stopped it from being saved, and\nthen read back in correctly. The error was that I had got the order of reading the\n\"GetPoint\" and \"Sampler\" classes the wrong way around...!\n\nI've fixed this on both the devel and users/julienmich branches, and now Julien's\nbind.py script works correctly.\n\nI'm also committing my continuing work on the patch class (for the fast forcefields)\n\n"},{"author":"chryswoods","date":"2010-11-05T16:19:22.332257Z","commit":"1379","message":"I've merged back the changes from the julienmich branch to devel - the two branches\nare now identical\n\n"},{"author":"chryswoods","date":"2010-11-05T15:58:26.043875Z","commit":"1378","message":"I've updated test/SireIO/ambersim.py so that it includes protein backbone moves\n\n"},{"author":"chryswoods","date":"2010-11-05T12:26:35.894889Z","commit":"1377","message":"I forgot to merge in these changes (the creation of the Sire/Config module!)\n\n"},{"author":"chryswoods","date":"2010-11-04T21:45:39.691164Z","commit":"1376","message":"I've copied back the devel branch (into which I merged Julien's branch) back to\nJulien's branch. This was achieved using the following commands;\n\ncd corelib/branches/users\nsvn rm julienmich\nsvn commit (last commit)\nsvn cp ../devel julienmich\n\ncd ../../../python2/branches/users\nsvn rm julienmich\nsvn commit (same as last commit)\nsvn cp ../devel julienmich\n\nSubversion seems to have done the right thing, and the code compiles and\nruns the examples without problems (e.g. amber.py and ambersim.py).\n\nNote - I am now moving over to using the PROTOMSDIR environmental\nvariable (protomsdir = os.getenv(\"PROTOMSDIR\")) - this will stop\nus conflicting over our chosen location of ProtoMS! :-)\n\nAlso note that I am working on ZMatrixMaker - I am going to rename\nit ZMatrixLibrary, and am rewriting the classes as I like your design,\nand am expanding it into a complete ZMatrix assignment framework.\nI'll merge it into the julienmich branch as soon as it is ready.\n\n"}]}