{"Page":20,"TotalPages":28,"commits":[{"author":"chryswoods","date":"2009-02-17T23:29:47.991300Z","commit":"875","message":"Small change to fix the setting of environmental variables in a molpro job - this allows\nme to set the number of openmp threads in the python script.\n\n"},{"author":"chryswoods","date":"2009-02-17T20:33:45.796320Z","commit":"874","message":"I've realised that these files aren't being auto-generated anymore as SireDB is not exposed...\n\n"},{"author":"chryswoods","date":"2009-02-15T15:03:52.865067Z","commit":"873","message":"I've added support to make AtomProperties compatible with a different molecule (so it \ncan become possible to move atom properties between molecules)\n\n"},{"author":"chryswoods","date":"2009-02-13T16:44:16.283317Z","commit":"872","message":"I've moved the makeCompatibleWith function to _pvt_makeCompatibleWith so that the function\noverloading in the python wrappers works (as, at the moment, I am not seeing the function\nwith the default AtomMatcher)\n\n"},{"author":"chryswoods","date":"2009-02-13T16:12:25.247501Z","commit":"871","message":"I've added some atom matching classes that allow for atoms in one molecule to \nbe matched to atoms in another molecule\n\n"},{"author":"chryswoods","date":"2009-02-13T13:00:24.748456Z","commit":"870","message":"I am in the process of adding support to allow an AtomProperty to be modified so that it \nbecomes compatible with a different molecule. \n\nCode is broken\n\n"},{"author":"chryswoods","date":"2009-02-13T11:43:40.102661Z","commit":"869","message":"I've disabled the automatic packing of a SimStore (and indeed all packing of a SimStore)\nas this was severly slowing down the simulation (as it was being continually packed,\nthen unpacked)\n\n"},{"author":"chryswoods","date":"2009-02-02T17:00:26.604391Z","commit":"868","message":"I've worked out why backtrace wasn't working on my mac - it was because I was compiling using\n-fomit-frame-pointer, which breaks backtrace on mac (but not on linux, interestingly).\n\nI've debugged the code and it can now run a simulation using packed replicas. However, packing\nand unpacking occurs far too often, takes too long and is actually a little annoying.\n\nIn terms of speed, test/SireMove/simulation.py shows that 1000 moves takes 4 seconds (3.9 direct,\n4.2 when submitted via a Node). test/speed/water_energy_speed.py takes 475ms for each of the tests.\n\nSo the main code hasn't slowed down - it is just the handling of large systems that seems\nvery slow (e.g. it takes about 0.5 seconds per move for a 16800 water box - which is almost\ncertainly due to the penalty of copying the waters for each move...). This size box also\ntakes up too much memory (800MB for four replicas, with a 38MB save file, despite the PDB\nfile only taking 4.5MB).\n\n"},{"author":"chryswoods","date":"2009-02-02T14:52:50.009334Z","commit":"867","message":"I've added a WindowComponent constraint class that will be able to use to support FEP using\ndifferent window widths\n\n"},{"author":"chryswoods","date":"2009-02-02T12:18:52.265112Z","commit":"866","message":"I've fixed the deadlock bug in the packing of SimStore - I'd forgot to initialise a Recursive\nmutex in the SimStore copy constructor\n\n"},{"author":"chryswoods","date":"2009-01-25T14:50:24.014826Z","commit":"865","message":"Initial tests indicate that the multi-alpha SoftCLJ forcefield is now working (now that\nI've fixed a load of bugs). Packing of the replicas seems a little slow, and currently\ndeadlocks when it is streamed to a binary datafile...\n\n"},{"author":"chryswoods","date":"2009-01-24T12:52:27.142975Z","commit":"864","message":"I've integrated the new SimStore class into Replica and SimPacket, and have updated RepExMove\nso that it is aware of the packing (essentially it now transfers data around to minimise packing\nand unpacking operations). This all compiles and links (including the python wrappers), but\nnow needs to be tested.\n\n"},{"author":"chryswoods","date":"2009-01-23T13:04:26.654045Z","commit":"863","message":"I've added a SimStore class that will be used to hold the System and Moves used in a simulation\nin an easily packable and unpackable form.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2009-01-22T23:02:52.020174Z","commit":"862","message":"I'm still working out how to keep a packed version of the replicas to stop wasting memory...\n\n"},{"author":"chryswoods","date":"2009-01-22T21:54:01.867624Z","commit":"861","message":"I've fully implemented multiple alpha values in SoftCLJPotential (though it needs to be tested).\nI'm in the process of also allowing Replicas to be packed into compressed binary arrays,\nthereby saving memory (as my replica exchange simulations with 10 protein-ligand replicas\nwere quite memory hungry...)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2009-01-21T16:49:18.069138Z","commit":"860","message":"I've written the code in SoftCLJPotential to calculate the energy of multiple alpha values\nsimultaneously.\n\nCode is still broken\n\n"},{"author":"chryswoods","date":"2009-01-21T12:08:46.384288Z","commit":"859","message":"I'm making progress adding support for multiple alpha values within a single SoftCLJPotential.\nThe aim is to allow a single SoftCLJPotential to calculate multiple alpha values at once,\nthereby removing the need for lots of duplicated forcefields for different values of\nalpha (for the same molecules). Duplicating forcefields is slow and very memory hungry\nfor large protein systems.\n\n"},{"author":"chryswoods","date":"2009-01-09T11:34:40.877652Z","commit":"858","message":"I've added (null) support for lattice charges to the NullQM QMProgram\n\n"},{"author":"chryswoods","date":"2009-01-05T14:08:06.923310Z","commit":"857","message":"I've changed the soft-core potential to use the Zacharias and McCammon form used by Julien\nin ProtoMS. I've compared energies against ProtoMS and get the same energies (to several d.p.)\nfor a pair of neuraminidase ligands in a periodic box of water.\n\n"},{"author":"chryswoods","date":"2008-12-23T15:48:31.863102Z","commit":"856","message":"I've optimised the ZMatrixCoords code so that ZMatMove moves are now 10 times faster than before. \n\nThe moves conserve energy (as seen in test/SireIO/cox2.py). Things are looking good :-)\n\n"},{"author":"chryswoods","date":"2008-12-23T13:58:53.636159Z","commit":"855","message":"I've fixed a bug in PackedArray2D whereby extract was resulting in an assertation failure.\n\nThis was because I was using '1' to index the first array, rather than '0' - silly fortran\nindexing bug...!\n\n"},{"author":"chryswoods","date":"2008-12-22T14:32:27.807929Z","commit":"854","message":"I've fixed a bug in the MM forcefields in which the energies of molecules with odd numbers of \natoms was not calculated correctly when SSE was enabled. I've also made CountFlops a cmake\nconfigurable option.\n\nSire now gives the same energy as ProtoMS for neuraminidase and ligand in a large box\nof water (inter- and intra- energies!), and what's more - it does so in a comparable\ntime - both take 16 s, even though Sire is calculating a more exact energy. When ProtoMS\nis calculating the same energy, using sire_compatibility_mode, it takes 39 s)\n\n"},{"author":"chryswoods","date":"2008-12-22T11:40:41.892976Z","commit":"853","message":"I've worked on ZMatrix and ZMatMove so that they can work with only part of a molecule (so that\nresidue moves in a protein don't require that the entire protein z-matrix is recalculated!).\n\nI've also optimised the ProtoMS parameteriser, and have improved the efficiency from it\ntaking 180s to parameterise neuraminidase to taking just 27s. This is still too slow, but I \nthink that I'll need to write a custom parameteriser to actually speed this up...\n\n"},{"author":"chryswoods","date":"2008-12-21T16:23:54.124025Z","commit":"852","message":"I've added implicit conversion from QString and double to VariantProperty in the python wrappers.\n\n"},{"author":"chryswoods","date":"2008-12-20T17:06:44.030659Z","commit":"851","message":"I've fixed a few bugs:\n\nMoleculeGroup::add(MoleculeGroup) was just broken, and has been fixed\n\nProtoMS reader has been fixed to read in more data from ProtoMS, so that I can now\nget almost exact agreement in the energy. The energy for a DANA (neuraminidase) inhibitor\nin a box of TIP4P is -19237.729 kcal mol-1 in ProtoMS (calculated in 0.8s), while\nit is -19237.730131 kcal mol-1 in Sire (calculated in 0.3s).\n\nThis is close enough agreement, given two completely different languages, different\norder of forming the sum etc.\n\n"},{"author":"chryswoods","date":"2008-12-19T21:24:29.877277Z","commit":"850","message":"I've fixed a few bugs in the use of duplicated forcefields for numerical energy gradients.\n\n"},{"author":"chryswoods","date":"2008-12-19T14:48:03.603218Z","commit":"849","message":"I also needed to add implicit conversion from double to SireCAS expression\n\n"},{"author":"chryswoods","date":"2008-12-19T14:16:51.344739Z","commit":"848","message":"I've added a \".clone()\" function to all python wrapped classes, have added a Min and Max function\nto SireCAS, and have fixed some of the problems caused when you rename a forcefield (now the groups\nare automatically renumbered, and the index of the groups and molecules is reconstructed)\n\n"},{"author":"chryswoods","date":"2008-12-18T20:32:05.333040Z","commit":"847","message":"I've got the PropertyConstraint working now - alpha seems to be correctly being set\nas a function of lambda\n\n"},{"author":"chryswoods","date":"2008-12-18T19:49:25.355133Z","commit":"846","message":"I've added Constraint and Constraints classes to allow constraints to be added to the\nsystem (e.g. to constrain the value of alpha to map to the value of lambda).\n\nI'm still debugging the code...\n\n"},{"author":"chryswoods","date":"2008-12-17T17:58:55.068082Z","commit":"845","message":"I've added a soft-core coulomb and LJ forcefield, as a way of improving the convergence\nof dual-topology simulations. It seems to work - though I do now need to find a way\nto tie the value of alpha to the value of lambda...\n\n"},{"author":"chryswoods","date":"2008-12-16T15:20:37.242872Z","commit":"844","message":"I've fixed a small bug in the streaming of ZMatMove - it wasn't streaming the move data from \nMonteCarlo.\n\n"},{"author":"chryswoods","date":"2008-12-16T13:49:39.015046Z","commit":"843","message":"I've fixed a couple of bugs that prevented me from running a dual topology simulation to\ncalculate the relative hydration free energy of ethane and methanol.\n\n"},{"author":"chryswoods","date":"2008-12-16T11:52:55.890299Z","commit":"842","message":"I've fixed the efficiency problems with the synchronised rigid body moves and have also\ntested that they work correctly (see test/SireMove/syncmove.py)\n\n"},{"author":"chryswoods","date":"2008-12-15T11:42:38.188129Z","commit":"841","message":"I've written the code to allow synchronisation of the translation and rotation\nof molecules in RigidBodyMC move.\n\n"},{"author":"chryswoods","date":"2008-12-15T08:48:27.615906Z","commit":"840","message":"I'm starting the code that will allow molecules to be translated and rotated together\n(this is necessary for dual topology free energy calculations)\n\n"},{"author":"chryswoods","date":"2008-12-14T19:36:28.069376Z","commit":"839","message":"I've fixed a couple of bugs in internalparameters.cpp that were causing the dihedral energies to\nbe different to ProtoMS. Now the bond, angle and dihedral energies agree (to within a decimal place\nor two), the coulomb energy is very close, but the LJ energy is a little out...\n\n"},{"author":"chryswoods","date":"2008-12-14T11:41:57.966940Z","commit":"838","message":"I've added the code to all the parameterisation of protein non-bonded terms from ProtoMS. This seems\nto work, but now that I can compare all of the energies, the energies from Sire are slightly out\ncompared to ProtoMS. I'll need to debug this using a smaller protein.\n\n"},{"author":"chryswoods","date":"2008-12-11T22:57:44.265188Z","commit":"837","message":"I've updated the Molpro interface so that it is possible to set the amount of memory that \nis needed by molpro during the QM calculation\n\n"},{"author":"chryswoods","date":"2008-12-11T09:00:04.071451Z","commit":"836","message":"I've fixed a bug in the reading of binary data that contains shared boost::shared_ptr objects - I \nwasn't detaching the pointer from shared storage when I was reading it, causing missing ID\nproblems in SharedDataStream.\n\n"},{"author":"chryswoods","date":"2008-12-09T23:29:47.396307Z","commit":"835","message":"I've fixed a crash caused when SharedDataStream is used to stream a null QSharedDataPointer or\nSireBase::SharedDataPointer.\n\n"},{"author":"chryswoods","date":"2008-12-09T22:13:54.884978Z","commit":"834","message":"I've added even more error detection to the ProtoMS reader (can you tell that I am debugging\na simulation of bluecrystal?)\n\n"},{"author":"chryswoods","date":"2008-12-09T21:53:58.814366Z","commit":"833","message":"I've added error detection code to the ProtoMS reader so that errors are detected\nand turned into C++ exceptions.\n\n"},{"author":"chryswoods","date":"2008-12-09T21:17:25.614814Z","commit":"832","message":"I've updated the name of temporary directories so that they don't use capitals,\nand so that the name of the user is first.\n\n"},{"author":"chryswoods","date":"2008-12-09T20:52:42.101956Z","commit":"831","message":"I've got most of the protein internal parameters read, and have also added the ability to \nstop the temporary directories from being deleted (as this is really annoying when I am\ntrying to debug a problem!)\n\n"},{"author":"chryswoods","date":"2008-12-06T12:18:39.275468Z","commit":"830","message":"I've finished writing the ProtoMS reader for solute and solvent molecules, and have confirmed\nthat I get the same energies as ProtoMS for a solvated ethane molecule (simulation of which is\nin test/SireIO/protoms.py) and for a indole molecule (in SireIO/test/indole.py).\n\nThe code isn't too slow either, running at about 2000 moves per second for gas-phase\nethane, 1000 moves per second for solvated ethane, solute moves only, and about\n300 moves per second for solvated ethane as in test/SireIO/protoms.py\n\n"},{"author":"chryswoods","date":"2008-12-04T17:37:37.962126Z","commit":"829","message":"I've reproduced the ProtoMS harmonic oscillator test and have verified that Sire does get the\naverage energy of the harmonic oscillator correct to two decimal places after one million\nmoves (and just about gets the third - it should be 0.2962 - Sire fluctuates from\n0.295 to 0.297, which is similar to the fluctuations observed in ProtoMS).\n\nIn doing this I've also fixed a bug that prevented multi-CutGroup molecules from having\ntheir change in energy calculated correctly.\n\n"},{"author":"chryswoods","date":"2008-12-04T15:29:06.897187Z","commit":"828","message":"I've added the z-matrix based Monte Carlo move class. Finally(!) I am able to perform\ncomplete Monte Carlo simulations.\n\n"},{"author":"chryswoods","date":"2008-12-03T10:58:53.878950Z","commit":"827","message":"Ok - it was a silly bug - I had forgotten to copy the new cartesian coordinates back to the old.\nNow that I've fixed this, it all looks like it is working (e.g. test/SireMove/protoms.py rotates\na dihedral and angle in ethane successfully)\n\n"},{"author":"chryswoods","date":"2008-12-03T08:53:29.775241Z","commit":"826","message":"I'm now testing the z-matrix classes, which do appear to have been loaded correctly by \nthe ProtoMS reader, but which also don't appear to build the cartesian coordinates\ncorrectly (.toCartesian() doesn't build new coordinates, from what I can tell...)\n\n"},{"author":"chryswoods","date":"2008-12-02T22:13:09.187392Z","commit":"825","message":"I've finished writing the z-matrix class, and have updated the ProtoMS reader so that it\nreads in the z-matrix together with the move deltas. It seems to load the ethane z-matrix\ncorrectly (in test/SireIO/protoms.py), but I still need to test this fully.\n\n"},{"author":"chryswoods","date":"2008-12-02T08:55:29.653999Z","commit":"824","message":"I'm continuing with my progress writing the z-matrix classes...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-12-01T08:53:47.689370Z","commit":"823","message":"I'm filling in the remaining functions in zmatrix.cpp...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-11-30T17:42:56.741843Z","commit":"822","message":"I've added a ZMatrix class so that I can perform z-matrix based moves (in addition to the \nnon-z-matrix based moves that were already implemented in Sire - this will allow\neasy comparison of Sire with ProtoMS, as ProtoMS uses z-matricies.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-11-29T17:53:05.735150Z","commit":"821","message":"I've fixed a small compile bug on 64bit systems (I was improperly casting a pointer to an int)\n\n"},{"author":"chryswoods","date":"2008-11-29T17:35:49.492553Z","commit":"820","message":"I've added the ability to match names using case sensitive or case insensitive matching, \ne.g.\n\noxygen = tip4p.atom( AtomName(\"O00\", SireID.CaseSensitive) )\n\nor\n\noxygen = tip4p.atom( AtomName(\"o00\", SireID.CaseInsensitive) )\n\n"},{"author":"chryswoods","date":"2008-11-27T08:51:00.715767Z","commit":"819","message":"I'm in the process of adding some code to SireIO that will allow ProtoMS to be used\nto automatically parameterise molecules (this is the first step to parameterising\nmolecules within Sire - this is just a bit quicker, especially as I don't want\nto be manually parameterising proteins...!)\n\n\n"},{"author":"chryswoods","date":"2008-11-26T08:26:12.090521Z","commit":"818","message":"I'm adding in some code that lets Sire use ProtoMS to parameterise molecules (as parameterising\na protein by hand is just too painful!)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-11-25T20:49:38.986861Z","commit":"817","message":"I've fixed a deadlock that I experienced on an extreme test (running 30 scripts in parallel\non a 100 MPI process job on my laptop). It was just a small bug, but it caused me to look\nat lots of the code, and I think I've fixed some other scheduling bugs as well.\n\nThe following command line shows you what is possible;\n\nmpirun -n 100 sire_python test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py\n\nThis runs 30 copies of test/SireCluster/testcluster.py in parallel over 100 nodes (each\nscript tries to grab up to 50 nodes each - so there is a little fighting ;-)\n\nThis works without deadlocking or any other problems.\n\nThe only issue I now think I have is that I get some weird Qt errors when I try\nto get each test cluster script asking for 100 nodes each \n(QEventDispatcherUNIXPrivate(): Unable to create thread pipe: Too many open files)\n\nThis error is just printed - it doesn't stop the script working, so perhaps it \ncan be ignored...?  (of course it can't - at least not in the long term!)\n\n"},{"author":"chryswoods","date":"2008-11-25T08:50:40.001386Z","commit":"816","message":"I've made a few small changes to SireCluster - nodes can now autodelete themselves,\nso that they are returned to the cluster once they've finished working, and\nalso it is possible to grow a Nodes object by pulling more nodes from the \nCluster.\n\n"},{"author":"chryswoods","date":"2008-11-24T08:46:39.062817Z","commit":"815","message":"I've added the ability to run multiple python scripts within the same instance of sire_python.\nThis allows sire_python to act as a python task farm, and makes it able to run multiple python\nscripts on multiple nodes via MPI.\n\n"},{"author":"chryswoods","date":"2008-11-23T20:45:57.875463Z","commit":"814","message":"I've added some resilience to the code by allowing the replica exchange moves to resubmit\naborted or failed replicas, and to restart stopped replicas. As I do need to detect when\nthe user wants to kill the job, I've also added a signal handler to sire_python so that\nCTRL-C and kill now work immediately.\n\nThe MPI RETI code seems to be working well. :-)\n\n"},{"author":"chryswoods","date":"2008-11-23T14:30:13.203289Z","commit":"813","message":"I've got multi-processor RETI working! I added a SimPacket class, which provides a WorkPacket\nthat can be used to run a simulation, and then updated Simulation so that it is a thin\nwrapper around Promise. I then updated RepExMove to use the new Simulation class, and it\nall appears to work (I'm running a multi-processor QM/MM RETI simulation on water on\nmy laptop now, and it seems to be running without problems - also the script\ntest/SireMove/retimoves.py runs without problems on my laptop).\n\nI've also now removed all reference to SireMPI, as SireCluster replaces it.\n\n"},{"author":"chryswoods","date":"2008-11-21T22:47:35.089803Z","commit":"812","message":"I've fixed a bug in the compilation of sire_python, but aside from that, it works on \nbluecrystal! So the MPI works on Linux and Mac! Phew...!\n\nAll that is left now is to integrate SireCluster into SireMove and to then get rid\nof the old SireMPI module.\n\n"},{"author":"chryswoods","date":"2008-11-21T22:07:58.946471Z","commit":"811","message":"I've finished writing the point-to-point communicator and the MPIFrontend, and now I can\nrun WorkPackets on remote nodes!!! It all seems to work - even a stress test where I ran\nten jobs in parallel using a 25 process cluster (on my laptop) worked without problem, e.g.\n\nmpirun -n 25 sire_python test/SireCluster/testcluster.py\n\nWhat's more, my laptop was over 85% idle during this test, so the communication \nprocessor requirements are low. Now to test this on bluecrystal...\n\n"},{"author":"chryswoods","date":"2008-11-21T17:48:43.253824Z","commit":"810","message":"I'm making progress with the MPI point-to-point communicator - it looks like it is being \ncreated correctly - I am now just deadlocking after it has been created\n(try mpirun -n 3 sire_python test/SireCluster/testcluster.py)\n\n"},{"author":"chryswoods","date":"2008-11-21T10:51:18.639239Z","commit":"809","message":"I've debugged the code I added at the last commit and it is now all working correctly\n(although the actual reservations are stubbed, so all it is doing is saying that\nno backends are available).\n\n"},{"author":"chryswoods","date":"2008-11-20T21:17:18.261950Z","commit":"808","message":"I've added most of the code that negotiates the starting of MPI point-to-point communications\nbetween MPI processes. It doesn't yet work, and is not yet complete, but the communications\nflow is now in place.\n\n"},{"author":"chryswoods","date":"2008-11-20T08:49:52.804186Z","commit":"807","message":"I'm now implementing the MPI point-to-point communication code.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-11-19T20:04:30.152822Z","commit":"806","message":"I've got Python working as part of a WorkPacket (though it keeps resubmitting...?) and I \nhave added the ability for a thread to temporarily lend itself to a Nodes scheduler\n(thereby allowing a python thread running on a node to lend itself to a Nodes\nobject to let it do some work)\n\n"},{"author":"chryswoods","date":"2008-11-19T08:41:04.918835Z","commit":"805","message":"I've added a PythonPacket class that lets me run multiple python jobs in different threads\n(as WorkPacket objects). This will allow the SireCluster scheduling algorithm to be used\nto schedule the running of multiple python jobs within a single MPI cluster (e.g. I now\nhave a task farm!)\n\n"},{"author":"chryswoods","date":"2008-11-17T12:59:13.009781Z","commit":"804","message":"I've added ErrorPacket and AbortPacket so that a Backend can signal an error or abort\nwithout having to send back the entire job.\n\n"},{"author":"chryswoods","date":"2008-11-15T22:11:31.628077Z","commit":"803","message":"I'm in the process of writing the Promise class (which is how we'll get results back \nfrom the Node).\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-11-15T17:05:24.020035Z","commit":"802","message":"I've got the basics of the nodes working now. I'm now going to test it on bluecrystal...\n\n"},{"author":"chryswoods","date":"2008-11-15T12:54:20.827622Z","commit":"801","message":"I've fixed a problem with the generation and compilation of the python wrappers\n(exception classes in *_registrars.cpp couldn't be compiled - as I don't expose\nthe error classes, I've removed them)\n\n"},{"author":"chryswoods","date":"2008-11-15T12:01:48.155778Z","commit":"800","message":"I've added the wrapper for QList\u003cNode\u003e so that multiple nodes can be returned to Python.\n\n"},{"author":"chryswoods","date":"2008-11-15T11:57:30.037082Z","commit":"799","message":"I've written and wrapped the Node and Nodes class, that allow for scheduling of \nthe available backends.\n\n"},{"author":"chryswoods","date":"2008-11-15T00:38:24.600437Z","commit":"798","message":"I'm working on adding the Node and Nodes classes, so that there is a user-visible\nconvenient API for the frontend-backend classes.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-11-14T18:34:31.751247Z","commit":"797","message":"I can confirm that MPI works superbly on OS X and on Linux (my laptop and bluecrystal)\nusing mpich2  (which on my laptop was configured using \n\n./configure --prefix=/Users/chris/local/ --enable-sharedlibs=osx-gcc\n\n - so nothing special is needed!)\n\nI've run the job using 100 processes, with all of the slaves asking the master\nto return to them the list of the UIDs of the nodes.\n\nCool!\n\n"},{"author":"chryswoods","date":"2008-11-14T18:03:05.007114Z","commit":"796","message":"I've got the MPI code working, now that I've turned on MPI::Init_thread(MPI_THREAD_MULTIPLE).\n\nIt also seems to now be pretty robust (I started 100 MPI processes on my laptop and they\nall worked well). However, without MPI_THREAD_MULTIPLE the whole lot comes crashing\ndown, so I've added a strict check for MPI_THREAD_MULTIPLE support that kills the \nprogram if it is not available.\n\n"},{"author":"chryswoods","date":"2008-11-14T01:58:44.387698Z","commit":"795","message":"I've got the backend of the inter-process communication working now, and sire_python is able\nto see how messages are exchanged between processes. There's an occasional deadlock at shutdown,\nbut it looks like it is working.\n\nI've also added seeding of qrand as otherwise QUuid was producing identical UIDs on different\nMPI processes (which was quite annoying!). The fix is to call QUuid first so that it sets\nits initial seed, then call qsrand to seed it ourselves, and then subsequent calls to\nQUuid will then produce truly unique IDs (well, within the constraints of a pseudo-random\nnumber generator).\n\n \n"},{"author":"chryswoods","date":"2008-11-13T16:56:06.672290Z","commit":"794","message":"I'm making a lot of progress now with the rationalised version of SireCluster (renamed version\nof SireMPI - which will be retired). I've sorted out the broadcast issues now, and have\ngot sending and receiving occuring in separate threads using separate communicators, and also\nreceiving the message is now separate to processing the message (overlapped computation and\ncommunication).\n\nCode is broken (of course!)\n\n"},{"author":"chryswoods","date":"2008-11-13T08:55:26.531474Z","commit":"793","message":"I'm making good progress - the design is now very clean, with all of the MPI code now\nhidden away in SireCluster/mpi\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-11-13T00:12:06.330369Z","commit":"792","message":"I forgot - I also have to commit in the changes I've made to the python wrappers as well.\n\n"},{"author":"chryswoods","date":"2008-11-13T00:11:08.005282Z","commit":"791","message":"I've made a lot of progress - having written Backend, Frontend, WorkPacket and Cluster, and having\nalso got them compiling and wrapped and tested in python.\n\n"},{"author":"chryswoods","date":"2008-11-12T16:48:15.651965Z","commit":"790","message":"I've written the generic 'Backend' class - the design seems pretty clear, so hopefully I should\nfinish writing it by tomorrow morning... (he says!)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-11-12T15:56:03.076546Z","commit":"789","message":"I've added in the files for a SireCluster library, which will contain the abstracted\n(non MPI) parts of SireMPI. I've just put the files in - now I have to write them!\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-11-12T15:37:04.399877Z","commit":"788","message":"I've realised that part of the cause of the deadlock in SireMPI was because I was not \ndistinguishing between local nodes and remote nodes, and I was sending an MPI message\nfrom one node to itself. While this works (the message is received) the code then\nblocks as the send is not acknowledged. I've also realised that MPIFrontend and\nMPIBackend are really nice classes that abstract the MPI code away, and that the\nsolution is to add LocalFrontend and LocalBackend classes. This requires a little\nrefactoring, which I am about to undertake...\n\n"},{"author":"chryswoods","date":"2008-11-12T08:56:44.436197Z","commit":"787","message":"I'm now in the process of debugging SireMPI - so far it is deadlocking at startup!\n\n"},{"author":"chryswoods","date":"2008-11-11T23:39:42.971912Z","commit":"786","message":"I've finished rewriting SireMPI and it now all compiles and links, and all of the python wrappers\ncompile and link. I've now got to test whether or not it works... ;-)\n\n\n"},{"author":"chryswoods","date":"2008-11-11T08:57:36.573045Z","commit":"785","message":"I'm continuing to rationalise and clean the SireMPI code.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-11-10T23:38:30.675411Z","commit":"784","message":"I'm cleaning up the SireMPI code so that all communication occurs in discrete communicators,\nwith all calls protected using mutexes. This should make it easier to debug deadlocks.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-11-10T08:26:05.307501Z","commit":"783","message":"I'm in the process of debugging a deadlock in SireMPI - I've fixed one bug - I didn't set\nthe semaphore in MPINodes to have the same value as the number of available nodes.\n\n"},{"author":"chryswoods","date":"2008-11-07T16:18:22.485309Z","commit":"782","message":"I've fixed the wrapping bug in PeriodicBox and have debugged RDFMonitor to ensure that it does\nactually produce the correct RDF!\n\n"},{"author":"chryswoods","date":"2008-11-07T11:16:10.337183Z","commit":"781","message":"I've fixed a bug in the Monte Carlo volume test - I was using positive beta when I should\nhave been using negative beta!!!\n\n"},{"author":"chryswoods","date":"2008-11-05T10:38:23.130076Z","commit":"780","message":"I've fixed a bug in the format of the PDB output line that caused a crash on bluecrystal, I have\nchecked that the MTSMC test is correct, and I have also fixed a memory leak in CoordGroup (I increased\nthe reference count when I allocated the memory, which was a mistake!)\n\nThe RETI simulation is now definitely working.\n\nAlso, the malloc problems were caused by the malloc that was part of OpenMPI - I've switched over\nto using mpich2 on bluecrystal and I am now not seeing any problems\n\n(I know that it was the OpenMPI malloc as a backtrace showed the crash occuring in the malloc provided\nby OpenMPI - switching to mpich2 has also appeared to get rid of the QBuffer memory allocation problems\nas well)\n\n"},{"author":"chryswoods","date":"2008-11-04T12:45:16.491662Z","commit":"779","message":"I've made PDB reserve some space in QByteArray as I am getting a segfault when writing out the PDB\nfile of the molecules on bluecrystal due to another QBuffer memory allocation error.\n\n"},{"author":"chryswoods","date":"2008-11-04T11:59:29.349537Z","commit":"778","message":"I've added a RepExMove::nMoves() function so that I can see how many supra-ensemble replica exchange\nmoves have been attempted (thus I can work out which iteration I am on in my script).\n\nMy new RETI script appears to be working - I now need to run it enough to check that it\ngives the same free energies as the previous version of Sire\n\n"},{"author":"chryswoods","date":"2008-11-04T11:15:21.156917Z","commit":"777","message":"I've fixed two bugs;\n\n(1) While clone_const_reference was being automatically applied to normal member functions,\n    it wasn't for operators. I've updated create_wrappers.py so that it uses clone_const_reference\n    automatically for operator[] and operator() (if the return type has a .clone() function)\n\n(2) MTSMC was not updating the system statistics at the end of each move! I've fixed this.\n\n"},{"author":"chryswoods","date":"2008-11-04T08:32:01.860069Z","commit":"776","message":"I've added 'value' functions to the ID types so that I can get the raw value of the ID in\nPython (at the moment, I can't get the raw string of a name - e.g. I can only get\n'SysName(\"sim\")'.\n\n\n"}]}