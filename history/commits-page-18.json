{"Page":18,"TotalPages":28,"commits":[{"author":"chryswoods","date":"2009-10-05T20:47:02.343478Z","commit":"1075","message":"I've added extra costs to the identity constraint that should order molecules\nwhich have equivalent costs to the same points - this should ensure that \nthere is a unique assignment of molecules, even if some points are coincident.\n\nCreating this change appears to have fixed Katie's constraint error problems\nwhen she was using even numbers of QM waters.\n\n"},{"author":"chryswoods","date":"2009-10-02T18:00:51.851533Z","commit":"1074","message":"I've fixed a bug in the periodic box code that meant that the minimum distance between two\nmolecules was not calculated correctly if the second molecule had an odd number of atoms\nand SSE was used.\n\nI've also nearly finished adding the AM1BCC charge generator.\n\n"},{"author":"chryswoods","date":"2009-09-29T21:14:44.149991Z","commit":"1073","message":"I've added a charge constraint class, which allows the charges to be changed during\na simulation (using the same interface as the MoleculeConstraint classes). This will \nallow for AM1BCC charges to be calculated dynamically as a molecule moves. I've \nwritten out the skeleton of the AM1BCC class, but this currently only returns\nzero charges.\n\nI've also added a kludgy fix that makes AtomProperty\u003cT\u003e::array() work correctly.\nThe problem was that these classes are exposed as typedefs, and Typedef::array()\nfailed in the python wrappers with an lvalue error, saying that \nAtomProperty\u003cT\u003e::array( Typedef ) was not a valid argument. The kludge \nsolution was to explicitly call these functions when Sire.Mol is loaded,\nwhich seems to tell boost::python that Typedef and AtomProperty\u003cT\u003e are \nindeed the same same class.\n\n"},{"author":"chryswoods","date":"2009-09-27T15:01:34.586244Z","commit":"1072","message":"I've sorted out the mopac interface - it can now successfully drive mopac to calculate\nenergies and partial charges.\n\n"},{"author":"chryswoods","date":"2009-09-25T23:39:36.415896Z","commit":"1071","message":"I am in the process of adding a mopac interface so that I can calculate\nAM1 and PM3 energies (and then charges)\n\n"},{"author":"chryswoods","date":"2009-09-24T14:02:11.393490Z","commit":"1070","message":"I've added (and tested) an Abs function so that I can use the softening function\nto just soften the middle of a perturbation (e.g. alpha = 1 for lambda=0 and lambda=1,\nbut alpha equals 0.2 for lambda=0.5)\n\n"},{"author":"chryswoods","date":"2009-09-24T11:20:07.651435Z","commit":"1069","message":"I've made it easier to obtain the lambda trajectory from a replica exchange simulation\n\n"},{"author":"chryswoods","date":"2009-09-24T10:13:43.045956Z","commit":"1068","message":"I've debugged the replica exchange moves and they now seem to be working properly.\n\nI've added an analytically solvable example - a replica exchange simulation\nof a set of harmonic oscillators (test/SireMove/reti_oscillator.py)\n\n"},{"author":"chryswoods","date":"2009-09-18T13:55:07.338184Z","commit":"1067","message":"I've written the MolInserter classes, so now I have the two basic manipulators that will\nallow me to write Gibbs Ensemble moves and Grand Canonical moves :-)\n\nCode compiles, but is untested, so lets assume...\n\nCode is broken\n\n..!\n\n"},{"author":"chryswoods","date":"2009-09-17T22:27:49.834459Z","commit":"1066","message":"I've been working on the code to allow adding and deleting of molecules from a move\n(via MolInserter and MolDeleter classes). This has necessitated changing MoleculeGroups\nderived classes so that they signal when a molecule is removed, and to add extra\nfunctionality to the space classes. I've also added an MGIDsAndMaps class that\nsimplifies the specification and storage of groups of molecule groups, together\nwith the property maps that should be used with those groups of groups.\n\nCode all compiles and links, though this is surprising as it is still\nwork in progress. Code is broken\n\n"},{"author":"chryswoods","date":"2009-09-15T12:41:14.458288Z","commit":"1065","message":"Ok - now the code definitely works - the volume changes as I would expect, and the \nvolume moves on Katie's system are now being accepted.\n\n"},{"author":"chryswoods","date":"2009-09-15T11:26:27.741976Z","commit":"1064","message":"I think that I've fixed a silly bug in the volume move code, whereby I forgot that the\ncenters of neighbouring boxes would move when the box size was changed. This lead to \nsolvent molecules on the edge of the box being moved into vacuum as the box was scaled.\n\n"},{"author":"chryswoods","date":"2009-09-15T07:56:31.847357Z","commit":"1063","message":"I've fixed a compile bug with the gcc-LLVM compiler (Sire compiles with it now - and LLVM is much\nfaster to compile and produces much smaller libraries/executables!). I've also fixed a MPI broadcast\nbug on the mac, although I still think something is wrong as the idle compute nodes are\nburning CPU.\n\nI've also written SS_GTOs, which is used to hold and process pairs of S_GTO orbitals\n\n"},{"author":"chryswoods","date":"2009-09-11T15:44:09.158170Z","commit":"1062","message":"I've fixed the volume move bug (AGAIN!) - I had not fixed it in the biased\nvolume move test - this was very annoying and showed poor QA on my part.\n\n"},{"author":"chryswoods","date":"2009-09-10T19:51:27.832739Z","commit":"1061","message":"I've found (and fixed) a serious bug in VolumeChanger - ScaleVolumeFromCenter was scaling the \nmolecules, but it was not updating the space in the system. This was leading to the \nsolvent being pulled away from the solute if volume moves were used. This means\nthat all simulations run using the VolumeChanger are broken... :-(\n\nI've also disabled SSE in SoftCLJPotential as this was leading to NaN for some reason...\n\n"},{"author":"chryswoods","date":"2009-09-09T10:58:55.001663Z","commit":"1060","message":"I've fixed a bug in the application of component and property constraints that meant that\nthe code wasn't detecting when the constraints hadn't changed. This now allows the \nsoft-core absolute binding script to work.\n\n"},{"author":"chryswoods","date":"2009-09-07T22:01:17.879855Z","commit":"1059","message":"I've made a lot of progress with the contracted GTO class - this holds a list\nof primitives as a single OrbitalShell - the contraction coefficients are \nmerged into the GTOs.\n\n"},{"author":"chryswoods","date":"2009-09-07T15:16:37.646540Z","commit":"1058","message":"I've fixed bugs that were stopping the absolute binding script from working - this\nis now running - we'll see how it goes.\n\n"},{"author":"chryswoods","date":"2009-09-07T07:31:28.712578Z","commit":"1057","message":"I've fixed (pp|pp) and all the integrals now look correct (for the tests I ran)\n\n"},{"author":"chryswoods","date":"2009-09-06T21:08:53.730349Z","commit":"1056","message":"I've fixed a few bugs in the calculation of (pp|pp) - now (xx|xx)(pp|pp) works, \nand most of (xx,yy)(pp|pp) works, but (yyyx) and (yxyx) don't...\n\n"},{"author":"chryswoods","date":"2009-09-03T15:41:55.288212Z","commit":"1055","message":"I've got most of the absolute binding script working now, and have updated\nWeightedMoves so that is can cope with using a combined space property\n(as I need different spaces for the bound and free legs)\n\n"},{"author":"chryswoods","date":"2009-09-03T11:42:45.938474Z","commit":"1054","message":"I'm working on the absolute binding free energy code, and in so doing have fixed\nbugs in the output of ProtoMS parameterisation errors, lack of implicit conversion\nof QString and Property to PropertyName, and have added code to IdentityConstraint\nto allow it to perform one-off constraints.\n\n"},{"author":"chryswoods","date":"2009-09-03T07:55:55.042592Z","commit":"1053","message":"I've fixed my misunderstanding of the symmetry of some of the electron repulsion\nintegrals, and have created functions that allow them to be used with pre-allocated\nmemory (thus allowing lots of integral evaluations to be performed without a \nsingle malloc or free). The psps and pppp integrals are currently broken.\n\n"},{"author":"chryswoods","date":"2009-09-02T15:27:10.447610Z","commit":"1052","message":"I've had to add many of the BLAS and LAPACK function for cases where these are not\navailable locally. These are all BSD licensed files, placed in 'ThirdParty' so\nas to ease installation of the code.\n\n"},{"author":"chryswoods","date":"2009-09-02T14:45:13.056340Z","commit":"1051","message":"I've moved the BLAS, LAPACK and LINPACK code into ThirdParty, and have also\ncreated a thin wrapper library that handles cases when any of the BLAS or\nLA/LINPACK libraries are not available.\n\n"},{"author":"chryswoods","date":"2009-09-02T13:03:51.240578Z","commit":"1050","message":"I've fixed the compile options that were preventing compilation on Linux \n\n"},{"author":"chryswoods","date":"2009-09-02T07:45:12.480402Z","commit":"1049","message":"I've fixed part of (pp|pp) - I'd missed out a huge chunk of the equation!\n\n"},{"author":"chryswoods","date":"2009-09-01T21:25:27.301184Z","commit":"1048","message":"I've written the code to compute (pp|pp) - it is nearly there, though the resulting\nintegrals aren't correct!\n\n"},{"author":"chryswoods","date":"2009-09-01T17:42:09.215969Z","commit":"1047","message":"The (ss|ss), (ps|ss), (pp|ss), (ps|ps) and (pp|ps) electron repulsion \nintegrals now all appear to be working (as well as the ss, pp and ps\noverlap, nuclear and kinetic integrals)\n\nThis shows that multiplying out using mathematica works. I can generate\nall 27 (pp|ps) integrals in one function, using one gamma function, one\nexponential, and a load of multiplies and adds.\n\n"},{"author":"chryswoods","date":"2009-09-01T14:22:46.003582Z","commit":"1046","message":"I've used mathematica to expand out the Obara-Saika recursion schemes and am\nusing these to code up the various orbital integrals (see techdocs/obara_saika.nb)\n\nThis works well, as I can re-use all the Boys functions, which are themselves \ncalculated recursively (so there is only one gamma and one exp per shell pair-shell-pair\ninteraction)\n\n"},{"author":"chryswoods","date":"2009-08-31T12:20:43.099633Z","commit":"1045","message":"I've added a TrigArray2D class that provides a square symmetric version of Array2D,\nand I have also changed the API for Array2D (and made TrigArray2D) so that it\nbetter matches that of NMatrix (and TrigMatrix)\n\n"},{"author":"chryswoods","date":"2009-08-30T21:26:59.946292Z","commit":"1044","message":"I've got some of the electron integrals involving P-orbitals working - some of them\nare a little wrong though...\n\n"},{"author":"chryswoods","date":"2009-08-30T16:39:57.912559Z","commit":"1043","message":"I've started work on a Tinker file reader (which will need work on SireDB as I need\nto parameterise the files as they are loaded).\n\nI've also got the following integrals working correctly;\n\n(p||s), (p||p), (p|nabla|s), (p|nabla|p), (p|C|s) and (p|C|p)\n\nI just now need the four index integrals involving p orbitals, and also the\ncontracted forms of all of the above.\n\n"},{"author":"chryswoods","date":"2009-08-24T11:01:51.916823Z","commit":"1042","message":"The HF code now works with contracted orbitals (it gets the STO-3G HF energy of HeH+ right!)\n\n"},{"author":"chryswoods","date":"2009-08-21T21:06:31.417191Z","commit":"1041","message":"I've added a class that holds a triangular matrix. This saves space as it only needs\nto save ~1/2 of the values (as it uses a packed format)\n\n"},{"author":"chryswoods","date":"2009-08-21T12:53:05.702350Z","commit":"1040","message":"The szabo + ostlund HF code now works again (using the combined shell pair integrals)\n\n"},{"author":"chryswoods","date":"2009-08-19T20:33:13.112061Z","commit":"1039","message":"I've fixed a bug in linearap.cpp that meant that the linear assignment problem was\nrarely incorrectly solved.\n\nI've added a 4D matrix class and have extended the API of the 2D matrix class\nto include reflecting the data about diagonals and lines.\n\nI've updated linearp to use the NMatrix class rather than Array2D\u003cdouble\u003e\n\nI've begun to sort out the code in Squire for the orbitals, and am \nsketching out a design.\n\nI've updated the generation of the python wrappers so that functions with\nunknown return policies are automatically not wrapped.\n\nCode is broken\n\n\n"},{"author":"chryswoods","date":"2009-08-14T19:10:56.770656Z","commit":"1038","message":"The SCF program is now working! (with the NMatrix and NVector classes with BLAS/LAPACK/LINPACK\nin SireMaths). It gets the same energy as the Szabo and Ostlund example for \nHeH+ in the STO-1G basis set (next step is to add contracted S-orbitals).\n\n"},{"author":"chryswoods","date":"2009-08-14T11:44:38.746779Z","commit":"1037","message":"I'm working on moving the BLAS and LAPACK code into SireMaths, and am working on \na general N*M 2-dimensional matrix and N 1-dimensional Vector class to \nsimplify use of BLAS and LAPACK (NMatrix and NVector)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2009-08-13T21:37:28.583787Z","commit":"1036","message":"I've got a 2-electron (HeH+) HF STO-1G SCF calculation *nearly* working (I get the \nright converged density matrix, but some silly bug means I am getting the wrong\nelectronic energy - HOW?!?. I think there is some confusion in the code\nas my Array2D class uses C++ row ordering, while I am using Fortran BLAS and\nLAPACK, which uses column ordering...\n\n"},{"author":"chryswoods","date":"2009-08-13T15:53:58.909049Z","commit":"1035","message":"I've fixed a silly error that prevented compilation of squire_blas and squire_lapack\n\n"},{"author":"chryswoods","date":"2009-08-13T15:26:55.177588Z","commit":"1034","message":"I've fixed a compile error for squire blas and lapack if they are not available, and have\nalso fixed a really nasty bug in moleculegroup caused by me checking a const_iterator\nagainst QHash::end rather than QHash::constEnd (which caused a copy of the hash, leading\nto accepting the iterator as valid - as const_iterator != QHash::end, which lead to \ndereferencing invalid memory.\n\n"},{"author":"chryswoods","date":"2009-08-13T10:56:51.142704Z","commit":"1033","message":"I've fixed a bug in the identity constraint code, played a little more with the HF code, \nand have added QList\u003cMonitorName\u003e to the list of exposed python classes.\n\n"},{"author":"chryswoods","date":"2009-08-11T11:10:29.402231Z","commit":"1032","message":"I've added a heavily documented example of a script that runs a Monte Carlo\nsimulation on a water box. This is the start of my documentation efforts so that\nI can release Sire to interested people.\n\n"},{"author":"chryswoods","date":"2009-08-10T23:05:19.113265Z","commit":"1031","message":"I've got my toy HF program working now for one-electron systems (and you can build the \nHamiltonian via python ;-)\n\n"},{"author":"chryswoods","date":"2009-08-07T22:20:38.646660Z","commit":"1030","message":"I've been playing around with a simple HF program - added to Sire are the beginnings of the\nfunctions necessary to provide a complete implementation.\n\n"},{"author":"chryswoods","date":"2009-08-05T15:51:07.851274Z","commit":"1029","message":"I've updated the Constraints class to work with MoleculeConstraint objects, and have\nalso updated System so that it applies the molecule constraints every time a molecule\nchanges. This seems to all compile, but it now needs testing.\n\n"},{"author":"chryswoods","date":"2009-08-04T15:53:47.729035Z","commit":"1028","message":"I've fixed a small bug whereby the constraint wasn't updated if the \nversion number of the system changed...! :-)\n\n"},{"author":"chryswoods","date":"2009-08-04T15:36:41.670716Z","commit":"1027","message":"I've improved the efficiency of the identity constraint (by removing an unnecessary matrix\ntranspose operation) and have also improved the behaviour of the constraint to repeated\nupdates from the same System, and to changing the underlying algorithm.\n\n"},{"author":"chryswoods","date":"2009-08-04T14:59:43.214510Z","commit":"1026","message":"I've finished writing the identity constraints (which necessitated adding a CloseMols class). The\nconstraint in tests (in test/SireSystem/identityconstraint.py) seems to successfully work\nout how the molecules should change to maintain their identities - it works quite quickly, taking\njust a millisecond or two on my laptop.\n\n"},{"author":"chryswoods","date":"2009-07-17T15:37:46.464696Z","commit":"1025","message":"I've simplified the implementation of the IdentityConstraint by using a polymorphic\nhidden class to provide different implementations depending on the ratio\nof the number of points to the number of molecules. This should ensure maximum\nefficiency for most used cases (e.g. single point, few points and all points)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2009-07-16T15:41:09.217368Z","commit":"1024","message":"I've implemented a better brute force algorithm to solve the linear assignment problem\n(the fast code works really well) - it is amazing how slow brute force is (order N!) compared\nto the N3/N4 solution.\n\n"},{"author":"chryswoods","date":"2009-07-16T14:09:57.497920Z","commit":"1023","message":"I've python wrapped (and extended) Array2D and have added code to solve the linear assignment problem\n(which I need for the IdentityConstraint) - there's a test of the linear assignment code\nin test/SireMaths/linearap.py\n\n"},{"author":"chryswoods","date":"2009-07-14T16:58:05.171635Z","commit":"1022","message":"I've just about sorted out the molecule constraints, and have added a class that\nconstrains molecules to lie in a box (by wrapping them from one side to another).\n\nI've also pencilled in more of the IdentityConstraint\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2009-07-07T22:24:47.001710Z","commit":"1021","message":"I've optimised the code a little (moved some performance-critical functions back inline) and have\nalso added the PBS job scripts I use to run on bluecrystal into the examples directory\n\n"},{"author":"chryswoods","date":"2009-07-06T13:19:11.961234Z","commit":"1020","message":"Ok - the PIE compile flags didn't work on Linux (lead to lots of unresolved symbol link\nerrors), and I also had to clean up the python export symbol link commands\non AIX as cmake was writing into the current source directory rather than\nthe binary directory\n\n"},{"author":"chryswoods","date":"2009-07-06T11:27:27.026986Z","commit":"1019","message":"I've changed the link and compile flags so that gcc will produces position independent executables\n(if available). I've also added link flags to the python modules to ensure that only the\ninit_PyModule() function symbol is exported (so that strip -x has the best chance of reducing\nthe library size)\n\n"},{"author":"chryswoods","date":"2009-07-03T22:31:03.004418Z","commit":"1018","message":"I've added uninstall targets to corelib and python2 and have also fixed the install/strip\ntarget so that it uses strip -x (so libraries can be stripped, but still have\nexternal symbols so can be loaded as python modules)\n\n"},{"author":"chryswoods","date":"2009-07-03T15:56:24.469884Z","commit":"1017","message":"I've removed shared_ptr from the static initialisation as this seems to cause a problem\non AIX. I've also fixed some other problems encountered while I am creating AIX python wrappers...\n\n"},{"author":"chryswoods","date":"2009-07-02T21:04:38.980275Z","commit":"1016","message":"I've fixed some compile bugs in the python wrappers caused by corelib files.\n\n"},{"author":"chryswoods","date":"2009-07-02T20:52:36.667427Z","commit":"1015","message":"I've fixed some of the Qt headers to allow compilation using Qt 4.2.1 on linux\n\n"},{"author":"chryswoods","date":"2009-07-02T15:56:22.098626Z","commit":"1014","message":"Compilation problems of the python wrappers on AIX have meant that I have had to\n move all .clone() functions out-of-line...\n\nThat was a lot of work!\n\n"},{"author":"chryswoods","date":"2009-07-02T10:38:34.434306Z","commit":"1013","message":"I've created new QString\u003c=\u003ePython string and unicode converters, which seems to work\nquite well (they work by converting from QString =\u003e UTF-8 =\u003e PyUnicode =\u003e PyString,\nor PyString =\u003e PyUnicode =\u003e UTF-8 =\u003e QString)\n\n"},{"author":"chryswoods","date":"2009-07-01T18:06:30.990735Z","commit":"1012","message":"I've finished creating the wrappers for the Qt classes. I still need to add a __str__ \nfunction for QString though...\n\n"},{"author":"chryswoods","date":"2009-07-01T14:23:53.298952Z","commit":"1011","message":"I am in the process of regenerating the Qt wrappers - the aim is to fix the wrappers\nagainst version 4.2.1 of Qt, and to set it so that the wrappers can be generated\nby anyone as the normal part of creating the python wrappers for Sire, with the\nsame wrappers generated regardless of the version of Qt installed.\n\n"},{"author":"chryswoods","date":"2009-06-30T18:35:51.214705Z","commit":"1010","message":"I've removed some static variables as these were causing crashes when using python\nwrappers on AIX - I've switched over to using Q_GLOBAL_STATIC \n\n"},{"author":"chryswoods","date":"2009-06-30T14:43:13.572007Z","commit":"1009","message":"I've added a fix to the wrapper generator to work around what looks like a compiler bug in xlC in AIX.\n\nHere's a description of the problem;\n\n####\n#### Override the free_function functions so that we fix a compile bug using xlC on AIX\n#### Overloaded function signatures output by Py++ look like this;\n####\n####  typedef void (*my_function_type)( args );\n####  def( \"my_function\", my_function_type( \u0026my_function ) );\n####\n####  This breaks when there are multiple overload of \"my_function\" as the xlC compiler\n####  fails with \"The call does not match any parameter list for \"bp::def\"\" errors\n####\n####  The solution is for Py++ to create a variable of type my_function_type and pass this to def, e.g.\n####\n####  typedef void (*my_function_type)( args );\n####  my_function_type my_function_value( \u0026my_function );\n####\n####  def( \"my_function\", my_function_value );\n####\n####  This compiles property using xlC. The below code changes free_function_t and\n####  mem_function_t to create the xlC compatible code, rather than the original Py++ code\n####\n\nThe code (in AutoGenerate/create_wrappers.py) generates the wrappers without any \napparent problems, and the wrappers seem to compile (although I still need to\ntest them on AIX - Units compiles ok)\n\n"},{"author":"chryswoods","date":"2009-06-26T21:52:37.305200Z","commit":"1008","message":"I've finished writing VolumeChanger and VolumeMove, which both compile and link. I've\ncreated the python wrappers, which are now all compiling.\n\n"},{"author":"chryswoods","date":"2009-06-26T15:58:05.466311Z","commit":"1007","message":"I'm making good progress with the volume changer class, and have made the point classes\na little more general\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2009-06-26T14:04:24.049939Z","commit":"1006","message":"I'm working on the new VolumeMove class (and have added a VolumeChanger set of functions to allow\nuser-control of how molecules move to a new volume), and in the process I've realised that\nPoint should be in SireFF rather than SireMM (as it does not use any SireMM classes and\nis generally useful elsewhere)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2009-06-25T18:32:47.718436Z","commit":"1005","message":"I've just added a test for the combined and aliased properties (test/SireSystem/testsysproperties.py)\nwhich has exposed a few bugs (now fixed) and which now seems to work well :-)\n\n"},{"author":"chryswoods","date":"2009-06-25T15:57:24.379990Z","commit":"1004","message":"I've been caught out by a subtle bug - abs(value) returned the integer absolute\nvalues, while I needed to use std::abs(value) so that I could get the \ndouble precision absolute value. This has now fixed the energy, which is\nnow calculated correctly.\n\n"},{"author":"chryswoods","date":"2009-06-25T15:43:45.010821Z","commit":"1003","message":"I forgot - I needed to commit this to allow the python wrappers for Mol to be generated\n\n"},{"author":"chryswoods","date":"2009-06-25T15:39:33.586546Z","commit":"1002","message":"I've got all of the code to compile using the new space system (and property alias/combination system),\nand while the python wrappers also work, the energies are wrong in the test cases.\n\nTime for some debugging...\n\n"},{"author":"chryswoods","date":"2009-06-24T22:27:47.690996Z","commit":"1001","message":"I've worked out how to have multiple spaces within the same system, and still make it all\nwork with the replicas. The solution is not to hack replicas etc., but to fix ForceFields::property\nso that it can handle aliases (links) to properties, and so that it can hold combinations\nof properties. I have added a range of classes to achieve this (e.g. LinkToProperty and\nCombinedProperties, with CombinedSpace and CombineSpaces) and am in the process of \nintegrating this into ForceFields. I'll then need to revert back most of my hacks to\nMove, Moves and Replica...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2009-06-24T12:33:52.420821Z","commit":"1000","message":"Commit 1000! I've fixed the problem of overlapping atoms in RestraintFF and have also\nswitched Molecules so that it derives from SireBase::Property, and so that it \nhas a toString() function.\n\n"},{"author":"chryswoods","date":"2009-06-24T11:57:23.654292Z","commit":"999","message":"I've finished writing and wrapping the RestraintFF forcefield. This should also work\nas the solvent cap forcefield as well :-)\n\n"},{"author":"chryswoods","date":"2009-06-23T21:01:53.942070Z","commit":"998","message":"I'm making good progress with the restraint forcefield, having now finally worked out how\nit fits in with the existing forcefields, and how events like adding and removing molecules\nare handled (and I've also sorted out partial updates, so all restraints aren't recalculated\nwhen only a few have changed)\n\n"},{"author":"chryswoods","date":"2009-06-23T14:47:27.278343Z","commit":"997","message":"Fixed a small link problem\n\n"},{"author":"chryswoods","date":"2009-06-23T14:40:42.864947Z","commit":"996","message":"I've updated the restraint classes so that they can use user-supplied symbols, and also \nso that they can be differentiated with respect to those symbols (thereby allowing\nlambda dynamics simulations using restraints, as now we can calculate the force on\nlambda caused by the restraint)\n\n"},{"author":"chryswoods","date":"2009-06-22T16:18:12.811230Z","commit":"995","message":"I've fixed some compile problems caused by the last update to the python SireCAS code...\n\n"},{"author":"chryswoods","date":"2009-06-22T15:45:59.098368Z","commit":"994","message":"I've added (and wrapped) an AngleRestraint and a DihedralRestraint class. I need to write \na new class in SireCAS that lets me calculate differences between angles though, as at\nthe moment these both calculate absolute difference without angle wrapping.\n\n"},{"author":"chryswoods","date":"2009-06-22T12:59:53.388911Z","commit":"993","message":"I've written and wrapped the DoubleDistance and TripleDistance restraints\n\n"},{"author":"chryswoods","date":"2009-06-19T22:02:56.906120Z","commit":"992","message":"I've got the new restraint class working (as well as the Point classes), and it is all now\nwrapped in python (which also works).\n\nAlso, the code now finally all compiles again on my macbook (though I've still got\nto test it on the other platforms)\n\n"},{"author":"chryswoods","date":"2009-06-17T19:08:46.364872Z","commit":"991","message":"I'm making good progress with the restraints classes. I've separated the code to \ncalculate the restraint from the code to get the points the restraint acts between.\nI've achieved this by creating a Point (and PointRef) class hierarchy that lets\nme operate using Point objects, rather than operating directly with molecules.\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2009-06-17T12:43:44.923224Z","commit":"990","message":"More fixes to help build the python wrappers. They still don't all build though...\n\n"},{"author":"chryswoods","date":"2009-06-17T12:17:05.770051Z","commit":"989","message":"I've added some code to fix the problems building python wrappers on bigblue\n\n"},{"author":"chryswoods","date":"2009-06-17T10:20:27.446375Z","commit":"988","message":"I've fixed the compiler detection conditions so that they work with older versions of cmake\n\n"},{"author":"chryswoods","date":"2009-06-15T14:14:11.471324Z","commit":"987","message":"I've updated the cmake files so that more information is saved from the main Sire compile,\nwhich is then made available to the python2 Sire compile. This should make it easier to\nport the python wrappers to different compilers.\n\n"},{"author":"chryswoods","date":"2009-06-11T15:54:11.812088Z","commit":"986","message":"I'm now back to making progress with the generic restraints.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2009-06-11T15:21:09.385264Z","commit":"985","message":"I've got the CAS python wrappers working and have debugged and tested the \nconditional classes. They appear to do what I want them to do :-)\n\n"},{"author":"chryswoods","date":"2009-06-11T14:55:25.509311Z","commit":"984","message":"I've fixed a compile bug in CAS, and have also removed the custom FindBoost file as\nthe new cmake one performs better\n\n"},{"author":"chryswoods","date":"2009-06-11T14:30:28.158349Z","commit":"983","message":"I've removed the custom FindBoost file I've been using to find boost libraries, as\n it doesn't work on AIX and doesn't work now on big blue.\n\n"},{"author":"chryswoods","date":"2009-06-11T14:02:55.099257Z","commit":"982","message":"I've finished writing all of the SireCAS conditional classes - now they need python\nwrapping and testing!\n\nI've also committed this mornings RenderViewCommand, which is the beginning of separating\nout the Spier::Command classes from RenderView\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2009-06-11T13:06:20.369755Z","commit":"981","message":"I've fixed a compile problem using gcc 4.4 (I needed to include \u003ccstring\u003e in quickcopy.hpp \nso that std::memcpy was defined) and I have also fixed the sse code in countflops so \nthat flop counting can be compiled using the intel compiler.\n\n"},{"author":"chryswoods","date":"2009-06-10T22:01:34.492813Z","commit":"980","message":"I've finished the Spier::Command class, and am in the process of writing the CameraCommand\nclasses (RotateCamera and TranslateCamera)\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2009-06-10T15:53:24.295070Z","commit":"979","message":"I've been adding code to handle generic restraints (and am now in the process of updating\nSireCAS to support conditionals so I can have positional restrain implement the half harmonic\nsolvent cap potential). I'm also committing the half-written code from a couple of nights back\nwhere I am adding a command framework to Spier, which will provide the undo and timeline \nframework.\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2009-06-08T22:34:51.911642Z","commit":"978","message":"I've added an event monitor class and am now able to process events occuring within\nthe RenderView. I've also added a visual cue when the render view gets focus\n(and set the focus policy so that I don't get the mouse wheel scrolling stuck\non the view if the mouse happens to fall over it)\n\n"},{"author":"chryswoods","date":"2009-06-08T20:57:06.334053Z","commit":"977","message":"I've successfully got a sphere rendered in sire_browser...\n\n\n"},{"author":"chryswoods","date":"2009-06-08T15:30:55.981606Z","commit":"976","message":"The new code in AtomicVelocityWorkspace now compiles correctly, after I changed Editor to \nset properties from a passed PropertyName rather than a QString\n\n"}]}