{"Page":28,"TotalPages":28,"commits":[{"author":"chryswoods","date":"2006-10-26T15:44:43.773730Z","commit":"75","message":"I am now working on the mechanics of calculating the CLJ energy. I think that I can move most of the machinery into the CLJFF class. I have also realised that I don't need the \"worker/editor\" forcefield design, as adding and removing molecules from a forcefield should be allowed during a running simulation. (especially as now everything is self-managing, so there is no worry about the user doing this behind the back of the simulation!)\n\n"},{"author":"chryswoods","date":"2006-10-24T15:27:23.975100Z","commit":"74","message":"I am back to working on my branch, and have begun working on the CLJ forcefield again. I hope to get some energy calculations ready within the next couple of days, so that I can finally(!) perform some Monte Carlo.\n\nCode is broken (see, working code was just a temporary illusion!)\n\n"},{"author":"chryswoods","date":"2006-10-17T15:45:47.010369Z","commit":"73","message":"I have now fully merged my 'branches/users/chryswoods' branch into 'branches/devel'.\n\nThis was accomplished via two svn merge commands;\n\nsvn merge -r 12:31 ../users/chryswoods/ .\nsvn merge -r 35:71 ../users/chryswoods/ ./\n\nLots and lots of changes have been brought in by this merge. See the commit messages for the chryswoods branch for more details, but, in summary, they revolve around a complete change in the internal representation of Molecule and a completely new MoleculeInfo class. Lots of code cleaning and bug fixing as well.\n\n"},{"author":"chryswoods","date":"2006-10-17T15:08:53.012112Z","commit":"72","message":"Merging the 'devel' branch into 'trunk' via;\n\nsvn merge -r 9:31 ../branches/devel/ .\n\nThis upgrades the trunk to use CMake to control compilation. CMake is superior to QMake, and has been used now very successfully with the 'devel' and 'chryswoods' branches.\n\nAs well as adding CMake support, this version also includes general fixes that make the code more portable across different linux distributions. I have successfully compiled this version on Redhat WWS 4, Gentoo (and Gentoo64) and Fedora Core 5.\n\n"},{"author":"chryswoods","date":"2006-10-17T14:50:28.836277Z","commit":"71","message":"I have wrapped up Molecule, Residue, EditMol and EditRes using Py++, which seems to work really well. I've had to manually edit the wrapping, but that's probably just down to me not understanding the tool fully.\n\nI've filled in missing functions, and *shock horror* this version of the code actually compiles! And runs! It is not particularly usable, but it is enough that I can now move all of this over to the devel branch.\n\n"},{"author":"chryswoods","date":"2006-10-16T19:40:36.574611Z","commit":"70","message":"Filled in the missing functions in MoleculeInfo and ResidueInfo and have wrapped up ChargeTable and LJTable. I have started the wrapping of Molecule, and realised that it needs to be automated. I started writing my own simple script, then, thinking better of it, I have investigated what already exists. Py++ appears to be a good solution (and it does documentation as well), so I will download it, and use it to see if I can wrap Molecule.\n\n"},{"author":"chryswoods","date":"2006-10-14T21:59:02.512390Z","commit":"69","message":"I have filled in the missing AtomTable functions, so that classes wrappers now compile and link. I have also now written the wrappers for MoleculeInfo and ResidueInfo, which compile, but have exposed some missing functions from MoleculeInfo and ResidueInfo (and thus won't link).\n\n"},{"author":"chryswoods","date":"2006-10-13T15:20:53.680545Z","commit":"68","message":"I have made a lot of progress. Earlier today I had all of the code compiling and linking. Now I have wrapped up the AtomTypeTable in Python there are a few unresolved functions, but other than that, it is all up and running again. So ... nearly ... there ... !\n\n"},{"author":"chryswoods","date":"2006-10-12T20:34:35.465173Z","commit":"67","message":"I have been working through SireMM to get it to compile. Just small changes really (coping with type safety of GroupID, Index etc. and changing over to use MoleculeInfo). I have disabled some key features, namely assigning of parameters. This is because I don't want to fix code that I will eventually change (the code to select and create tables within ParameterTable).\n\n"},{"author":"chryswoods","date":"2006-10-12T15:49:33.707059Z","commit":"66","message":"A lot of code is now compiling (SireMol, SireDB, SireFF and wrappers). I am working on getting the rest to compile so that I can test the new design, and move on to getting the forcefields up and running again :-)\n\n"},{"author":"chryswoods","date":"2006-10-11T21:34:39.720754Z","commit":"65","message":"Working on updating the ParameterTable class - I've updated it to use the self-managed object design, though this does make editing slighly more cumbersome...\n\n"},{"author":"chryswoods","date":"2006-10-11T15:33:44.639142Z","commit":"64","message":"I have written the new AtomTable classes, and have finished AtomTypeTable. I am quite pleased with the design, as it now caches the transformation from a QHash of parameters to a QVector. There is also now a nice combination with AtomInfoGroup and AtomInfo (i.e. to make ParameterGroup and AtomParameter).\n\nCode is still broken. One day it may not be...\n\n"},{"author":"chryswoods","date":"2006-10-10T15:42:16.151412Z","commit":"63","message":"I am now working on SireDB to integrate it with the new method of indexing atoms. \n\nCode is broken\n\n"},{"author":"chryswoods","date":"2006-10-10T13:22:32.721333Z","commit":"62","message":"By using stubs I have got the SireMol library to compile and link. I really need to be getting the SireFF and SireMM libraries working so that I can run some simulations. I will come back to SireMolonce I have some running simulations!\n\n"},{"author":"chryswoods","date":"2006-10-09T20:19:37.913704Z","commit":"61","message":"I have filled in a lot of the missing functions, and now just have some from EditMolData and MoleculeBonds to go.\n\n"},{"author":"chryswoods","date":"2006-10-08T16:23:08.094415Z","commit":"60","message":"EditRes and EditMol (and the rest of SireMol) now compile, but undefined functions mean that it doesn't yet link.\n\n"},{"author":"chryswoods","date":"2006-10-08T15:02:28.700155Z","commit":"59","message":"I have filled in the APIs of EditMol and EditRes. I still need to compile and test these functions however (they are unlikely to compile now!).\n\nThe API of EditMol and EditRes is missing a nice function for editing an Atom (e.g. changing the atom's element, CutGroupNum or AtomNum).\n\n"},{"author":"chryswoods","date":"2006-10-06T15:44:49.213402Z","commit":"58","message":"I have been creating and filling in the APIs of EditMol and EditRes. This has confirmed that EditMolData is fit for purpose.\n\n"},{"author":"chryswoods","date":"2006-10-05T15:29:23.623838Z","commit":"57","message":"Fixing the cmake and build errors from the last revision caused by not cleaning everything up when I removed some files...!\n\n"},{"author":"chryswoods","date":"2006-10-05T15:25:52.587424Z","commit":"56","message":"I have filled in nearly all of the EditMolData API and have written most of the EditMol API. I have worked out how to convert from an EditMol to a Molecule (via SireMol::detail::MolData), and this allows me to remove the ID and version from the EditMol. I have also now sorted out how the various cutting schemes are implemented (molecule, residue or atom-based cutting). They are now implemented via a function object (CuttingFunction) which is stored in the EditMol, and which calculates the CutGroupNum of each atom as it is added. This is something that has only become possible now that I have CutGroupNum, as it would not have worked with CutGroupID (as deleting CutGroups or atoms would have broken everything!).\n\nSireMol compiles and links.\n\n"},{"author":"chryswoods","date":"2006-10-05T12:50:17.358503Z","commit":"55","message":"I have filled in nearly all of the API for EditMolData, and SireMol now fully compiles and links.\n\n"},{"author":"chryswoods","date":"2006-10-03T12:47:26.465175Z","commit":"54","message":"I have filled in more of the EditMolData functions, including the translation and rotation functions, and some of the setCoordinates functions.\n\nCode is still broken...\n\n"},{"author":"chryswoods","date":"2006-10-02T15:34:57.479806Z","commit":"53","message":"I am filling in the API for EditMolData. I am making good progress, despite the limited time I had to work on this today. I am modelling a lot of the implementation on MoleculeData - especially the use of MoveWorkspace to ensure that the invariant is maintained.\n\n"},{"author":"chryswoods","date":"2006-10-01T16:48:58.782666Z","commit":"52","message":"Working on the EditMol class - I am updating EditMolData so that it has a similar interface to Molecule. This should help users learn the interface as both classes will be made to work in consistently the same way.\n\n"},{"author":"chryswoods","date":"2006-09-29T15:37:41.935644Z","commit":"51","message":"I have realised that I need to have a CutGroupNum identifier as well as a CutGroupID index. This prevents confusion as to what the CutGroupID means (sometimes I was using it as an index, sometimes as an ID), and also allows the user to add CutGroupNum identifiers to an EditMol, so that I can get rid of conversion functions! I am working (eventually) towards an EditMol being pretty invisible, and that you would get back Molecule objects. You then edit the Molecule objects via;\n\nEditMol editer = mol.edit();\n\nediter.addAutoBonds();\nediter.setName(\"My Molecule\");\nediter.doThis();\nediter.doThat();\n\nmol = editer.commit();\n\nThis follows the same usage as other classes, and should help the user learn through consistency.\n\n"},{"author":"chryswoods","date":"2006-09-28T21:19:32.352139Z","commit":"50","message":"I have filled in the functions for the ParameterGroup class.\n\n"},{"author":"chryswoods","date":"2006-09-28T15:35:55.245376Z","commit":"49","message":"Now that SireMol works, I am updating SireDB to match the new SireMol API. Mostly this involves using the new MoleculeInfo, ResidueInfo, AtomInfo objects as the metadata for the parameter tables. This simplifies things a lot, and means that I can now get rid of a lot of the ugliness of the old code.\n\nI am partially through writing classes, as I need to catch the bus home... \n\nCode is always broken...\n\n"},{"author":"chryswoods","date":"2006-09-28T08:57:49.905526Z","commit":"48","message":"SireMol now compiles and links! I am finally beginning to make progress back to a working piece of code :-)\n\nI updated CoordGroup so that it is a complete const-class - to edit it you must now use CoordGroupEditor.\nI have also updated CoordGroupEditor so that it knows when the coordinates have been changed so that\nit doesn't recalculate the bounding box unnecessarily. This helps when the coordinates are\ncopied directly from another CoordGroup.\n\nI have added in all of the MoleculeData::setCoordinates functions. All of this now needs to be tested, but only\nonce I have updated the rest of the code so that I can recompile everything.\n\n"},{"author":"chryswoods","date":"2006-09-27T16:46:40.093041Z","commit":"47","message":"Making progress - nearly filled in all of MoleculeData now! \n\n"},{"author":"chryswoods","date":"2006-09-26T14:49:42.766479Z","commit":"46","message":"I have filled in most of the SireMol API - just now MoleculeData to go, (though EditMol/Res/Data has been completely blanked out).\n\n"},{"author":"chryswoods","date":"2006-09-25T21:06:26.416422Z","commit":"45","message":"I have been working on filling in the API of Residue. I have mirrored the API of Residue from Molecule, so that there is some consistency.\n\nCode is still broken\n\n"},{"author":"chryswoods","date":"2006-09-24T20:50:40.229670Z","commit":"44","message":"Making lots of progress now - I have filled in MoleculeInfo, ResidueInfo and AtomInfoGroup. These all have very similar APIs, and all follow the object design philosophy that I have previous stated. These all compile, and I now must move on to fill in missing functions in MoleculeData, Molecule and Residue.\n\nCode is still broken.\n\n"},{"author":"chryswoods","date":"2006-09-24T14:27:21.707230Z","commit":"43","message":"Fixed some compilation errors on my laptop (gcc4 vs. work desktops gcc3). Working on MoleculeInfo. I have mapped the API of Molecule onto MoleculeInfo, so that it behaves in the same manner. I am filling in this API, and am making good progress. Molecule and MoleculeInfo really demonstrate my philosophy of minimising the amount of information in a class, but maximising the number of ways of accessing and using that information.\n\nCode is still broken. One day it will run again...\n\n"},{"author":"chryswoods","date":"2006-09-22T15:50:51.388299Z","commit":"42","message":"I have cleaned up the SireVol classes (now based on DynamicSharedPtr, updated to work with CoordGroups, and renamed Space rather than SimVolume).\n\nI have also been filling in the missing functions in SireMol. SireMol all compiles, but now that I have turned on the check for unresolved symbols, SireMol doesn't link. (lots of undefined symbols to fill in!)\n\nThe code is slowly getting better, but it is a long process.\n\n"},{"author":"chryswoods","date":"2006-09-21T18:30:39.003973Z","commit":"41","message":"Pruning the tree of dead files....\n\n"},{"author":"chryswoods","date":"2006-09-21T15:23:24.334759Z","commit":"40","message":"I have been working on getting the SireMol library to compile. This has mostly involved finishing up the modification of the Molecule class, then updating everything obvious in SireMol and commenting out everything more complicated! There are several missing functions...!\n\nThe code is still very broken. One day it will compile and run again...\n\n"},{"author":"chryswoods","date":"2006-09-15T15:25:38.348260Z","commit":"39","message":"I am still working on getting the new Molecule class working. I have removed the now unnecessary MoleculeDataPvt class and have instead got Molecule (and eventually Residue) holding MoleculeData directly. This stops me from stupidly copying the API three times... :-)\n\nI have finished writing most of the code of MoleculeData and the API is now pretty much finished. I have mapped this to Molecule and am now pretty pleased with the result. The functions of Molecule now all fall into either state querying functions or state changing functions, and all of the state changing functions are atomic (they either totally work or they do nothing). The main work left to do now is to fill in the stubs and try and get it all compiled.\n\nI've added a few more source directories - these are mainly stubs so that I can add API to missing classes and get Molecule / MoleculeData compiling without complaining about missing header files.\n\n"},{"author":"chryswoods","date":"2006-09-15T09:12:23.370951Z","commit":"38","message":"I have worked through most of MoleculeDataPvt and have updated it to the meet the requirements of self-managed objects. I am pleased with the MoveWorkspace class that is now used for all moves, as this ensures that each move function maintains state (e.g. a move will either complete fully or will not do anything - the molecule cannot be left in a half-moved state :-)\n\nCode is still broken...\n\n"},{"author":"chryswoods","date":"2006-09-14T15:41:10.623732Z","commit":"37","message":"I have made my way back to some actual programming(!). I am working on Molecule and MoleculeData, and am updating theirinternals to;\n\n(1) Fit in with the self-managed objects model, whereby functions either query the state or predictably change the stage\n(2) Fit in with the implicit sharing model, with optimised copying for the most common case - namely moving a molecule\n(3) Fit in with the maintain-state model, whereby a function should make a complete change or make no change - objects should never be left in a half-way state (this is 'maintain the invariant'?)\n\nThe code in my branch is so broken it is embarassing...!\n\n\n"},{"author":"chryswoods","date":"2006-09-13T14:15:12.476866Z","commit":"36","message":"First commit after the merge (the problem was with configure.pri which was causing the delta error)\n\nI am removing all trace of the qmake .pro files, so that I can switch fully over to cmake\n\n"},{"author":"chryswoods","date":"2006-09-13T13:51:42.099254Z","commit":"35","message":" *** RESULT OF SVN MERGE ***\nWorkingCopy Branch:  branches/users/chryswoods\nMergeFrom Branch:    branches/devel\nCommand:             svn merge -r 12:31 ../../devel/ .\n\nMerging the change to CMakeLists.txt files for cmake-based building, and also\nfixes related to getting the code to work on RedHat.\n\n( I am having to break this merge down into parts as I am having problems with subversion\n  reporting \"Delta source ended unexpectedly\" ) \n\n"},{"author":"chryswoods","date":"2006-09-13T13:48:17.318640Z","commit":"34","message":" *** RESULT OF SVN MERGE ***\nWorkingCopy Branch:  branches/users/chryswoods\nMergeFrom Branch:    branches/devel\nCommand:             svn merge -r 12:31 ../../devel/ .\n\nMerging the change to CMakeLists.txt files for cmake-based building, and also\nfixes related to getting the code to work on RedHat.\n\n( I am having to break this merge down into parts as I am having problems with subversion\n  reporting \"Delta source ended unexpectedly\" ) \n\n"},{"author":"chryswoods","date":"2006-09-13T13:44:14.344762Z","commit":"33","message":" *** RESULT OF SVN MERGE ***\nWorkingCopy Branch:  branches/users/chryswoods\nMergeFrom Branch:    branches/devel\nCommand:             svn merge -r 12:31 ../../devel/ .\n\nMerging the change to CMakeLists.txt files for cmake-based building, and also\nfixes related to getting the code to work on RedHat.\n\n( I am having to break this merge down into parts as I am having problems with subversion\n  reporting \"Delta source ended unexpectedly\" ) \n\n"},{"author":"chryswoods","date":"2006-09-13T13:32:40.187848Z","commit":"32","message":"*** RESULT OF SVN MERGE ***\nWorkingCopy Branch:  branches/users/chryswoods\nMergeFrom Branch:    branches/devel\nCommand:             svn merge -r 12:31 ../../devel/ .\n\nMerging the change to CMakeLists.txt files for cmake-based building, and also\nfixes related to getting the code to work on RedHat.\n\n( I am having to break this merge down into parts as I am having problems with subversion\n  reporting \"Delta source ended unexpectedly\" )\n\n"},{"author":"chryswoods","date":"2006-09-13T12:20:31.559320Z","commit":"31","message":"I have done it - the python modules now compile and work via cmake on redhat. The problem was all caused by a missing symbolic link! Redhat had libboost_python.so.1, but did not have the symbolic link to libboost_python.so\n\nThis meant that the linker linked each python module to libboost_python.a - the static library! This caused a headache, as it probably screwed up the registry of types across the modules. While I had resolved most of the problems by separating the wrappers from the module definition, it didn't solve everything.\n\nMy solution (or should I say hack!) is to add the symbolic link from /usr/lib/libboost_python.so.1 to /usr/lib/libboost_python.so manually, and to then add a configure test to the CMakeLists.txt file that checks to see if the shared library has been found (if not, it dies with an error).\n\n"},{"author":"chryswoods","date":"2006-09-12T14:44:05.016793Z","commit":"30","message":"I have now added Cmake support to all of the python wrapper modules. Also found most of the problem with poor linking on redhat- I need to separate the wrappers from the module definition so that other modules can link to the wrappers that they use. This prevents different modules using different copies of the same wrapper. I have made this change in the cmake wrappers and most things now work. The only problem now is that Sire.Mol won't load as it doesn't think that SireMaths::Vector has been wrapped (despite the fact that it patently has!!)\n\n"},{"author":"chryswoods","date":"2006-09-11T19:33:37.863911Z","commit":"29","message":"Beginning work on getting the python wrapping compiling and linking using cmake. Also updated the script to find the python version so that I can also get the python installation directory.\n\n"},{"author":"chryswoods","date":"2006-09-11T14:04:19.751681Z","commit":"28","message":"siretest, testlink and spier now compile and link using cmake.\n\n"},{"author":"chryswoods","date":"2006-09-11T11:32:56.853971Z","commit":"27","message":"Added more CMake files. Most of the code now compiles using cmake - I am now resolving some missing symbols when linking.\n\n"},{"author":"chryswoods","date":"2006-09-11T08:11:54.035069Z","commit":"26","message":"Adding CMakeLists files for other modules. Also added a copy of FindBoost.cmake as this was not available with the version of cmake that comes with gentoo.\n\n"},{"author":"chryswoods","date":"2006-09-08T15:37:59.159045Z","commit":"25","message":"Trying to get Sire running on Redhat WS 4 is more hassle than it should be, and has shown how poor my build system was! I have thus been learning cmake (after evaluating scons) and have begun updating the build system to use cmake. I have to work in devel as branches/chryswoods is too completely broken!\n\n"},{"author":"chryswoods","date":"2006-09-02T13:30:20.488948Z","commit":"24","message":"I have been working on the classes used to prevent over-streaming of implicitly shared data. \n\nI have also written a presentation for my meeting at Celltech on Tuesday.\n\n"},{"author":"chryswoods","date":"2006-08-31T15:53:38.080295Z","commit":"23","message":"I am working on integrating the split CoordGroup/CutGroup into Molecule. I have realised that a Molecule is just the combination of a CoordGroup with some metainfo, while in contrast, an AtomTable is just a combination of a ParamGroup with the same metainfo. This solves the problem of my messy MoleculeCGInfo class, that never seemed up to the job. I am now working on a new MoleculeInfo class that can be combined with any data store that saves things arranged by CGAtomID. Molecule will thus contain a CoordGroup, a MoleculeInfo and MoleculeBonds, while an AtomTypeTable will contain a QHash\u003cCutGroupID,QVector\u003cAtomType\u003e\u003e and a MoleculeInfo. MoleculeInfo is implicitly shared, thus improving copying speed and memory efficiency. Also, by making this split, I am not doing too much copying in molecule whenever I update its coordinates :-)\n\nCode is very broken\n\n(you would never guess that I am working to a deadline that says that I must get something stable out by Monday....)\n\n"},{"author":"chryswoods","date":"2006-08-30T16:04:59.464768Z","commit":"22","message":"I have now updated CutGroup and made it into a class that holds a QVector of AtomInfo objects, together with a CoordGroup. It is now much more efficient to change coordinates, and to separate the coordinates from the atoms.\n\nI have decided that CutGroup will not index its contents - it just contains a collection of atoms. The MoleculeInfo object is responsible for indexing a CutGroup, and allows mapping of an AtomIndex to a CGAtomID. There is no need for this functionality (or data) to be present in CutGroup as well.\n\nCode is broken (still need to merge AABox and new CutGroup into the rest of the code)\n\n"},{"author":"chryswoods","date":"2006-08-30T13:18:15.323849Z","commit":"21","message":"I have written the code for CoordGroup and have also moved AABox from SireMol into SireVol. I will need to update CutGroup and EditMol to make them aware of the changes, but that should be ok. SireVol no longer depends on SireMol :-)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2006-08-29T22:14:36.333603Z","commit":"20","message":"I begun work on MovedParts and realised that the coordinate copying from a CutGroup was inefficient (as it involved copying all of the Atotm information even though only the coordinates were changing). I have thus updated the inheritance hierarchy for Atom to inherit from Vector and AtomInfo, so now I can split the Atom into 'information' and 'coordinates'. I will use this with the new CoordGroup class that I am writing, so that I can have the coordinates in the implicitly shared CoordGroup class, which can be a parent class of CutGroup (which itself contains the QVector of AtomInfo objects). Copying a CutGroup into a MovedParts record will now only involve copying the CoordGroup part of the CutGroup, thus involving only an implicit copy of the CoordGroup, and not touching the rest of the atom. Writing to the CoordGroup will cause a copy of only the array of Vector objects, which as these are movable, allows the use of the more efficient memcpy routine.\n\nCoordGroup is in SireVol. My plan is to make SireVol work only with CoordGroup, and to move AABox into SireVol. I can then remove the dependency of SireVol on SireMol, and thus make SireVol into a purely geometric library.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2006-08-28T15:52:02.914167Z","commit":"19","message":"Working on the classes used to record how a molecule moves. I am designing a polymorphic class system that will use different classes to record different pieces of information, but which has a common class front-end (ChangeRecord) which provides a constant interface to the user.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2006-08-27T17:14:49.754486Z","commit":"18","message":"Forgot to include an update to the README file for the repository...\n\n"},{"author":"chryswoods","date":"2006-08-27T17:13:31.122388Z","commit":"17","message":"Cleaned up the automatic API documentation generation, and the output now looks pretty good. The output is fully integrated with the style of the rest of the site, and directory-based documentation looks a lot more organised and easy-to-follow :-)\n\n"},{"author":"chryswoods","date":"2006-08-26T22:51:37.173582Z","commit":"16","message":"I have written a python script that can be used to generate the doxygen-based API documentation for each Sire library. This produces a cleaner output, as it means that the documentation for each library is self-contained, and thus generates more quickly, and is more coherent (as I think that the docs should reflect the organisation of the source code)\n\n"},{"author":"chryswoods","date":"2006-08-25T11:26:14.241781Z","commit":"15","message":"I have started work on the forcefield classes, and have come up with a design for the forcefields (see http://doc.siremol.org/doku.php/modules/siremm/components/clj_forcefields) and also for how this will fit in with the simulation (http://doc.siremol.org/doku.php/modules/siresim/components/simulation) and system (http://doc.siremol.org/doku.php/modules/siresystem/components/system). \n\nIn addition, I have sorted out the molecular numbering scheme (see http://doc.siremol.org/doku.php/modules/siremol/concepts/moleculeid) and have added version numbering to Molecule.\n\nI have also worked out how to record the movement of molecules, and am beginning work on those classes (see http://doc.siremol.org/doku.php/modules/sireff/concepts/moving_molecules).\n\nThis code is highly broken and won't compile. I am commiting now just to keep a backup of what I have done so far.\n\n"},{"author":"chryswoods","date":"2006-08-08T21:01:50.457586Z","commit":"14","message":"I have fixed several bugs in the code used to assign parameters - there was a major bug in NameDB, whereby names and nameIDs were stored in the wrong columns! Also residue aliases were not searched for correctly as it searched for name and number, as opposed to name and/or number.\n\nI have got to move on now from SireDB and onto SireMM and running simulations. I have written a TODO list that contains outstanding problems and needed work which I will return to at a later date.\n\n"},{"author":"chryswoods","date":"2006-08-08T16:02:41.675032Z","commit":"13","message":"I have fixed the problem with the code ignoring parameters that were assigned user ID '0'. The problem was nothing to do with the core code (e.g. RelateID = 0 being used to indicate a missing parameter). The problem was merely that the ProtoMS reader had not associated the parameter with user ID \"0\" to anything, and thus the parameter was not found. I have modified the ProtoMS reader to assign the global parameters whenever it reads in a file, i.e. it associates dummy parameters for each of the parameter types with the user ID \"0\". Now the sb2 example assigns the correct atom parameters for both the reference and perturbed states (though there still appears to be a problem with the internals not being assigned...)\n\n"},{"author":"chryswoods","date":"2006-08-08T11:32:14.878078Z","commit":"12","message":"Added the GPL text to all of the current branches. They are now all in sync. I will work on branches/users/chryswoods, and from now will then merge into branches/devel, and then from here to trunk if branches/devel is stable.\n\n"},{"author":"chryswoods","date":"2006-08-08T11:29:03.823418Z","commit":"11","message":"I have planned how I will be managing the repository. I have described the layout in README.txt\n\n"},{"author":"chryswoods","date":"2006-08-07T17:51:17.324851Z","commit":"10","message":"Set up kdevelop to now work from the devel branch of Sire.\n\n"},{"author":"chryswoods","date":"2006-08-07T17:45:51.011029Z","commit":"9","message":"I have now correctly created the 'devel' branch. All development must occur in this branch, with periodic merging back to 'trunk' used to ensure that 'trunk' contains the latest version of Sire that is known to compile, link, run, and pass all tests.\n\n"},{"author":"chryswoods","date":"2006-08-07T17:41:17.227591Z","commit":"8","message":"Removing the old devel directory as, after reading the subversion book, I've seen that there is a better way to create it!\n\n"},{"author":"chryswoods","date":"2006-08-07T17:29:18.435398Z","commit":"7","message":"Made a mistake with the svn cp...\n\n"},{"author":"chryswoods","date":"2006-08-07T17:28:08.646119Z","commit":"6","message":"Copying the trunk to 'devel'. All development should now be conducted on 'devel' with svn merge used to update 'trunk' between stable versions.\n\n"},{"author":"chryswoods","date":"2006-08-07T17:19:55.512641Z","commit":"5","message":"Creating the branches/users directory that will be used to hold user-specific versions of Sire. A user can create their own branch and Sire and I will trust them to manage it any way they wish.\n\n"},{"author":"chryswoods","date":"2006-08-07T17:18:40.082002Z","commit":"4","message":"Creating the branches/devel directory that will contain development versions of Sire. The idea is that devel will contain versions of sire that are in development, and may not compile or run, while 'trunk' will contain the latest version of Sire that compiles, runs and passes certain tests. This should enforce good repository manners, and we can then take snapshots of 'trunk' to turn into releases.\n\n"},{"author":"chryswoods","date":"2006-08-07T17:05:10.428021Z","commit":"3","message":"I have downloaded the last revision from the google repository and have checked that it compiles and runs correctly :-)\n\nI have now modified the svn:ignore properties for all of the code directories so that svn ignores all of the auto-generated files.\n\nI have also now created three mailing lists for Sire;\n\nsire-users@googlegroups.com  for Sire users (when I eventually get some!)\nsire-developers@googlegroups.com  for Sire developers (ditto!)\nsire-svn@googlegroups.com  to monitor commits to the subversion repository.\n\n"},{"author":"chryswoods","date":"2006-08-07T15:59:09.935761Z","commit":"2","message":"This is the initial commit of Sire to the google code repository. This is actually revision 831 of my personal svn repository.\n\nSome extra files have been removed to keep the repository size down. I will eventually place the complete dump of my own repository online once google code allows file hosting. (its a 13MB bz2 file). If you want the original files before then, then please email me (chryswoods@gmail.com) and I will be happy to send you a copy.\n\nSire has been in development now for over a year and will be very powerful. However, it is still in an early developmental stage and is not ready for use. If you are interested in getting or developing sire then please email me, or look for the links for the sire mailing lists.\n\n==========================================================================================\nr831 | chris | 2006-07-25 21:55:38 +0100 (Tue, 25 Jul 2006) | 5 lines\n\nI have fixed some bugs in the assignment of parameters and now the sb2 example works a little more (test/SireDB/assign_sb2.py). It even assigns the atom parameters for the perturbed state. However, this has highlighted a major logic error on my part. At the moment I am using parameter number '0' to signify dummy and not-found. This is a problem, as when the user sets the parameter 0, the db reports it as not found and will then try to find a better parameter (hence why sb2 perturbed state has a total charge of 0.315 - the three supposedly dummy hydrogens have been assigned reference state parameters, with charges of 0.105 each). I will need to change the code so it uses 0 for dummy, and -1 for not found. Such a change is best not attempted at 10pm - it would lead to too many tired bugs...\n\nOtherwise the code compiles, links and appears to run well :-)\n\n"},{"date":"2006-08-07T13:56:31.313486Z","commit":"1","message":"Initial directory structure."}]}