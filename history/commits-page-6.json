{"Page":6,"TotalPages":28,"commits":[{"author":"chryswoods@gmail.com","date":"2014-02-03T17:03:39.000709Z","commit":"2275","message":"Fixed the weird CLJ bug. It was caused by a small miscalculation of whether\nI can discard a box pair based on only the sum of the integer delta values.\n\n"},{"author":"chryswoods@gmail.com","date":"2014-02-03T15:58:20.510668Z","commit":"2274","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-02-03T15:57:51.385803Z","commit":"2273","message":"Fix to generate the python wrappers...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-02-03T15:46:09.384552Z","commit":"2272","message":"I've added in the parallel code for the inter-group calculation. This all works\nreally well for lots of different cutoffs, but there is a discrepancy in the energy\nwhen the cutoff is 50 A / 50 A... Very strange.\n\n"},{"author":"chryswoods@gmail.com","date":"2014-02-03T12:14:04.960211Z","commit":"2271","message":"I've optimised the code to test if CLJBoxes are within cutoff (and to calculate\ntheir minimum distances), and have added a CLJCalculator class that will handle\nall of the parallelisation of calculating CLJBox energies.\n\n"},{"author":"nividic73@googlemail.com","date":"2014-01-31T15:37:52.546571Z","commit":"2270","message":"md integrator update"},{"author":"nividic73@googlemail.com","date":"2014-01-30T16:37:14.343549Z","commit":"2269","message":"new update MD integrator"},{"author":"nividic73@googlemail.com","date":"2014-01-30T11:57:33.130919Z","commit":"2268","message":"update to the standard MD integrator"},{"author":"chryswoods@gmail.com","date":"2014-01-30T10:49:51.857156Z","commit":"2267","message":"Added in the code to test a parallel implementation of the nonbonded energy calcualtion\nusing intel's threaded building blocks. Really easy to use and immediate 2x speed up\ncompared to the single-core code. All get the same energy, with original Sire code\ntaking 81 ms, the new serial Sire code taking 11.3 ms, and the test parallel code\ntaking 5.7 ms.\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-29T15:40:05.506711Z","commit":"2266","message":"I've run a quick test of the boxed CLJ energy calculation and it is extremely quick\non my mac (about 1 ms for the swap-cluster/water box energy, and 11 ms for the \nwater box intermolecular energy (compared to 71 ms for the original InterCLJFF\ncalculation). \n\nImportantly, this has sped up by 4-5 times the new CLJ energy, as now the cutoff\nblocks out huge chunks of the CLJ atoms, rather than every CLJ atom needing to\nbe considered.\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-29T15:12:58.117786Z","commit":"2265","message":"Python wrappers with the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-29T15:08:33.033763Z","commit":"2264","message":"I've added in the code to generate the work list for the CLJBoxes CLJ calculation\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-29T12:08:37.840260Z","commit":"2263","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-29T12:05:37.122853Z","commit":"2262","message":"Added a CLJBoxDistance class to store distances between boxes. This will be used\nwhen creating the task list of box-pairs whose non-bonded interactions need\nto be evaluated\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-29T11:43:36.764894Z","commit":"2261","message":"Added some unit tests for the space AABox distance functions\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-29T11:24:30.599045Z","commit":"2260","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-29T11:19:57.875246Z","commit":"2259","message":"Fixed a bug in the AABox withinDistance function (failed for overlapping boxes), and\nhave added a getMinimumDistance function to the spaces so that I can work out which\nAABoxes are within cutoff, and so should be included in the non-bonded calculation.\n\n"},{"author":"nividic73@googlemail.com","date":"2014-01-28T13:46:41.369317Z","commit":"2258","message":"Update the total energy after MD moves and added NaN support"},{"author":"chryswoods@gmail.com","date":"2014-01-27T17:11:20.706758Z","commit":"2257","message":"I've fixed bugs in CLJBoxIndex (as tested by the last committed unit test) and have\noptimised the code to box up atoms a little. So far, boxing atoms takes about the same\namount of time as converting them from Molecules to CLJAtoms\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-27T17:09:36.398027Z","commit":"2256","message":"Added a unit test for the CLJBoxIndex class (used to work out in which box each atom\nis located)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-27T15:30:04.790987Z","commit":"2255","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-27T14:54:18.660168Z","commit":"2254","message":"I'm working on filling in the API and debugging the CLJBoxes classes...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-24T17:40:06.528047Z","commit":"2253","message":"Python wrappers for the new CLJBox* classes\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-24T17:39:50.502793Z","commit":"2252","message":"Fixes to allow python wrappers to compile\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-24T17:22:34.593677Z","commit":"2251","message":"Starting work on the CLJBoxes and related classes that will be used to partition\natoms in space, thereby allowing the non-bonded cutoff to significantly improve\nthe efficiency of the calculation\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-24T12:54:33.561772Z","commit":"2250","message":"Adding functions to allow quick addition of CLJAtom objects to CLJAtoms collections\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-24T12:24:06.007548Z","commit":"2249","message":"Committing the python wrappers, including wrapping CLJAtom\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-24T12:23:35.948554Z","commit":"2248","message":"Fixes to aid python wrapping\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-24T11:48:21.464726Z","commit":"2247","message":"Optimised the code for converting molecules to CLJAtom/CLJAtoms objects (4 times faster!).\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-23T17:30:56.744144Z","commit":"2246","message":"Updated the python wrappers for the updated Multi* API\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-23T17:25:04.409009Z","commit":"2245","message":"Cleaned up the API of the Multi* classes and have made MultiUInt and mirror of MultiInt\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-23T14:54:11.640435Z","commit":"2244","message":"I've added a first pass at calculating the intermolecular CLJ energy of a group\nof molecules using MultiFloat/MultiInt. The result is about 8 times faster than\nthe equivalent in InterCLJFF and gives the same result :-)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-23T12:26:05.822693Z","commit":"2243","message":"Fixed a small bug in the AVX2 MultiInt code (missing \u003c comparison!)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-23T12:02:46.302537Z","commit":"2242","message":"Cleaned up the Multi* classes and added AVX2 support to MultiInt (with detection\ncode added to the CMakeLists.txt file) \n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-23T10:43:52.787218Z","commit":"2241","message":"Fixed a potential alignment bug in the AVX version of MultiInt\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-23T10:34:17.912029Z","commit":"2240","message":"Another AVX compile fix\n"},{"author":"chryswoods@gmail.com","date":"2014-01-23T10:31:35.257936Z","commit":"2239","message":"Fixing AVX bug\n"},{"author":"chryswoods@gmail.com","date":"2014-01-22T17:17:02.580820Z","commit":"2238","message":"Slightly optimised the energy expression and fixed bugs with the AVX version\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-22T16:53:40.250047Z","commit":"2237","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-22T16:53:13.557116Z","commit":"2236","message":"Fixed CLJFunction to use the correct comparison operators in all parts of the energy expression. This\nnow gives the correct energy on Linux :-)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-22T16:41:12.519129Z","commit":"2235","message":"Fixed a small compile bug in the SSE version of \nMultiFloat::logicalAndNot(MultiInt)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-22T16:37:25.101875Z","commit":"2234","message":"I've switched back over to using MultiInt for the ID as I think my linux error\nwas because I was assuming that floating point equality comparison was bitwise,\nbut it may be rounded... At the very least, it is clearly non-portable, so \nbest avoided.\n\n"},{"author":"nividic73@googlemail.com","date":"2014-01-22T12:37:02.836950Z","commit":"2233","message":"time to skip is working now"},{"author":"chryswoods@gmail.com","date":"2014-01-22T10:41:10.157663Z","commit":"2232","message":"Replacing SSE with manual comparison in compareEqual to see if thiss fixes the linux problem\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-21T18:40:31.824877Z","commit":"2231","message":"Fixed semantics of logicalAndNot and have used this in CLJFunction as a way of\navoiding compareNotEqual...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-21T16:45:18.847492Z","commit":"2230","message":"Fixed MultiInt so that it will compile with AVX. Still debugging on Linux. So far,\nLinux gives the absurd result that, when a != b and b == c that a == c...\n\n"},{"author":"nividic73@googlemail.com","date":"2014-01-21T16:35:12.339241Z","commit":"2229","message":"correct a bug in the != operator"},{"author":"chryswoods@gmail.com","date":"2014-01-21T13:57:34.656091Z","commit":"2228","message":"Continuing to debug - it appears that perhaps MultiFloat::compareNotEqual is not working...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-21T13:51:08.009445Z","commit":"2227","message":"Debugging the float conversion problem on Linux...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-17T15:57:48.394922Z","commit":"2226","message":"Cleaned up the code that cast values in CLJAtoms...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-17T15:47:25.028510Z","commit":"2225","message":"I've added a unit test for the reinterpret casting in CLJAtoms...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-17T15:44:59.961920Z","commit":"2224","message":"Updated python wrappers...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-17T15:26:54.057244Z","commit":"2223","message":"Moved all casting from int to float into CLJAtoms... This may fix the Linux problem...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-17T15:03:17.824784Z","commit":"2222","message":"I've changed CLJFunction to use a reinterpret_cast to MultiFloat, as the code\nthat worked on my mac did not work on Linux...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-17T14:13:35.372189Z","commit":"2221","message":"I've update CLJFunction to use the correct comparisons using MultiInt in the energy\nexperession. This doesn't appear to slow down the function and it means that I can\nproperly test if atoms have been masked out (e.g. ID set to 0) or if they belong\nto the same molecule (have same ID number)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-17T11:42:35.176192Z","commit":"2220","message":"Updated the python wrappers\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-17T11:34:14.410388Z","commit":"2219","message":"I've added a vectorised MultiInt class so that I can see if masking based on molecule\nID is fast enough to be used in CLJFunction...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-16T11:36:36.204967Z","commit":"2218","message":"Added timing in the function to convert Molecules to CLJAtoms. This lets me benchmark...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-16T11:32:09.542018Z","commit":"2217","message":"CLJVacShiftAriFunction works well, gives the same energy as InterGroupCLJFF, GridFF and GridFF2, \nand does so in significantly less time (2.3 ms compared to 5.8 ms for GridFF2, 25.1 ms for GridFF\nand 51 ms for InterGroupCLJFF!)\n \n"},{"author":"chryswoods@gmail.com","date":"2014-01-16T11:28:23.306637Z","commit":"2216","message":"Wrapped up the containers that are useful for CLJAtoms\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-16T10:25:20.415599Z","commit":"2215","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-16T10:25:07.568936Z","commit":"2214","message":"Added the code to create CLJAtoms from a single MoleculeView\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-15T16:42:59.457125Z","commit":"2213","message":"Fixed to allow everything to compile with the python wrappers, and updates to test/SireMM/testgridff2.py to use\nTestFF. So far, TestFF gives the wrong energy...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-15T16:41:53.917939Z","commit":"2212","message":"Python wrappers for the last commit...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-15T16:16:14.212955Z","commit":"2211","message":"I've moved the CLJAtoms object out of GridFF2 and into its own class, and have created\nfunctions to allow easy construction from SireMol::Molecules. To this end, I had to \nextend MultiFloat/MultiDouble with a MultiUInt class (vector of unsigned 32 bit integers).\nI have also moved the actual energy code into its own class (CLJFunction, derived to\nCLJVacShiftAriFunction), and have written a very simple forcefield (TestFF) to test\nall of the above. Now need to generate the python wrappers so that I can add the \ntest to test/SireMM/testgridff2.py...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-08T16:46:18.289439Z","commit":"2210","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-08T16:43:11.782537Z","commit":"2209","message":"I've moved the energy code into a special function and created a CLJAtoms object that \nholds just the vectorised coordinates and parameters of a set of atoms. I will use\nthis, plus energy calculating functions as the basis of the code to calculate fast\nCLJ energies. Timing shows that the code is now accurate and very quick\n(see test/SireMM/testgridff2.py), with most of the time (60%) now being the conversion\nfrom the current memory layout of a CoordGroup into the CLJAtoms layout. I will need\nto update GridFF2 to store the atoms using the new layout and will need to work out\nthe best way of maintaining this through the simulation...\n\nAlso, I found that adding \"if\" statements inside the energy loop was really painful,\neven if they were hard coded to give the same answer (e.g. always use arithmetic\ncombining rules). I guess that this prevents pipelining of the code, and so\nI will have to go down the route of creating specialised CLJ energy functions for\neach type of calculation... (arithmetic, geometric, periodic box, cartesian,\nsoft-core, each different cutoff type...!). I've also decided that I will abandon\ngroup-based cutoffs as they are a pain in the neck to code and have been shown\nto give a poor representation of the electrostatics.\n\nFinally, I've seen that the grid evaluation code is so fast that it has negligable\nimpact on the time.\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-08T14:16:33.129208Z","commit":"2208","message":"The fast version of GridFF2 calculates the energy in about twice the speed of the original...\nI can do better...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-08T11:46:06.328444Z","commit":"2207","message":"I've implemented all of the Newton-Raphson-refined approximate functions in MultiFloat\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-08T10:37:03.778227Z","commit":"2206","message":"Continuing to work on speeding up MultiFloat...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-07T17:48:21.155570Z","commit":"2205","message":"Working on the approximate functions in MultiFloat as I have seen that these are the \ncause of the numerical imprecision between GridFF and GridFF2. I want the speed of\nthe imprecise code, but not the imprecision... ;-)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-07T17:46:47.710318Z","commit":"2204","message":"Fixed a small problem with the extraction test (need to compare numbers\nin assert_almost_equal)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-07T15:45:48.988431Z","commit":"2203","message":"I've updated the energy evaluation term for GridFF2 and get comparable energies about\n5-10 times faster than GridFF. There is some numerical imprecision that I will now\nneed to investigate (as I am evaluating using float and summing with double)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-07T14:40:42.079276Z","commit":"2202","message":"Updated python wrappers to include new functions in Space (and derived classes)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-07T14:31:27.102056Z","commit":"2201","message":"Working on rewriting the GridFF forcefield to use MultiFloat/Double and Intel's TBB. This will\npave the way for the rewrite of the InterCLJFF forcefield to behave similarly, thereby\nmassively speeding up the non-bonded calculation (major bottleneck!)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-06T15:37:42.820308Z","commit":"2200","message":"I've merged branches/devel into trunk in preparation for a release...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-06T15:25:31.261760Z","commit":"2199","message":"Updated python wrappers for Vector, DistVector etc.\n"},{"author":"chryswoods@gmail.com","date":"2014-01-06T15:25:14.326517Z","commit":"2198","message":"Updated DistVector to fix a compile bug... Nearly ready to make a release...\n"},{"author":"chryswoods@gmail.com","date":"2014-01-06T15:09:09.761578Z","commit":"2197","message":"Updated Vector so that it can be accessed by index in Python and so that the behaviour when\ngetting the cross-product of parallel vectors is defined\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-06T15:00:03.621566Z","commit":"2196","message":"I've made changes to properly wrap the auto-conversion functions of NumberProperty and StringProperty,\nand have also replaced assert_equal with assert_almost_equal so that all of the tests now pass.\nI am ready to make a release :-)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-06T14:39:46.787364Z","commit":"2195","message":"Updated the python wrappers to use the new __len__ and __getitem__ functions, and generated using\nmy (now standard) ScientificLinux5 VM\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-06T14:38:50.890722Z","commit":"2194","message":"Disabling some compiler warnings so that the wheat can be distinguished from the chaff\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-06T12:01:25.667258Z","commit":"2193","message":"Added auto-generation of the \"__len__\" function and working on adding indexing functions for the ArrayProperty\ntype\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-06T12:00:29.039776Z","commit":"2192","message":"Working on giving indexing operators to the ArrayProperty type so that the SireBase unit tests can pass\n\n"},{"author":"chryswoods@gmail.com","date":"2014-01-06T10:51:26.357358Z","commit":"2191","message":"I've updated the default parameters for waterswap to match those that I used for \nthe large thrombin simulations\n\n"},{"author":"chryswoods@gmail.com","date":"2013-12-19T16:28:09.884100Z","commit":"2190","message":"Made a similar change to the python wrappers so that dependencies are also compiled in parallel\n"},{"author":"chryswoods@gmail.com","date":"2013-12-19T16:25:30.714215Z","commit":"2189","message":"I've upgraded Qt to 5.2 (final) and have added code to detect the number of cores and to compile all dependencies \nusing the maximum number of cores available (speeds up the initial cmake a lot!)\n\n"},{"author":"chryswoods@gmail.com","date":"2013-12-11T16:13:55.440597Z","commit":"2188","message":"Made sure compilation of inquire is disabled if SIRE_BUILD_GUI is OFF\n\n"},{"author":"chryswoods@gmail.com","date":"2013-12-11T14:45:26.331659Z","commit":"2187","message":"Small update to turn off default compilation of the graphical parts of Sire\n\n"},{"author":"nividic73@googlemail.com","date":"2013-11-29T16:15:32.886791Z","commit":"2186","message":"fixed a bug in the hbond contraint mode"},{"author":"chryswoods@gmail.com","date":"2013-11-28T17:18:39.470437Z","commit":"2185","message":"I've updated all of the Python wrappers to match the corelib (finally!). I've done this\nin a linux virtual machine and still need to test that this will all compile\n(as Sire is currently broken on linux, I will need to test this on OS X...)\n\nCode is broken\n\n"},{"author":"chryswoods@gmail.com","date":"2013-11-28T17:13:06.689483Z","commit":"2184","message":"I've added a patch for qmetatype.h so that it can be parsed by GCCXML. I am in the\nprocess of regenerating the python wrappers for the latest code on a linux virtual\nmachine as it looks like gccxml and py++ don't work well with Mavericks\n(I think because gcc has been removed and only clang remains - I have not had\nsuccess get gccxml to happily use a gcc 4.8 that I've installed...)\n\n\n"},{"author":"nividic73@googlemail.com","date":"2013-11-26T09:31:53.277084Z","commit":"2183","message":"minimization update"},{"author":"julienmich@googlemail.com","date":"2013-11-25T15:40:19.511821Z","commit":"2182","message":"Commit of Hanne's update to the pdb parser\n\n"},{"author":"nividic73@googlemail.com","date":"2013-11-25T15:03:10.038719Z","commit":"2181","message":"minimization and equilibration improvements"},{"author":"chryswoods@gmail.com","date":"2013-11-21T17:20:05.911741Z","commit":"2180","message":"I've added in functions to query the metatype information about a class and have\nbegun using these in inquire to pick out the TI object and plotting the \nPMF contained therein.\n\ncorelib is working but the python wrappers are broken\n(mavericks has destroyed my gccxml and py++...!)\n\n"},{"author":"chryswoods@gmail.com","date":"2013-11-21T14:45:36.180382Z","commit":"2179","message":"I've finished updating all of the RegisterMetaType lines. I took the opportunity\nas well of fixing many of the hidden overloaded virtual function errors, which\nreduces many of the compile-time warnings.\n\nStill need to update the python wrappers...\n\nCode is broken\n\n"},{"author":"nividic73@googlemail.com","date":"2013-11-21T14:27:48.960376Z","commit":"2178","message":"I started adding support for minimization and equilibration"},{"author":"chryswoods@gmail.com","date":"2013-11-21T12:01:00.928636Z","commit":"2177","message":"I'm in the process of adding greater introspection capabilities to the streamed\nclasses. This involves registering the base (root) class of all polymorphic\ntypes in RegisterMetaType so that I can safely cast the void* pointers returned\nby SireStream::load.\n\nI am in the process of updating the registration functions so the code is broken\n\nCode is broken\n\n"},{"author":"chryswoods@gmail.com","date":"2013-11-20T17:26:53.949898Z","commit":"2176","message":"I've got inquire displaying a simple graph on a mac :-)\n\n"}]}