{"svn": [{"date": "2006-07-25T22:55:38.000000Z", "commit": "831", "message": "I have fixed some bugs in the assignment of parameters and now the sb2 example works a little more (test/SireDB/assign_sb2.py). It even assigns the atom parameters for the perturbed state. However, this has highlighted a major logic error on my part. At the moment I am using parameter number '0' to signify dummy and not-found. This is a problem, as when the user sets the parameter 0, the db reports it as not found and will then try to find a better parameter (hence why sb2 perturbed state has a total charge of 0.315 - the three supposedly dummy hydrogens have been assigned reference state parameters, with charges of 0.105 each). I will need to change the code so it uses 0 for dummy, and -1 for not found. Such a change is best not attempted at 10pm - it would lead to too many tired bugs...\n\nOtherwise the code compiles, links and appears to run well :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-07-25T14:59:16.000000Z", "commit": "830", "message": "I have updated the DB classes to allow assignment of angle and dihedral parameters. All of the parameters of tip4p are now correctly assigned (both in python and in the C++ test case). I am now working on getting the larger SB2 and p38 test cases working (they don't currently!)", "author": "chryswoods@gmail.com"}, {"date": "2006-07-25T12:49:19.000000Z", "commit": "829", "message": "I have created the angle and dihedral tables, and generators, and code necessary to assign them :-)\n\nEverything compiles and appears to run well. I am missing the logic in angledb and dihedraldb to create tables and assign parameters, but I can add this after lunch :-)\n\nI have come up with really nifty algorithms for generating the angles and dihedrals - see anglegenerator.cpp and dihedralgenerator.cpp", "author": "chryswoods@gmail.com"}, {"date": "2006-07-24T22:43:15.000000Z", "commit": "828", "message": "I am about to write the angle, dihedral, improper and urey bradley tables. To start, I have swapped GroupedVector<Value,Index> to GroupedVector<Index,Value> as this is the more normal order (e.g. QHash<Index,Value>)\n\nCode compiles, links and appears to work ;-)", "author": "chryswoods@gmail.com"}, {"date": "2006-07-24T21:57:43.000000Z", "commit": "827", "message": "I have finished the testcase for the assignment of tip4p parameters. It works, and behaves almost identically to test/SireDB/assign_tip4p.py. I think that not only is this a good test, but also that it is a good example of the symmetry of the python and C++ API.\n\nI have also worked out why some template classes were screwing up virtual inheritance - it is because virtual inheritance won't work through classes that are not exported (e.g. via SIREDB_EXPORT). I will have to check all of my classes and ensure that those that are part of a hierarchy are all exported.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-24T19:02:33.000000Z", "commit": "826", "message": "I have written a C++ version of test/test.py for the unit test of loading and assigning the parameters of TIP4P. This doesn't work yet though, but happily, it does compile and link :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-07-24T13:26:22.000000Z", "commit": "825", "message": "Assignment of bond parameters is now working! test/test.py assigns the bonds for tip4p (ok, so not that impressive!)\n\nI have added the code that mirrors internal match relationships, so OW-HW matches HW-OW\n\nI have added some wrapping of internal lists/sets/vectors.\n\nI have also fixed the problem of saving binary data into a database. I have only fixed it for FuncDB and will need to go and fix it at every other place in the code...\n\nEverything compiles, links and appears to run well.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-23T19:53:08.000000Z", "commit": "824", "message": "I am wrapping up more of the assign bonds classes...\n\nBreak for dinner :-)\n\nCode is broken", "author": "chryswoods@gmail.com"}, {"date": "2006-07-23T17:28:48.000000Z", "commit": "823", "message": "I have finished wrapping up BondTable - the code links and appears to run. I still need to test the object however.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-22T00:04:02.000000Z", "commit": "822", "message": "working on wrapping BondTable - code is broken (well, only wrap_bondtable.cpp is broken :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-07-21T16:47:10.000000Z", "commit": "821", "message": "I have fixed the code so that it now compiles, links and seems to run ok. I now need to wrap up assign_bonds and test whether or not it works. If it does, then I should be able to copy all of the 'bond' classes to make the equivalents for angle, dihedral and urey-bradley.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-21T14:47:59.000000Z", "commit": "820", "message": "So much work.....\n\nI have got assign_bonds compiling, though it has yet to be tested. I think that I have finally sorted out the logic of the generation of internals. Essentially, the generator that you pass to assign_internals is used only when the table is first created. By default the generator is the standard one (e.g. BondGenerator) so the 'easy' case does what you expect. Because the generator is not used for existing tables that it will not overwrite a custom table hand-crafted by the more advanced user.\n\nI have also added polymorphic stream support to DynamicSharedPtr (i.e. you can now stream the pointer, which will take care of dynamic loading and saving itself!) - this needs to be tested as well.\n\nThe code is still broken (I need to move the python wrapping of the classes I moved from SireMol to SireMM)", "author": "chryswoods@gmail.com"}, {"date": "2006-07-20T18:27:30.000000Z", "commit": "819", "message": "I am working on reintegrating the moved code, and am also getting the parts of SireMM to compile. I have discovered many errors in MolInternalInfo and ParameterStore and am trying to fix these.\n\nCode is broken", "author": "chryswoods@gmail.com"}, {"date": "2006-07-20T16:51:50.000000Z", "commit": "818", "message": "I am in the process of moving files - code is very broken!!", "author": "chryswoods@gmail.com"}, {"date": "2006-07-20T16:45:06.000000Z", "commit": "817", "message": "I have remove the annoying warnings about strict aliasing, and I am working on how the internals are generated by default, and how this may be overridden. I am commiting now as I am going to move the InternalInfo classes into SireMM as they don't belong in SireMol.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-19T23:24:10.000000Z", "commit": "816", "message": "I have made some progress with the assignment of internals - I have written the interface class for it. I am now just stuck a little on the need to have moleculeinfo in molinternalinfo, so that invalid internals are not added to a molecule. This made me realise that while implicit sharing is great for running, it is horrible for dumping and loading, as it leads to over-duplication of data. I thus had to come up with a way of reducing bloat (see ideas/qdatastream_implicit). Now that I know that I can get around this problem, I am beginning to add MoleculeCGInfo to MolInternalInfo so that it can be used to check the molecule. Note that I will need to update MoleculeCGInfo so that it is a true implicitly shared class (otherwise I will waste so much with the constant copying of MoleculeCGInfo!\n\nOn another note, while I can assign the parameters of tip4p, and the reference state of SB2, I have not got the assignment of parameters of p38 nor the perturbed state of sb2 working!\n\nCode is broken.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-19T13:41:39.000000Z", "commit": "815", "message": "I have written the atom parameter assignment code (see test/SireDB/assign_tip4p.py) - and it works :-) - well at least for assigning the parameters for tip4p...\n\nThe code compiles, links and runs, and things seem to be fine (though there may be some errors in the dumping and loading of binary global database parameters... see test/db/protomsdb_speedtest.py and diff the two created databases)", "author": "chryswoods@gmail.com"}, {"date": "2006-07-19T00:59:59.000000Z", "commit": "814", "message": "I am working on the code to assign parameters from the database - I have created a RelationshipDB class that acts as the interface to the dbs containing relationships. I have written the framework and majority of the code to do the assignments. I have now just got to fill some things in.\n\nCode is broken", "author": "chryswoods@gmail.com"}, {"date": "2006-07-18T17:48:38.000000Z", "commit": "813", "message": "I have wrapped up the ParameterDB classes and they appear to work. Copying and streaming a ParameterDB appears to work as well :-)\n\nI think that it was a good idea to make the ParameterDB classes more flexible, and more like the ParameterTable classes. A couple of days work now has perhaps saved some confusion later.\n\nThe code compiles, links and appears to run well.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-18T13:44:48.000000Z", "commit": "812", "message": "I have continued wrapping up the database classes. Breaking for lunch...", "author": "chryswoods@gmail.com"}, {"date": "2006-07-17T22:47:50.000000Z", "commit": "811", "message": "I have updated most of the database code to use the new layout. The SireMM, SireIO and SireDB modules all compile and link. I am now working on updating the python wrapping.\n\nThe code is broken.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-17T17:56:16.000000Z", "commit": "810", "message": "I am in the process of re-working the database classes to mirror the design of the table classes. Things are going well, but I must now break for dinner :-)\n\nCode is broken", "author": "chryswoods@gmail.com"}, {"date": "2006-07-17T12:49:39.000000Z", "commit": "809", "message": "I have fixed an incredibally annoying bug that caused a segfault when serialising a ParameterTable. The problem was that QMetaType::save was passed the iterator object, rather than the pointer to the iterator object, e.g. line 49 in parametertable.cpp read;\n\nif (not QMetaType::save(ds, id, it))\n\nwhen it should read\n\nif (not QMetaType::save(ds, id, *it))\n\nSo much trouble and time was lost because of a single missing asterisk! I need to remember that there is no type-checking for QMetaType::save as it takes a void*, so I must be extra careful with its use.\n\nAnyway, now that that is fixed, the ParameterTable can be successfully streamed to and from a binary datastream (see the end of test/test.py). The design of ParameterTable is very powerful, with lots of flexibility and proper streaming (the stream itself contains the information about the components, rather than the user needing to set them up beforehand). This design, especially the streaming, is worth adapting for the ParameterDB classes. Now that I have ParameterTable, ParameterDB should mirror it, especially as this will allow the user to have extreme flexibility and power.\n\nI have decided to allow streaming of the ParameterDB class - it will stream the raw SQL needed to write the database. This will contain a table with the names and versions of the DB components, so that these can be created from the stream at load time.\n\nThe code all compiles and links and runs.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-14T15:53:53.000000Z", "commit": "808", "message": "I have nearly finished writing all of the machinery... I can now write python code like this (and it works!)\n\ntable = db.assign(m, assign_atoms( using_parameters(ChargeDB,LJDB), using_relationships(RelateAtomTypeDB)) )\n\ntable.assign(db, [ assign_atoms( using_parameters(ChargeDB,LJDB) ), using_relationships(RelateMRADB) ])", "author": "chryswoods@gmail.com"}, {"date": "2006-07-14T14:00:27.000000Z", "commit": "807", "message": "I have written more of the code that will be used to assign parameters. It is all working quite well now :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-07-14T11:30:19.000000Z", "commit": "806", "message": "I have fixed the name mangling problems of getBackTrace and now have pretty nice output (this was to follow up my post on qt-interest). I have moved this function to SireError as it should be there, and not in SireBase!", "author": "chryswoods@gmail.com"}, {"date": "2006-07-13T18:23:24.000000Z", "commit": "805", "message": "I am working on the classes that will be used to provide the nice syntax for the assignment of parameters. They are coming along well, and will be very powerful, yet easy to understand :-)\n\nThe idea is to enable the following syntax;\n\nparams = db.assign( mol, [assign_atoms( atms, using_parameters(ChargeDB,LJDB) ), \\\n                          assign_bonds( bonds, using_parameters(BondDB) ), \\\n                          using_relationships(RelateMRADB), \\\n\t\t          assign_dihedrals( dihs, using_parameters(DihedralDB), \\\n\t\t                                  using_relationships(RelateAtomTypeDB) ) \\\n\t\t         ] \\\n\t\t  )\n\nSo far I have written\n\nassign_atoms, using_parameters and using_relationships, and these all seem to work :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-07-13T13:42:56.000000Z", "commit": "804", "message": "I have wrapped up the LJTable and have got all of the dynamic casting from ParameterTable working :-)\n\nSee test/test.py (also test/SireDB/parametertable.py) to see how the system allow the creation of a parameter table containing all of the parameters of a TIP4P water molecule.\n\nAll of the code compiles, links and appears to work", "author": "chryswoods@gmail.com"}, {"date": "2006-07-13T11:00:19.000000Z", "commit": "803", "message": "Added the wrapping of ChargeTable and got the python wrapping of ParameterTable working so that it can cast using python classes rather than strings (cool :-)\n\nNow that I have the cast-via-strings code working I can write my classes so that they look template-ish from python but are really polymorphic underneath. This will allow me to write my parameter assignment code without the hassle of having millions of template instantiated classes.\n\nAll of the code compiles and runs well.\n\n(I have also added getbacktrace.cpp, which is some code I sent to the Qt-interest mailing list, and loadinfo.c which is some I got back :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-07-13T00:22:47.000000Z", "commit": "802", "message": "I have got the class-by-name code working and have wrapped up ParameterTable to give it a test. See test/test.py - this shows how I can create classes from passed strings and also how I can 'cast' back from the ParameterTable to AtomTypeTable by string  :-)\n\nThis was not originally working as the casting from TableBase to AtomTypeTable got stuck at the template class AtomTableT<AtomType>. I solved this problem (or rather hacked around this problem!) by adding both AtomTableT<AtomType> and AtomTable to the list of bases of AtomTypeTable in wrap_atomtypetable.cpp. Its not the best solution, but it seems to work ok. I think that the problem may be down to the template being instantiated in the wrapper library not being recognised by boost::python as being the same as the template instantiated in libSireDB, though looking at the boost python code I can't work out why this would be the case.\n\nThe code all compiles and runs and everything seems fine.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-12T16:50:34.000000Z", "commit": "801", "message": "I have finished updating the code. Everything now compiles, links and runs. sire, spier and siretest all work fine, as do the python modules.\n\nI have also now added the serialisation code for ParameterTable - this uses QMetaType for the polymorphic serialisation (see - there was a reason for the madness of the last couple of days :-)\n\nThe only problem at the moment is a crash with test/test.py as my new DB code causes an assertation failure (parent == 0 in DB component constructor...)", "author": "chryswoods@gmail.com"}, {"date": "2006-07-12T12:31:41.000000Z", "commit": "800", "message": "I have now updated SireDB and SireFF (and have cleaned up some crufty files).\n\nThe code is still broken, but there are only a few modules to go... :-)\n\nCommit 800 :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-07-12T11:45:41.000000Z", "commit": "799", "message": "I have now updated everything up to SireDB (which I have just started). The code is broken, but is getting there.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-12T00:34:01.000000Z", "commit": "798", "message": "Making progress upgrading the streaming operators in SireMol...\n\nCode is still broken", "author": "chryswoods@gmail.com"}, {"date": "2006-07-11T23:23:43.000000Z", "commit": "797", "message": "I have now finished updating SireMaths, SireCAS and SireBase - these now compiles and link. I am about to start fixing SireMol...", "author": "chryswoods@gmail.com"}, {"date": "2006-07-11T19:06:45.000000Z", "commit": "796", "message": "I am updating the classes to update them to the new QDataStream protocol. The code is very broken, but I am making good progress. I am up to SireCAS/power.cpp (alphabetical progress)", "author": "chryswoods@gmail.com"}, {"date": "2006-07-11T16:38:23.000000Z", "commit": "795", "message": "I have worked out how to have name based components in the ParameterDB and ParameterTable. I have implemented my ideas in these classes (though they are untested).\n\nI have also made progress cleaning up the data streaming operators and cleaning up the exceptions. I have remade SireError and have turned SireStream from a library for text streaming into library used to help with data streaming.\n\nThe code is very broken as I will need to work through all of the code and update all of the streaming operators...", "author": "chryswoods@gmail.com"}, {"date": "2006-07-10T22:24:05.000000Z", "commit": "794", "message": "I am thinking about how to assign the parameters from the database to the table.\n\nMeanwhile I am beginning to formalising all of the classes by ensuring that they have copy constructors, Q_DECLARE_METAINFO, binary datastreams, magic IDs and versions...", "author": "chryswoods@gmail.com"}, {"date": "2006-07-10T15:50:27.000000Z", "commit": "793", "message": "I have now tested (and fixed) the wrapping of AtomTypeTable. It is quite nice (the test cases are in test/SireDB/atomtypetable.py)", "author": "chryswoods@gmail.com"}, {"date": "2006-07-10T14:21:11.000000Z", "commit": "792", "message": "Fixed a compile bug in the wrapping of editres and have also fixed a crash when writing a PDB file (cannot pass ResNum to snprintf function as is can't cope with it)\n\nCode now compiles, links and runs without problem.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-10T12:44:04.000000Z", "commit": "791", "message": "I have cleaned up the wrapping and now everything compiles and runs, and the python scripts in test/ work again.\n\nsire, siretest and spier all work correctly, as do the python modules.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-09T20:58:25.000000Z", "commit": "790", "message": "Wrapping up AtomTable and AtomTypeTable. The code is broken...", "author": "chryswoods@gmail.com"}, {"date": "2006-07-09T15:01:10.000000Z", "commit": "789", "message": "I have now wrapped up the ID types, and rewrapped the Atom, AtomIndex and Element classes.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-09T00:18:14.000000Z", "commit": "788", "message": "I have updated the rest of the code so that it is compatible with the new class-based ID types. Everything now compiles and links, sire, siretest and spier work. I need to wrap up the new class-based ID types so that the test scripts will work.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-07T17:46:27.000000Z", "commit": "787", "message": "Updating the code to use the new class-based ID types. The code is still broken.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-07T13:22:52.000000Z", "commit": "786", "message": "I am now working on converting each ID type from a typedef into a class type. This should reduce bugs by increasing the type safety of the types, and should also ease the wrapping of functions that are distinguished by these types (since now the user can unambiguously say what type of ID they want to use)\n\nThe code is currently very broken !!", "author": "chryswoods@gmail.com"}, {"date": "2006-07-07T11:02:40.000000Z", "commit": "785", "message": "I have wrapped up AtomTable. I have also realised that I cannot use typedefs to overload functions (e.g. overloaded nAtoms via typedefs for CutGroupID and ResNum). I will need to make small classes to represent these types...", "author": "chryswoods@gmail.com"}, {"date": "2006-07-05T18:25:34.000000Z", "commit": "784", "message": "I have cleaned up some of the python wrappping and have also wrapped up all of the enums and function in the global Qt namespace.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-05T00:03:20.000000Z", "commit": "783", "message": "I have used boost::mpl to solve the problem of the python wrapping of Qt containers when returning non-const references to objects via the indexing operators. The problem was that this won't work if the containers contain POD types. I now use boost::mpl to change the return policy of these wrappers when the container contains a POD type.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-03T22:51:30.000000Z", "commit": "782", "message": "I have fixed some compile problems with the last revision (SireDB/wrap_atomtable.cpp) was not compiling due to problems with wrapGroupedVector.hpp\n\nI have also wrapped QTextStream", "author": "chryswoods@gmail.com"}, {"date": "2006-07-03T13:27:23.000000Z", "commit": "781", "message": "I have now wrapped up QList, QSet, QHash and QMap in addition to QVector. They all seem to work well, and behave exactly like the comparitive python types.\n\nThe code all compiles and runs, though the changes to __str__ that I introduced means that the python tests don't run. I will need to go over the python wrapping of quite a few things and update it.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-03T10:45:15.000000Z", "commit": "780", "message": "Got nice printing of list types, and have wrapped up some more QVectors...", "author": "chryswoods@gmail.com"}, {"date": "2006-07-03T00:02:28.000000Z", "commit": "779", "message": "I have completed the python wrapping of QString, QByteArray, QIODevice and QFile, and have fully sorted out the datastream operations. Things are really nice - I can even reverse-slice a QString, e.g.\n\ns = QString(\"Hello World!\")\nprint s[12::-1]\n\noutputs;\n\n\"!dlroW olleH", "author": "chryswoods@gmail.com"}, {"date": "2006-07-02T18:02:32.000000Z", "commit": "778", "message": "I have much improved the python wrapping of QString and have also now wrapped up QDataStream and QChar, and have got binary data streaming working :-)\n\nCode compiles and runs. Go play with Sire.Qt :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-07-02T00:50:30.000000Z", "commit": "777", "message": "I have sorted out the nice wrapping of QVector, and have exposed QVector<quint32>, QVector<qint32>, QVector<Atom> and QVector<AtomIndex>. I think that I have got a complete wrapping working, complete with automatic conversion from python tuple and list :-)\n\nThe code compiles and links, and sire, siretest, spier and python modules all seem to work.", "author": "chryswoods@gmail.com"}, {"date": "2006-07-01T01:00:55.000000Z", "commit": "776", "message": "I am in the process of improving the wrapping of QVector and QString. I want to provide a reasonably complete set of wrappers for the basic Qt classes so that they can be used with Sire. I also want to add a lot of conversion functions from lists/tuples/dicts to the Qt equivelents, as this helps create interesting and friendly syntax.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-30T17:30:41.000000Z", "commit": "775", "message": "I have wrapped up AtomTable and GroupedVector. I have also improved the wrapping of container classes and will extend this by creating better wrapping for the Qt container classes.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-30T13:07:16.000000Z", "commit": "774", "message": "I am still filling in the missing functions. The code is broken. The new code is very powerful however, with new functions that allow parameters to be directly copied into generic arrays, e.g. ChargeParameters can be directly copied into QVector<CLJParameter> arrays :-)\n\nI have also had some good ideas about how I will do checkpointing... I won't :-)\n\nI will make SimSystem into an implicitly shared class, and then the user can just copy it whenever they want. The copy will be the checkpoint. Implicit sharing means that only the things that change will be copied, so this should be relatively quick.\n\nThe user can then copy back to restore an old checkpoint, or can even branch the simulation in multiple directions. Implemented correctly, this will provide an incredibally powerful mechanism for writing complex simulations.\n\nI have also realised that the way we do MC moves in ProtoMS is a bit stupid. Currently we do;\n\nMCMove:\n   Choose what to move.\n   Get old energy of things that will move.\n   Make the move.\n   Get new energy of things that will move.\n   Calculate the difference in energy, accept or reject the move.\n\nThe MCMove is responsible for keeping track of the changes in energy and for doing the bookkeeping. Also, the move needs to keep track of what is moving.\n\nA better solution would be;\n\nMVMove:\n   Obtain the current total energy from the forcefield\n   Move some things (implicitly tells the forcefield what has moved)\n   Obtain the new total energy from the forcefield\n   Calculate the difference and accept of reject\n\nNow the forcefield keeps track of what has moved, and indeed has the old and new coordinates together when it calculates the change in energy. This means that it can do any caching or other tricks it wants, as it has all of the information at once. Implicit sharing again makes this memory efficient (as 'old' and 'new' coordinates are effectively shared across all forcefields). Also, the move is now easier to network, as only a single network request per move is required. It also works better with nested moves, as the forcefield itself knows how many things have moved, and it is not necessary for the MCMove to do any bookkeeping. The forcefield is also responsible for updating its total energy and keeping it up to date. This again is better than the MCMove trying to do that. Finally, this move doesn't add overhead to forcefields that require total energy calculations (e.g. QM) - they no longer have to expose a useless \"energy(components)\" function that can't do what it advertises.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-29T19:25:24.000000Z", "commit": "773", "message": "I have now filled in most of the API and the code now compiles, links and runs. I still need to wrap up the tables, at which point I will no doubt find more functions that I have missed! :-)\n\nI have yet to test any of the table classes...\n\nThe code at least now compiles, links and runs, and sire, siretest and spier all appear to work.\n\nI have also added a small test application (testlink) that tests a link of all libraries to ensure that there are no link errors or missing symbols.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-29T10:39:55.000000Z", "commit": "772", "message": "Still filling in functions... Code is still broken", "author": "chryswoods@gmail.com"}, {"date": "2006-06-28T19:14:44.000000Z", "commit": "771", "message": "I am still filling in the functions... code is still broken!", "author": "chryswoods@gmail.com"}, {"date": "2006-06-28T12:54:13.000000Z", "commit": "770", "message": "Still working on the parameter tables....! I have pretty much sorted out the API and am now filling in the missing functions. The code isbroken.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-27T18:30:36.000000Z", "commit": "769", "message": "Still working on the table classes. I am getting there, and think that I have sorted out the API that I want. The code is still very broken.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-26T18:15:35.000000Z", "commit": "768", "message": "Beginning work on BondTable - this means updating ParameterStore.\n\nThe code is broken\n\nI have also added code to allow conversion from python tuple to a QList, so that I have a nice syntax for Sire.CAS, e.g.\n\nf.evaluate( (x==5.0, y==3.2) )\n\nf.substitute( (g(x) == pow(x,2), h(x) == Sin(x)) )", "author": "chryswoods@gmail.com"}, {"date": "2006-06-26T16:06:14.000000Z", "commit": "767", "message": "Fixed link flags so that it compiles and links on scruffy\n\nThe timings for test/db/protomsdb_speedtest.py are similar to those recorded\nfor 736\n\n## cubert (gcc4.1.1)\n## reading parameter files took 966 ms\n## dumping database took 145 ms\n## loading database took 255 ms\n## dumping second database took 142 ms\n\n## scruffy (gcc 4.1.1, 64bit)\n## reading parameter files took 476 ms\n## dumping database took 74 ms\n## loading database took 110 ms\n## dumping second database took 50 ms\n\n(must remember when taking timings to ensure that the processor is running at full speed, i.e. initial tests for scruffy showed similar speed to cubert, but this was scruffy running at its lowest speed compared to cubert running at full speed :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-06-26T15:37:43.000000Z", "commit": "766", "message": "I had to add the private Qt header file to QSqliteDriver so that I know that it is always available for the compile (e.g. it wasn't available on scruffy!)", "author": "chryswoods@gmail.com"}, {"date": "2006-06-26T15:30:04.000000Z", "commit": "765", "message": "I have added the qsqlite driver and Qt-supplied sqlite3 source directly to the Sire codebase, in SqliteDriver. This means that the code will be directly compiled and linked with Sire, thus simplifying the distribution of the binary.\n\nAll of the code compiles, links and runs :-), and sire, siretest and spier work without problem, and the test scripts run with python2.3 and python2.4", "author": "chryswoods@gmail.com"}, {"date": "2006-06-26T13:00:32.000000Z", "commit": "764", "message": "I am so nearly there... The code compiles and runs ok. There is a small problem with finding the path to the qsqlite plugin, but I am in the process of fixing that. Once this is done, then the scripts will all work in either sire or in plain python :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-06-26T11:35:10.000000Z", "commit": "763", "message": "making a bit of a mess of the file moving...", "author": "chryswoods@gmail.com"}, {"date": "2006-06-26T11:33:11.000000Z", "commit": "762", "message": "Still moving files...", "author": "chryswoods@gmail.com"}, {"date": "2006-06-26T11:24:06.000000Z", "commit": "761", "message": "Renamed the modules - I now need to update all of the internals...\n\nCode is broken", "author": "chryswoods@gmail.com"}, {"date": "2006-06-26T11:21:07.000000Z", "commit": "760", "message": "I have just about finished getting Sire working correctly from within a normal python shell. Everything is linking and there are now only a few small issues to resolve. The most important is sorting out the namespace issues within python, namely changing SireModule to Sire.Module (so that I can write \"from Sire import *\" or \"from Sire.Mol import *\"", "author": "chryswoods@gmail.com"}, {"date": "2006-06-26T00:19:11.000000Z", "commit": "759", "message": "This is quite a major change - I have separated out all of the python wrappers into their own libraries. This will allow sire to be used with a normal python interpreter, and should simplify its use with Sire.\n\nNote that the code is still broken - splitting in this way has caused problems with missing functions that I have forgotten to export...\n\nThe code does however compile and install, and siretest and spier run correctly.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-25T14:12:23.000000Z", "commit": "758", "message": "Begining to move all of the Python wrapping code into separate directories and libraries. This will help me to enforce the separation of python from C++ (and also to get an idea of how large my C++ libraries are compared to their wrapping)\n\nCode is broken", "author": "chryswoods@gmail.com"}, {"date": "2006-06-25T13:35:08.000000Z", "commit": "757", "message": "I have got automatic python tuple to boost::tuple conversion working, and then boost::tuple to AtomIndex, Bond, Angle etc.\n\nThis means that I can now write in python;\n\nbonds.addBond( ((\"C\",1),(\"H\",1)) )\n\nwhich is much less verbose than\n\nbonds.addBond( Bond(AtomIndex(\"C\",1),AtomIndex(\"H\",1)) )\n\nAll code compiles and runs :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-06-25T01:56:33.000000Z", "commit": "756", "message": "I have got my head around the python conversion functions and am writing a converter to convert python tuples to boost::tuple<AtomIndex,AtomIndex>, so that I can create a nice syntax for creating bonds.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-23T16:50:35.000000Z", "commit": "755", "message": "I have fixed the problems with the residueinfo classes losing the information passed to them by the molinfo classes. The problem was that InternalInfo was not updating the groupids object of the extracted InternalInfo representing the residue.\n\nI have fixed more bugs and have also written and wrapped the MolDihedralInfo and ResDihedralInfo classes. These are shown and slightly tested in test/test.py\n\nAll of the code compiles, links and runs, and sire, siretest and spier appear to run without any problems.\n\nCode also works with icc (I've had to update the qmakespec rules for icc to include '-gcc-version=345 -gcc-name=gcc-3.4.5' in the QMAKE_CFLAGS so that icc uses the right version of gcc (it doesn't like gcc4!).\n\nIt would be nice to upgrade to icc9 but that doesn't have a non-profit version.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-23T13:22:48.000000Z", "commit": "754", "message": "I have added (and wrapped) the metadata objects for internal angles (MolAngleInfo and ResAngleInfo). I have also added some extra functionality to the iterator class so that the user can jump over groups that have the wrong residue combination.\n\nCode compiles and runs, though I have yet to fix the problem with the residueinfo object not picking up the internals from the molinfo object.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-22T17:51:17.000000Z", "commit": "753", "message": "I have created and wrapped up the ResBondInfo class and am beginning to test it. There seems to be a problem with the ResBondInfo reporting that there are no bonds in the residue, despite the MolBondInfo containing some...\n\nsire, spier and siretest all compile and run ok", "author": "chryswoods@gmail.com"}, {"date": "2006-06-22T16:52:24.000000Z", "commit": "752", "message": "I've completed the python wrappers and the code now all compiles and runs, and the MolBondInfo class appears to be working... (see test/test.py)\n\nsire, siretest and spier all appear to work.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-22T15:45:06.000000Z", "commit": "751", "message": "I am filling in functions and writing the python wrapping code for the MolInternalInfo classes. Code is still broken.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-22T12:53:26.000000Z", "commit": "750", "message": "Last night I split the BondResID, BondAtomID etc. classes out into internaldatatypes.h/.cpp, and then I defined equivalents for Angle and Dihedral. I have been debugging the code I wrote yesterday and it now (finally!) compiles, though there are still some missing template functions that need to be written, so it doesn't link.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-21T17:47:36.000000Z", "commit": "749", "message": "Still working on the bond meta info classes. Things are going well as I have now written InternalGroup, InternalGroupIterator and InternalInfo, and have integrated then with MolBondInfo. The code is still broken, but I should be able to fix it tonight.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-21T12:56:12.000000Z", "commit": "748", "message": "Continuing to work on the MolBondInfo object - I have now got a sufficient idea of how it will work that I am now working on the template base class that will be used to create MolBondInfo and all of the other internal info classes (ResBondInfo, MolAngleInfo, ResDihedralInfo etc. )\n\nCode is broken", "author": "chryswoods@gmail.com"}, {"date": "2006-06-20T18:18:15.000000Z", "commit": "747", "message": "Getting back to working on MolBondInfo - I am building an iterator so that I can iterate over sets of bonds without lots of copying.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-20T15:20:05.000000Z", "commit": "746", "message": "Updated the build system a little bit. The python flags are now automatically detected and there is a little more cleaning and automation. I have also added some more documentation to the configure.pri file and have cleaned up all of the local.pri files in the different sire module directories.\n\nAll of the code compiles, links and runs ok - sire, siretest and spier all seem to work.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-19T18:04:53.000000Z", "commit": "745", "message": "I have finished updating the code to use symbol hiding. The code now all compiles and runs correctly using gcc4.1.\n\nsire, siretest and spier all work.\n\nYou can disable symbol hiding either by setting sire.no_symbol_hiding to any value in configure.pri in Sire/trunk, or you can disable it on a module by module basis by setting it to any value in local.pri in the module source directory.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-19T12:54:51.000000Z", "commit": "744", "message": "I have upgraded cubert to gcc4.1 and am now updating the code so that it takes advantage of gcc4's symbol visibility support.\n\nThis is giving me the opportunity to remove dead and crufty code as well!\n\nThe code is currently broken :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-06-16T12:56:04.000000Z", "commit": "743", "message": "I have now created and python wrapped the AtomTypeTable and AtomTable classes (and AtomTableT and ParameterStore). They appear to work, and the code compiles, links and runs. sire, siretest and spier all appear to run correctly.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-15T17:10:42.000000Z", "commit": "742", "message": "I have spent the last couple of days working on the parameter table classes. I am still working out the details of how the parameter tables will be combined into a single class (see techdocs/testtemplatetypedef.cpp).\n\nIn terms of each of the tables, I have come up with the following design;\n\nVirtual base class:  AtomTable -> holds metainfo in AtomTableData class.\n\nThen derived class:  AtomTableT<parameter_type> : public virtual AtomTable\n                          \\_\n\t\t\t    this class holds the parameters themselves\n\t\t\t    in a ParameterStore object\n\nThen derived class:  AtomTypeTable : public AtomTableT<AtomType>\n\nVirtual inheritance and implicit sharing mean that even if I have a multipally inherited table class, e.g AtomTypeTable:ChargeTable:LJTable, then it would still have only a single AtomTable base class containing only a single copy of the metadata for the molecule. Then separating them out is easy, as the virtual inheritance ensures that a separated AtomTypeTable would take with it a copy of the AtomTable with its associated metadata.\n\nThe ParameterStore object is interesting; it stores the parameters in QVector groups, with a template-defined index used to index the groups. For AtomTableT, the index is CutGroupID. This means that the atom-based parameters are stored in QVectors that match up with the QVectors of atoms in the CutGroups.\n\nFor the internals (bond,angle,dihedral,etc.) I will use this class, but with a ResMapID. The internals will be broken down into groups according to their ResMapID. Each residue bonding combination is assigned a unique ResMapID, e.g. res 33 bond to res 33 may be given ResMapID = 1, while res 33 bonded to res 34 may be given ResMapID = 2. All of the bonds from res 33 to res 33 will then be stored in a different QVector to all of the bonds between 33 and 34, and these QVectors will be stored in a QHash indexed by the ResMapID.\n\nThe beauty of this scheme is that it allows trivial lookup of all of the bonds/angles/dihedrals/etc. that involve a particular residue, or group of residues, e.g. all bonds that involve residue 33 would be in groups with ResMapID 1 and 2, while those involving 34 would be in the group with ResMapID 2. I will cache this information (e.g. have a list of ResMapIDs for each residue) so that it is then trivial to go from sets of residues to sets of bonds/angles/dihedrals/etc.\n\nI will create MolBondInfo, MolAngleInfo and MolDihedralInfo classes that will act like the MoleculeCGInfo class, and allow the easy transformation from Bond/Angle/Dihedral objects to ResMapID:index objects. These may then be used to look up the internal parameters. I will also include sufficient information in the new Mol??Info objects so that they can be queried to return the set of ResMapIDs that contain the internals for a set of residues, and can map from ResMapID:index back to a bond/angle/dihedral.\n\nOnce these are complete, I can then create the tables that hold the internal parameters, e.g.\n\nBondTable : public BondTableT<Expression> (public virtual BondTableBase - contains BondTableData/MolBondInfo)\n\nAngleTable : public AngleTableT<Expression> (public virtual AngleTableBase - contains AngleTableData/MolAngleInfo)\n\nDihedralTable : public DihedralTableT<Expression> (public virtual DihedralTableBase - contains DihedralTableData/MolDihedralInfo)\n\nThe code is currently broken and will not compile.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-13T17:47:39.000000Z", "commit": "741", "message": "Now that the parameter databases look to be working, and that ProtoMS files appear to be read correctly, I am now working on the assignment of parameters and storage in parameter tables. This will be a complex piece of code relying on partial template specialisation and virtual inheritance to combine different sub-classes together - indeed it will be very similar to the database classes themselves.\n\nThe first steps have been the creation of separate files for ChargeParameter (replacement for 'double' representation of charge parameters), LJParameter and CLJPair. I have also created a SireDB::combine_parameter class that can default-combine parameters together, and an overridden CLJParameter class that will be used for the combination of ChargeParameter with LJParameter (this is specified via the partial template specialisation of choose_combine_holder_type from SireDB/combine_parameter.hpp)\n\nCode compiles, links and runs correctly, and siretest and spier work.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-13T14:09:45.000000Z", "commit": "740", "message": "The residue aliasing code does appear to be working - it was an error in test/test.py\n\nI have written;\n\nm.alias( res_name == \"SER\" and match, \"middle serine\" )\n\nwhen I should have written\n\nm.alias( (res_name == \"SER\") & match, \"middle serine\" )\n\nThis highlights the problem of python's operators...", "author": "chryswoods@gmail.com"}, {"date": "2006-06-13T12:50:53.000000Z", "commit": "739", "message": "I have wrapped up the MatchData family of classes - it is now possible to specify relationships in python and add those to the database directly :-)\n\nI am playing around with this in test/test.py (which demonstrates quite a few relationships)\n\nNearly everything seems to be ok - the only exception is that there may be an error when adding residue aliases. I will look into this after lunch.\n\nNote that python's operators are slightly more brain dead than C++. In python, you cannot use 'and' (it doesn't crash, just does the wrong thing :-(. You have to use '&'. Also, '&' has higher precedence that '==', so you have to write matches like;\n\ndb.relateCharge( (res_name == \"ALA\") & (atom_name == \"CH2\"), 0.5 )\n\nwhich compares to C++\n\ndb.relateCharge( res_name == \"ALA\" and atom_name == \"CH2\", 0.5 );", "author": "chryswoods@gmail.com"}, {"date": "2006-06-12T18:08:37.000000Z", "commit": "738", "message": "Working on some of the python code for SireDB - have written code that performs deep copies of databases, and can replicate the 'isA<T>()' functionality of the C++ versions.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-12T17:33:37.000000Z", "commit": "737", "message": "I have fixed a few more bugs that I noticed when loading the database (most importantly, that the atom type helpers were not passing on the information about which atom they referred to). I have also modified the dumping and loading so that it is possible to dump and load from a file, string or text stream. I have used to string dump/load functions to write a small python-based function that can take a deep copy of the database. This is something that is not possible in C++, as that cannot return an object by reference.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-12T15:53:48.000000Z", "commit": "736", "message": "I have completed the timings for scruffy, 64bit gcc4.1.\n\nThe timings to run the parts of test/test.py for the three systems were;\n\n##  icc on cubert:\n##  reading parameter files took 1134 ms\n##  dumping database took 107 ms\n##  loading database took 250 ms\n##  dumping database again took 108 ms\n##\n##  gcc3.4 on cubert\n##  reading parameter file took 1117 ms\n##  dumping database took 105 ms\n##  loading database took 250 ms\n##  dumping database again took 108 ms\n##\n##  gcc4.1 on scruffy\n##  reading parameter file took 580 ms\n##  dumping database took 42 ms\n##  loading database took 116 ms\n##  dumping database again took 43 ms\n\nThe dumped database files are identical for each of the three codes, even between cubert and scruffy (thus showing that the database dump is independent of 32bit or 64bit (and I hope that the use of QByteArray means that it should also be independent of endianess)\n\nThe timings show that there is nothing between icc and gcc3.4 on this test, and that scruffy is much faster than cubert! The reason that gcc and icc are showing very similar times is, I think, because they are both using gcc compiled libraries. I am sure that the icc version would be faster if it was linked to icc-compiled versions of Qt and GSL etc.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-12T15:42:15.000000Z", "commit": "735", "message": "I fixed the problem with the missing RelateMRADB - I had accidentally inherited it in CLJDB, so there were two copies in ProtoMSDB. This meant that a single copy could not be found by dynamic_cast (nor by the python wrapping) so it failed to appear. I have removed the extraneous copy and everything works now.\n\nI have debugged some more (there were problems with RelateMRDB not properly adding residue names) and now the database looks like it is correct. Dumping and loading of the database works, and I have been doing some timing (as the code now works using gcc3.4 and icc on cubert, and 64bit gcc4.1 on scruffy) - see test.py", "author": "chryswoods@gmail.com"}, {"date": "2006-06-12T12:53:28.000000Z", "commit": "734", "message": "I have wrapped up the ProtoMS file reader in python and have begun trying to load ProtoMS parameter files. I have fixed a few bugs, and it now appears to all work well. The only problem is that ProtoMSWS is not detecting that the database has a RelateMRADB component, so it is failing to read in the template classes.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-12T11:56:05.000000Z", "commit": "733", "message": "I have added the code necessary to allow Sire to compile and link using gcc4 (mainly updating all of the qHash declarations). sire, siretest and spier now all run correctly on scruffy (athlon64, gcc4.1, 64bit). Things are going well :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-06-12T10:17:55.000000Z", "commit": "732", "message": "Code now compiles, links and runs correctly with gcc 3.4 as well. I will now see if it still works with gcc4 on athlon64...", "author": "chryswoods@gmail.com"}, {"date": "2006-06-11T17:06:13.000000Z", "commit": "731", "message": "I have fixed the problem with the python wrapping of ProtoMSDB - the problem was that a class will not be wrapped unless all of the classes that are specified in bases<..> have also been wrapped (and specified before this class). ProtoMSDB was not wrapping because not_specified was not wrapped.\n\nIn debugging this, I have now compiled the code using icc (v8.1), and now sire, siretest and spier all compile, link and run correctly using this compiler.\n\nProtoMSDB wraps up, and its inheritance hierarchy looks good (run sire test/test.py to see). I still need to test this class, but the dumped database looks correct.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-09T17:42:38.000000Z", "commit": "730", "message": "I have fixed the problem with the DBBase failing to find the ParameterDB - the problem was that all of the DBBase were private or protected inherited. Need to have at least one public interited one to work. See testmultiple.cpp for more information and to play with this yourself.\n\nI am now struggling with the problem that the boost python wrapping isn't working and fails to output the ProtoMSDB class if I try to specify its inheritance - this needs fixing :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-06-09T14:30:34.000000Z", "commit": "729", "message": "I have written the code to wrap up the combined database classes and am beginning to test it. I am currently having the problem that the database components cannot find the pointer to the parent ParameterDB - it seems to be some obscure problem with dynamic_cast. I am looking into it...", "author": "chryswoods@gmail.com"}, {"date": "2006-06-08T17:28:59.000000Z", "commit": "728", "message": "I am working on the template classes (build_database, contains_relationships and contains_parameters) that will be used to combine database components together into a single poweful parameter database object.\n\nThe code is broken at the moment...", "author": "chryswoods@gmail.com"}, {"date": "2006-06-08T12:54:27.000000Z", "commit": "727", "message": "I have wrapped up the SireDB and SireMM user-facing database classes. I still need to wrap up the Match classes and sort out their operators...", "author": "chryswoods@gmail.com"}, {"date": "2006-06-08T11:08:52.000000Z", "commit": "726", "message": "I have filled in the missing functions and the code now fully compiles and links, and siretest, sire and spier all appear to run correctly.\n\nMy next job is to wrap up the database and matching classes in python so that I can write test scripts.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-07T17:21:38.000000Z", "commit": "725", "message": "Code now all compiles, but doesn't link. I will need to fill in the missing functions, then wrap up all of the new code and provide test cases.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-07T16:01:41.000000Z", "commit": "724", "message": "I have written all of the code now to read in a ProtoMS2 parameter file - I just now need to get everything to compile and link. I am having to adjust some of the SireDB code as I am making the distinction between using MatchMRAData for multiple atom matches, while only using MatchMRA for single atom matches.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-07T12:50:14.000000Z", "commit": "723", "message": "Now very close to finishing the ProtoMS parameter file reading class. I am putting in the final touches, e.g. the reading of parameter relationships for specified bonds, angles, dihedrals and Urey-Bradley groups. Things are looking up :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-06-06T17:44:22.000000Z", "commit": "722", "message": "I have added a Urey-Bradley term database and have written most of the ProtoMS parameter file reader functions. The code is still broken but it is now very nearly ready. I have added a ProtoMSWS class that provides a workspace in which data is held while the parameter file is being read. This prevents repeated lookup and generation of state data and has helped to abstract a lot of the low-level code away from the main ProtoMS class.", "author": "chryswoods@gmail.com"}, {"date": "2006-06-06T11:01:03.000000Z", "commit": "721", "message": "Committing the change of file name - code is still broken", "author": "chryswoods@gmail.com"}, {"date": "2006-06-06T10:59:29.000000Z", "commit": "720", "message": "I am in the process of renaming FFParentDB and FFChildDB to ParameterDB and DBBase, as these names more accurately convey how the classes are used, and also makes clearer code that uses these classes, e.g. ProtoMS::read(QString filename, ParameterDB &db) is a lot more clear than ProtoMS::read(QString filename, FFParentDB &db).\n\nCode is broken", "author": "chryswoods@gmail.com"}, {"date": "2006-05-26T17:51:07.000000Z", "commit": "719", "message": "Added the code necessary to allow functional terms to be added to the database, and then for the functions that are composed of those terms to be used as parameters. I have also written the code to allow residue aliases to be used. This allows the chain templates of ProtoMS to be loaded up, and is actually quite elegant (and more powerful).\n\nCode is broken", "author": "chryswoods@gmail.com"}, {"date": "2006-05-25T17:50:57.000000Z", "commit": "718", "message": "Making headway adding terms to the function database. I am using the SireCAS::Function code that I built into SireCAS. This does almost exactly what I want, and will allow for very flexible (and recursive) substitution. Code is broken", "author": "chryswoods@gmail.com"}, {"date": "2006-05-25T16:08:16.000000Z", "commit": "717", "message": "I have written the database containing relationships based on atom types. The code is very similar to that for the atom names and numbers, which is good as I am beginning to feel that this design is correct (the code is now flowing, rather than spluttering!)", "author": "chryswoods@gmail.com"}, {"date": "2006-05-25T12:28:56.000000Z", "commit": "716", "message": "Writing the code for matching atom types. Have written MatchAtomType and MatchAtomTypeData and have added the match helpers for these classes (atom_type == ... and atom_element == ...).\n\nI am about to start writing the RelateAtomTypeDB class that will hold the matching relationships involving atom types.", "author": "chryswoods@gmail.com"}, {"date": "2006-05-24T17:13:54.000000Z", "commit": "715", "message": "Still working on matching. I am now at the point where I have the following tasks to complete;\n\n(1) Write code to allow 'terms' to be used in FuncDB. Each FuncDB will contain a database of terms, with symbols used to represent the terms in the equations. These symbols will be substituted when the parameters are assigned?\n\n(2) Write code to provide the atom type DB and MatchAtomType classes. This will contain the logic to allow matching on atom types, including wild atom type matching, and wild-element type matching.\n\n(3) Write code to load relationships (see the template readers in ProtoMS::read)\n\n(4) Write parameter table code - this will take ParentTable and ChildTable and allow them to be combined into a generic table that will hold all of the different assigned parameters. I have still to work out how this will work with regards to the more complex combined types that will be produced by the database...\n\n(5) Write the code to do the actual parameter assignment. Once this is done I shall be able to assign a wide variety of forcefields and can then move on to writing the forcefield and simulation code. :-)\n\nThe code now compiles and links, and sire and siretest run without problems. I have not tested any of the new SireDB and SireMM code...", "author": "chryswoods@gmail.com"}, {"date": "2006-05-24T12:43:03.000000Z", "commit": "714", "message": "Making lots of progress filling in the machinery of RelateMRDB and RelateMRADB. Code is still broken.", "author": "chryswoods@gmail.com"}, {"date": "2006-05-23T17:23:43.000000Z", "commit": "713", "message": "SireDB is taking such a long time to write... Code is still not ready and is broken\n\nI have split all of the name matching into a new NameDB class. This abstracts all name and case-sensitivity code into a single location. I am in the process of finishing off RelateMRDB, and I think that it is looking ok. There is definitely more logic in it than there was originally. I have yet to work out how I will deal with reverse matching... (e.g. will need to know the order of a multi-atom match, e.g. have I matched atom0-atom1 or atom1-atom0. This is important for chained searches, e.g. can't pair up a mol/res match of atom0-atom1 with an atom match of atom1-atom0!). There are also implications for non-symmetrical forcefield terms, and coupled terms that do distinguish between atom0-atom1 and atom1-atom0... (though I am not sure how?)", "author": "chryswoods@gmail.com"}, {"date": "2006-05-23T12:41:40.000000Z", "commit": "712", "message": "Continuing work on SireDB. I am on yet another small redesign (one day I will finally be happy...). I am moving the molecule and residue matching criteria up into a parent class as these should be separate from the atom matching criteria. This way, I can match the molecule and residue, then match the atom via name (MatchMRA), atom type (MatchAtomType) or smiles (MatchSmiles). The molecule and residue criteria help limit the matching to specified molecules and residues.\n\nI have added criteria for the molecule group (e.g. \"protein\" or \"solvent\") and also state (e.g. \"reference\" or \"perturbed\") to the molecule matching criteria. This will allow the limiting of matching to particular groups of molecules of particular states (e.g. lambda states). This, combined with a new way of 'and' combining matches (last match overrides first) means that I will soon be able to allow the user to override match types when assigning parameters, e.g. could do\n\nparams = db.assign( my_molecule, mol_state == \"perturbed\" );\n\nor to do name aliases\n\nparams = db.assign( my_molecule, mol_name == \"p38\" );\n\nThe passed MatchMR (mol/res) criteria are and-combined with the matching criteria of each atom, overriding whatever else is set. The user is thus able to fine-tune the parameter assignment, e.g. could renumber from 1 via;\n\n##########\ni = 0\nforeach residue in mol.residues():\n   i++\n   params[i] = db.assign( mol, residue, res_num == i )\n##########\n\nThe 'res_num == i' will overwrite whatever the res_num was when the residue is examined. This allows residue renumbering without the hassle of actually renumbering the residues in the molecule.\n\nIn addition to this I have also written the AtomTypeDB, used to store atom types. I will need to modify this so that it will be able to access atom types by name, rather than as current via name and element.", "author": "chryswoods@gmail.com"}, {"date": "2006-05-18T16:57:00.000000Z", "commit": "711", "message": "Still working on the databases. Have cleaned the code up so that it now all compiles, siretest works as does sire and spier.\n\nDatabase and matching code is still untested.", "author": "chryswoods@gmail.com"}, {"date": "2006-05-18T12:41:52.000000Z", "commit": "710", "message": "I have added SireFF and SireMM back to the code, and have cleaned them up so that they compile again (though this has been achieved mainly by removing old code).\n\nWorking on RelateDB, which forms the base class of most databases that want to relate parameters to both user supplied ID strings, and also to atom matching relationships.\n\nCode is broken", "author": "chryswoods@gmail.com"}, {"date": "2006-05-16T12:55:24.000000Z", "commit": "709", "message": "Working on the logic of adding and searching for atomic relationships. Code is broken.", "author": "chryswoods@gmail.com"}, {"date": "2006-05-15T16:21:23.000000Z", "commit": "708", "message": "Still working on SireDB. At a notable point because the code (finally) compiles and runs again. sire and siretest work fine.", "author": "chryswoods@gmail.com"}, {"date": "2006-05-15T13:09:23.000000Z", "commit": "707", "message": "Updating code to reflect new names. Also removed atom type and smarts from MatchAtom (as they are no longer used there) and cleaned up MultiMatch as it was a bit of a mess! Code is still broken", "author": "chryswoods@gmail.com"}, {"date": "2006-05-15T12:21:02.000000Z", "commit": "706", "message": "Renaming SireDB files - I have a clear idea of how this will now all work. Code is broken", "author": "chryswoods@gmail.com"}, {"date": "2006-05-11T13:19:07.000000Z", "commit": "705", "message": "I am slightly redesigning the Match classes and RelateDB as I have come up with a cleaner design that is also a lot more extendable. I now use a virtual class hierarchy routed on MatchData. There will be MatchMRAData which matches Molecule/Residue/Atom combinations (molecule name, residue name and/or number, atom name and/or number). There will also be MatchAtomTypeData, which matches atom type combinations, and MatchSmilesData, which will match smiles strings.\n\nThese will all pair up with database classes, e.g. RelateMRADB, RelateAtomTypeDB and RelateSmilesDB.\n\nThe user can then include whichever relationships they wish in their database, with the order of assignment controlled by the order in which they are multiplally inherited in the database class, e.g.\n\nMMDB : public FFDB<CLJDB,BondDB,AngleDB,DihedralDB,RelateMRADB,RelateAtomTypeDB,RelateSmilesDB>\n{\n...\n};\n\nThis builds a database that contains CLJ, bond, angle and dihedral parameters, and searches for parameters first by inspecting molecule/residue/atom names and/or numbers, then atom types for any missing assignments, then finally smiles strings for anything else that is unassigned.\n\nIf you want to match smiles strings first, then create the class;\n\nMMDB2 : public FFDB<CLJDB,BondDB,AngleDB,DihedralDB,RelateSmilesDB,RelateMRADB>\n{\n...\n};\n\nI still need to create the FFDB class. This will be a template that will automatically include the FFParentDB class and will provide the additional functionality needs to create all of the tables, parametise the molecule, dump and load to a file, serialise and deserialise from a binary datastream etc. It is basically a wrapper than simplifies the creation of the user-facing database classes.", "author": "chryswoods@gmail.com"}, {"date": "2006-05-10T13:15:04.000000Z", "commit": "704", "message": "Continuing to write the RelateDB - I have written the code to create all of the tables, and to map molecule, residue and atom names to NameID identifiers.\n\nCode is broken.", "author": "chryswoods@gmail.com"}, {"date": "2006-05-09T18:02:44.000000Z", "commit": "703", "message": "Working on the actual atom relationship database class (RelateDB). Also added the original references for Smiles, together with the algorithm used to generate a unique smiles string. These will come in handy when I finally write my smiles and smarts parsers and generators.\n\nCode is broken!", "author": "chryswoods@gmail.com"}, {"date": "2006-05-08T17:30:00.000000Z", "commit": "702", "message": "I have wrapped up the Match classes in python and have also begun writing using tests for them. So far things are working well (code all compiles and links, siretest runs without error, sire test/test.py works etc). The only problem is that while the python wrapping correclty maps the .__and__ function to the c++ operator, it fails to map the python 'and' operator to the c++ operator. (see test/test.py to see what I mean). This is something that I will worry about at a much later date, as for the moment, I am only interested in using the Match classes from within the parameter file reader classes in c++.", "author": "chryswoods@gmail.com"}, {"date": "2006-05-08T12:51:47.000000Z", "commit": "701", "message": "Still working on atom matching (and the DBMatch classes). I've taken the time to get the code to compile and link so that I can go on to test what I have written so far. I have also cleaned out all zero-length files that are no longer necessary.\n\nCode compiles, links and runs, and siretest works, as does spier and sire test/test.py", "author": "chryswoods@gmail.com"}, {"date": "2006-05-05T12:54:43.000000Z", "commit": "700", "message": "Finally making some headway with the atom matching classes. Code is still very broken, but I am can now see land.", "author": "chryswoods@gmail.com"}, {"date": "2006-05-04T12:59:03.000000Z", "commit": "699", "message": "After a lot of thought, I think that I have come with a way to have a nice syntax for atom matching that can also satisfy the tight requirements for atom matching in the database.\n\nI have come up with the MatchData class. This contains all of the information specified during the construction of the match, which will then be analysed by specific DBMatch classes (DBMatch1, DBMatch2 etc.) which will then apply the more stringent constraints and throw a run-time exception if there is a problem.\n\nHelper classes will then allow a nice syntax to be used to specify matches, e.g.\n\ndb.matchCLJ( \"42\", mol_name == \"p38\" and res_name == \"ALA\" and res_has_inter_bond_via(\"C\") and not res_has_inter_bond_via(\"N\") and atom_name == \"CA\" );\n\nCode is really broken and SireDB is filled with half-forgotten classes as I try and work out how best to get atom matching working...", "author": "chryswoods@gmail.com"}, {"date": "2006-05-02T18:03:03.000000Z", "commit": "698", "message": "I am continuing pursuing the goal of splitting off the atomic relationships from the actual parameters. I have been creating the Match classes, which are actually quite complex. The design will however allow nice syntax such as;\n\ndb.relateCLJ( \"44\", Match().molecule(\"p38\").residue(\"ALA\", InterResBondTo(\"N\") and InterResBondTo(\"C\")).atom(\"CA\") );\n\nThis also solves the problem of residue position in a chain. Now I just specify which atoms do, or do not, have inter-residue bonds connected to them (without needing to say which residues or atoms they are actually bonded to)", "author": "chryswoods@gmail.com"}, {"date": "2006-05-02T13:30:41.000000Z", "commit": "697", "message": "I am now working on generalising the code used to match atomic relationships (atom called \"CA\" in any residue called \"ALA\" in molecule called \"p38\") so that it can be used across different database modules, e.g. CLJ, Bond, Dihedral etc.\n\nTo do this, I will create a RelateDB while will hold atomic relationships and will assign each one a parameter number. Then each database module can then relate parameters to these RelateDB parameter numbers. To facilitate passing relationships to the database modules I am now creating a Match (and also Match2, Match3 and Match4) class, that can be used to express atomic relationships using a clear syntax, e.g.\n\ndb.relateCLJ( \"14\", Match().molecule(\"p38\").residue(\"ALA\").atom(\"CA1\") );\n\nor\n\ndb.relateBond( \"23\", Match2().molecule(\"p38\")\n                             .residue0(\"ALA\").atom0(\"CA\")\n\t\t\t     .residue1(\"ALA\").atom1(\"HA\").delta(0) );\n\nI am still working on the Match classes, and the code is broken :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-04-28T17:40:40.000000Z", "commit": "696", "message": "I am still working on SireDB... I am about to update AtomMatchDB to use a base class to find tables for atom parameters based on molecule and residue names (with the same case-sensitive, then case-insensitive matching used as with the atom names). This will allow the same code to be used to match atom parameters and also for specified bond / angle/ dihedral/ other parameters.\n\nCode is broken", "author": "chryswoods@gmail.com"}, {"date": "2006-04-28T12:13:35.000000Z", "commit": "695", "message": "I am working on building the parameter table classes to use the same class structure as the parameter database classes. I am also consolodating the split of SireFF into SireDB, SireFF and SireMM.\n\nCode is very broken!", "author": "chryswoods@gmail.com"}, {"date": "2006-04-26T15:50:00.000000Z", "commit": "694", "message": "I have reorganised the directories. I now need to work through each new module and integrate it with the rest of the code.", "author": "chryswoods@gmail.com"}, {"date": "2006-04-26T15:31:06.000000Z", "commit": "693", "message": "I am now working on integrating SireFF with the new Molecule/EditMol data structures, as well as the new SireCAS module. Code is broken. I am planning to split the parameter database core from SireFF and place it into its own SireDB library. I will also split out the molecular mechanics specific code into SireMM. The new arrangement will mean;\n\nSireDB: Base classes of all parameter (and other?) databases. Holds FFParentDB, FFChildDB, ValueDB and Func12DB etc. Also holds AtomType and AtomMatchDB.\n\nSireFF: Base classes and machinary for all forcefields. Holds FFWrapper, Energy<T>, Mutators?, etc.\n\nSireMM: Holds all of the MM forcefields and parameters. BondDB, CLJParameter, CLJDB, MMDB, CLJFF, InterCLJFF etc. All pure MM forcefields will be able to be constructed and held within this library. This will contain Opls02FF, Amber95FF, GAFF, CharmmFF etc.\n\nSquire: Holds all of the QM forcefields and machinery. Holds parameter databases, functional forms, integrators, etc. Squire may eventually grow into a large application in its own right, with many sub libraries, e.g. SquirePDE, SquireHF etc. These libraries will hopefully be based on libSquire. One such library will be SquireMM, which will implement the QM/MM functionality.", "author": "chryswoods@gmail.com"}, {"date": "2006-04-26T13:12:23.000000Z", "commit": "692", "message": "I have got most of the CAS now working :-)\n\nBoth siretest and sire test/test.py work as expected, and I have also now fixed the bugs when substituting f(x) into an expression containing f(x') (etc.)\n\nI have also added the remaining trig funcs, and now have the complete basic complement (sin, cos, tan, sec, csc, cot, plus all their inverses, plus all of their hyperbolic forms and hyperbolic inverses). The only basic type of expression that I think I am now missing is a logarithm. While I have Ln, I need log10 and log_a\n\nFuture work for SireCAS must be sorting out the series expansions. This will involve creating an 'order' symbol (e.g. O(n^2)), and also filling in the series expansions of all of the implemented functions. I also need to work on the expanding and collapsing expressions, and on implementing some simplification logic (e.g. converting all trig functions to variations of e^x, then collapsing).\n\nFinally, I need to look into how on earth I could implement integrating a product/quotient...\n\nThe speed of SireCAS is still high, with the RunTests test still giving the result;\n\na = 1.24999e+06, ms = 1003", "author": "chryswoods@gmail.com"}, {"date": "2006-04-25T17:46:14.000000Z", "commit": "691", "message": "I have nearly finished the Function class, and have nearly got function substitution working. I have also sorted out the operators a little more, though there is still the unresolved problem of getting a SymbolExpression from an ExBase==ExBase (which returns a bool).", "author": "chryswoods@gmail.com"}, {"date": "2006-04-25T13:33:45.000000Z", "commit": "690", "message": "I am currently working on the generic functions that will be used in SireCAS to represent either unknown functions, or functions that are too complex to represent completely (e.g. SireFF will use this to represent the instantaneous energy of an atom as energy(x,y,z), and thus the instantaneous force on the atom will be the vector [ energy(x',y,z), energy(x,y',z), energy(x,y,z') ]. (this is possible if it is assumed that the positions of all other particles in the system are constant, which is true during an instant). This will allow SireFF to mix forces calculated via the forcefields with forces calculated via derivatives of generic SireCAS functions (e.g. user-supplied restraint functions, or umbrella terms).", "author": "chryswoods@gmail.com"}, {"date": "2006-04-25T09:28:12.000000Z", "commit": "689", "message": "siretest runs correctly, and sire test/test.py now also runs correctly. The timing and value for the test in SireTest/runtests.cpp gives the result;\n\na = 1.24999e+06, ms = 1018\n\nthis compares to\n\na = 1.24999e+06, ms = 1093\n\nfor SireCAS in version 666", "author": "chryswoods@gmail.com"}, {"date": "2006-04-24T23:33:36.000000Z", "commit": "688", "message": "I have fixed some bugs in SireCAS, though I have yet to sort out finding the right operators in the python wrapper...", "author": "chryswoods@gmail.com"}, {"date": "2006-04-24T18:00:00.000000Z", "commit": "687", "message": "I have cleaned up the integration and differentiation of single functions and am now adding in the hyperbolic and inverse trigonomic functions.", "author": "chryswoods@gmail.com"}, {"date": "2006-04-24T14:02:01.000000Z", "commit": "686", "message": "I have added a unit test for SireCAS. The unit test works quite well. The test/test.py script still doesn't work however, due to problems with choosing the wrong overloaded operators. It is so annoying...", "author": "chryswoods@gmail.com"}, {"date": "2006-04-24T10:31:34.000000Z", "commit": "685", "message": "Added tests for SireMaths::Complex, and also cleaned out tests for obsoleted classes. Also changed SireMaths::areEqual to use the gsl_fcmp function.", "author": "chryswoods@gmail.com"}, {"date": "2006-04-23T23:18:41.000000Z", "commit": "684", "message": "I am fixing bugs in the code (most of test/test.py doesn't work). I've fixed a couple of stupid bugs in SireMaths/complex.h which were causing me a major headache... Note to self - check that copy constructors actually copy things properly!", "author": "chryswoods@gmail.com"}, {"date": "2006-04-21T17:36:54.000000Z", "commit": "683", "message": "SireCAS now compiles and links. I have added all of the trig functions (sin,cos,tan,csc,sec,cot) together with their integrals and derivatives.", "author": "chryswoods@gmail.com"}, {"date": "2006-04-21T13:29:20.000000Z", "commit": "682", "message": "Very nearly done now. I have integrated the use of Complex throughout the code, and SireCAS now appears to compile (though it probably won't link). I have added integration to the functions, and I think that it will work. Integration will be very experimental! (especially integrals of products...)\n\nJobs for this afternoon are to write the isRational and toRational functions, to add the remaining trig and hyperbolic trig functions, to add a set of log functions (log_10, log_b etc.), then to wrap and test it all.", "author": "chryswoods@gmail.com"}, {"date": "2006-04-20T22:41:53.000000Z", "commit": "681", "message": "Further integration of Complex with the rest of SireCAS...", "author": "chryswoods@gmail.com"}, {"date": "2006-04-20T18:40:04.000000Z", "commit": "680", "message": "Working on switching over to use the new Complex class. Have changed the power functions and am in the process of creating SymbolComplex and ComplexValues. Code is broken.", "author": "chryswoods@gmail.com"}, {"date": "2006-04-20T16:48:50.000000Z", "commit": "679", "message": "After much messing around I have finally worked out how to do the rational and complex arithmetic that I want :-)\n\nI have created a new ExBase called 'I' which represents the complex number 'i'. This will represent 'i' in the Expression, and throws a domain_error if it is evaluated via a double\n\nI have also wrapped up the gsl complex struct into a class with associated functions (SireMaths/complex.h). I will eventually create an analogue of Values (ComplexValues) and if the expression is evaluate using ComplexValues then full complex maths should be used, else fast non-complex math should be used.\n\nI have got rid of the Irrational class as I didn't like it! I will replace it with tests to see if a double is an integer, or if it is rational. If it is, then I will substitute RealPower with either IntPower or RationalPower. There will also be a new ComplexPower class as well.\n\nI have expanded the base functions in ExBase to include simplification, expansion, collapsing, series expansion and integration. I will try to fill in these new functions as I go along adding functions, in the hope that this will lower the extra work needed to get all this functionality fully working when I decide I want to implement it properly.", "author": "chryswoods@gmail.com"}, {"date": "2006-04-19T16:39:02.000000Z", "commit": "678", "message": "I have implemented the product and quotient rules and have been playing with the SireCAS via the script test/test.py. One part of this script is to obtain the differential of an expression and to compare the anaytic differential to the numerically evaluate differential at several points. So far the code seems to be working, with very good agreement between the numerical and analytic differentials (even for very messy functions!).\n\nI am pretty pleased :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-04-19T13:09:33.000000Z", "commit": "677", "message": "The code now compiles, links and appears to work. I will need to perform some testing, and also still need to implement differentiation of a Product.\n\nAlso, I am not hugely happy about my Irrational class. It is really crude. In my mind I see if as the basis of the high-precision and complex number class, whereby it stores a double holding the real part (so that arithmetic using real doubles is still fast), which it also holds a high precision representation of the complex number. However, pursuing this will take a lot of time, and would turn my small and fast CAS into something that it perhaps too powerful for my needs (do I really want the user to input complex numbers? how would I get the force from a complex number input?).\n\nAs far as I can tell, I have four requirements for the Irrational class;\n\n(1) *most important* Provide very fast access to a 'double' representation of the value\n(2) Know when it is rational, and store the rational number (very useful for powers, e.g. ^2, ^(1/4) etc.\n(3) Hold the number to a user-controlled precision\n(4) Eventually provide a route to holding a complex number\n\nSo far, Irrational only really satisfies point (1)\n\nI have tested SireCAS using the same test as before, and the changes have not affected its speed.", "author": "chryswoods@gmail.com"}, {"date": "2006-04-18T23:16:45.000000Z", "commit": "676", "message": "SireMaths and SireCAS now all compile. I just need to update the python wrappers for SireCAS...", "author": "chryswoods@gmail.com"}, {"date": "2006-04-18T22:31:07.000000Z", "commit": "675", "message": "Renamed wrap_fraction.cpp to wrap_rational.cpp", "author": "chryswoods@gmail.com"}, {"date": "2006-04-18T22:30:13.000000Z", "commit": "674", "message": "Nearly there... :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-04-18T19:07:20.000000Z", "commit": "673", "message": "I am very nearly there with sorting out factors when building the product! Just a bit more work and I think that I will have done it :-)\n\nCode is still broken though! :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-04-18T13:05:57.000000Z", "commit": "672", "message": "Renamed fraction.cpp/.h to rational.cpp/.h", "author": "chryswoods@gmail.com"}, {"date": "2006-04-18T13:04:52.000000Z", "commit": "671", "message": "I have realised that the Expression should not contain a power, as this really complicate the Product and PowerFunction classes. I am in the process of updating the code to remove the power.\n\nIn doing this, I have realised that the factor of the expression should preserve the rational part (as diff x^3/2 should return (3/2) x^1/2 rather than 1.5 x^1/2)\n\nIn doing this, I have replaced my 'Fraction' with the boost::rational class, and have written an Irrational class.\n\nCode is broken...", "author": "chryswoods@gmail.com"}, {"date": "2006-04-18T00:03:20.000000Z", "commit": "670", "message": "Changing Product so that is properly factorises functions have functional powers (including functions raised to the power of functions raised to the power of functions raised...)\n\nCode is broken as I need to go to bed :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-04-16T23:57:06.000000Z", "commit": "669", "message": "I have cleaned up the wrapping of the power functions, which appear to work well. I am now looking at integrating them properly into the Product class (so that powers are collected together correctly) and am now looking at differentiating the Product class. This is crucial, as most of the derivatives of the power objects fail as they involve the product and quotient rules...", "author": "chryswoods@gmail.com"}, {"date": "2006-04-16T19:54:51.000000Z", "commit": "668", "message": "Working on providing power functions (f(x)^g(x)) which provides access to a range of functionality (including exp and log). Written code and wrapped in python, though not tested yet. I also suspect that I'd get a link error as well with this version...", "author": "chryswoods@gmail.com"}, {"date": "2006-04-16T00:24:41.000000Z", "commit": "667", "message": "I have wrapped up most of the SireCAS classes in python and they do seem to work! I am sure that I will find some wrinkles that will need ironing, but I am now very pleased with myself :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-04-15T22:18:46.000000Z", "commit": "666", "message": "I have improved the speed a little, and performed some proper time tests. The test of my old CAS and SireCAS are both performed in RunTests (run current test/test.py script). The GiNaC test uses testginac.cpp in techdocs/GiNaC.\n\nThe test calculates;\n\ny = (1 + cos(x)) + 0.5*(1 + cos(2x)) - 0.25*(1 + cos(3x))\n\nThis is input into GiNaC as;\n\nsymbol x(\"x\");\nex poly = (1+cos(x)) + 0.5*(1+cos(2*x)) - 0.25*(1+cos(3*x));\n\nThis is input into SireCAS as;\n\nSymbol x(\"x\");\nExpression ex = (1.0 + cosine(x)) + 0.5*(1 + cosine(2*x)) - 0.25*(1 + cosine(3*x));\n\nThis is input into my old CAS as;\n\nMathFuncPtr e1 = CosPlusOne() + 0.5*CosPlusOne(1.0,2.0) - 0.25*CosPlusOne(1.0,3.0);\n\nThese functions were calculated 1000000 times, from x=0 to x=99999.9\n\nThe calculation was timed using QTime around the main loop. I optimised the speed of GiNaC and SireCAS as much as I could.\n\nThe results are;\n\nCAS        Total         Time(ms)   Relative  Speedup\nOld        1.24999e+06     595      186%       214    102\nSireCAS    1.24999e+06    1093      100%       116     55\nGiNaC      1.24999e+06   60174        2%         2      1\nGiNaC_2    1.24999e+06  127464        1%         1      0.5\n\n(GiNaC uses digits=1, while GiNaC_2 uses the default value of digits)\n\nSireCAS is much faster than GiNaC, though is about half the speed of the old implementation. I poked around with the timings and believe that the difference is due to the use of Symbol in SireCAS (the old system was fixed to use x, y and z).", "author": "chryswoods@gmail.com"}, {"date": "2006-04-15T19:14:47.000000Z", "commit": "665", "message": "The SireCAS module compiles and now works (well, the little bit that has been tested). SireTest::RunTests gives the same answers as my old CAS, though it is currently 4 times slower than my old CAS. Oh well, I think that I should be able to speed it up! :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-04-14T22:49:08.000000Z", "commit": "664", "message": "Fleshed out the 'Fraction' class with operators, and have added the Identities class to hold mappings from Symbols to Expressions (used for substitutions)\n\nCode is still broken, but making good progress :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-04-14T14:19:14.000000Z", "commit": "663", "message": "More work filling in the functionality of SireCAS, and also added the SireMaths::Fraction class. Needs testing :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-04-14T01:29:46.000000Z", "commit": "662", "message": "Making a lot more progress with SireCAS. Have worked out how to serialise and deserialise expressions (via Factory and RegisterExpression classes), have expanded the Values class, and have filled in a lot of the other classes.\n\nCode is still broken, but getting there :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-04-13T18:22:07.000000Z", "commit": "661", "message": "I tested GiNaC but found that it was too slow. I think that this was down to its use a multi-precision library, while I am only interested in evaluating as a double. I have thus decided to stick with my own mini-cas. I am in the process of updating it and moving it into its own library (SireCAS). I am borrowing some of the ideas from GiNaC, in particular using generic symbols that are assigned a unique ID number, and have a user-defined print string.\n\nCode is very broken!", "author": "chryswoods@gmail.com"}, {"date": "2006-04-11T14:46:44.000000Z", "commit": "660", "message": "Added functions to convert to/from EditMols and Molecules. Also investigating the GiNaC maths library, as this may be able to provide an algebra library in the code that will be superior to the SireMaths classes that I wrote.", "author": "chryswoods@gmail.com"}, {"date": "2006-04-08T19:11:25.000000Z", "commit": "659", "message": "I have got the MoleculeSignature class working and have tested it using a little test script (test/io/testsigs.py). I have also written a pseudo script to see how I want to work the syntax for parametising molecules (ideas/parametise.py).", "author": "chryswoods@gmail.com"}, {"date": "2006-04-03T17:34:57.000000Z", "commit": "658", "message": "Finished renaming the file and have added the MoleculeSignature class.", "author": "chryswoods@gmail.com"}, {"date": "2006-04-03T15:32:00.000000Z", "commit": "657", "message": "Beginning work on the MoleculeSignature class which will be used to see if an EditMol and Molecule are referring to the same type of molecule. Renaming ResName to ResidueID", "author": "chryswoods@gmail.com"}, {"date": "2006-04-03T12:58:40.000000Z", "commit": "656", "message": "I have now written the code to create a Molecule from primitive data (that can be easily obtained from an EditMol)\n\nI am quite pleased. I haven't tested the code, but it all compiles and runs.", "author": "chryswoods@gmail.com"}, {"date": "2006-04-02T19:30:59.000000Z", "commit": "655", "message": "Working on integrating the CutGroups with MoleculeData. I think that I am now a lot clearer with how it will all work. The only thing that I am now alltogether happy with is the MutableSetIterator, which I think may be too slow for updating CutGroup coordinates...", "author": "chryswoods@gmail.com"}, {"date": "2006-03-31T23:10:51.000000Z", "commit": "654", "message": "New code compiles, but missing functions so won't link...", "author": "chryswoods@gmail.com"}, {"date": "2006-03-31T18:37:02.000000Z", "commit": "653", "message": "Working on the new MoleculeInfo and ResidueInfo classes that will be used to provide meta information about molecules and residues. Also working on wrapping up these classes in python, as well as the MoleculeBonds and ResidueBonds classes.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-31T12:53:37.000000Z", "commit": "652", "message": "Code now compiles and links. siretest works (although is quite cut down). spier works, and displays molecules well. sire also works, and can build a tip4p water molecule.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-31T10:45:21.000000Z", "commit": "651", "message": "Added python wrapping of Molecule, Residue, MoleculeSet and ResidueSet. Also added definitions so that now the only missing functions are those in MoleculeData/MoleculeDataPvt. I will now work on filling in these gaps...", "author": "chryswoods@gmail.com"}, {"date": "2006-03-31T09:13:00.000000Z", "commit": "650", "message": "Code now compiles without using NetObjects or SandBox, but still has link errors...", "author": "chryswoods@gmail.com"}, {"date": "2006-03-31T08:55:26.000000Z", "commit": "649", "message": "Removed the NetObjects and SandBox directories as they are no longer necessary.  Code still broken :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-03-30T23:31:00.000000Z", "commit": "648", "message": "Working on getting the code compiling again. The code appears to compile now, but won't link (I am missing too many functions!)\n\nI have disabled NetObjects, SireFF and SireSystem until they have been migrated (or, in the case of NetObjects, removed)\n\nCode is broken :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-03-30T18:34:38.000000Z", "commit": "647", "message": "Working the code to get it to compile - still broken though :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-03-30T15:51:35.000000Z", "commit": "646", "message": "Integrating the new Set class with CutGroup (via AtomSet) and changing over CutGroupSet, MoleculeSet and ResidueSet.\n\nCode is still very broken :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-03-30T13:29:51.000000Z", "commit": "645", "message": "I have realised that the Set class needs to use an indexer type function to get indexes from the contained objects, especially as the contained objects will contain their indexes. To fix the problem of subtle bugs caused by changing the index of an object that is in a set, I have created SetIterator and MutableSetIterator classes that allow iteration and modification of a set in a safe and bug-free manner, even if the modifications change the index of the object.\n\nI have also realised that CutGroup needs its own ID number, and should not use MolCutGroupID. I will thus change CutGroup back to having an ID number of its own...\n\nAh well, I am so indecisive :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-03-29T23:47:35.000000Z", "commit": "644", "message": "Still working on the MoleculeData class...\n\nAdded a collection of ID types (CutGroupID, MoleculeID, MolCutGroupID, MolCGAtomID etc) that provide multi-level identification of Molecules, CutGroups and Atoms (and perhaps should be extended to have MolResidueID and MolResAtomID?)\n\nAs part of this change, whereby I am using specified indexes to search for objects, I am rewriting the SireBase::Set class to be more like a hash, e.g. have specified key and value. This removes the need for the 'indexer' function, and also means that changing the object will not change the index (thus removing the potential for really weird bugs).\n\nCode is broken", "author": "chryswoods@gmail.com"}, {"date": "2006-03-29T14:57:29.000000Z", "commit": "643", "message": "Working on changing the Molecule and Residue classes to be views on an underlying MoleculeData class.\n\nCode is broken.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-27T11:59:43.000000Z", "commit": "642", "message": "I have changed EditMol/EditRes/EditMolData to be explicitly shared, which solves the copy problem (if in a bit of a messy way). The code now works, and make-tip4p.py makes a correct TIP4P water molecule.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-23T20:26:53.000000Z", "commit": "641", "message": "Changed 'Int' as datatype for AtomIndex, and replaced it with 'ResNum'. This makes the code clearer, and also prevents me having to define 'Int' in multiple modules.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-23T17:19:06.000000Z", "commit": "640", "message": "I am trying to get the make-tip4p.py test script working again. I am running into major difficulties with boost::python taking taking a const copy of an EditRes, so that shallow copying is not working!!! Annoying...", "author": "chryswoods@gmail.com"}, {"date": "2006-03-23T13:32:17.000000Z", "commit": "639", "message": "I have wrapped up the EditRes class. It all seems to run and work well...", "author": "chryswoods@gmail.com"}, {"date": "2006-03-21T17:16:45.000000Z", "commit": "638", "message": "I have wrapped up the EditMol class in python, and have implemented some missing functions.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-21T10:55:03.000000Z", "commit": "637", "message": "Fixed some bugs - spier now works with the new EditMols!", "author": "chryswoods@gmail.com"}, {"date": "2006-03-20T20:48:20.000000Z", "commit": "636", "message": "Code all now compiles and links, though lots of functionality still needs to be added.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-20T17:06:32.000000Z", "commit": "635", "message": "I am gradually filling in the missing functions...", "author": "chryswoods@gmail.com"}, {"date": "2006-03-20T15:45:15.000000Z", "commit": "634", "message": "Code now compiles, but still doesn't link...", "author": "chryswoods@gmail.com"}, {"date": "2006-03-20T15:20:53.000000Z", "commit": "633", "message": "Removed files - code is very broken...", "author": "chryswoods@gmail.com"}, {"date": "2006-03-20T15:11:18.000000Z", "commit": "632", "message": "Code now compiles from scratch, but doesn't link as there are many functions missing! I am now going to remove zero-size files and also editmolptr.h and editresptr.h....", "author": "chryswoods@gmail.com"}, {"date": "2006-03-20T13:23:47.000000Z", "commit": "631", "message": "I think that I have now got SireMol compiling once again. However the code is still broken with lots of missing functions (so won't link)", "author": "chryswoods@gmail.com"}, {"date": "2006-03-18T15:41:04.000000Z", "commit": "630", "message": "More work on EditMol/EditRes - code is broken.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-17T16:45:13.000000Z", "commit": "629", "message": "Working on integrating EditMol with EditMolData. I have created a new WeightFunction/WeightCalculator class hierarchy which can be used to calculate the weights of groups of atoms. I have used a buffer type approach to the class design so that it won't be slowed down by too many virtual function calls...", "author": "chryswoods@gmail.com"}, {"date": "2006-03-16T15:41:39.000000Z", "commit": "628", "message": "Code is fixed again (sire, spier and siretest work). New code compiles, though is untested and unused.\n\nI will now break everything again by changing EditMol and EditRes to work with EditMolData...", "author": "chryswoods@gmail.com"}, {"date": "2006-03-16T15:04:41.000000Z", "commit": "627", "message": "Still working... Most of the new code compiles now, though is still broken. I have added some SireMol errors in a dedicated SireMol namespace.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-16T11:15:59.000000Z", "commit": "626", "message": "I have made more progress with the EditMolData class, though I still need to finish it :-)\n\nCode is broken", "author": "chryswoods@gmail.com"}, {"date": "2006-03-15T18:06:06.000000Z", "commit": "625", "message": "Combining EditMol/EditRes into a single class.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-15T11:49:17.000000Z", "commit": "624", "message": "I have created the MoleculeBonds and ResidueBonds classes, which will eventually replace the BondGroup class. These two classes more closely match our intuition of bonding (residue and molecule based), and also are easy to implicitly share (BondGroup contained pointers, which were annoying to share and keep up-to-date).\n\nCode is broken", "author": "chryswoods@gmail.com"}, {"date": "2006-03-14T17:00:45.000000Z", "commit": "623", "message": "I have realised that NetObjects is not the way to do the parallelisation. I have decided to eventually move to CORBA. For now, I have realised that it would be best to have CutGroup, Molecule and EditMol be implicitly shared classes, so I am in the process of updating these classes.\n\nThe code is very broken.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-09T13:43:53.000000Z", "commit": "622", "message": "Code compiles and runs on amd64 and i686, using gcc3, icc and gcc4. I am also fixing the problem of the crash on NetExitMsg::action() (error shuttting down the MPIPeer)", "author": "chryswoods@gmail.com"}, {"date": "2006-03-09T12:04:26.000000Z", "commit": "621", "message": "I have a working Interface - Pipe (LocalPipe) - Invoker system! Surprisingly it worked first time :-)\n\nsiretest is now working again and completing without error, though this is only because I have butchered the NetObjects tests.\n\nThere may be a problem with the IPI system in terms of registering and calling const functions. I will need to investigate and test this.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-08T12:24:51.000000Z", "commit": "620", "message": "Working on the IPI system. I now have a clear idea of how the IPI system will work (see techdocs/testinterface.cpp). The code is currently broken.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-07T10:32:23.000000Z", "commit": "619", "message": "This code compiles and runs using gcc 4.1 (on amd64!)", "author": "chryswoods@gmail.com"}, {"date": "2006-03-06T15:48:02.000000Z", "commit": "618", "message": "I now have gcc-4.1 on scruffy (amd64) and am beginning to ensure that the code compiles using this compiler. The biggest problem is that the qHash functions are not being found, which is why I am having to predeclare them. Also there are many warnings about type-punned pointers, which I am going to fix (I have removed fastInvSqrt as it isn't much faster, and causes so many warnings!)", "author": "chryswoods@gmail.com"}, {"date": "2006-03-05T19:37:35.000000Z", "commit": "617", "message": "Worked up the WaitValue class, which is the backend for the result class.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-03T21:33:39.000000Z", "commit": "616", "message": "Rewritten Args class compiles and works well. The updated unit test works, and siretest compiles and runs (though fails on netobjects test with unavailable_netobject exception)", "author": "chryswoods@gmail.com"}, {"date": "2006-03-03T15:21:23.000000Z", "commit": "615", "message": "Moved argspvt to the wrong place, and am working on the new Args class...", "author": "chryswoods@gmail.com"}, {"date": "2006-03-03T14:51:18.000000Z", "commit": "614", "message": "Moved args to argspvt (it will be the private implementation class)", "author": "chryswoods@gmail.com"}, {"date": "2006-03-03T14:50:13.000000Z", "commit": "613", "message": "I am working on the interface/invoker for FFWrapper. First, I am slightly rewriting the Result<T> and Args<T...> classes to make them easier to use, and to cut down on unnecessary copying (both classes will become pimpl classes using shared_ptr to facilitate quick copying)", "author": "chryswoods@gmail.com"}, {"date": "2006-03-03T11:02:07.000000Z", "commit": "612", "message": "I have written a lot of serialisation functions. The code now compiles and runs, though I haven't tested any of the serialisation yet.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-02T22:48:48.000000Z", "commit": "611", "message": "Creating all of the necessary QDataStream streaming functions... Code is broken, but getting there...", "author": "chryswoods@gmail.com"}, {"date": "2006-03-02T17:04:50.000000Z", "commit": "610", "message": "I have created the FFRegistry and am working on the registration and serialisation/deserialisation of FFWrappers. The code is broken, but I am making quite a bit of progress.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-02T13:30:14.000000Z", "commit": "609", "message": "SireSystem now compiles, though doesn't do anything. I have realised that I need to sort out the FFWrapper class, as this will be key to the parallelisation of the energy calculation;\n\nFFBase (virtual class, base of forcefields)\n\nWrapped up by FFWrapper<FFBase>, which is derived from FFWrapperBase.\nThis class uses the contained FFBase to calculate the energies, and\nhas the functionality to store and average the energies. It also\nprovides a single, consistent interface, (via FFWrapperBase) to\nwhat can be very different forcefields, returning very different\ntypes of energy.\n\nFFWrapperPtr is a NetObjects::Ptr<FFWrapperBase> - i.e. it is the FFWrapper<FFBase> that\nis distributed via NetObjects. As FFWrapperBase is a common interface, there is thus\nonly the need for this single NetObject::Ptr class (and machinery)\n\nFFWrapperPtr::Interface is the interface that controls the FFWrapperPtr class remotely\n(together with FFWrapperPtr::Invoker). There is thus just a single Interface/Invoker for\nall of the different forcefield classes, as they are all handled via the FFWrapperBase\ninterface.\n\nA potential problem with this design is that while FFBase::energy() is const (and thus\ninvolves no network updates), FFWrapperBase::energy() is not const. This is a pain, as\nit could mean that a network update would be required for every single energy evaluation.\n\nOne possible solution would be to implement a NetObjects::Ptr::noncopyable flag, which\nwould prevent a NetObject from being copied to multiple processors. This would mean\nthat there would be no need for network updates on write operations (as the object\nwould only exist on a single processor).\n\nFor this to work, I will need to register all of the FFWrapper<FFBase> derived classes,\nso that the FFWrapper<FFBase> objects can be sent across the network. I will use the\nsame registry design as used in NetObjects. For the moment all of my registry classes\nare separate - eventually I may wish to pool their code so that all of the registries\nare constructed from a single common code base. For the moment I don't think that this\nis necessary, as I don't have a sufficiently clear idea of what the general requirements\nof the supra-registry class would be, and I would waste a lot of time trying to write it.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-02T10:13:51.000000Z", "commit": "608", "message": "I have create a LocalProcessor class so that Sire can also run within a single thread with no networking at all!", "author": "chryswoods@gmail.com"}, {"date": "2006-03-02T09:31:15.000000Z", "commit": "607", "message": "I have put the python parser back into the program, running in the main thread. I have got rid of the PythonThread class. I have also added code to allow the processor to wait until the MPIPeer, TCPServer and ActionThread have started before moving on (thus preventing the possibility that the script is parsed before the cluster is ready)", "author": "chryswoods@gmail.com"}, {"date": "2006-03-01T17:28:23.000000Z", "commit": "606", "message": "Changing the code over to get rid of TypeIDs and the mess associated with their mapping. I am now just using the class names as provided by the programmer. This may be fractionally slower, but it is much easier to write and administer/debug.", "author": "chryswoods@gmail.com"}, {"date": "2006-03-01T16:32:17.000000Z", "commit": "605", "message": "I have written the exception registry, and changed MessageRegistry and TypeRegistry to get the TypeID->name mapping from the alphabetical order of the types.\n\nI am beginning to wonder however if it is necessary to use TypeIDs... Is the speed gain really worth the hassle and potential confusion?", "author": "chryswoods@gmail.com"}, {"date": "2006-03-01T13:01:30.000000Z", "commit": "604", "message": "I have decided against the node registration system that I was using, as it would have meant that an extraordinarily large number of messages would have had to have been sent if a large cluster were used. I am thus instead using static registration, whereby all MPI nodes use PIDs 1->mpiTCPBoundary()-1, while all TCP processors use mpiTCPBoundary()+1 upwards. Also, as I am already requiring that all processors run the same version of sire, I can also assume that the same messages/exceptions/netobjects are registered. I will thus assign ID types from the alphabetical order of the classes in the registry. (ascii order)\n\nI have create the beginnings of the code for the TCP client and server, so that I can work out the routing of messages. I think that I have got it now...", "author": "chryswoods@gmail.com"}, {"date": "2006-02-27T15:22:52.000000Z", "commit": "603", "message": "Moved getMagic into a separate file so that I can debug it (scruffy gets the wrong magic...)", "author": "chryswoods@gmail.com"}, {"date": "2006-02-27T15:06:21.000000Z", "commit": "602", "message": "Forgot to update the NetObjects.pro file when I cleaned out some files..", "author": "chryswoods@gmail.com"}, {"date": "2006-02-27T15:03:25.000000Z", "commit": "601", "message": "Code now compiles and runs. I have moved away from using VersionIDs for versioning, and have instead switched over to using magic numbers to ensure the integrity of the data stream\n\n(this works a bit, as it places checks in the data stream that the right object is being loaded. If some extra data is added, or some data is removed, then the stream will move out of sync when being read, and thus the magic number will not be found and thus a magic_error will be thrown)", "author": "chryswoods@gmail.com"}, {"date": "2006-02-27T12:11:33.000000Z", "commit": "600", "message": "I am working on registering nodes. I have given up on the idea of versioning all network traffic as the problem of matching version numbers is too difficult, and I think that including versioning implies that I am happy with the idea of multiple versions of the program clustering together. This will lead to weird and difficult to reproduce bugs. I will thus have the requirement that all processors run exactly the same version of the program. Removing this requirement can be left as an exercise for future generations... :-)\n\nCode is really broken at the moment.\n\n(by the way - I should say that the version before this one works on amd64, and correctly communicates between amd64 and i686 - in other words, scruffy and cubert are happily talking to one another)", "author": "chryswoods@gmail.com"}, {"date": "2006-02-25T18:11:09.000000Z", "commit": "599", "message": "Added time and processor/thread ID to the printout. This is not how it will eventually be - it is just here so that I can debug the program as I am writing it.", "author": "chryswoods@gmail.com"}, {"date": "2006-02-24T22:06:54.000000Z", "commit": "598", "message": "The code all seems to work now (though SireStream is but a shadow of its former self!)", "author": "chryswoods@gmail.com"}, {"date": "2006-02-24T22:02:57.000000Z", "commit": "597", "message": "I found the bug - SireStream::printLine did some static initialisation using QObject::tr, which caused a weird bug in Qt. I think that this is because of a clash with the installation of translators. I have stripped SireStream down to the bear minimum, and this seems to have fixed the bug. :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-02-24T17:09:06.000000Z", "commit": "596", "message": "I am working on the registration system, and have built the beginnings of classes to register messages.\n\nHowever... programming can be annoying! I get a segfault when static RegisterNewNodeMsg in newnodemsg.cpp calls any function (static or plain function) in MessageMgr. I cannot figure out what the problem is...\n\nI am thus recompiling everything from scratch to see if I can fix it...\n\n(during which, I found more python wrappers that take up too much memory to compile, so I have split them up into separate files)", "author": "chryswoods@gmail.com"}, {"date": "2006-02-24T11:34:34.000000Z", "commit": "595", "message": "I now have round trip communication (proc 1 sends registration request, proc 0 responds with registration pack). Also I have been looking at the issue of precision, as I think that I am wasting a lot of processor speed by doing distances in doubles, when I could get much better performance using floats. Energy accumalation should use doubles.", "author": "chryswoods@gmail.com"}, {"date": "2006-02-23T17:11:21.000000Z", "commit": "594", "message": "I now have a small NewNodeMsg being sent from a slave node to the master :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-02-23T14:34:26.000000Z", "commit": "593", "message": "I have split a few of the python wrapper files into parts as I was running out of memory when I was compiling the files on scruffy (now running amd64 linux)", "author": "chryswoods@gmail.com"}, {"date": "2006-02-23T13:16:14.000000Z", "commit": "592", "message": "Doesn't crash at exit now...", "author": "chryswoods@gmail.com"}, {"date": "2006-02-23T12:04:55.000000Z", "commit": "591", "message": "The code now compiles and links (finally) and siretest/sirempitest run without errors. sire however does nothing, and crashes when sent a sighalt.", "author": "chryswoods@gmail.com"}, {"date": "2006-02-22T16:58:06.000000Z", "commit": "590", "message": "Working on filling in the remaining functions. I am changing the messages so that they are dumped to a QByteArray when they are placed into an Envelope (this is easier than trying to manage this when creating the messages)", "author": "chryswoods@gmail.com"}, {"date": "2006-02-22T15:18:07.000000Z", "commit": "589", "message": "Deleted some zero-size files. Code still doesn't link...", "author": "chryswoods@gmail.com"}, {"date": "2006-02-22T15:08:28.000000Z", "commit": "588", "message": "The code now compiles, though doesn't link as I am missing a few functions.\n\nI am beginning to get an idea of the factory function. Essentially, have a static object provide a function pointer to the registry, with the function pointer used to create a new instance of the class. There are several factories in the code;\n\nNetObjects factory:  Currently managed via NetObject<T> - will be left alone, as this is more complex than a simple factory\n\nSireError::exceptions factory:  Currently hard coded - will be changed to static object and function pointer\nNetObjects Messages: Currently broken - will be changed to static object and function pointer\n\nAll methods will use the name of the class provided by the coder as the key, e.g, via name supplied to NetObject, or via the name provided by the \"what()\" functions of exception and Message. All will use a static object to register the object at library link time (will eventually create a plugin initialisation function for plugin libraries).\n\nThere are also several registry classes;\n\nTypeRegistry : Registry of NetObjects class types\nMessageRegistry : Registry of Message types\nExceptionRegistry : (todo) Registry of exception types\nThreadRegistry : Registry of all threads in the program\n\nI may try and share code between these (in particular the static object code via a template)", "author": "chryswoods@gmail.com"}, {"date": "2006-02-20T16:30:36.000000Z", "commit": "587", "message": "Continuing work on the new NetObjects::Messages system... Code is still broken...", "author": "chryswoods@gmail.com"}, {"date": "2006-02-20T14:01:50.000000Z", "commit": "586", "message": "Renamed and cleaned up the NetObjects files...", "author": "chryswoods@gmail.com"}, {"date": "2006-02-20T13:50:55.000000Z", "commit": "585", "message": "Working on Response class - will renamed MsgResponse to Response. Will also get rid of MsgHandle, as Envelope/Message split removes the need for this class.", "author": "chryswoods@gmail.com"}, {"date": "2006-02-20T10:44:03.000000Z", "commit": "584", "message": "MessageRegistry has been moved...", "author": "chryswoods@gmail.com"}, {"date": "2006-02-20T10:43:07.000000Z", "commit": "583", "message": "I am going to rename MessageMgr to MessageRegistry...\n\nCode is very broken..", "author": "chryswoods@gmail.com"}, {"date": "2006-02-18T17:10:03.000000Z", "commit": "582", "message": "I am reworking the NetMessages side of NetObjects. It now makes more sense;\n\nMessageMgr will be changed to MessageRegistry, and just maps Messages to ID numbers. Its only task is to identify and construct messages.\n\nProcessor is now a static class, used to access a contained ProcessorPvt derived class.\n\nProcessorPvt is responsible for all Processor specific functionality, e.g. sending and receiving messages using the communications system available to the processor. So MPIProcessor will use the new MPIPeer class to send and receive messages, while TCPProcessor will use the (yet to be created) TCPClient class. The MasterProcessor has an MPIPeer and a TCPServer class for sending and receiving.\n\nThe messages themselves have been split into two parts; the first is the actual message data, which is still in the 'Message' class (and its decendents). Meanwhile, all transport information about the message is now moved into the Envelope class. A message is sent in two parts; first the Envelope is sent, then the Message is sent afterwards. The envelope contains all the information needed to receive the message (the type and size of the message), to forward the message (the destination PID) and to respond to the message (the Envelope::ReturnAddress).\n\nThis means that the transport layer does not need to be concerned with problems of redirection, e.g. if a duplicate() message is sent to the old master process, then it can forward the message onto the correct processor, which will then use the returnaddress to correctly respond to the original sending processor.", "author": "chryswoods@gmail.com"}, {"date": "2006-02-16T17:36:52.000000Z", "commit": "581", "message": "I can't write the FFWrapper without being able to write FFInterface, which means that I need to get NetObjects::IPI and NetObjects::Messages working again...\n\nThe code is broken.\n\nI am in the process of creating a 'Processor' object to represent each processor in the cluster, so that all the PID is no longer the rank of the processor in MPI. This will clean up a lot of the code and will remove the annoying NetObjects::Master:: type functions.", "author": "chryswoods@gmail.com"}, {"date": "2006-02-16T09:26:10.000000Z", "commit": "580", "message": "I am working on the SireSystem classes. I think that I have now worked out the best way to interface with the system. The actual System class is not accessible to the user. Instead the user interfaces with it via either a SystemEditor class (which is used to edit the System during simulation setup or updating), or SystemRunner (used to run a simulation). These provide FFGroupEditor and FFGroupRunner helper objects etc.\n\nIn addition, boost::python provides automatic dynamic down-casting, which is very useful as it will allow me to return a boost::shared_ptr to the FFWrapperBase, and have boost::python automatically cast down to the actual FFWrapper derived class. This will allow the user to write code such as;\n\nsys.forcefield().component(\"CLJ\").setCombiningRules( OPLSCombiningRules() )\nsys.forcefield().component(\"QM\").setMaxIterations(5000)\n\nIn addition to this, I have also realised that it will be best to have multiple FFGroups accessible from the System, e.g. for simulations such as MTSMC, e.g.\n\nsys.forcefield() # returns default forcefield\nsys.forcefield(\"fast\") # returns another forcefield, that the user has called 'fast'\n\nI will do the same thing with molecules - there will be a single set of all molecules in the system, and also the user can add their own, named groups;\n\nsys.molecules() # returns all molecules\nsys.molecules(\"solvent\")  # returns molecules in the 'solvent' group, designated by the user\n\nIn addition, each molecule will be added into a group that matches its name. This way, automatic groups are created (e.g. 'TIP4P')\n\nMoves are created which operate on MoleculeGroups, not on individual molecules. The reason for this is that grand canonical moves could add or delete molecules, so referring to individual molecules is difficult. However, if the GC move also knew which groups to add the molecules, then this would also fix all of the moves (thus adding a TIP4P to the solvent group ensures that it is available for MC moves like the rest of the solvent molecules)\n\nThe only complexity of this is that GC type moves will need to have user-defined code to be able to work, e.g. adding the molecule requires knowledge of which molecule groups it should be added to, and which forcefields as well. I don't think that there is any way for me to avoid this, and this is probably the best solution (the complexity should be in the GC move, as it is the part of the code that is doing this).", "author": "chryswoods@gmail.com"}, {"date": "2006-02-13T12:02:50.000000Z", "commit": "579", "message": "Beginning work on new SimSystem library, holding the System class that represents a complete simulation system.", "author": "chryswoods@gmail.com"}, {"date": "2006-02-13T11:57:13.000000Z", "commit": "578", "message": "Added NetID to the cutgroups, allowing easy access to a unique identifier to a NetObject that identifies both the type of the netobject and the specific instance.", "author": "chryswoods@gmail.com"}, {"date": "2006-02-11T22:43:12.000000Z", "commit": "577", "message": "Updated build system so that it can cope with multiple compiles using different compilers. Fixed a few problems identified by the intel compiler. Fixed a bug in ptrwriter so that siretest now completes with no errors.", "author": "chryswoods@gmail.com"}, {"date": "2006-02-10T22:03:30.000000Z", "commit": "576", "message": "Code now compiles and runs. The correct energies for the test/test.py script are calculated :-)\n\nThe times are 3320ms for the InterCLJFF, and 3255ms for the InterGroupCLJFF.\n\nsiretest does however crash after the netobjects tests...", "author": "chryswoods@gmail.com"}, {"date": "2006-02-10T16:28:03.000000Z", "commit": "575", "message": "More work on cleaning up the new NetObjects system. The changes I made have made it more logical. The code is still broken, though NetObjects has compiled.", "author": "chryswoods@gmail.com"}, {"date": "2006-02-10T14:51:56.000000Z", "commit": "574", "message": "Renamed PtrInfoPtr to PtrHandlePtr to match PtrHandle class..", "author": "chryswoods@gmail.com"}, {"date": "2006-02-10T14:50:13.000000Z", "commit": "573", "message": "Renamed PtrLocker to MutexLocker to represent its more general use.", "author": "chryswoods@gmail.com"}, {"date": "2006-02-10T14:48:22.000000Z", "commit": "572", "message": "Renamed PtrInfo to PtrHandle. Code is still broken :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-02-10T14:47:16.000000Z", "commit": "571", "message": "I am working on cleaning up the myriad of interfaces in NetObjects that I created. I am now settled on passing everything through the PtrInfo class, which is being split into two;\n\nPtrHandle : -> manages all changes of state of the NetObject over the cluster\nMetaData  : -> holds the current state of the object on the cluster\n\nI thus have PtrHandle, MetaData, NetObject, Registry and TypeRegistry that perform all of the network and sharing side of NetObjects (and are all accessed via PtrHandle and MetaData), while PtrProxy, Ptr, WeakPtr and PtrWriter handle the actual object itself, and contain no network code or state information (instead, PtrProxy contains a shared_ptr to PtrHandle, and WeakPtr contains a shared_ptr to PtrHandle)\n\nThe code is currently broken.", "author": "chryswoods@gmail.com"}, {"date": "2006-02-09T20:59:38.000000Z", "commit": "570", "message": "I have moved the pointer to the NetObject from the proxy into the actual NetObjects pointer. This allows the pointer to directly get the object from memory, without having to pull up the proxy first. This has increased the speed of the code so that we are now back up to 3300ms :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-02-09T16:56:54.000000Z", "commit": "569", "message": "Adding code to provide a parent/child hierarchy of NetObjects.\n\nAlso, Caterina has sent me her thesis, and I have checked the sizes of her systems. They range from 10k water molecules to 20k water molecules. I therefore feel that I should have my upper limit (by memory) set at 512MB to simulate of the order of 1M waters.", "author": "chryswoods@gmail.com"}, {"date": "2006-02-09T16:01:09.000000Z", "commit": "568", "message": "I am struggling with the current speed of the code. I have lost about 10-25% of the speed since version 493. To compare, I have checked out various versions of Sire, and have checked the speed of 1000 moves for 15A cutoff, 1679 water box, periodic boundaries. For a start, version 493 is slower than it was when it was coded. This could be due to a change in C++ compiler (I am now using gcc 3.4.5, installed 29 Dec 2005, compared to gcc 3.3.5 used previously - I will check soon if this is the cause of the difference)\n\nAll version calculate the same energy of -16364.1 kcal mol-1\n\nVersion    Time to do 1000 moves\n          (InterCLJ)       (InterCLJ + InterGroupCLJ)\n\n493        3360            3150\n550        3350            3190\n557        3455            3440\nCurrent    3650            3650\n(mod of 567)\n\nThree interesting things to note;\n\n(1) Between 550 and 557 we lose the improved speed of Inter+InterGroup (lose 200ms). From 550-557 I changed SireBase::Set to allow the use of a QVector to store the entries, and I then used this to update CutGroup to use AtomVectorSet rather than AtomVector. I also added a list of CutGroups to the Molecule. However no changes were made to SireFF or SireVol.\n\n(2) Big change from 557 to current version. This will be version 568. The only change has been the introduction of my new NetObjects version. This is annoying, as this suggests that the new Ptr class is slower than the old NetPtr class... I honestly can't work out why, as both versions used a proxy in the same way as I am using, and both have been compiled with the same optimisation flags etc.\n\nMy only thought is that the slowdown may be caused by cache misses, caused by core classes getting larger?", "author": "chryswoods@gmail.com"}, {"date": "2006-02-09T10:21:46.000000Z", "commit": "567", "message": "The CutGroups give the right energy again, though the code is about 30-50% slower than before... I need to fix this!", "author": "chryswoods@gmail.com"}, {"date": "2006-02-06T17:13:52.000000Z", "commit": "566", "message": "I have worked out how to get NetObject working, and have implemented it. I am also now working on Registry.", "author": "chryswoods@gmail.com"}, {"date": "2006-02-04T23:08:08.000000Z", "commit": "565", "message": "Beginning to think about how to work the NetObject / Registry classes.\n\nI am now leaning towards a design with a single, concrete Registry class. All type specifics are handled by the NetObject<T> class, which contain\ns the functions necessary to construct and serialise/deserialise the object. NetObject<T> holds a pointer to the registry, which itself points to\nthe NetObject. PtrInfo holds a pointer to the Registry. PtrProxy holds a PtrInfo pointer. Thus PtrInfo can get type and perform all registry type\n operations (e.g. all MPI functions) via the single, concrete Registry class. The use of NetObject<T> means that there is no need to have several global registry classes. There is guaranteed to be a single registry per NetObject<T>. Each registry will then register itself with the single global registry that is in NetObjects (which will only be held and used by the concrete Registry class that is fully instantiated within NetObjects, so no need for global registry to exist outside the NetObjects library).\n\nNetObject<T> : NetObjectBase(){ Registry rgstry; }\n{\n   globalptr = this;\n}\n\nstatic NetObjectBase& NetObject<T>::get(){ return *globalptr; }\n\nvoid PtrProxy<T>::register()\n{\n    metainfo = NetObject<T>::register(*this);\n}", "author": "chryswoods@gmail.com"}, {"date": "2006-02-04T20:01:59.000000Z", "commit": "564", "message": "The code now compiles. Doesn't work, but at least it compiles and runs... :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-02-03T21:53:10.000000Z", "commit": "563", "message": "I am slowly cleaning up the linking problems...", "author": "chryswoods@gmail.com"}, {"date": "2006-02-03T18:00:32.000000Z", "commit": "562", "message": "I have been further integrating the new design into the code. I have completely broken the network part of NetObjects (its raison d'etre!), and while all of the object files in the project compile, there are link problems. I am also not happy as I have had to make the base class of PtrBase public so that boost::python can see that it is based on shared_ptr...\n\nI have an absolutely huge amount of work to do to put all of this back together again...\n\n(why must I always refactor things? Everytime I get close, I keep coming up with a better design and end up cleaning everything - for example, the new Ptr design implies the creation of a 'SelfPtr' class, which can replace the mess involved in setting self pointers for CutGroup and Molecule. This of course will change how I hold and recover things like the CutGroupID/MoleculeID within these classes, as this can now be better stored in the PtrProxy class. Of course there will be interesting issues to do with whether or not I automatically register Ptr<T> classes, and thus whether or not it will have a valid CutGroupID...)", "author": "chryswoods@gmail.com"}, {"date": "2006-02-03T10:53:59.000000Z", "commit": "561", "message": "I have renamed all of the files that are involved in the name change...", "author": "chryswoods@gmail.com"}, {"date": "2006-02-03T10:47:48.000000Z", "commit": "560", "message": "I am continuing to rewrite the NetPtr type classes. I am about to rename them all, as I wish to drop the 'Net' prefix as it is ugly (and the use of namespaces means that prefixes are unnecessary). The classes will be renamed as follows;\n\nIn general;\n\nNet??? ---> ???\n\ne.g.\n\nNetPtr<T> ---> Ptr<T>\nNetPtrInfo ---> PtrInfo\nNetPtrProxyPtr ---> PtrProxyPtr\n\nThe dynamically typed objects will be renamed from ???PtrPtr to Dynamic???Ptr\n\ne.g.\n\nNetPtrPtr ---> DynamicPtr\nNetWeakPtrPtr ---> DynamicWeakPtr", "author": "chryswoods@gmail.com"}, {"date": "2006-02-02T17:42:27.000000Z", "commit": "559", "message": "I am in the middle of changing NetObjects over to the new NetPtr system demonstrated in testvoidcast.cpp. It is making for a much cleaner and more easy to follow design. I am not sure however if NetPtrPtr and NetWeakPtrPtr are the right names for these classes (as they are better known as typeless classes).", "author": "chryswoods@gmail.com"}, {"date": "2006-02-02T12:57:37.000000Z", "commit": "558", "message": "Working on the new version of NetObjects - the basis of this is in testvoidcast.cpp.\n\nThe new version will place more functionality into NetPtr (e.g. cloning and serialisation), and will also allow NetPtrs to be placed into a parent/child hierarchy. This will allow a NetPtr to repeat operations on all of its children (e.g. change master for parent and all children, or copy parent and all children to another processor). This will also allow the concept of ownership to be in the NetPtr, so a Molecule will own its CutGroups, and a SimSystem will own the Molecule. This will be how I will prevent a Molecule from being in multiple environments simultaneously, as it will only be able to have one parent, which will be the only thing that can control the master status of the object.", "author": "chryswoods@gmail.com"}, {"date": "2006-02-01T17:44:44.000000Z", "commit": "557", "message": "Molecule now has a list of CutGroups and a list of Residues.", "author": "chryswoods@gmail.com"}, {"date": "2006-02-01T17:30:03.000000Z", "commit": "556", "message": "Adding indexing to the CutGroup has allowed me to remove it from the Residue class, which can now use the smaller ResidueData class to hold residue information, rather than the larger ResidueInfo class. The atom name information is now in the AtomVectorSet in the CutGroup, and is not duplicated within the molecule :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-02-01T16:56:54.000000Z", "commit": "555", "message": "I have changed SireBase::Set so that the type of container used to hold the values can be specified as a template parameter. This has allowed the creation of an AtomVectorSet class, which stores Atoms in a QVector, but also indexes them, and provides the same API as the AtomSet class. I have switched CutGroup over to using the AtomVectorSet and see no performance penalty :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-02-01T15:46:47.000000Z", "commit": "554", "message": "I have fixed a bug in the new ResidueInfo/MoleculeInfo layout, and now the code works. I have also continued the changes to those classes. I am not happy with having Residue use a ResidueInfo (I would rather use a ResidueData) - the problem is that I have to use the ResidueInfo to index the CutGroup. Perhaps it would be best to add indexing information to the CutGroup itself, thus solving the problem once and for all?", "author": "chryswoods@gmail.com"}, {"date": "2006-02-01T12:27:23.000000Z", "commit": "553", "message": "Cleaning up the interface and use of MoleculeInfo/ResidueInfo so that they are consistently used by classes that require molecule and residue information.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-31T17:07:24.000000Z", "commit": "552", "message": "The new build system appears to work.. :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-01-31T15:57:26.000000Z", "commit": "551", "message": "I am updating the build system so that it only uses qmake. This will make it easier to port to windows or to another compiler (as currently I am stuck with g++)", "author": "chryswoods@gmail.com"}, {"date": "2006-01-26T09:36:47.000000Z", "commit": "550", "message": "I am fixing some of the tests/demos so that I can show them off tomorrow.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-25T11:48:15.000000Z", "commit": "549", "message": "I have cleaned up the spier interface so that it will look more professional for my demo. I have also added a 'center' function to EditMol so that I can get the center of the EditMol (thus allowing centering when viewing a molecule)", "author": "chryswoods@gmail.com"}, {"date": "2006-01-24T15:42:46.000000Z", "commit": "548", "message": "Added the presentation that I will be giving at Bristol and Slough this week. It describes the current design and philosophy of the program.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-22T22:40:04.000000Z", "commit": "547", "message": "I have sorted out translating the camera, and added a button class that is used to change between rotation and translation modes. I have also added a 'center selection' button, and also updated the selection info box to add bond length or angle/dihedral size depending on how many atoms are selected. There appears however to be a memory leak when the display is repainted...", "author": "chryswoods@gmail.com"}, {"date": "2006-01-21T23:47:42.000000Z", "commit": "546", "message": "TextLabel is now working, and I have a dynamic highlight and selection label, which appear and disappear via signals/slots", "author": "chryswoods@gmail.com"}, {"date": "2006-01-21T21:17:50.000000Z", "commit": "545", "message": "Working on getting the text label to resize nicely to just fit the text.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-20T21:58:43.000000Z", "commit": "544", "message": "I am working on the sizing and layout of widgets. I have written a very simple TextLabel class. I will eventually use this to display text on the canvas (e.g. the highlighted atom information, or the selected atom information)", "author": "chryswoods@gmail.com"}, {"date": "2006-01-20T15:17:07.000000Z", "commit": "543", "message": "Now using a QMainWindow with spier. Activated a menu with various options. Added ability to view different buffers within the Viewer. It is pretty cool!", "author": "chryswoods@gmail.com"}, {"date": "2006-01-19T22:42:02.000000Z", "commit": "542", "message": "Added the beginnings of the framework to allow animation of the widget.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-19T22:03:36.000000Z", "commit": "541", "message": "I have sorted out the GLWidget code to use shared pointers for memory control, rather then QObject. I have also sorted out the widget transformations using QMatrix and the float Qt coordinate classes (QSizeF, QPointF and QRectF), and have also switched over to using QPainterPath to work out where the widget clipping is, and whether or not the mouse is over the widget.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-18T17:06:01.000000Z", "commit": "540", "message": "I can draw a lot, and have nearly positioned the pie menu text labels correctly. However, I think that my underlying widget design is too complex and messy - in particular, my piemenu/piemenubutton split is wrong as there is too much indecision over which part is doing the painting. I also don't like the qobject delete property - I would rather use shared pointers, as in the rest of the code.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-18T11:23:55.000000Z", "commit": "539", "message": "I have added some unit tests for the SireMaths::Angle class, and have just about got my pie menu class working (it is nearly functional). It is definitely pretty :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-01-17T17:28:46.000000Z", "commit": "538", "message": "I can draw a trivial pursuit wedge holder!", "author": "chryswoods@gmail.com"}, {"date": "2006-01-17T16:13:10.000000Z", "commit": "537", "message": "Creating a framework to have GLWidgets drawn on the GLCanvas. I have also changed the SireMaths::Angle class so that it goes from -360 to 360, (with positive meaning clockwise, negative being anticlockwise)", "author": "chryswoods@gmail.com"}, {"date": "2006-01-17T14:13:03.000000Z", "commit": "536", "message": "I have split the rendering of the UI off into a separate class (so to simplify the GLCanvas class)", "author": "chryswoods@gmail.com"}, {"date": "2006-01-17T10:05:09.000000Z", "commit": "535", "message": "I had to give up using a texture as it was too slow on scruffy. I have thus changed to applying the QPainter first, saving the state, drawing the scene, then restoring the state. It works quite well, and the QPainter commands work well too. I can even now use the font dialog to choose the font.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-16T22:03:31.000000Z", "commit": "534", "message": "I am working on rendering the scene to a texture, and using QPainter to draw the UI elements on top of the scene - I will eventually use a Piemenu...", "author": "chryswoods@gmail.com"}, {"date": "2006-01-16T11:09:15.000000Z", "commit": "533", "message": "I have got selection working now! I have also upgraded to Qt 4.1 (though am not yet using any 4.1 specific features).\n\nI am pretty pleased with this. :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-01-15T23:13:18.000000Z", "commit": "532", "message": "Nearly finished updating the data structure - code is still broken.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-15T21:17:06.000000Z", "commit": "531", "message": "I am making more progress sorting out the data structure to hold the molecule. The code is still broken, but it is getting there :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-01-15T15:04:57.000000Z", "commit": "530", "message": "I am working on a MolDisplayData class that will hold all of the display information about a molecule (including its MoleculeReps). The code is currently broken.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-14T23:11:35.000000Z", "commit": "529", "message": "I have improved the render speed by not performing selection while the camera is being moved. I have also slowed down camera rotation by a half, which has made things look smoother. I have also written some code that resets the cursor position after a move to the position it was in when the mouse button was first pressed.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-14T18:29:01.000000Z", "commit": "528", "message": "Fixed ViewMode so that selection works again.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-14T18:05:11.000000Z", "commit": "527", "message": "I have abstracted all of the code to handle and interpret keyboard and mouse events into a InputInterpreter virtual class hierarchy (with the current GLCanvas code now in the ViewMode class). This has simplified GLCanvas, and enables me to easily switch between different ways of handling hte mouse and keyboard (e.g. so that I can switch from rotating the molecule to translating atoms or resizing bonds).", "author": "chryswoods@gmail.com"}, {"date": "2006-01-14T13:12:18.000000Z", "commit": "526", "message": "Added a mouseClickEvent so that I can click on the canvas, and I have also begun work on freezing the mouse cursor (and hiding it) when the view is being rotated. This needs more work however, as it creates some jerky motion...", "author": "chryswoods@gmail.com"}, {"date": "2006-01-12T22:48:27.000000Z", "commit": "525", "message": "Added mouse wheel support to spier. I will need to update spier by creating a 'mouseClickEvent' function, which could be a mouse press and release within a specified interval, that doesn't involve much motion of the mouse (e.g. if the mouse moves more than a tolerance then a mouse press, then mouse move events are sent). I will implement the logic for this in the viewer class, which can then pass mouseClick events to the GLCanvas.\n\nIn Qt, the double click event does still send the press event and release event immediately, then a doubleClickEvent afterwards...", "author": "chryswoods@gmail.com"}, {"date": "2006-01-12T22:18:41.000000Z", "commit": "524", "message": "I have fixed the bug in the triangle class that meant that it was calculating the wrong angle. Now that that has been fixed, and now I have added a change/setImproper set of functions, the tip4p molecule can now be built! (though setImproper doesn't seem to work for all angles...)", "author": "chryswoods@gmail.com"}, {"date": "2006-01-12T16:31:51.000000Z", "commit": "523", "message": "I have written the code to change the internal geometry of EditMols, and am beginning to test it (by building a tip4p molecule). Something is not quite right at the moment, so I will need to test and debug...", "author": "chryswoods@gmail.com"}, {"date": "2006-01-11T17:40:24.000000Z", "commit": "522", "message": "I am now working on the code to split the molecule using the new BondGroup class used by the EditMol and Molecule classes. I think that I have got the algorithm in place, with most of the code, but it is not quite ready, so will not yet compile.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-11T08:26:37.000000Z", "commit": "521", "message": "I have changed the GLSphereMesh slightly so that it uses different LOD for different sphere radii - I do need a better algorithm that works out the height in pixels of the rendered sphere, and then works out the LOD based on that...", "author": "chryswoods@gmail.com"}, {"date": "2006-01-10T16:19:09.000000Z", "commit": "520", "message": "I have added some code to slow down rendering to a maximum of 15fps (so that we don't overuse CPU)\n\nI have also fixed a small bug that meant that the whole scene was redrawn for every paint event (as camera->look() always returned true).\n\nI have also split MoleculeRep to create two different molecular representations (VDWRep and CPKRep). I need to update the dynamic LOD algorithm to use different LOD boundaries depending on the size of the object on the screen (as the VDWRep looks pretty poor as it uses large spheres)", "author": "chryswoods@gmail.com"}, {"date": "2006-01-09T21:15:07.000000Z", "commit": "519", "message": "I have got the sphere view frustrum culling algorithm working, and also the dynamic LOD for spheres and cylinders. This has resulted in some very fast rendering! My water box and p38 now render at interactive speeds on my laptop.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-09T17:54:39.000000Z", "commit": "518", "message": "I can now get the equations for the view frustrum planes for the camera, and now have the beginnings of view frustrum culling. I need to optimise the data structure, and still need to cull the cylinders, but the maths is appearing to be working!", "author": "chryswoods@gmail.com"}, {"date": "2006-01-09T16:41:03.000000Z", "commit": "517", "message": "I have converted GLCylinder to GLCylinderMesh, and created a new GLCylinder class, as I did for GLSphere/GLSphereMesh", "author": "chryswoods@gmail.com"}, {"date": "2006-01-09T15:48:57.000000Z", "commit": "516", "message": "Created a SireMaths::Sphere class to handle the maths that I will soon be doing with spheres.\n\nAlso moved GLSphere to GLSphereMesh, and have made GLSphere handle everything, from moving to the right place to setting the material. This necessitated fixing glPush/PopAttrib to work with the fixed state of materials...", "author": "chryswoods@gmail.com"}, {"date": "2006-01-08T22:58:04.000000Z", "commit": "515", "message": "Added code to the camera class so that it can calculate the equations of the frustrum planes in world coordinates. This will allow me to do view frustrum culling and also (hopefully) quick depth calculations, thus allowing me to try and speed up the code a little!", "author": "chryswoods@gmail.com"}, {"date": "2006-01-08T20:04:42.000000Z", "commit": "514", "message": "I have fixed the cylinder orientation bug (all bonds are now rendered correctly) and have also changed the 'main' function so that I can specify PDB files on the command line to display. I am pretty pleased with this code now!", "author": "chryswoods@gmail.com"}, {"date": "2006-01-08T12:46:44.000000Z", "commit": "513", "message": "I have worked up the keyboard interface to the GLCanvas (can now rotate spin and zoom the molecule using the keyboard as well as the mouse) and have got a nice ctrl/shift modifier scheme working which is consistent for both the keyboard and mouse manipulation method. I have also changed the camera to use spin and zoom, thus fixing the problem with the camera flipping over if it got too close.\n\nI have also added some fog, which looks quite nice.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-08T11:12:14.000000Z", "commit": "512", "message": "Moved all rendering to go view a GLCanvas class, thus allowing multiple GLCanvas objects to be swapped to and from a Viewer widget. This has also cleaned up a lot of the code, with the Viewer no longer being passed with every draw operation!", "author": "chryswoods@gmail.com"}, {"date": "2006-01-07T17:34:51.000000Z", "commit": "511", "message": "I have added the glew library so that I can easily access openGL extensions. I have used it to access the multisample extensions so that I can control the antialiasing.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-04T22:36:46.000000Z", "commit": "510", "message": "I can now draw a nice background gradient :-)", "author": "chryswoods@gmail.com"}, {"date": "2006-01-04T00:03:30.000000Z", "commit": "509", "message": "I have created a GLMatrix class which has allowed me to cache the result of the geometry calculation that was necessary to rotate all of the cylinders to lie along the bonds. I now have a nice ball and stick rendering of a molecule. There are a few problems (some cylinders are the wrong way around for the water box and ntrc) but the dioxin is perfect!", "author": "chryswoods@gmail.com"}, {"date": "2006-01-03T22:41:18.000000Z", "commit": "508", "message": "I nearly have the ball and stick model working... (I just need to rotate the cylinders to align with the bonds)", "author": "chryswoods@gmail.com"}, {"date": "2006-01-03T22:02:12.000000Z", "commit": "507", "message": "Added a GLCylinder class, and have changed the MeshMgr to use the actual mesh as the index, rather than its parameters, as this simplifies the library code for meshes with complex parameters (e.g. cylinder)", "author": "chryswoods@gmail.com"}, {"date": "2006-01-03T18:03:27.000000Z", "commit": "506", "message": "Switching over to using GLUQuadrics to render the sphere, as a way of learning how to use them (ready for how I use one in GLCylinder)", "author": "chryswoods@gmail.com"}, {"date": "2006-01-03T16:51:13.000000Z", "commit": "505", "message": "Fixed a bug in the encoding and decoding of pixel colours, and have also improved the logic of the render sequence so that very little work is done unless the mouse is actually over a molecule. This means that the selection is usable for my water box (though I do need to find a way to speed up the rendering of spheres)", "author": "chryswoods@gmail.com"}, {"date": "2006-01-03T13:57:19.000000Z", "commit": "504", "message": "Changed SelectID so that it is an implicitly shared class, and cleaned up some of the render code.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-03T11:54:15.000000Z", "commit": "503", "message": "I now have full atomic resolution picking! It is not the most efficient way yet, so I will reorder parts so that the molecular level selections are always available on the back buffer (thus we only need to redraw when the mouse moves over a molecule - while in selection mode).", "author": "chryswoods@gmail.com"}, {"date": "2006-01-02T17:13:38.000000Z", "commit": "502", "message": "I have got a basic pixel based picking system working, though it needs more work. It is a lot more accurate than the openGL picking method, and will be the one that I will use...", "author": "chryswoods@gmail.com"}, {"date": "2006-01-02T16:09:58.000000Z", "commit": "501", "message": "I have got picking working using the glLoadName picking mechanism. It is not very accurate however. I will now implement a colour picking method using the back buffer, as I suspect that this will be more accurate.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-02T11:37:23.000000Z", "commit": "500", "message": "Have a mesh manager so that individual meshes can be reused for different atoms (e.g. GLSphere replicated for several atoms). Can also load multiple molecules, and have slightly improved the rendering speed.", "author": "chryswoods@gmail.com"}, {"date": "2006-01-01T22:23:35.000000Z", "commit": "499", "message": "I now have a pretty coloured in molecule rendered in spier!", "author": "chryswoods@gmail.com"}, {"date": "2006-01-01T14:48:19.000000Z", "commit": "498", "message": "I have written the framework of the Material code (the code that manages and applies openGL materials, composed of materials, textures and shaders).", "author": "chryswoods@gmail.com"}, {"date": "2005-12-29T18:43:15.000000Z", "commit": "497", "message": "Spier can now load and view a molecule (as a collection of white wireframe spheres)", "author": "chryswoods@gmail.com"}, {"date": "2005-12-17T23:25:17.000000Z", "commit": "496", "message": "Added a Spier library and application, as the beginnings of the basics of the viewer and camera class. These are very dirty, but are just here to allow me to view whatever I render via a simple class.", "author": "chryswoods@gmail.com"}, {"date": "2005-12-17T16:22:33.000000Z", "commit": "495", "message": "Starting my Christmas mini-project - building a basic viewer (spier) for the EditMol class. This will eventually become the GUI for Sire, allowing the graphical construction and manipulation of molecules, as well as monitoring running simulations. However, for this Christmas, all I want to write is a small code that can view an EditMol.", "author": "chryswoods@gmail.com"}, {"date": "2005-12-16T09:38:21.000000Z", "commit": "494", "message": "I have sped up the periodic boundaris a little more. I think that they are now as fast as they are going to get (at least not without costing a lot more effort for little gain - periodic boundaris only add about 0.14ns per water-water interaction.\n\nThe time for 1000 moves is now faster than ProtoMS2.1, so I am pretty pleased! :-)", "author": "chryswoods@gmail.com"}, {"date": "2005-12-15T19:03:32.000000Z", "commit": "493", "message": "I have sped up the periodic box even more, now completing 1000 steps in 3 seconds.", "author": "chryswoods@gmail.com"}, {"date": "2005-12-15T15:07:10.000000Z", "commit": "492", "message": "I have succeeded in making the periodic box code a little bit quicker. It is still not as fast as I would like it to be though.", "author": "chryswoods@gmail.com"}, {"date": "2005-12-15T08:54:40.000000Z", "commit": "491", "message": "The cause of the slow speed of InterGroupCLJFF for moves per second was because it used Set.splitIntoLists, which is very inefficient for large sets. I have replaced this with, to be honest, a much better piece of code, and the code now does 1000 moves in 1.8 seconds, while the single InterCLJFF forcefield achieves 1000 moves in 1.7 seconds. I think that that is pretty good :-)\n\nI have tested the periodic box code, and there is definitly something wrong with that, as the code is still very very slow when the box size is huge (i.e. the result is the same as in vacuum). I will need to look at this in detail to work out what is going wrong...", "author": "chryswoods@gmail.com"}, {"date": "2005-12-14T17:54:10.000000Z", "commit": "490", "message": "Moves using the InterGroupCLJFF run at about 1000 every 2.8 seconds now, while using a single InterCLJFF they run at about 1000 every 1.7 seconds. It is still not sufficiently fast (I want both to be about 1-1.5 seconds)", "author": "chryswoods@gmail.com"}, {"date": "2005-12-14T16:19:36.000000Z", "commit": "489", "message": "The last few versions wouldn't compile from scratch. I have fixed the code (it now does compile from scratch) but the speed has dropped to 1000 moves in 3.5 seconds. Why have I lost half a second?", "author": "chryswoods@gmail.com"}, {"date": "2005-12-14T15:50:41.000000Z", "commit": "488", "message": "I have wrapped up the FFGroup and am beginning to speed test the energy calculation. I have faked up a subroutine that does a set of 'moves' of the cutgroups that have loaded (FFGroup::testSpeed) and have compared this to the simulation speed of ProtoMS. ProtoMS2.1 runs at about 1000 moves every 2 seconds for gas-phase boundaries and 15A cutoff. Sire runs at 1000 moves in 3 seconds. I have got quite a bit of work to do to speed this up...!", "author": "chryswoods@gmail.com"}, {"date": "2005-12-14T11:51:08.000000Z", "commit": "487", "message": "I have done some more work on the FFWrapper class, and on working out how to automatically cast from a forcefield (that does not have to be part of any inheritance hierarchy) to an FFWrapperPtr. I have achieved this (see techdocs/testcast.cpp for the basics) and I have also achieved this in python via some python hackery (see python/Sire/SireFF/__init__.py).", "author": "chryswoods@gmail.com"}, {"date": "2005-12-13T23:01:33.000000Z", "commit": "486", "message": "I am working on the FFWrapper class, which is used to wrap up a forcefield to provide a consistent interface to it, and also to manage the energies that are being calculated.", "author": "chryswoods@gmail.com"}, {"date": "2005-12-13T12:23:17.000000Z", "commit": "485", "message": "I have wrapped up the InterGroupCLJFF class and have tested it in python (by splitting the water box into two separate groups). The total energy is equal to the single group value (so the energies are correct) and it is even quicker to do this than to use the single group! (this suggests some inefficiency in InterCLJFF). I am really pleased, as this validates my idea to use multiple forcefields to represent complex interactions. It also shows that the multiple forcefield route is the best one to use to get arbitrary components (e.g. here I have split the total CLJ energy of the water box into three components; i) interaction within group A, ii) interaction within group B, and iii) interaction between group A and B. We could imagine group A being the ligand, and group B being the solvent (or even adding a group C as the protein).", "author": "chryswoods@gmail.com"}, {"date": "2005-12-13T11:59:49.000000Z", "commit": "484", "message": "I have finished implementing the InterGroupCLJFF (though it still needs testing). I have cleaned up the code for the Set class, fixed a bug in the Atom class (didn't take account of the specified element in the constructor) and fixed testnetobjects.cpp so that the unit tests all work again.", "author": "chryswoods@gmail.com"}, {"date": "2005-12-12T17:09:34.000000Z", "commit": "483", "message": "I am working on implementing the InterGroupCLJFF - the code probably doesn't compile at the moment... :-)", "author": "chryswoods@gmail.com"}, {"date": "2005-12-12T15:27:51.000000Z", "commit": "482", "message": "I have now started work on the InterGroupCLJFF, which calculates the CLJ energy between groups of CutGroups. To do this, I have moved the common CLJ code into a CLJFF class. I have also created a base ForceField class, though at the moment I am not sure if I really need it...", "author": "chryswoods@gmail.com"}, {"date": "2005-12-12T12:09:27.000000Z", "commit": "481", "message": "I have implemented the periodic boundary conditions, and have run a speed and energy comparison to ProtoMS2.1 (in ideas/current-speed)\n\nThe periodic boundaries appear to give the right energy, and are faster for large cutoffs. They are however slower for small cutoffs, with a 15A cutoff being about the same speed in both codes. I need to think about why the addition of these boundary conditions has slowed the code down so much.", "author": "chryswoods@gmail.com"}, {"date": "2005-12-09T14:38:47.000000Z", "commit": "480", "message": "I have added a periodic box volume class (though it is currently just a copy of Cartesian), and I have moved all cutgroup and cutoff information out of SimVolume (which has now become pure virtual) and into InterCLJFF. A forcefield should manage its own cutoff and list of contained cutgroups.", "author": "chryswoods@gmail.com"}, {"date": "2005-12-09T13:36:49.000000Z", "commit": "479", "message": "I have moved the code holding CutGroups out of the volume and into the InterCLJFF. I now think that a forcefield should hold the cutgroups, and use a volume to test how close together they are.", "author": "chryswoods@gmail.com"}, {"date": "2005-12-09T13:22:34.000000Z", "commit": "478", "message": "I have gone back to the slow version (by stepping through the creation of that version) and I found that the speed loss was caused by the grouping of the 'if' conditions in InterCLJFF (see the source code comments for details). I have fixed it so that the volume classes are not used to get the lists of cutgroups.", "author": "chryswoods@gmail.com"}, {"date": "2005-12-09T12:37:05.000000Z", "commit": "477", "message": "I have gone back to the previous version as it has kept the speed. I don't know what happened with the last version...", "author": "chryswoods@gmail.com"}, {"date": "2005-12-09T11:39:09.000000Z", "commit": "476", "message": "I have switched over to not returning lists of CutGroups from the volume. For some reason this has really slowed down the speed of the code... (even though I haven't changed the important parts?). I will test to see what has gone wrong...", "author": "chryswoods@gmail.com"}, {"date": "2005-12-09T11:03:15.000000Z", "commit": "475", "message": "I have written the code to calculate the energy of subsets of CutGroups of the InterCLJFF forcefield.", "author": "chryswoods@gmail.com"}, {"date": "2005-12-08T11:17:14.000000Z", "commit": "474", "message": "I have just run some speed tests comparing the last version of Sire against ProtoMS3 (version 200) and ProtoMS2.1 (version 723). The results are in ideas/current-speed, but I am pleased to say that this version is as fast as the prototype, and much faster than ProtoMS2.1 :-)", "author": "chryswoods@gmail.com"}, {"date": "2005-12-08T10:22:40.000000Z", "commit": "473", "message": "I have managed to get the code as fast, if not faster, than the prototype! The changes I made to do this are;\n\nMain speed up due to removing copying of CLJWindows when lookup in the hash. Used a pointer instead. Also modified Windows<T> so that it used an internal array, and lookup up in array, rather than switch case (what was I thinking?)\n\nAlso removed Energy objects from inner loop, and reverted to using plain doubles and double&. This gave a small speedup (about 100-200ms), which was worth it. The Energy class is still used to return the final result, and should be used by the user and the forcefield handler classes (which aren't doing double loops!)\n\nChanged function that combines CLJ parameters from one which calls function pointer for each CLJ pair (again, what was I thinking?), to having a single function pointer that calls a function that combine together all of the CLJ pairs.\n\nMoved the lookup of the CLJWindow for the second group of the pair into the cljEnergy function, so that it is only looked up if the groups are within the cutoff distance (this saved quite a bit of time as well).\n\nChanged CLJParameter, LJParameter and CLJPair to return const double& rather than double - this saved a surprisingly large amount of time! My efforts to do this (together with the actual speeds, compared to the prototype, ProtoMS3, also run today) are in techdocs/speed-test", "author": "chryswoods@gmail.com"}, {"date": "2005-12-07T20:10:06.000000Z", "commit": "472", "message": "I have fixed the bug in the calculation of the energy. There is a slight difference in the energy compared to the prototype, and while the speed is only a bit slower for 80A cutoff, it is a lot slower for the 15A cutoff.", "author": "chryswoods@gmail.com"}, {"date": "2005-12-07T17:15:26.000000Z", "commit": "471", "message": "The code was not dog slow (phew!). I thought I was calculating the energy once, but was actually doing it ten times - this is why the speed was ten times slower than I thought it should be! I have recompiled the version I used for the original benchmarking (version 200) and this is actually a bit quicker now (probably due to gcc 3.4 being better). This code is slower than the prototype, and is also wrong (something wrong with adding together EnergyPacks). Ah well - more debugging ahead!", "author": "chryswoods@gmail.com"}, {"date": "2005-12-07T12:40:46.000000Z", "commit": "470", "message": "I am making modifications to speed this code up, because it is dog slow!!! Where has all the speed from the prototype gone???", "author": "chryswoods@gmail.com"}, {"date": "2005-12-05T16:51:44.000000Z", "commit": "469", "message": "I have wrapped up the Set class, so that now MoleculeSet and CutGroupSet are wrapped (this required lots of effort, involving moving all indexer functions into a dedicated file, and updating some of the Set class).\n\nThe code can now add molecules to a forcefield and calculate the energy. The energy looks wrong, but at least this is a start!\n\nI have a big problem with my CLJTable class in that it only works if the molecule uses the same residue numbers. A solvent typically uses the residue number as an atom number, so this doesn't work. I think that I will need to add the function to CLJTable to renumber residues, as I looked at renumbering the EditRes but that it hugely complicated (as you have to renumber all EditRes at once or you break the inter-residue bonding!)", "author": "chryswoods@gmail.com"}, {"date": "2005-12-05T12:19:51.000000Z", "commit": "468", "message": "I have now actually written the code that calculates the intermolecular CLJ energy! (at last!)\n\nI haven't tested it yet, but it does all compile and link.", "author": "chryswoods@gmail.com"}, {"date": "2005-12-04T22:29:09.000000Z", "commit": "467", "message": "Adding in records of which CutGroups are perturbable in the InterCLJFF forcefield.\n\nCode is still broken.", "author": "chryswoods@gmail.com"}, {"date": "2005-12-04T16:00:03.000000Z", "commit": "466", "message": "Working on the CLJMutator, and assigning parameters to CutGroups. I think that I have a scheme that will work...\n\nThe code is broken...", "author": "chryswoods@gmail.com"}, {"date": "2005-12-02T15:11:02.000000Z", "commit": "465", "message": "I am working on adding the CLJ parameters to the forcefield. It is complicated by the desire that I want to save memory by not having multiple copies of the same parameters. Maybe that's not worth it? Whatever, I need to get working on the mutator, as the form of the CLJMutator is key to how I represent the CLJ parameters within the forcefield.", "author": "chryswoods@gmail.com"}, {"date": "2005-12-02T12:31:23.000000Z", "commit": "464", "message": "I am back working on the forcefield and volume classes. It makes so much more sense now I have a more logical data structure for the molecules. I have now got good separation between forcefields (so separate InterCLJFF and IntraCLJFF etc) and a cleaner way to do energy components. I now just have to implement everything :-)\n\n(code is currently broken)", "author": "chryswoods@gmail.com"}, {"date": "2005-12-02T09:18:55.000000Z", "commit": "463", "message": "Added ddd to the debug run options, and fixed a bug in the non-exact matching of atom names (forgot to return the index, so got a crash)", "author": "chryswoods@gmail.com"}, {"date": "2005-12-01T21:33:13.000000Z", "commit": "462", "message": "Fixed a bug in the assignment of the residue atoms, and have also added some string functions to more classes.\n\nI have also updated the residueinfo class to try case insensitive matches if a case-sensitive match is not found.", "author": "chryswoods@gmail.com"}, {"date": "2005-12-01T17:03:53.000000Z", "commit": "461", "message": "I have wrapped up the geometry classes (line, triangle and torsion) and have also added some functionality to the element (information as to the period and group of the element, which can then allow functions that return whether it is a noble gas, transition metal etc.)", "author": "chryswoods@gmail.com"}, {"date": "2005-12-01T14:13:10.000000Z", "commit": "460", "message": "The wrapping of molecule, residue and cutgroup is going well, and it looks like I can convert EditMols to a variety of different types of molecule!", "author": "chryswoods@gmail.com"}, {"date": "2005-12-01T12:16:02.000000Z", "commit": "459", "message": "I have wrapped up the molecule class, and provided MoleculeFactory and CutGroupFactory so that the classes can be used with NetObjects.\n\nI have very much rationalised how I will do serialising and deserialising, and will eventually update all classes to use the same standard functions and operators, e.g.\n\nObj(const QByteArray &data);   /// create object from data\n\nObj.load(const QByteArray &data); /// load existing object from data\n\nObj.streamLoad(QDataStream &ds); /// load existing object from datastream\n\nQByteArray Obj.dump() const; /// dump the object to a QByteArray\n\nvoid Obj.streamDump(QDataStream &ds) const;  ///dump the object to a datastream\n\nthen also define operator>> and operator<< to a QDataStream.\n\nSee Molecule, CutGroup, AABox and PerturbData for examples of completed code.\n\nThe benefit of this is that it allows a flexible dump and restore interface, there is no issue with friend operator functions, and the actual work is performed by only two functions (streamLoad and streamDump) which both use a version token to prevent loading of incompatible data versions.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-30T22:47:56.000000Z", "commit": "458", "message": "Wrapping up the Molecule class - I have also improved the wrapping of the QList, QSet and QVector.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-30T16:33:04.000000Z", "commit": "457", "message": "I have integrated the new SireMol module with the rest of the program. The units tests work, as does the test/test.py script (which loads up p38, sb1 and a water box, and assigns the clj parameters from the database - the parameters look correct!)", "author": "chryswoods@gmail.com"}, {"date": "2005-11-30T11:31:37.000000Z", "commit": "456", "message": "The new SireMol classes now compile in their new location. My next step is to integrate the rest of the modules with them (which should hopefully not be too difficult, as long as I have written this in as modular a manner as I hope I have :-)\n\n(also, I have just now started using kde 3.5 and kdevelop 3.3!)", "author": "chryswoods@gmail.com"}, {"date": "2005-11-30T09:52:41.000000Z", "commit": "455", "message": "I have changed all 'SandBox' references in the new files to 'SireMol'. My next step is to fix everything so that it will compile again... :-)", "author": "chryswoods@gmail.com"}, {"date": "2005-11-30T09:27:42.000000Z", "commit": "454", "message": "I have now moved the new SireMol files into the SireMol directory, and have removed tmp.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-30T09:20:55.000000Z", "commit": "453", "message": "I have now moved the old SireMol files to tmp.\n\nIt is interesting to note that the replacing files are ~3500 lines, with the originals being ~5000 lines. I still need to do some work to finish the new files, in particular I need to wrap up all of the classes.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-30T09:13:55.000000Z", "commit": "452", "message": "Ok, I have now moved the SandBox files into tmp...", "author": "chryswoods@gmail.com"}, {"date": "2005-11-30T09:08:55.000000Z", "commit": "451", "message": "I am now going to start moving the sandbox files into SireMol. I will swap the files, so I will first move them into tmp, then I will move the SireMol files into the sandbox, then I will move the new files into SireMol, then remove tmp.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-29T16:08:22.000000Z", "commit": "450", "message": "I am now testing the EditMol wrapping, and am beginning to make some changes to improve the usage api.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-29T15:34:17.000000Z", "commit": "449", "message": "I have implemented a lot more of the SandBox, and the code now compiles and runs. I still need to test the editmol/res wrapping...", "author": "chryswoods@gmail.com"}, {"date": "2005-11-29T11:45:23.000000Z", "commit": "448", "message": "I have wrapped up the new EditMol and EditRes classes, and the code compiles and runs. I am now beginning to test the new classes, and will then wrap up everything else.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-28T22:32:48.000000Z", "commit": "447", "message": "The code now compiles, and runs! The tests and test.py all work. Note that I haven't finished my work in the sandbox - all this means is that what I have written does compile, and that the use of the SandBox namespace means that it is not clashing with the old SireMol data structure.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-28T17:05:17.000000Z", "commit": "446", "message": "More files are now compiling (up to EditMol), but I am still not done....", "author": "chryswoods@gmail.com"}, {"date": "2005-11-28T14:53:59.000000Z", "commit": "445", "message": "molecule.cpp and cutgroup.cpp now compile :-)", "author": "chryswoods@gmail.com"}, {"date": "2005-11-28T14:00:39.000000Z", "commit": "444", "message": "I am making a lot of progress implementing my ideas in the sandbox. I am also now beginning to try and compile things, though of course nothing new compiles yet... :-0", "author": "chryswoods@gmail.com"}, {"date": "2005-11-26T23:23:31.000000Z", "commit": "443", "message": "I have added EditMol and EditRes to the SandBox, and have updated EditMol to the new data structure. I have also written the first draft implementation of BondGroup. I think that this is a much cleaner way of handling bonds, especially now that I have dropped the need to store the actual atom data in a bond, but rather just store the atomindex data. I will be able to use BondGroups to describe the bonding in both the EditMol and Molecule classes, so will be able to provide a common interface to the splitMolecule and moveInternal functions!\n\nAs ever at the moment, the code is broken (indeed, I haven't even attempted to compile the SandBox once yet...)", "author": "chryswoods@gmail.com"}, {"date": "2005-11-26T16:10:52.000000Z", "commit": "442", "message": "I am beginning to write the implementation of my design...  I have changed the perturbation so that the Mutator holds the lam0 and lam1 states, and that the molecule is based on a skeleton that does not change at all with lambda.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-25T13:53:07.000000Z", "commit": "441", "message": "Added an EnumFlags template class so that the TmplType class functions can be used with any suitable enum class.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-25T11:49:28.000000Z", "commit": "440", "message": "I have added back the BondGroup class (originally called FlexGroup). I think that the new data structure should be very powerful, as I can already see how the perturbations will work, and how the inter- and intra-molecular energies will be calculated (something that was quite vague using the old structure). Also, this structure places fewer restrictions on the types of molecules that may be loaded.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-25T11:39:42.000000Z", "commit": "439", "message": "I have made more progress with the residueinfo class, which is the key class for identifying atoms in a residue at different lambda states. The residueinfo will be passed to lots of different classes that need to keep tabs on atoms, e.g. CLJTable. I have mistakenly removed flexgroup, which will be the BondGroup class, so I will now need to retrieve it :-)", "author": "chryswoods@gmail.com"}, {"date": "2005-11-25T09:39:18.000000Z", "commit": "438", "message": "Copying moleculeinfo to the sandbox.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-25T09:38:53.000000Z", "commit": "437", "message": "File movements...", "author": "chryswoods@gmail.com"}, {"date": "2005-11-25T09:38:22.000000Z", "commit": "436", "message": "Mistakes...", "author": "chryswoods@gmail.com"}, {"date": "2005-11-25T09:35:18.000000Z", "commit": "435", "message": "The data structure for the molecule is beginning to crystallise :-)\n\nCode is broken.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-24T16:00:00.000000Z", "commit": "434", "message": "I am still thinking about and playing with the new SireMol classes...", "author": "chryswoods@gmail.com"}, {"date": "2005-11-24T10:55:37.000000Z", "commit": "433", "message": "In rewriting the SireMol classes I have realised that there is a serious bug in the Bond class! There is no way that I can use a pointer to an atom as the means of storing the bonded atoms. The reason for this is that I am using Qt storage classes, and these will reallocate the arrays containing the atoms behind the scenes. This means that the pointers stored in the bonds may become invalid and thus cause weird results or crashes.\n\nI have thus worked up a Bond class in the sandbox that stores AtomIndexes and a weak pointer to the molecule, thus allowing the atoms to be obtained from the molecule whenever they are needed. This requires slightly more storage than the old method, but also solves some of the problems I was having regarding letting the python interface create bonds and use them.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-23T16:35:57.000000Z", "commit": "432", "message": "I am now roughing out the new family of Molecule/CutGroup classes. I think that this is a good idea, as it is letting me clean up a lot of the problems that the current system has. I will however need to change splitMolecule and moveInternal to use the new interface. I am thinking that they should be changed so that they work with FlexMol and EditMol directly. This will mean that I will need to standardise the interfaces to FlexMol and EditMol, but I think that the effort to do that will be worth it.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-23T15:29:39.000000Z", "commit": "431", "message": "I have added a 'SandBox' library which I can use to develop updated classes without breaking the existing versions (e.g. I will use the sandbox to develop SandBox::Molecule, SandBox::CutGroup etc. which will not clash with SireMol::Molecule and SireMol::CutGroup)", "author": "chryswoods@gmail.com"}, {"date": "2005-11-23T15:15:06.000000Z", "commit": "430", "message": "I have integrated SireVol. As I was working on the InterCLJFF class I was running into problems with working out when I was dealing with Molecules, and when I was dealing with CutGroups. Then I realised that a Molecule is not a CutGroup (as a ChainMol is not a CutGroup, while a ChainRes is a CutGroup). I think that this part of my data structure is not quite correct. I will now try to modify it so that Molecule is not derived from CutGroup, but rather that a Molecule has a function that returns the CutGroups that make up the Molecule. I think that I will also have a separate MoleculeID, perhaps being equal to the CutGroupID of the first (and perhaps only) CutGroup in the Molecule.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-23T13:15:46.000000Z", "commit": "429", "message": "I am now starting work on the InterCLJFF, a forcefield to calculate intermolecular coulomb/LJ energies. To start, I am now integrating the SireVol code. Everything is currently broken.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-23T11:55:43.000000Z", "commit": "428", "message": "I have got the MoleculeInfo and ResidueInfo classes working, and have added them to the AtomTypeTable. I have cleaned up the API for the AtomTypeTable and CLJTable and have wrapped them up in python. I have run some tests that calculate the total charge on residues and molecules, and the total charges for p38, sb1 and tip4p are all correct. I am now pretty sure that the CLJ parameters have been correctly assigned to the molecules!", "author": "chryswoods@gmail.com"}, {"date": "2005-11-22T22:42:24.000000Z", "commit": "427", "message": "I have replaced the ResidueInfo struct with the better MoleculeInfo and ResidueInfo classes. These are immutable once constructors, and provide a much safer way for the molecule to distribute information about itself.\n\nI have also cleaned up the code of Molecule, AtomArray and Array", "author": "chryswoods@gmail.com"}, {"date": "2005-11-22T15:59:10.000000Z", "commit": "426", "message": "I have written and wrapped the AtomTypeTable and CLJTable and have completed the code that populates them from the database. My tests show that p38 looks like it is correctly parametised.\n\nI have written some code to guess the LJ parameters from the atom type. To do this I moved the 'score' function from FuncDB to FFChildDB, as it is something that could find more utility in other types of database.\n\nI have also added a function to 'Molecule' that enables it to quickly return the corresponding Atom to an AtomIndex - it uses the ResidueInfo struct to do this. The ResidueInfo struct is actually quite useful, and I think that it should be made into a better class that can also be put in with the AtomTypeTable (thus allowing it to calculate the charges of residues, or to quickly break down into AtomTypeTables of residues, rather than just of molecules, e.g. when we create the tables for ChainRes groups from the parent ChainMol's table).", "author": "chryswoods@gmail.com"}, {"date": "2005-11-22T11:39:28.000000Z", "commit": "425", "message": "I am now working on the AtomTypeTable and CLJTable, and am making them implicitly shared to support copying tables to different copies of the same molecule. The code is currently broken, as I am taking my lunch break now :-)", "author": "chryswoods@gmail.com"}, {"date": "2005-11-22T10:28:18.000000Z", "commit": "424", "message": "I have been speed testing the assignment of parameters. I have had to add a cache for the recovery of MMAtomParameters, as the cache doubled the speed of paramter assignment. I have been testing by assigning the clj parameters for sb1, p38, a very big water box (currently loaded as a single molecule) and my water-methane water box, loaded as separate water molecules. So far, it takes 23.2s on my laptop to assign all of the CLJ parameters for these atoms (time is to run the entire program, including reading all of the parameter and pdb files). This isn't spectacular (23s for about 35000 atoms translates to only about 1500 atoms per second), and for big systems, of 100-500k atoms, the parametisation will be very slow (probably 1-5 minutes!). I think that I will need to treat the database as the initial parametiser, that is used to search for parameters, and that I will need to use another file that directly links atoms to parameters (e.g. a parameter restart file) that can be used once the parameters have been found. This way, the db is only used right at the beginning of the first job run.\n\nMost of the time was parametising the waters (the protein only took about 4s). Another alternative is to ensure that the normal use of the database is to parametise only one copy of the molecule, and then to allow this parameter table to be assigned to multiple molecule copies. Hey - this is a good idea, as this would also drastically reduce memory usage! (only one copy of the parameter table for water, rather than tens of thousands!) (same for lipid system as well!)\n\nYes - I will do this. This means writing the parameter table to be implicitly shared. It would thus be best to base it on a Qt container class, e.g. a QHash or QList, as this will do the implicit sharing for us.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-22T09:17:43.000000Z", "commit": "423", "message": "I have now finished cleaning up the atom matching code. It seems to work, and the code is now quite nice :-)\n\nI have also wrapped up QStringList.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-21T23:05:03.000000Z", "commit": "422", "message": "I am in the process of cleaning up the code for the AtomMatchDB - I am solving the problems of case matching, and also I have arranged the code in a much more logical layout that is much easier to follow and understand. I have also replaced the inconsistant index table with the mol-resnum table, that is used and can be attached to misctables in exactly the same manner as the other match tables.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-21T21:14:04.000000Z", "commit": "421", "message": "Updated the documentation describing the creation of the AtomMatchDB tables, and also updated the code so that the table_prefix is used correctly (so that multiple AtomMatchDBs can coexist in a single DB", "author": "chryswoods@gmail.com"}, {"date": "2005-11-21T20:21:20.000000Z", "commit": "420", "message": "I have moved the atom matching code into AtomMatchDB and updated the names to match. The code works, but I haven't yet rewritten it properly (e.g. to sort out the case details etc.)", "author": "chryswoods@gmail.com"}, {"date": "2005-11-21T16:57:38.000000Z", "commit": "419", "message": "I have now written the code that assigns parameters to atoms in molecules. It appears to work, though I will need to more extensively test it. The code has raised a few issues, e.g. should atom/residue name matching be case-sensitive or case-insensitive? I think that I will write something that tries a case-sensitive match, then if that fails it drops back to a case-insensitive match (and takes the first one returned). I will do this after I move all of the atom matching code out of CLJDB and into a specfic AtomMatchDB (as it is over 1/2 of the CLJDB code, and does not rely on the presence of CLJ parameters)", "author": "chryswoods@gmail.com"}, {"date": "2005-11-21T14:05:25.000000Z", "commit": "418", "message": "I have tested the reading in of a wide variety of ProtoMS parameter files and, after fixing many bugs, it all now appears to work. The next step is now to write the code that can assign the parameter to the loaded molecule.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-21T11:56:24.000000Z", "commit": "417", "message": "I have now written the code that reads in the different ProtoMS templates and relates the CLJ parameter numbers to atoms. I have still to test this however...", "author": "chryswoods@gmail.com"}, {"date": "2005-11-21T08:23:08.000000Z", "commit": "416", "message": "Added the ability to add relationships between atoms and CLJ parameters.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-18T17:32:26.000000Z", "commit": "415", "message": "I am now working on the code that relates Atoms to parameters, and then populates parameter tables. I think that I have worked out how it will work, I just now need to get on and implement it. This commit just puts in lots of code that isn't really written yet - it just represents how I have been playing out the ideas. This code is currently broken.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-18T11:10:48.000000Z", "commit": "414", "message": "I have fixed some bugs in the operator matching of the MathFunc family of classes, and I have also modified the Atom class so that it has an optional atom number (used to preserve the atom number from the input coordinate file throughout the program to atom output, and also to allow assignment of parameters for PSF files).\n\nI have also removed the variety of \"add\" functions from EditRes, and instead created many more constructors for Atom that provide convienient shortcuts for creating atoms from strings or partial information.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-17T17:51:38.000000Z", "commit": "413", "message": "I have now added the type-safe wrapping of the family of Energy classes.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-17T16:14:13.000000Z", "commit": "412", "message": "I have sorted out the mess of the MathFunc operators, and it now all makes sense! Indeed, wrapping up the MathFunc in boost::python went really well, and I have even managed to wrap the operators in python as well (thus making it very easy for the user to write their own functions!).\n\nI have added a new test script that graphs the supplied function. It seems to work well.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-17T15:01:09.000000Z", "commit": "411", "message": "I have wrapped up the MMDB class hierarchy (surprisingly easy - boost::python is excellent, though is does require over 210MB to compile the wrappers!).\n\nI have also wrapped up AtomType, CLJParameter, LJParameter and CLJPair.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-17T12:17:17.000000Z", "commit": "410", "message": "I have now written the code that reads in the ProtoMS2.1 dihedral paramter section from the parameter file. It all seems to be working well! I have also updated FuncSum - the operators were ambiguous. I think that eventually I will need to take a good look through the MathFuncs and sort them out so that they are useful. Thier code is not anywhere near perfect...", "author": "chryswoods@gmail.com"}, {"date": "2005-11-16T19:21:04.000000Z", "commit": "409", "message": "I have now written the dihedral and Term14DB databases. These seem to work. I have written the CosPlusOne function, which forms the basis of most dihedral functions, though I have yet to write the code to read these parameters from the ProtoMS parameter files.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-16T15:09:03.000000Z", "commit": "408", "message": "I have now written the Term13DB and the AngleDB that is built on top of it, and have written the code to read the angle terms from a ProtoMS parameter file! Now that I have finally got the foundations sorted, writing the 'real-world' code on top is now quite quick and straightforward.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-16T11:28:23.000000Z", "commit": "407", "message": "I have abstracted functionality that will be common to Term12DB, Term13DB and Term14DB into a common base, FuncDB. The code should all now compile and run well :-)", "author": "chryswoods@gmail.com"}, {"date": "2005-11-16T10:25:40.000000Z", "commit": "406", "message": "I have fixed the problem of saving and restoring the functions from the database - I ended up needing to use the QSqlTable type classes to use the Qt API itself to add the function, rather than forming my own SQL query.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-15T16:22:14.000000Z", "commit": "405", "message": "Annoyingly, I have tried to get the MathFuncs to store and restore from the database, but have failed. For some reason the QByteArrays were corrupting on save/load, so binary storage wouldn't work (as well as being messy anyway for a parameter file...). I have now moved to text, but I haven't really come up with a good way of representing the functions using text. (well, I need to write a function parser...)", "author": "chryswoods@gmail.com"}, {"date": "2005-11-15T11:18:20.000000Z", "commit": "404", "message": "Just adding some more wrapping of the FFParentDB class...", "author": "chryswoods@gmail.com"}, {"date": "2005-11-15T11:01:47.000000Z", "commit": "403", "message": "I have finished the first write of the Term12DB, and inherited up to the BondDB. It seems to load the parameters well!", "author": "chryswoods@gmail.com"}, {"date": "2005-11-14T17:49:27.000000Z", "commit": "402", "message": "I have added an Harmonic function for bond and angle energies, and am now working on Term12DB, which forms the base of all 12 parameter databases (e.g. bond parameter database). The code does not currently compile (I have been interupted as Erica has finished making a wonderfully aromatic dinner... Mmmmm :-)", "author": "chryswoods@gmail.com"}, {"date": "2005-11-14T11:49:35.000000Z", "commit": "401", "message": "I have got a lot of the maths functions working! (even the differentiation). I have written some unit tests to test things, but it is all looking quite good!", "author": "chryswoods@gmail.com"}, {"date": "2005-11-13T18:58:18.000000Z", "commit": "400", "message": "Finished the renaming, and it all compiles and works again! Commit 400!", "author": "chryswoods@gmail.com"}, {"date": "2005-11-13T18:10:14.000000Z", "commit": "399", "message": "Still renaming...", "author": "chryswoods@gmail.com"}, {"date": "2005-11-13T18:08:38.000000Z", "commit": "398", "message": "Still renaming files...", "author": "chryswoods@gmail.com"}, {"date": "2005-11-13T17:45:04.000000Z", "commit": "397", "message": "Separated out the maths code into a dedicated SireMaths library, and have moved md5 into the ThirdParty library. I have only moved the files, so the code will not currently compile.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-13T17:29:44.000000Z", "commit": "396", "message": "The code now compiles, though I need to do quite a bit of work to test it.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-13T13:16:14.000000Z", "commit": "395", "message": "I am making more progress with the mathfunc family of classes. I have now got a clear idea in my mind of how they will work, and it is just now down to putting the time in to implement them all...", "author": "chryswoods@gmail.com"}, {"date": "2005-11-11T22:27:54.000000Z", "commit": "394", "message": "Now working on the Bond parameter database. Before I can do this I need the general maths functions objects that will be used to make the general functions used for the intramolecular energy terms. The MathFunc library of classes provide function units which can be combined together into a range of single argument functions. These functions will eventually be able to be serialised to a string or bytearray so that they can be stored in the database together with the parameters.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-11T12:46:09.000000Z", "commit": "393", "message": "I have got the new, split-up parameter database classes now working, and they seem to be able to read in the parameter files ok. The code now compiles and runs again, and the tests all seem to work.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-11T11:19:23.000000Z", "commit": "392", "message": "I have renamed the files that make up the forcefield database components - the names are now more logical.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-11T11:14:54.000000Z", "commit": "391", "message": "I am working on splitting the monolithic MMDB class into individual component classes that are combined via multiple inheritance. This code will not compile at the moment...", "author": "chryswoods@gmail.com"}, {"date": "2005-11-11T08:54:19.000000Z", "commit": "390", "message": "I have worked out a multiple inheritance scheme that will work really well for the parameter databases (it is essentially the same sort of idea as the mixin classes used in Woodman in python, e.g. make a big parent class that combines the functionality of lots of child classes). I have thought about whether or not multiple inheritance is the best solution for this, and after considering the alternatives (bridge and nested classes) I have decided this is the best choice. The reason is that I will get implicit casting, so I can pass a parent that derives from CLJDB and BondDB to any function that takes CLJDB as an argument, or to any function that accepts a BondDB as an argument.\n\nTo test my ideas, and to show that the compilers will create the code that I want (and it behaves as I expect) I have written a small test (techdocs multipleinheritance.cpp) which gives a skeleton of the type of class hierarchy that I will build. I have compiled and tested that this works using g++ 3.4.4 and icc 8.1", "author": "chryswoods@gmail.com"}, {"date": "2005-11-10T22:05:19.000000Z", "commit": "389", "message": "Now that the MM database is working (well ish!) I am rearranging the class hierarchy to make it more general, and so that I can plug different parts together to form different types of parameter database.\n\nMy goals are for the same framework to support parameter databases for the generic MM database, the more complex MMF forcefield (non-LJ FF forcefield) and also for the QM parameters.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-10T17:49:29.000000Z", "commit": "388", "message": "I have written an initial class to read in a ProtoMS parameter file. So far it can read in the CLJ parameters.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-10T15:45:59.000000Z", "commit": "387", "message": "Further working on the database - am reading up the charmm prm file now, though that is not working as well...", "author": "chryswoods@gmail.com"}, {"date": "2005-11-10T11:50:14.000000Z", "commit": "386", "message": "I have got the code to do the dumping and loading of the in-memory database working! In ran into major difficulties as the included QSQLITE driver in the source code was not working, and produced random rubbish when more than 1 column was returned! I have thus switched to using the QSQLITE plugin in the QT lib directory. I must remember this, as I wanted everything compiled in (its easier), but that's life...\n\nThe test script now loads parameters from a psf file and then dumps the resulting database to a raw sql file!", "author": "chryswoods@gmail.com"}, {"date": "2005-11-09T21:40:41.000000Z", "commit": "385", "message": "I have begun working on a PSF reader, and am using it to read in a 25000 atom PSF file as a strong test of the speed of the MMDB system. An in-memory database is definitely much quicker, though I have a current problem with the CLJ_PARAMETER table which can become very slow if it gains thousands of missing parameters...", "author": "chryswoods@gmail.com"}, {"date": "2005-11-09T17:26:09.000000Z", "commit": "384", "message": "Making good progress with the MMDB database, and definitely a good idea to use SQL to store the parameters - it is very flexible. I have come up with a very powerful set of related tables that I think will allow very flexible input and retrieval of parameters. I will try it out by writing parsers for the ProtoMS2 and charmm .psf/.param parameter files.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-09T10:18:55.000000Z", "commit": "383", "message": "Finished refactoring the CLJParameter, and I am now beginning work on the MMDB. I have decided that it will need to be a real SQL database, as I need a lot of flexibility for searching, and I shouldn't reinvent the wheel when there are already good database libraries. I plan to use the QtSql driver for the sqlite3 database. If I can, I want it to be an in-memory database so that there is little disk access, though it would also be nice to be able to dump the database to disk as well (for persistent parameter databases).", "author": "chryswoods@gmail.com"}, {"date": "2005-11-08T16:14:26.000000Z", "commit": "382", "message": "Refactored CLJParameter so that it is derived from a new LJParameter class. I am beginning work on the MMDB database class for MM parameters. The code is very broken, as I am still roughing out ideas. My aim is to write something that can cope with native OPLS, AMBER, GAFF and CHARMM parameter files, e.g. it must cope with different ways of indexing and finding parameters and combinations, and it must have a 'wild' type for at least dihedral finding (though wilds for LJ, bond and angle may be nice as well...)", "author": "chryswoods@gmail.com"}, {"date": "2005-11-08T13:29:32.000000Z", "commit": "381", "message": "I have added a SireUnits library that contains lots of physical constants and conversion factors from normal units to internal units used within sire. I have also added a unit test for these. I have verified that the factors that I am using are identical to those used in ProtoMS, and have also added a couple of PDF files that give the values of physical constants and definitions of SI units.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-07T15:37:03.000000Z", "commit": "380", "message": "Added a Delta class that simplifies the holding and calculation of deltas (new - old). Added a unit test class to test them. Code seems to work, as do the tests.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-07T11:40:58.000000Z", "commit": "379", "message": "I have written fuller tests for the average class, including tests of the averages of energies and EnergyPacks. These revealed bugs and namespace issues which have now been resolved (essentially, energymaths.hpp must be included before average.hpp so that the right sqrt and abs functions are found). I have also added a pdf of a web page that talks about floating point numbers and roundoff error.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-05T23:41:44.000000Z", "commit": "378", "message": "Added sqrt and abs functions for all of the energy types, and added tests for these in testenergy.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-04T21:56:54.000000Z", "commit": "377", "message": "Working on a set of Average classes, and have added the unit tests for them.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-04T17:22:26.000000Z", "commit": "376", "message": "Beginning work on the Average classes - these will provide very general averages which will work on any numeric type (including Energy and EnergyPack types).", "author": "chryswoods@gmail.com"}, {"date": "2005-11-04T16:31:48.000000Z", "commit": "375", "message": "I have got a wide range of Energy and EnergyPack tests now and they all seem to work well. I have updated the api of these classes a little to make them slightly easier to use.\n\nI have also added a nice article from the internet on how to use template metaprogramming to speed up vector calculations.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-04T15:11:17.000000Z", "commit": "374", "message": "Added multiplication and divide to energies, and fixed the template power functions (pow_2(EnergyPack) works!)\n\nAlso removed the unnecessary arithmetic operators between Energy types and double, as double can be implicitly converted to EnergyBase (or EnergyT).\n\nUpdated the energy unit tests to include some EnergyT and EnergyPack tests. The arithmetic appears to work!", "author": "chryswoods@gmail.com"}, {"date": "2005-11-04T12:09:25.000000Z", "commit": "373", "message": "I have refactored the energy classes to be derived from EnergyBase, and have renamed Energy as a general purpose Energy class that can have any energy component of EnergyPack added or subtracted from it, and is the result of any mixed arithmetic of energy components.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-04T11:06:28.000000Z", "commit": "372", "message": "I have got the template based energy components and EnergyPack working! I am really pleased with these two classes, as they will help me solve many of the problems of keeping track of energy components. I will be able to build Average and History template classes that work with these types, and will thus automatically keep track of all of the parts!", "author": "chryswoods@gmail.com"}, {"date": "2005-11-03T22:54:43.000000Z", "commit": "371", "message": "I am now working on an advanced version of Energy that will use template parameters to specify different components. This should be really powerful, but at the moment I am struggling to remove the multiple overloads of unused dummy parameters!", "author": "chryswoods@gmail.com"}, {"date": "2005-11-03T15:05:28.000000Z", "commit": "370", "message": "Moved the 'energy' class into SireFF so that it is with the EnergyHistory class.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-03T14:57:49.000000Z", "commit": "369", "message": "Still working on integrating SireFF - the code is currently broken", "author": "chryswoods@gmail.com"}, {"date": "2005-11-03T13:41:46.000000Z", "commit": "368", "message": "Beginning work on reintegrating the forcefield library (SireFF)", "author": "chryswoods@gmail.com"}, {"date": "2005-11-03T12:08:15.000000Z", "commit": "367", "message": "I have updated all of the test python scripts in the test directory and they all now work with the new version of Sire! The only small problem is the script to convert a single tip3p into a tip4p does not add the M atom in the plane with the other atoms. I can't work out why, and will sort this out at some future point (when I really make the editmol/editres flexible and useful!)", "author": "chryswoods@gmail.com"}, {"date": "2005-11-02T16:09:59.000000Z", "commit": "366", "message": "I have cleaned up the interface for the EditRes and for molecule building (see the updated make-tip4p.py, which has now a much cleaner and easier to understand syntax).\n\nI upgraded my boost libraries, and the changes have necessitated that I make NetPtr be publically derived from boost::shared_ptr<NetPtrProxy>. I didn't really want to do this, though cannot think of any problems with doing so (other than that a dedicated programmer could get access to the NetPtrProxy when they shouldn't).\n\nI have renamed a lot of the EditRes functions, and have made more use of overloading to choose the function, e.g. changeBond(Bond) has been changed to change(Bond).\n\nThe code compiles, runs well, siretest and sirempitest both work.", "author": "chryswoods@gmail.com"}, {"date": "2005-11-02T11:55:19.000000Z", "commit": "365", "message": "I am working on cleaning up the EditRes class and have replaced the enum based system for passing weight functions with an object based system. This should be easier to wrap, and easier to dekludge when I better learn how to do it!", "author": "chryswoods@gmail.com"}, {"date": "2005-10-30T20:32:13.000000Z", "commit": "364", "message": "Fixed small bug in not properly stopping the actionthread (non-virtual 'stop' function). Also have created shallow value based classes that hold copies of the atoms in the bond, and should not thus segfault if the molecule that owns the bond is deleted. They also allow for bonds and bondindexes to be created by the user in python. I have got the auto-conversion routines working so that a Bond or BondIndex is converted to VBond and VBondIndex (which are wrapped as Bond and BondIndex in python).", "author": "chryswoods@gmail.com"}, {"date": "2005-10-30T17:12:43.000000Z", "commit": "363", "message": "Removing some debugging lines - code now definitely works.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-30T16:50:33.000000Z", "commit": "362", "message": "Fixed bugs in introduction of NetObjects::Thread - siretest, sirempitest and sire now seem to all work, though the mpi tests don't (sirempitest with nproc >= 3)", "author": "chryswoods@gmail.com"}, {"date": "2005-10-30T00:32:07.000000Z", "commit": "361", "message": "I have now broken the code and the tests as I have replaced QThread with NetObjects::Thread. What am I thinking...\n\n(I am sure that it will be worth it once it is working again)\n\nThe problem is that the code locks up too much. I think that it is because I haven't properly replaced the waiting and mutexes in the old versions of the code with the new versions that are absorbed into the NetObjects::Thread class. Also, sire segfaults at program shutdown. This is probably due to the threads still running, or not, or something else...", "author": "chryswoods@gmail.com"}, {"date": "2005-10-29T00:35:53.000000Z", "commit": "360", "message": "Working now on a Thread class that allows rapid starting and has a unique process/thread ID.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-26T16:41:36.000000Z", "commit": "359", "message": "The 'make-tip4p.py' script works again! I can now use sire again to make tip4p molecules from scratch! There were a few problems now that vector.normalise throws exceptions for zero vectors, but this is something that I will have to deal with in each case (I think that it is better that I deal with zero vectors each time I use vector.normalise, rather than trying a universal fix within vector.normalise)", "author": "chryswoods@gmail.com"}, {"date": "2005-10-26T15:41:32.000000Z", "commit": "358", "message": "Removed the CutGroupRegistry class as its functionality is now provided via NetObjects.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-24T18:56:06.000000Z", "commit": "357", "message": "Cleaning out some now unused files.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-24T18:55:10.000000Z", "commit": "356", "message": "Added back the python wrappers of the SireMol classes. I have also written a template function that can add standard QList and QSet functions to QList and QSet based classes, and have added a template function so that NetPtr and DerivedPtr can be added to a QSet or QHash. Also changed EditMolList to be a standard QList (I will write additional functions to add functionality that will be either accessed via clever wrapping, or via extra python code, e.g. __str__(editmol){ printObj(editmol)}", "author": "chryswoods@gmail.com"}, {"date": "2005-10-22T23:04:49.000000Z", "commit": "355", "message": "SireIO is now compiling and wrapped, though there is a memory access violation when I try to load a PDB file.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-22T22:19:04.000000Z", "commit": "354", "message": "Working on adding back the SireIO module...", "author": "chryswoods@gmail.com"}, {"date": "2005-10-22T22:16:41.000000Z", "commit": "353", "message": "Misnamed SireIO.pro!", "author": "chryswoods@gmail.com"}, {"date": "2005-10-22T22:15:43.000000Z", "commit": "352", "message": "I have got the EditMol wrapping working again. I have also checked that the use of NetPtr with python works (by creating the netptr in python, then putting it into an EditMolList, and then deleting the python created NetPtr and checking that the list still held a valid pointer).", "author": "chryswoods@gmail.com"}, {"date": "2005-10-21T12:17:22.000000Z", "commit": "351", "message": "I have got dynamic implicit conversion of NetPtr and DerivedPtr types working well (so I can easily do MoleculePtr = FlexMolPtr etc.), and I have also started on the python wrapping of the CutGroupPtr and MoleculePtr. It works :-) I have got working python wrapping of my own shared_ptr type class. I am pretty pleased with this. The only slight problem is that it requires returning a non-const raw pointer from the NetPtr/DerivedPtr without going through the NetPtrWriter or DerivedWriter classes. I think that I can work around this however by wrapping up the const object separately to the non-const object, e.g. have a CutGroup held by a CutGroupPtr (and only expose the const functions in the CutGroup wrapping), and then have a separate CutGroupWriter class that can be used to access the non-const functions.\n\nI am also going to have to write a template function that can expose a whole load of functions of the actual NetPtr or DerivedPtr (e.g. duplicate, reset, etc.)", "author": "chryswoods@gmail.com"}, {"date": "2005-10-20T23:07:31.000000Z", "commit": "350", "message": "Fixed compiler problems (forgot to include \"netobjects.h\" in cpp files) and have added a unit test for CutGroups (just to make moleculeptrs etc and convert between them and check that derived pointers work, and dumping and loading work).", "author": "chryswoods@gmail.com"}, {"date": "2005-10-20T17:30:30.000000Z", "commit": "349", "message": "Added a CutGroupFactory and changed the way to get a CutGroupPtr from a CutGroup. Now you can create CutGroups directly using the constructor, and then use the CutGroup::self() function to return a CutGroupPtr to that CutGroup.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-18T12:35:45.000000Z", "commit": "348", "message": "Written a set of DerivedPtr classes (DerivedPtr, DerivedWeakPtr and DerivedWriter) that are the NetPtr equivalents for derived classes. This means that I can now have NetPtr<CutGroup> with DerivedPtr<Molecule> and DerivedPtr<ChainRes>, and have functions that can cast between these three (if possible). The DerivedPtr variants all hold the corresponding NetPtr to the base class, (DerivedPtr<Molecule> holds a NetPtr<CutGroup>) so the relationships within the class hierarchy are preserved. Also, static_cast is used so that DerivedPtr<Molecule>.get() returns a pointer to a Molecule, not to a CutGroup (as NetPtr<CutGroup>.get() would do). If you want to use a DerivedPtr with functions that expect NetPtrs, then you use the 'toNetPtr()' function (or 'toNetPtrWriter' or 'toWeakPtr' functions). This way you can still build an interface to operate on the pointer, with the interface (correctly) operating on the base type.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-17T22:38:36.000000Z", "commit": "347", "message": "The code now compiles and runs. My next step is to sort out how to have a NetPtr to CutGroup that can be cast to a NetPtr to Molecule or FlexMol etc.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-17T18:50:27.000000Z", "commit": "346", "message": "Working on getting SireMol to compile. So far I am up to EditRes... My first order of business once I get SireMol compiled is to modify NetPtr so that I can cast from a NetPtr of a base type to a NetPtr of a derived type. I am thinking about using an explicit template type for a NetPtr, e.g. NeDerivedPtr<class Derived, class Base>?\n\nNo, that would be too complex...", "author": "chryswoods@gmail.com"}, {"date": "2005-10-17T12:31:24.000000Z", "commit": "345", "message": "Am now starting work on the SireMol module. I have not fully fixed the problems with NetObjects yet, but I need to move on. I will fix them as I start to use NetObjects in anger via NetPtrs to SireMol objects.\n\nThis commit is just after I have created SireMol.pro, and updated atom.h/.cpp to the new namespace. As such, this will not compile nor run!", "author": "chryswoods@gmail.com"}, {"date": "2005-10-17T12:01:40.000000Z", "commit": "344", "message": "Registered the new messages with NetObjects::messenger() and have updated Vector and Quaternion to use arrays rather than individual values.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-14T20:49:32.000000Z", "commit": "343", "message": "Code now compiles the things are beginning to run. siretest runs to completion, while sirempitest shows that the ThreadPipe and MPIPipe work(!), though an exception is thrown when the invoker is reconstructed on process 0 after being sent back from process 1. sire itself still throws an unknown exception in runtests...", "author": "chryswoods@gmail.com"}, {"date": "2005-10-14T17:45:46.000000Z", "commit": "342", "message": "The code compiles again, and siretest works. However, the main program and sirempitest both lock up when they try to duplicate or update an object.\nDeadlock problems that must be debugged...", "author": "chryswoods@gmail.com"}, {"date": "2005-10-14T16:12:30.000000Z", "commit": "341", "message": "The code is nearly back to the point where it can compile! Well, netregistrybase.cpp can compile...\n\nI have added in more message classes and now the system for keeping track of added, duplicated and deleted objects is beginning to crystallise out. The design is cleanish, though I need to rewrite parts of NetPtr and NetPtrWriter so that they use the updated way of duplicating and updating themselves...", "author": "chryswoods@gmail.com"}, {"date": "2005-10-14T13:09:03.000000Z", "commit": "340", "message": "Still working on sending objects between processes, and the code is still massively broken...\n\nI am cleaning it up though, and the addition of the NetObjectData class has allowed a lot of abstraction of the packaging and unpackaging of an object for transmission.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-14T00:10:28.000000Z", "commit": "339", "message": "I am finally getting a handle on this sending of objects between processes. The main change I am making is that I register a new process as having a copy of an object, not when it is sent, but when it is dumped by the master process. This simplifies so many things regarding requesting and sending NetObjects. Of course, I have now majorly broken the code...  so very broken... needs lots of tlc...", "author": "chryswoods@gmail.com"}, {"date": "2005-10-13T17:17:08.000000Z", "commit": "338", "message": "Changed ActionThread to use multiple WorkerThreads to process the messages. This should help prevent deadlocks. I am still stuck on the GetObjectMsg though...", "author": "chryswoods@gmail.com"}, {"date": "2005-10-13T13:27:27.000000Z", "commit": "337", "message": "I am working on the ability for one process to ask to be sent a copy of an object from another (it is problems with this that is causing the crash when the MPIPipe is deactivated). I am getting stuck however working out how to not block the actionthread of the process that is sending the object...", "author": "chryswoods@gmail.com"}, {"date": "2005-10-12T16:42:28.000000Z", "commit": "336", "message": "The MPI pipe is now working sufficiently well for me to be able to call the vector.length() function remotely! There is a crash however with vector.set() (I think). It is however quite clean and I am optimistic that I should be able to wrinkle out the bugs tonight.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-12T15:06:10.000000Z", "commit": "335", "message": "Giving a Result an exception now works! As does the new ErrorResult class. Only siretest is currently running without problems.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-12T12:36:26.000000Z", "commit": "334", "message": "Added process ID and backtrace capability to the SireError::exceptions, and am writing an ErrorResult class to allow Interface-Pipe-Invoker function calls to return an exception if one is thrown. I know that I should be moving on from NetObjects, but I am trying to make this into a very strong foundation for the code...", "author": "chryswoods@gmail.com"}, {"date": "2005-10-12T09:35:46.000000Z", "commit": "333", "message": "Working on the MPIPipe function call. Code is broken!", "author": "chryswoods@gmail.com"}, {"date": "2005-10-11T17:14:54.000000Z", "commit": "332", "message": "I have set up both sides of the MPIPipe now, and am beginning to send communication over the pipe. The code crashes at the moment...", "author": "chryswoods@gmail.com"}, {"date": "2005-10-11T13:06:25.000000Z", "commit": "331", "message": "Moved the NetInterface wrapping of an object into a separate file so that it can be called and used by multiple unit tests. Have also create a class to be a factory for all of the Invoker<T> that are used in the unit tests.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-11T12:45:15.000000Z", "commit": "330", "message": "All three programs now work as expected (sire, siretest and sirempitest). I can now get down to the job of actually writing some MPI tests...", "author": "chryswoods@gmail.com"}, {"date": "2005-10-11T11:48:47.000000Z", "commit": "329", "message": "Got the parsing of command line arguments working. I got so stuck with a bug getting it to work that I have wasted so much time...", "author": "chryswoods@gmail.com"}, {"date": "2005-10-10T23:03:03.000000Z", "commit": "328", "message": "Changed the startup of the MainApp to make it a bit cleaner and easier to understand, and have also changed the parsing of command line arguments so that this is also cleaner.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-10T17:58:23.000000Z", "commit": "327", "message": "Working on the MPIPipe. I am also writing an MPI enabled version of siretest (sirempitest) so that I can run unit tests that use mpi communication (e.g. testing the new MPIPipe!)\n\nCode compiles and runs, though the new sirempitest is not working yet.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-10T11:46:51.000000Z", "commit": "326", "message": "Fixed blocking problems with ThreadPipe and it now works well. I have also switched ThreadPipe to now use a single, continously running thread which sleeps between function calls, and uses a QWaitCondition to be woken for each call. This should be faster than starting a new thread for every function call.\n\nI have begun work on the MPI thread. This should be relatively straightforward (famous last words)\n\nThis code compiles and the unit tests and test.py work in all tests! :-)", "author": "chryswoods@gmail.com"}, {"date": "2005-10-07T21:41:01.000000Z", "commit": "325", "message": "The code now compiles and the program and unit test runs. The ThreadPipe does now run a the function in a different thread! The only problem is that the unit test deadlocks a little. I need to sit down and think through why this is the case.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-07T18:00:06.000000Z", "commit": "324", "message": "I have written the ThreadPipe class and more of the unit test. However, the use of a pure virtual base class (InvokerBase) with NetPtr revealed a problem with how I initialised the NetRegistry/NetObject (DefaultFactory was always used, regardless of the fact that InvokerBase cannot be created!). I have now fixed this, though the code is in a bit of a mess now and the unit tests don't run anymore. But I need to have dinner (Erica is waiting...) so I will leave this here...", "author": "chryswoods@gmail.com"}, {"date": "2005-10-07T14:39:10.000000Z", "commit": "323", "message": "I am adding tests of the Interface class to the unit test for the invoker (so that I don't have to rewrite the local VecInvoker). Everything compiles and runs well at the moment (both unit tests, sire --local test/test.py and mpiexec -np 64 sire test/test.py) :-)", "author": "chryswoods@gmail.com"}, {"date": "2005-10-07T12:30:43.000000Z", "commit": "322", "message": "Working on the Interface and Pipe classes. The code will not currently compile as I have not finished!", "author": "chryswoods@gmail.com"}, {"date": "2005-10-06T16:11:47.000000Z", "commit": "321", "message": "Renamed invoker.h to invoker.hpp to maintain consistency.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-06T16:06:53.000000Z", "commit": "320", "message": "I have got the Invoker class working! The unit test (which uses a simple invoker on a Vector) works very well, and the syntax for use is reasonably clean. This is quite a success! :-)", "author": "chryswoods@gmail.com"}, {"date": "2005-10-06T12:09:34.000000Z", "commit": "319", "message": "I am working out how to call the invoker functions by name. I think that I will use boost::function as this seems to be conceptually straightforward and clean, and my test (templatefuncptr.cpp) seemed to work very well!\n\nI have also realised that I can simplify the wrapping by creating an ArgsBinary which is derived from ArgsBase, and can be pointed to by ArgsPtr. This will allow QByteArray arguments to be passed to the functions as an ArgsPtr, which can then be automatically converted back to the correct type.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-04T18:10:43.000000Z", "commit": "318", "message": "I have created a NetPtrBase class so that tempalte independent NetPtrPtrs may be used. I have also written the dynamic_cast conversion functions to convert between the two and have appended the unit tests with tests of this. It is quite a nice system now!", "author": "chryswoods@gmail.com"}, {"date": "2005-10-04T16:01:02.000000Z", "commit": "317", "message": "Written the NetObjects::Result<T> unit tests, which all seem to work! :-)\n\nWith both Args<..> and Result<T> I am now able to pass around arguments and results through threads and MPI so I should now be able to get down to the serious business of actually implementing the Interface-Pipe-Invoker system...", "author": "chryswoods@gmail.com"}, {"date": "2005-10-04T12:34:39.000000Z", "commit": "316", "message": "Written unit tests for Args<...>. They all work, and Args dynamic casting from ArgsPtr also works very well (with quite an informative exception if things fail).", "author": "chryswoods@gmail.com"}, {"date": "2005-10-04T11:54:00.000000Z", "commit": "315", "message": "I have finished a lot more pseudocode that shows how I will implement the NetInterface system. I have updated the Args and Result classes so that they can do dynamic casting from template independent ArgsPtr and ResultPtr classes. I think that I have wrinkled out most of the intricacies of the design and I just need to get implementing...\n\nMy next step is to write a load of unit tests for Result<> and Args<> so that I can ensure that they are behaving as I expect them to behave.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-04T00:07:51.000000Z", "commit": "314", "message": "Just writing some pseudocode to try and work out how I will actually implement my \"grand ideas\" :-)", "author": "chryswoods@gmail.com"}, {"date": "2005-10-03T20:27:27.000000Z", "commit": "313", "message": "Changed Result<T> so that it is an explicitly shared class, thus making it easier to pass around! I am now thinking about the interface.\n\nThe way that I see it, I think that I need to have three classes;\n\nInterface  --- Pipe --- Invoker\n\n** Interface **\n\nHierarchy is  UserCodedInterface <- Interface<T> <- InterfaceBase\n\nThis class provides the front-end interface to the NetObject, with the user calling functions on this interface.\n\nInterface may even have a 'interface.control()' function to separate out control functions, e.g. 'interface.control().activate(NetPID)' or 'interface.control().pointer().isMaster()'\n\n** Pipe **\n\nThere are two types of Pipe, an MPIPipe and a ThreadPipe;\n\n  MPIPipe. This communicates calls from Interface through to Invoker\n           via MPI calls. Has its own thread that receives the responses.\n\n  ThreadPipe. This has its own thread in which it runs the calls to Invoker.\n\nA Pipe can only process one call at a time, and will block if a second call comes in while it is busy. There are functions like 'wait' and 'isBusy' to wait for the pipe to be ready, or to see if the pipe is busy.\n\nA null pipe means to not use a pipe, but to instead have Interface directly call the Invoker in the current thread.\n\n** Invoker **\n\nHierarchy is UserCodedInvoker <- Invoker<T> <- InvokerBase\n\nThere is a NetPtr<InvokerBase> with a user-supplied InvokerFactory used to construct the Invokers needed in the program. The invoker can be sent to whichever process is required, and it holds a NetPtr to the object that it is working on. The Pipe passes the call for the function to the Invoker which then calls the required function, packages up the result into a Result<T> and sends the result back along the pipe. The Invoker can only run one function at a time, and can only interface with a single Pipe at a time.\n\nControl of the Invoker is via NetObjects messages, with simple NetObjects used to put an Invoker in place and connect it to an Interface, and then the Interface-Pipe-Invoker system used for remote object control.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-03T15:43:44.000000Z", "commit": "312", "message": "I have now written an 'Args' template class to hold and package/unpackage function arguments. This class will be used to hold up to ten arguments to a function (should be enough?) and can serialise and deserialise these arguments from a QByteArray. This class uses a boost::tuple to hold the arguments internally, and uses partial template specialisation to select which package and unpackage needs to be called. I have tried it out in runtests() and it seems to work quite well (even correctly giving a compile error if I try to access an invalid argument, e.g. argument 3 of Args<Vector,double>).", "author": "chryswoods@gmail.com"}, {"date": "2005-10-03T10:44:08.000000Z", "commit": "311", "message": "Am now starting work on the NetInterface system, which is used to allow efficient and easy remote control of NetObjects. I am starting with the 'result' class, which will hold the results of the function call.", "author": "chryswoods@gmail.com"}, {"date": "2005-10-02T23:48:38.000000Z", "commit": "310", "message": "Fixed problem with deadlock. It seems that MPI::Probe doesn't work to well with locally sent messages? I have switched over to using a polling MPI::Iprobe and everything now seems fine. Unit tests and runtest work well :-)", "author": "chryswoods@gmail.com"}, {"date": "2005-10-01T20:52:08.000000Z", "commit": "309", "message": "Written code to parse the responses to messages. Messages can now be sent, and then we can block until they are acknowledged (complete with returned information!). It seems to work, though it currently seems to hang when it is sending messages. I will need to track down the source of the deadlock...\n\nI have also written some functions to pack and unpack arguments to a QByteArray. I am using this a little to pack the data for the response, though will really use this in anger when I work on the direct communication interface-pipe-invoker system.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-30T14:03:44.000000Z", "commit": "308", "message": "Added a 'MsgResponse' class that can wait for responses to messages (even from multiple processes). I have also updated the mpi communication so that a double-message is sent, so that each sent message has a unique id number. Using a double-message is not ideal, but is a better solution than trying to encode the message id in the tag (since that is used to id the message types), nor to encode the msgid in the data of the message, as this would trigger a copy of the data of the message. (copying then modifying the message's QByteArray could be expensive for large messages - e.g. most of them!)\n\nIt all works, the debugging strings for mpi are now easier to follow and understand, and the unit tests also work.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-29T18:35:46.000000Z", "commit": "307", "message": "I have put all processing of message actions into an ActionThread. This seems to work well. I have also tried to make the shutdown of the application a little more resiliant, though I can still get it to hang. Part of the problem is that the master process can shut down the thread before the other processes have even received and processed the first sets of messages. I think that I need to set up something that causes everyone to stop until all have reached a common point. Need to do this so that one process doesn't race to the end before another has even started.\n\nOther than that, the unit tests all work and the main program test also runs well.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-29T15:53:42.000000Z", "commit": "306", "message": "As I said, I have now switched the code over to use references for initialising NetObjects. Quite a lot of changes for some syntactic sugar...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-29T12:39:00.000000Z", "commit": "305", "message": "Added MsgHandle so that I can change messages after they have been sent, and also so that I can do value registration of messages (e.g. registerType(NetExitMsg()) rather than registerType(new NetExitMsg()). I will try and change NetObjects over to do the same thing as it makes the registration syntax a bit easier, and only requires a few changes to the code.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-29T11:09:01.000000Z", "commit": "304", "message": "Written the code to change masters between processes. A few bugs near shutdown but otherwise it seems to work well.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-28T17:54:51.000000Z", "commit": "303", "message": "Have successfully sent a Vector between processes, unpacked it and got the right output. I am also beginning to think about the 'remote controller' (RemoteCtrl) class that will act as a base for the classes/interfaces needed to remotely control one object from another process.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-28T12:27:22.000000Z", "commit": "302", "message": "Working on decoding the sent object on the receiving processor... Currently the unit tests work, but the sire test/test.py crashes (the receiving process crashes)", "author": "chryswoods@gmail.com"}, {"date": "2005-09-27T17:59:48.000000Z", "commit": "301", "message": "Written the code to send an object to another process. I think that it is working now, though so far I haven't written the code to decode the message once it has arrived...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-27T15:35:39.000000Z", "commit": "300", "message": "300th commit! Dumping and loading of an object seems to work well now. The problem appeared to be that QBuffer didn't actually save anything! I reverted to directly using a QByteArray and that fixed things.\n\nI have also changed NetPIDList to NetPIDSet  (based on QSet) as this enables quicker tests for whether or not a pid is in the set, and for set operations on lists of pids.\n\nThe unit tests all work now (including the dump and restore tests) as does the main program with test/test.py in local and mpi (64 process) mode.\n\nAll in all, a good 300th commit!", "author": "chryswoods@gmail.com"}, {"date": "2005-09-27T13:40:34.000000Z", "commit": "299", "message": "Written code to handle dumping and restoring of complex class hierarchies. Solution is to have a NetFactory class that has a sensible default for most classes, and can be overridden by the user for complex class families.\n\nCode compiles, but the dumping of a vector results in an empty byte array...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-26T23:57:10.000000Z", "commit": "298", "message": "Fixed locking bug in NetRegistry/NetRegistryBase. It seems that I can't use a QReadLocker and then unlock it, as it doesn't work. Why this is, I don't know. Now that I have fixed the bug the unit tests all run ok and the test script also runs. Things also seem to work with multiprocessor, though on one run with 64 processors, there was a hang when the master waited to tell the cluster to shut down.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-26T18:24:21.000000Z", "commit": "297", "message": "Got the code compiling again, but it crashes or hangs when it runs...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-25T23:46:31.000000Z", "commit": "296", "message": "Working on implementing the code for duplicating a NetObject. Things are so broken now...\n\nI am currently updating NetPtrWriter to use a shared_ptr to a QMutex so that it blocks until it can start editing, and other threads can block until the editing is complete.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-25T15:10:41.000000Z", "commit": "295", "message": "Splitting the meta information about a netobject from the actual storage of a netobject. This simplifies a lot of the communication involved when a NetObject is deleted on a local process.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-25T13:37:33.000000Z", "commit": "294", "message": "Changing some of the documentation to move it into the implementation (cpp) files rather than in the header files. This cleans up the headers, and mimimises recompilations due to documentation changes.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-22T15:49:37.000000Z", "commit": "293", "message": "API documentation builds quite well with DoxyS. I have read the manual and have decided to follow their recommendations. I will move documentation out of the header files and into the cpp files (because then changing documentation would not trigger large rebuilds). I will also use the formats correctly so that I can document the parameters and the return values of the functions. As a wiki style is used, it should also teach me the wiki commands so that I can use the Sire wiki when I eventually get it set up... :-)", "author": "chryswoods@gmail.com"}, {"date": "2005-09-22T12:51:54.000000Z", "commit": "292", "message": "Ignoring Doxyfile...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-22T12:50:32.000000Z", "commit": "291", "message": "Changed the namespace of NetObjects from SireBase to NetObjects. This necessitated renaming the 'NetObjects' class to 'Manager' (and thus updating the code to read 'NetObjects::Manager::begin()' etc.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-22T12:07:35.000000Z", "commit": "290", "message": "Separation of NetObjects into its own library was very quick and painless. Code compiles, runs well and all unit tests are passed. The only thing I now need to do is rename the #ifndef header guards to read NETOBJECTS_... rather than SIREBASE_...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-22T12:02:55.000000Z", "commit": "289", "message": "Moved all NetObjects files into their own directory and library.\nMoved all NetObjects files into their own directory and library.\nMoved all NetObjects files into their own directory and library.\nMoved all NetObjects files into their own directory and library.\nMoved all NetObjects files into their own directory and library.\nMoved all NetObjects files into their own directory and library.\nMoved all NetObjects files into their own directory and library.\nMoved all NetObjects files into their own directory and library.\nMoved all NetObjects files into their own directory and library.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-22T11:54:45.000000Z", "commit": "288", "message": "Creating NetObjects directory.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-22T11:53:15.000000Z", "commit": "287", "message": "Found the doxyS autodocumentation tool, which produces some very nice looking documentation. I have added auto-naming of NetObjects classes (if the user is unwilling to provide a name) and I am about to split off NetObjects into its own library.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-21T19:22:25.000000Z", "commit": "286", "message": "Passing of messages via MessageMgr and Message is working! Sire works (tested with up to 64 processes), as do the unit tests. What a good place to stop for the night...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-21T16:19:00.000000Z", "commit": "285", "message": "typeid works! It doesn't give a nice human readable string, but it does provide a unique string for a class. I will use this for reverse lookups...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-21T15:58:10.000000Z", "commit": "284", "message": "Continuing work on adding in the Message and MessageMgr classes. Read up on typeid and I think that this may help solve a few problems (including how to get the name of a class for debugging templates!)", "author": "chryswoods@gmail.com"}, {"date": "2005-09-21T12:11:49.000000Z", "commit": "283", "message": "Made a lot of progress writing the pseudocode for the communication in NetRegistry<T>. I think that I have now come up with an idea of how to do all of the communication without running into too many edge case problems. The solution is to split the 'master' from the object, e.g. a process can be a master of an object even if it doesn't have its own copy. This now completely separates the duplication of objects from the delegation of power. In addition, I am restricting the power to duplicate to the master. Any non-master process will ask the master to do the duplication. This ensures that the object is in a fit state, that it is the most up to date copy, and that the pid list is always correct and consistent (only the master holds the pidlist). If the master has delegated authority then it still retains information about where the new master is so that it can forward an messages. It only deletes this information when it receives the 'new master announce' message from the new master (which other processes should also have received). After this, it will return any master messages to sender, who should then be able to either have the new master information, or should only have to wait for a short time for the new master information. Only after waiting for a short time should we then know that there is a problem.\n\nOnly ever need to broadcast when we don't know who the master is and we don't have a copy of the object. This should be rare, as NetObjects is a push orientated system, e.g. processes push their own objects onto other processes, rather than individual processes request objects.\n\nI do however still need to create a pool. This will hold objects once they have been sent to a new process (otherwise they would be deleted as soon as they arrive as they would have zero reference count). When we 'get' an object, we pull it out of the pool if we don't already have a 'user' NetPointer to it. Once it has been removed from the pool, it no longer exists in the pool, and deleting the user NetPtr will result in the reference count dropping to zero and the object being deleted. There will need to be a 'pool->clean()' function that is used to clear all objects from the pool, though this should only be called from the user thread.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-20T17:43:52.000000Z", "commit": "282", "message": "Added an MPIMessage class to abstract the sending and multiSending of MPI messages. Thinking about how I will achieve the actual passing of NetObjects while at the same time keeping the pidlists up to date. My thoughts so far keep coming back to the requirement that only the master process foran object is able to duplicate it. This would be a shame and quite inconvienient...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-20T10:23:59.000000Z", "commit": "281", "message": "Message passing between processes seems to work now! All processes start, synchronise and then shutdown properly. Now that this test is working, I need to formalise the message passing by providing a hierarchy of 'Message' classes...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-19T13:18:34.000000Z", "commit": "280", "message": "Sorted out the bootstrapping of the NetObjects system. Everything starts well now. I have cleaned up the code a little and improved the informativeness of the debugging messages. I have also split the netobjects.hpp header into a declaration and an implementation so that it can straddle either side of the netobjects class declaration.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-16T18:08:20.000000Z", "commit": "279", "message": "Working on waiting until the NetObjects subsystem has started properly before returning from NetObjects::begin()", "author": "chryswoods@gmail.com"}, {"date": "2005-09-16T17:37:03.000000Z", "commit": "278", "message": "Code is now working using a ProcessInfo object to get information about the running process. This makes the NetObjects object class a bit cleaner as it does not need to probe for or store this stuff.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-16T12:25:32.000000Z", "commit": "277", "message": "Written a template Range<T> class to hold the range of NetObjectID numbers that are reserved for allocation by each process. Also written the unit test suite for Range<T>. I wrote so many bugs in Range<T> and I have to admit that writing the unit test did catch all of them and sped up the creation of the working class. :-)\n\nI think that I should use unit testing by default now...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-16T00:14:13.000000Z", "commit": "276", "message": "Still working on the Net part of NetObjects. I have got the central NetObjects master object working, and the framework for the non-specialised handles linking with the template-specialised registries (via an easy to use 'register' function)\n\nNetObjects::registerType( new NetObject<Vector>(\"Vector\") );\nNetObjects::registerType( new NetObject<QImage>(\"QImage\") );\n\nThat's all you need to do to register new types to enable them to be shared via NetObjects!", "author": "chryswoods@gmail.com"}, {"date": "2005-09-15T17:52:07.000000Z", "commit": "275", "message": "Now I am working on the 'net' part of NetObjects. I have got a very clear idea about the framework and how it will all work, I just need to implement it all. I am about a quarter of the way through doing that now, though the code is not yet finished and is broken. Come back for a later version to see if I can get it working...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-14T11:40:51.000000Z", "commit": "274", "message": "Updated the unit test to include tests for NetWeakPtr...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-14T11:30:01.000000Z", "commit": "273", "message": "The NetPtrWriter is now working correctly, and by adding a NetPtrWriter(const NetPtrWriter&) constructor I was able to fix the problems of returning a NetPtrWriter by value (so now NetPtr.writer() works). I have updated the unit test to include some NetPtrWriter tests. I have also tested to ensure that I can call Vector.set() using a NetPtrWriter, but get a compile error if I call it from NetPtr.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-13T18:01:59.000000Z", "commit": "272", "message": "It looks like the NetPtrWriter and NetObjects are now working! (well apart from the actual 'Net' parts that is :-)\n\nUnit tests and python test/test.py script seem to be able to run without problems.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-13T16:22:33.000000Z", "commit": "271", "message": "Now trying to get the whole lot to compile - debugging template compile errors is just a bit messy...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-13T15:33:06.000000Z", "commit": "270", "message": "Renamed NetMetaInfo to NetPtrInfo to better reflect its role...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-13T15:31:45.000000Z", "commit": "269", "message": "Renamed NetPtrStatus to NetPtrProxy in all of the source files.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-13T15:04:10.000000Z", "commit": "268", "message": "Renamed NetPtrStatus to NetPtrProxy...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-13T12:21:23.000000Z", "commit": "267", "message": "Further work on NetObjects. I have added a unit test module for NetObjects (it was working until I broke the code!) and I am now working on the registry so that it stores 'NetMetaInfo' objects that say whether or not someone is editing the object, or which processors it resides on. The code is broken as I am moving some things around, e.g. I would like the 'is_master' variable to move to the metainfo, and I don't think that there is a need for the dataversion variable anymore. Indeed, this would mean that NetPtrStatus is really not NetPtrStatus, but is instead really NetPtrProxy...\n\nI think that I will have to rename it...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-12T23:36:30.000000Z", "commit": "266", "message": "The NetObjects all seem to compile now, and the runtests complete without error. The next job is to sort out the NetPtrWriter. Once that is done, I can then get to work on the actual message passing and NetRegistry based object registration...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-12T18:33:31.000000Z", "commit": "265", "message": "Working on the NetObjects framework. This will take some time, and as of yet does not compile. I do however now have a clear idea of how this will work, and have some ideas of how to speed up the message passing (e.g. allocate id numbers in ranges so that we don't need to do a network lookup every time we create a new object).", "author": "chryswoods@gmail.com"}, {"date": "2005-09-12T14:24:21.000000Z", "commit": "264", "message": "Separated out the NetPointer into many files, as it is really a large unit in the program and implementing this in a single header file would be very messy...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-09T17:47:34.000000Z", "commit": "263", "message": "Working on the netpointer class - decided that I need to redirect via the NetPointerStatus (will be the thing that actually holds the pointer to the object)", "author": "chryswoods@gmail.com"}, {"date": "2005-09-09T14:38:07.000000Z", "commit": "262", "message": "Both sire and siretest seem to be working now", "author": "chryswoods@gmail.com"}, {"date": "2005-09-09T14:34:11.000000Z", "commit": "261", "message": "Updating files...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-09T14:31:51.000000Z", "commit": "260", "message": "Moved SireUnitTest to a top level module...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-09T14:31:21.000000Z", "commit": "259", "message": "Separating out the unit tests and also included the boost execution monitor to homogenise the failure reporting...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-08T23:01:18.000000Z", "commit": "258", "message": "Integrating the tests, except that I don't want to be linking the unit tests in as I am currently doing... I will need to separate the unit tests to another directory.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-08T22:49:05.000000Z", "commit": "257", "message": "It looks like 'siretest' is working and the (admittedly small number!) of unit tests are working correctly.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-08T22:39:52.000000Z", "commit": "256", "message": "Renaming some files...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-08T22:38:07.000000Z", "commit": "255", "message": "Moving all python wrapping into the libraries as this allows it to be linked with in the test application", "author": "chryswoods@gmail.com"}, {"date": "2005-09-08T22:36:49.000000Z", "commit": "254", "message": "Working integrating the test system into the rest of the program...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-08T22:15:57.000000Z", "commit": "253", "message": "Working on adding in the SireTest module - primarily so that I can test the new code as I am writing it, and to ensure that existing code is still working...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-08T18:53:32.000000Z", "commit": "252", "message": "Added the missing wrappers to the SireBase module, and wrapped up SireError. C++ to python exception translation is now working correctly again!", "author": "chryswoods@gmail.com"}, {"date": "2005-09-08T17:19:39.000000Z", "commit": "251", "message": "Written a script that checks that the pro files have the correct include file.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-08T16:38:00.000000Z", "commit": "250", "message": "Got the python wrapping working again. Now have fully wrapped Sire, SirePy and SireStream modules! (and they appear to work!)", "author": "chryswoods@gmail.com"}, {"date": "2005-09-08T14:56:39.000000Z", "commit": "249", "message": "Creating directories for the missing Sire modules...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-08T14:54:33.000000Z", "commit": "248", "message": "Renaming the individual python modules...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-08T14:52:26.000000Z", "commit": "247", "message": "Renamed the ProtoMS3 python module to Sire...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-08T13:33:02.000000Z", "commit": "246", "message": "The python thread is now working pretty well - I have used signals to indicate when the thread enters its event loop. Doing this has prevented a random locking problem, where sometimes it would lock after starting the python thread, and sometimes it wouldn't.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-08T12:53:46.000000Z", "commit": "245", "message": "Fixed crash when trying to run python. It was caused by my confused implementation of thread-safety in the PythonParser class. I have fixed this by making the PythonParser and PythonThread *not* thread-safe, but instead have made the PythonScript class very thread-safe, and have set this as the interface through which other threads try to run or debug the python.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-08T00:35:40.000000Z", "commit": "244", "message": "Written the MainApp class so that it is arranged in a more logical manner! Code now runs, though crashes when it tries to parse any python - a problem to be solved on another day...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-07T19:03:42.000000Z", "commit": "243", "message": "Moved the MPI stuff into the MainApp so that it can decide whether or not to use MPI based on the command line variables", "author": "chryswoods@gmail.com"}, {"date": "2005-09-07T18:51:43.000000Z", "commit": "242", "message": "Got the command line options (mostly) working, and can now parse python scripts again. Code is quite buggy though...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-07T13:33:15.000000Z", "commit": "241", "message": "Got delayed initialisation working, and starting of the python thread within the Qt event loop. Have also started using getopt to parse the command line options.", "author": "chryswoods@gmail.com"}, {"date": "2005-09-07T11:11:02.000000Z", "commit": "240", "message": "Working on merging in the moved SireStream and SirePy modules...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-07T10:21:56.000000Z", "commit": "239", "message": "Cleaning up after a messy commit...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-07T10:21:12.000000Z", "commit": "238", "message": "Moving the stream files to SireStream", "author": "chryswoods@gmail.com"}, {"date": "2005-09-07T10:15:13.000000Z", "commit": "237", "message": "Moving the print functions to 'SireStream' so that everything does not have to depend on SireBase!", "author": "chryswoods@gmail.com"}, {"date": "2005-09-06T22:52:55.000000Z", "commit": "236", "message": "Got the build system to work compiling the whole system, complete with library dependencies and it works with distcc and ccache!", "author": "chryswoods@gmail.com"}, {"date": "2005-09-06T16:33:29.000000Z", "commit": "235", "message": "The 'SireBase' and 'SireError' libraries now compile. No idea if they work though! :-)", "author": "chryswoods@gmail.com"}, {"date": "2005-09-06T15:45:04.000000Z", "commit": "234", "message": "Beginning to slowly get the new build system working with the new layout...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-06T11:55:01.000000Z", "commit": "233", "message": "Re-added all of the files using the new file layout", "author": "chryswoods@gmail.com"}, {"date": "2005-09-06T11:52:39.000000Z", "commit": "232", "message": "Removing everything as I am completely rearranging the code", "author": "chryswoods@gmail.com"}, {"date": "2005-09-06T10:48:47.000000Z", "commit": "231", "message": "This has all led to a major reorganisation - this is necessary as their are circular dependencies between the libraries, and their is little logic to the way things are currently split...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-05T17:00:54.000000Z", "commit": "230", "message": "Removing old bin and lib directories as I will make the build system install the code in a specified place...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-05T17:00:01.000000Z", "commit": "229", "message": "More directory rearrangement...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-05T16:58:28.000000Z", "commit": "228", "message": "Bit of rearrangement as I update the build system (the old kludge is really annoying me!)", "author": "chryswoods@gmail.com"}, {"date": "2005-09-05T13:38:06.000000Z", "commit": "227", "message": "Beginning work on the NetPointer class that provides the foundation of all of the inter-process communication...", "author": "chryswoods@gmail.com"}, {"date": "2005-09-05T12:07:28.000000Z", "commit": "226", "message": "Back to work after summer hiatus (moving house from Southampton to South Wales, moving uni, completing work programming projects, summer hols etc!)\n\nNow that I have a new desktop I can really get some work done on the parallel code. First however I have switched over to using mpich, and have got the compile working with distcc so that I can compile on the desktop while I work on the laptop.\n\nWhile I have been away I have had a few ideas about how to do the networking/mpi. Essentially I will create a NetPointer class that handles the registration and network transparent pointing to objects. This will follow a single-data/multiple-copy model whereby each process has its own local copy of the object being pointed to, with only a single, master process having write access, with the rest having read access. This should work as it fits in with the idea of the program, i.e. that only a single controller changes things at a time. This pointer should thus prove useful in allowing me to expose objects to the python layer without worrying about a script changing an object while it is being simulated!\n\nThe NetPointer will also include a lot of the functionality of the CutGroupID/CutGroupRegistry, so may be able to replace that. I will be working on this in a separate area for the moment, and will probably integrate it by rewriting chunks of the code. I do seem to keep going so far, then going back and rewriting... I will need to stop this if I am to get a working code by Christmas...", "author": "chryswoods@gmail.com"}, {"date": "2005-05-30T18:58:26.000000Z", "commit": "225", "message": "Beginning work on the use of mpi to allow parallel programming. Code does not as yet compile as I am still learning...", "author": "chryswoods@gmail.com"}, {"date": "2005-05-25T22:59:56.000000Z", "commit": "224", "message": "Beginning work on the threading code.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-24T10:01:39.000000Z", "commit": "223", "message": "Exposing forcefield and simsystem functions to the python interface. Beginning to test the addition of groups/forcefields to a simsystem. Code compiles and works, though is probably very buggy!", "author": "chryswoods@gmail.com"}, {"date": "2005-05-23T22:27:19.000000Z", "commit": "222", "message": "Added protoms3 powerpoint presentation that I will be giving to Mike this Friday.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-23T22:07:21.000000Z", "commit": "221", "message": "Moved 'increment' into the ProtoMS3 namespace. Small compile problem caused by unit_test_protoms3 needing to link to libprotoms3 before it has been compiled! Kludged by adding 'make -k' to make.py so that I can run it twice after a distclean...", "author": "chryswoods@gmail.com"}, {"date": "2005-05-23T22:01:38.000000Z", "commit": "220", "message": "Fixed the code that has been implemented so far. The code now compiles and runs. I have not tested the new SimSystem/FFGroup/FFBase addition and removal functions.\n\nI have also added an 'increment' function that increments a number on a string.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-17T09:49:10.000000Z", "commit": "219", "message": "Still working on interface for adding forcefields/molecules to systems... Code will not compile at the moment.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-16T22:54:02.000000Z", "commit": "218", "message": "Working on interface to add forcefields/groups to a system.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-16T10:59:21.000000Z", "commit": "217", "message": "Added an 'Energy' unit test...", "author": "chryswoods@gmail.com"}, {"date": "2005-05-16T10:47:28.000000Z", "commit": "216", "message": "Got working Vector and Lambda unit tests. Fixed a bug that was found in Lambda.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-16T09:50:31.000000Z", "commit": "215", "message": "Beginning to build the test framework.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-16T09:38:27.000000Z", "commit": "214", "message": "Rearranged directories, now have protoms3 library with very basic client (just main.cpp). Unit test program compiles!", "author": "chryswoods@gmail.com"}, {"date": "2005-05-16T09:31:14.000000Z", "commit": "213", "message": "Adding the 'client' directory, which is used to compile the main application.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-16T09:29:16.000000Z", "commit": "212", "message": "Adding unit_tests program directory. Will need however to change the main program so that protoms3 is a library...", "author": "chryswoods@gmail.com"}, {"date": "2005-05-16T09:17:20.000000Z", "commit": "211", "message": "Added the 'unit_tests' directory...", "author": "chryswoods@gmail.com"}, {"date": "2005-05-16T09:15:35.000000Z", "commit": "210", "message": "Moved compiled-in system tests to 'system_tests' directory. Unit tests will be placed into the 'unit_tests' directory.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-16T09:10:42.000000Z", "commit": "209", "message": "Rearranging test directory so that I have space to build a unit test program.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-15T19:58:20.000000Z", "commit": "208", "message": "The code now compiles and runs, though I haven't as yet tested any of the additions...", "author": "chryswoods@gmail.com"}, {"date": "2005-05-15T14:10:21.000000Z", "commit": "207", "message": "Still coding... Adding an EnergyHistory object that stores Energies for each configuration. This provides a better way of doing 'old' and 'new' energies, as this will cope better with the use of multiple step MC moves, and with HMC/MD (it does not force an old/new mentality into the forcefield classes). Also this means that all of the 'running total' code is contained within a single class.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-14T23:51:37.000000Z", "commit": "206", "message": "Added a class to represent the lambda coordinate, and have added a class that represents the collection of all FFBases that make up a complete forcefield. Neither of these have been compiled or tested yet though...", "author": "chryswoods@gmail.com"}, {"date": "2005-05-14T21:42:00.000000Z", "commit": "205", "message": "Added functionality to FFBase so that we can control whether the energies are cached as old/new/dontcare, and how much of the energy to calculate (reference only, reference and forward, or all). Also added the FFPtr as a shared pointer to FFBase.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-13T10:13:02.000000Z", "commit": "204", "message": "Testing time of energy evaluation, 1000 molecule-group evaluations comes in at 1800ms, so 1.8ms per evaluation. With 17ms for 1000 non-group interactions, things are going well. This figure compares well with ProtoMS2.1, which takes about 2.5-3 seconds to do 1000 moves with the same system and cutoffs.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-13T10:07:42.000000Z", "commit": "203", "message": "Yes, the new split version is marginally quicker for these tests, (679ms, 668ms and 71ms, compared to 705ms, 687ms, 75ms)\n\nOk, so not a huge improvement, but not to shabby!", "author": "chryswoods@gmail.com"}, {"date": "2005-05-13T09:59:31.000000Z", "commit": "202", "message": "Fixed bug in accumalation of energies. Am testing a new way of splitting the sets in two. Using the method of this revision, I get a time of 71ms.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-12T10:41:59.000000Z", "commit": "201", "message": "Added an energy class to store reference and perturbed energies together. The calculated energies are very wrong at the moment?", "author": "chryswoods@gmail.com"}, {"date": "2005-05-11T22:49:59.000000Z", "commit": "200", "message": "I have tested the speed of ProtoMS3 vs. ProtoMS 2.1 on the water box for a variety of different cutoff distances, and for all but the smallest cutoff (5A) ProtoMS3 was about 30% faster. The details are in ideas/current-speed.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-11T22:14:47.000000Z", "commit": "199", "message": "Finished work on the Array class, and have switched AtomArray over to use it. I have also switched MM to use it, and have very much sped up the energy calculation. There are still a few things that I want to do to the MM forcefield before I am totally happy with it...", "author": "chryswoods@gmail.com"}, {"date": "2005-05-11T10:34:16.000000Z", "commit": "198", "message": "Working on a template 'Array' class that will form the basis of both AtomArray and CutGroup/MoleculeArray. I have chosen to make my own class as I then have a much tighter control of how the memory is being allocated (important as these classes are used in the double loop, and I want to ensure that no heap-memory allocation is occuring in the double loop!)\n\nI haven't compiled or tested this code yet, so it is probably broken.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-10T23:15:14.000000Z", "commit": "197", "message": "Implementing method of getting close CutGroups. Will only be efficient if I can get classes that do no keep reallocating memory!!!\n\nI have tried QVector, but it keeps reallocating! I think that I may have to write my own template class...", "author": "chryswoods@gmail.com"}, {"date": "2005-05-10T22:38:19.000000Z", "commit": "196", "message": "Fixed the bug in the calculated energies - now I get much better agreement. However, the speed is still quite poor;\n\nProtoMS3  : -14467.1 kcal mol-1, took 906 ms\nProtoMS2.1: -14465.2 kcal mol-1, took 939 ms\n\nThe comparison is even worse for small cutoffs (5.0 A, ProtoMS3 is twice as slow as 2.1).\n\nThe difference in energy is down to the slightly different ways of handling cutoffs and feather distances.\n\nProtoMS3 uses the closest distance between the atoms of two groups as the cutoff and feather distances.\n\nProtoMS2.1 uses the distance between the center of solvent molecules as the distance. The different definitions of the distance means that ProtoMS3 includes more waters than 2.1, and uses larger feather factors for a given water molecule. The energies are thus slightly larger, and the calculation is slightly more expensive. However, it is also more correct.\n\nWhen I do free energies, there will also be a difference as 3 uses a different nb calculation for the reference and perturbed states, thus the cutoff values can be different for the two states (this is the correct way of doing it!). 2.1 uses the same nb calculation for the reference and perturbed states, and thus the cutoff values of the reference state is used. This is quicker, but is not totally correct.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-10T10:04:26.000000Z", "commit": "195", "message": "I have added the cutoff and feather to the code, but the energies are wrong and the code is now slow compared to ProtoMS2.1\n\nThe slowness is a real and major problem. While the code is much faster with a large cutoff (as nearly all pairs of cutgroups must have their energy evaluated) the code is a lot slower for a small cutoff, as the cost to loop over all pairs of cutgroups is very high (about 300ms). This fixed cost is actually higher than than the complete time to calculate the energy using ProtoMS2.1. I will need to investigate this and find ways of speeding it up, as this could be a killer problem!", "author": "chryswoods@gmail.com"}, {"date": "2005-05-09T22:38:31.000000Z", "commit": "194", "message": "Adding framework for saving CutGroup-CutGroup energies... This does slow the energy calculation down a bit though, and I am concerned as to the code complexity problems of caching this information...", "author": "chryswoods@gmail.com"}, {"date": "2005-05-09T22:07:14.000000Z", "commit": "193", "message": "Reorganising the code a little to make it more readable and easily editable...", "author": "chryswoods@gmail.com"}, {"date": "2005-05-09T21:49:10.000000Z", "commit": "192", "message": "Reworked the MM energy routines, and have made them a bit faster! They still get the energy correct, and now take 2904ms to calculate the energy (using the real sqrt).", "author": "chryswoods@gmail.com"}, {"date": "2005-05-09T11:03:35.000000Z", "commit": "191", "message": "Working on the new forcefield system... Code is broken!", "author": "chryswoods@gmail.com"}, {"date": "2005-05-09T10:12:44.000000Z", "commit": "190", "message": "Fixed bug where code complained if the same memory used for an old, deleted CutGroup was reused for a new CutGroup. Compared timings and energies to ProtoMS 2.1, and the energies are the same, but ProtoMS 2.1 is also a bit slower, calculating the energy in 4934ms. The relative speeds of 2.1 and 3 are thus still the same, so I think that the slowdown is due to the compiler.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-09T09:45:59.000000Z", "commit": "189", "message": "The 'runtest' still gives the correct energy (surprisingly!), but the time to calculate is now 3374ms for normal sqrt, and 2310ms for fast sqrt. This drop is speed may just be down to the change in compiler? (from gcc3.3 to 3.4)", "author": "chryswoods@gmail.com"}, {"date": "2005-05-09T09:34:05.000000Z", "commit": "188", "message": "Fixed bug in QString -> python string conversion. The code now compiles and runs without crashing.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-08T22:57:47.000000Z", "commit": "187", "message": "I have had to change ProtoMSServer and PythonParser as I had misinterpreted the way signals and slots worked between threads. I have made the changes, though I am not happy with the current version. This is something I will need to come back and do properly at some point in the future...\n\nThe code now compiles and runs, though the current script segfaults half way through...\n\nAlso, I have had to hack a workaround to a weird bug in QTextStream  (in TxtStream - it is flagged up via a #warning statement)", "author": "chryswoods@gmail.com"}, {"date": "2005-05-07T23:46:09.000000Z", "commit": "186", "message": "The code now compiles(!)\n\nThere are still a lot of things to do, but because I have upgraded to gcc 3.4 without recompiling boost::python, my c++ libraries are out of sync and the code is not printing anything to the screen!\n\nI still need to sort out all of the classes, but I will do this after I test \"Molecule\".\n\nI have also added some text on an idea that ForceField::MM stores all of the CutGroup-CutGroup pair energies. This would speed up the energy evaluation, and I have worked out that for the sorts of systems we normally use, that this will not impose an overly burdensome memory requirement. Unlike ProtoMS2 I can supply a version of ForceField::MM optimised for large systems that does not have this memory requirement.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-07T17:10:53.000000Z", "commit": "185", "message": "Finished renaming CutMolecule to Molecule. Am still updating to the new hierarchy. I am happy that this is the best thing to do, though I have so messed up the code at the moment, and I am in the process of fixing everything. This will probably take quite a while. The code is very broken!\n\nThe main problem I have is that I need to work out whether I am working with molecules or cutgroups, and to make sure that the code is very specific about what it is using. I still need to write fast functions to change a MoleculeSet into a CutGroupSet, and back again (it is not straightforward as turning a MoleculeSet into a CutGroupSet involves replacing all of the ChainMols with the ChainRes children...)", "author": "chryswoods@gmail.com"}, {"date": "2005-05-07T15:33:00.000000Z", "commit": "184", "message": "Beginning to rename 'CutMolecule' to 'Molecule' and made CutGroupSet just a plain Set<CutGroupID,CutGroupPtr>", "author": "chryswoods@gmail.com"}, {"date": "2005-05-06T14:04:36.000000Z", "commit": "183", "message": "Just a few more ideas, and changed make.py so that it works with my upgraded qt4 beta2", "author": "chryswoods@gmail.com"}, {"date": "2005-05-05T11:06:08.000000Z", "commit": "182", "message": "Making progress with the conversion of the CutGroups to the new hierarchy. The code is still however in a very broken, won't compile state!", "author": "chryswoods@gmail.com"}, {"date": "2005-05-05T00:11:27.000000Z", "commit": "181", "message": "Added a FlexGroup class and am reorganising the CutGroup classes around the new hierarchy. This code is still very broken.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-04T11:25:24.000000Z", "commit": "180", "message": "Realised that I need to modify the CutGroup hierarchy. My ideas have been added, and I need to add a CutMolecule, CutResidue and FlexGroup class... The code won't now compile...", "author": "chryswoods@gmail.com"}, {"date": "2005-05-03T23:54:24.000000Z", "commit": "179", "message": "Beginning to think about how a move class would work.\n\nThis lead me to realise that I haven't sorted out the SimSystem properly, which in turn made me realise that I don't know how to represent ChainMol/ChainRes properly (e.g. preventing adding both ChainMol and ChainRes to the same CutGroupSet!). I have thus been cleaning up parts of the code in preparation for sorting out these problems.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-02T18:42:50.000000Z", "commit": "178", "message": "Written a lot of the code for the checkpoint class. Have not yet tested it though, so it is likely broken!\n\nHave also added operator+ to a Set so that sets can be added together.", "author": "chryswoods@gmail.com"}, {"date": "2005-05-02T16:21:31.000000Z", "commit": "177", "message": "Added datastream >> and << functions to a few classes in preparation for the checkpointing functionality that I will use to save and restore the system between moves.", "author": "chryswoods@gmail.com"}, {"date": "2005-04-29T11:08:54.000000Z", "commit": "176", "message": "Only a few small cosemetic changes. I am currently thinking about a checkpoint system that would allow the system saved before a move so that it can be restored if the move failed. I will need a more complex system than exists in ProtoMS2 as I expect to support much more complicated types of moves, e.g. multiple-time-step MC and hybrid MC.", "author": "chryswoods@gmail.com"}, {"date": "2005-04-28T11:07:49.000000Z", "commit": "175", "message": "Actually removing the ptrhandle class...", "author": "chryswoods@gmail.com"}, {"date": "2005-04-28T11:06:51.000000Z", "commit": "174", "message": "Now back to working on the SimSystem, and adding functions to add EditMols to SimSystems (with their conversions to CutGroups). I have removed the PtrHandle class as it was only doing the same thing as a weak_ptr.", "author": "chryswoods@gmail.com"}, {"date": "2005-04-28T00:25:05.000000Z", "commit": "173", "message": "Written code to align one molecule onto another, though have not yet tested it. Have added a Matrix4 class (4x4 matrix) that is at the moment only being used for the alignment code.", "author": "chryswoods@gmail.com"}, {"date": "2005-04-27T22:54:32.000000Z", "commit": "172", "message": "Finally got the principal axes code working! Have also now added code to calculate the center of mass an inertia tensor for a set of atoms. This also works. I have also improved the efficiency of the vector/matrix routines by allowing operator+= etc. for vector, and inlining matrix/vector multiplication.", "author": "chryswoods@gmail.com"}, {"date": "2005-04-27T12:06:45.000000Z", "commit": "171", "message": "Its working! I was just mixing up my rows and columns!", "author": "chryswoods@gmail.com"}, {"date": "2005-04-27T11:55:10.000000Z", "commit": "170", "message": "I am having so many problems with getting the axis set calculated correctly... It still doesn't work, and its my understanding of the maths that is to fault!", "author": "chryswoods@gmail.com"}, {"date": "2005-04-26T12:11:47.000000Z", "commit": "169", "message": "Working on adding templates to whole EditMols - this code is yet to be tested though has been wrapped up.", "author": "chryswoods@gmail.com"}, {"date": "2005-04-25T11:12:38.000000Z", "commit": "168", "message": "Fixed problem with calculating principal axes (I had misinterpreted what was meant by the metrix tensor).\n\nThere is still a small problem with highly symmetrical molecules that have degenerate principal axes (e.g. tip4p)", "author": "chryswoods@gmail.com"}, {"date": "2005-04-25T00:46:15.000000Z", "commit": "167", "message": "Fixed bugs so that I can now create a correct tip4p molecule from scratch!", "author": "chryswoods@gmail.com"}, {"date": "2005-04-24T01:56:49.000000Z", "commit": "166", "message": "Fixed the code sufficiently so that I can convert a tip3p into a tip4p without any problem. Have fully wrapped up the EditRes change/set internal geometry functions, including using different weighting functions. However, there are still problems as I am unable to build a tip4p molecule from scratch...", "author": "chryswoods@gmail.com"}, {"date": "2005-04-23T18:59:19.000000Z", "commit": "165", "message": "Begun work on a script to convert a tip3p into a tip4p. This seems to work, except that I need to specify how to move the atoms (at the moment I move the M03 atom, and the rest of the molecule moves out of the way!)", "author": "chryswoods@gmail.com"}, {"date": "2005-04-23T18:43:15.000000Z", "commit": "164", "message": "Written the code to convert a tip4p box into an spc box - and it works! My template scheme is pretty good!", "author": "chryswoods@gmail.com"}, {"date": "2005-04-23T17:39:26.000000Z", "commit": "163", "message": "Realised that Bonds made via temporary python atoms would cause the program to crash, so have prevented bonds from being made directly, and now require that they are constructed via EditMols.\n\nAdded functionality to set internal geometry - have got a script that can now successfully convert a tip4p water into an SPC water!", "author": "chryswoods@gmail.com"}, {"date": "2005-04-22T00:55:21.000000Z", "commit": "162", "message": "Written code to move angles and dihedrals. However I have run into a weird bug in the angle and dihedral code that is really annoying me. The references in the (supposedly const) atmangle and dihedral keep changing, eventually causing a crash...", "author": "chryswoods@gmail.com"}, {"date": "2005-04-21T23:36:06.000000Z", "commit": "161", "message": "Added a Dihedral and DihedralIndex class, and have wrapped them up in python and tested them!", "author": "chryswoods@gmail.com"}, {"date": "2005-04-21T10:56:33.000000Z", "commit": "160", "message": "Added an AtmAngle class to represent angles between atoms. Have wrapped it up in python and tested it (it was originally quite buggy!)", "author": "chryswoods@gmail.com"}, {"date": "2005-04-21T00:05:10.000000Z", "commit": "159", "message": "Have got the 'changeBond' for EditRes working, and it does what it says on the tin!", "author": "chryswoods@gmail.com"}, {"date": "2005-04-20T23:25:23.000000Z", "commit": "158", "message": "Finished updating IndexList to IndexSet - it all appears to work again!", "author": "chryswoods@gmail.com"}, {"date": "2005-04-20T23:06:33.000000Z", "commit": "157", "message": "Renaming IndexList to IndexSet...", "author": "chryswoods@gmail.com"}, {"date": "2005-04-20T23:06:11.000000Z", "commit": "156", "message": "Changing an IndexList into an IndexSet. This solves my problems about the anchor atoms (as now store an IndexSet of anchors, with easy test for intersection!)", "author": "chryswoods@gmail.com"}, {"date": "2005-04-20T11:13:17.000000Z", "commit": "155", "message": "Removed an unnecessary anchor test. I am not happy with the way that I test for anchors though - it will be too slow for large molecules...", "author": "chryswoods@gmail.com"}, {"date": "2005-04-20T11:10:35.000000Z", "commit": "154", "message": "Writing a 'moveinternal' class that contains all of the functions to move an AtomSet or AtomArray...", "author": "chryswoods@gmail.com"}, {"date": "2005-04-19T10:49:07.000000Z", "commit": "153", "message": "Renamed 'splitmolecule.h' to 'splitmolecule.hpp' to represent that it provides template functions.", "author": "chryswoods@gmail.com"}, {"date": "2005-04-19T10:47:03.000000Z", "commit": "152", "message": "Finished changing the splitMolecule functions over to returning the indexes of atoms in the two sets. This solves my problem of const Atom refs, and Atom copies! I have also added the IndexList class and have wrapped that up (in wrap_splitmolecule.cpp).", "author": "chryswoods@gmail.com"}, {"date": "2005-04-19T00:01:35.000000Z", "commit": "151", "message": "Realised that I can solve my immutable AtomArray/AtomSet problems by having the splitMolecule functions return indexes into the Array/Set. I am in the process of updating the code to do this, and am about to create a proper 'IndexList' class...", "author": "chryswoods@gmail.com"}, {"date": "2005-04-18T00:56:53.000000Z", "commit": "150", "message": "Have finished writing functions to split a molecule into two. The functions for bond, angle and dihedral all seem to work on the calix system! I have also updated BondSet to return an AtomArray of bonded atoms, and have modified the element class so that it tries harder to guess the element type from the atom name.", "author": "chryswoods@gmail.com"}, {"date": "2005-04-17T18:17:06.000000Z", "commit": "149", "message": "Begun writing code to split a molecule in two based on bonding. Testing reveals that it doesn't work as there are some data problems with BondSet (that I am in the process of trying to solve!)", "author": "chryswoods@gmail.com"}, {"date": "2005-04-17T00:51:38.000000Z", "commit": "148", "message": "Written code to get bond information from the 'conect' line in PDB files. Also added 'contains' functions to EditMol so that we can see if an atom is already present in an EditMol.", "author": "chryswoods@gmail.com"}, {"date": "2005-04-16T23:56:34.000000Z", "commit": "147", "message": "The auto-add bond code seems to work perfectly!", "author": "chryswoods@gmail.com"}, {"date": "2005-04-16T23:52:23.000000Z", "commit": "146", "message": "Written code to automatically add the bonds between atoms based on their bond-order radii.", "author": "chryswoods@gmail.com"}, {"date": "2005-04-14T11:53:28.000000Z", "commit": "145", "message": "Updated BondSet to have an AtomIndex so that it should be able to rapidly locate the bonds that involve an atom.", "author": "chryswoods@gmail.com"}, {"date": "2005-04-13T00:51:29.000000Z", "commit": "144", "message": "Fixed bugs in the building of atoms, and deleting items from a Set. Opened the can of worms by allowing non-const references from a Set, and changing coordinates of an Atom...", "author": "chryswoods@gmail.com"}, {"date": "2005-04-12T11:07:31.000000Z", "commit": "143", "message": "Written the code to add atoms to an EditRes based on another EditRes acting as a template! There seems to be a small bug though with the second atom of the residue being retained, while the second atom of the template is forgotton!", "author": "chryswoods@gmail.com"}, {"date": "2005-04-11T23:51:36.000000Z", "commit": "142", "message": "Written code to calculate the principal axes of a set of atoms, and it works! I have successfully calculate the principal axes of a lone TIP3P water.", "author": "chryswoods@gmail.com"}, {"date": "2005-04-11T23:03:12.000000Z", "commit": "141", "message": "Included the GNU Scientific Library (GSL) to calculate the principal axes of symmetric matricies. I have checked the results using GNU octave (using;\n\noctave> [v,d] = eig(hilb(3));\noctave> v\n\ngiving results\n\nv =\n  -0.12766   0.54745   0.82704\n   0.71375  -0.52829   0.45986\n  -0.68867  -0.64901   0.32330\n\n(with the matrix being)\n\n  1.00000  0.50000  0.33333\n  0.50000  0.33333  0.25000\n  0.33333  0.25000  0.20000", "author": "chryswoods@gmail.com"}, {"date": "2005-04-10T23:52:59.000000Z", "commit": "140", "message": "Wrapped up the matrix class, fixed a bug in the matrix class. Written an 'inverse' function for the matrix class. Created an AxisSet class that represents an coordinate frame, and provides functions that allow conversion between coordinate frames. Wrapped up this AxisSet class, and have tested it and the matrix class in python. It all seems to work properly!", "author": "chryswoods@gmail.com"}, {"date": "2005-04-10T00:37:34.000000Z", "commit": "139", "message": "Adding an 'M' atom to a whole box of TIP3Ps seems to work!", "author": "chryswoods@gmail.com"}, {"date": "2005-04-10T00:02:15.000000Z", "commit": "138", "message": "Code even works when I try to add hydrogens!", "author": "chryswoods@gmail.com"}, {"date": "2005-04-09T23:49:40.000000Z", "commit": "137", "message": "Got EditRes::applyTemplate working! (at least adding the 'M' atom from TIP4P to a TIP3P!)", "author": "chryswoods@gmail.com"}, {"date": "2005-04-09T23:15:23.000000Z", "commit": "136", "message": "Code compiles and works now. Have updated the wrapping of vector and added the wrapping of Angle.  Am currently testing the new vector functionality - it appears that the calculation of length, angle and dihedral all work, and the generation of a new vector based on length, angle, dihedral also seems to work correctly!", "author": "chryswoods@gmail.com"}, {"date": "2005-04-09T19:25:35.000000Z", "commit": "135", "message": "Forgot to include atomset.cpp in the last commit!", "author": "chryswoods@gmail.com"}, {"date": "2005-04-09T19:25:15.000000Z", "commit": "134", "message": "Working on adding and deleting atoms from an EditRes based on a template. It is going well, and I have added most of the code. I am now trying to compile the code (it doesn't at the moment!). In doing this I had to add lots of additional functionality, and have also cleaned up the logic of the Vector functions...", "author": "chryswoods@gmail.com"}, {"date": "2005-04-08T23:58:56.000000Z", "commit": "133", "message": "Updated wrapping of CutGroupSet, added the rest of the Set functions. Wrapped to convert from Set base class to CutGroupSet derived class.", "author": "chryswoods@gmail.com"}, {"date": "2005-04-07T23:53:00.000000Z", "commit": "132", "message": "Got wrapping of bond functions of EditMol working! Python script seems to do what I expect it to do!", "author": "chryswoods@gmail.com"}, {"date": "2005-04-07T23:32:17.000000Z", "commit": "131", "message": "Got the wrapping of BondSet working, fixed a couple of bugs in Set, and have got a small script that tests the bonds. Now just need to wrap up the EditMol bond functions.", "author": "chryswoods@gmail.com"}, {"date": "2005-04-07T19:09:49.000000Z", "commit": "130", "message": "Written the code to add and remove bonds from EditMol/Res classes. Have also wrapped up these functions and am testing them a little. I still need to wrap up the EditMol functions, and the BondSet functions to test these properly.", "author": "chryswoods@gmail.com"}, {"date": "2005-04-05T00:04:18.000000Z", "commit": "129", "message": "Working on restoring the bond functionality to EditMol. Switched resresbnds in EditMol to hold references to bondsets, not smart pointers. Updating 'set' to return the filled indicies...", "author": "chryswoods@gmail.com"}, {"date": "2005-04-04T22:35:24.000000Z", "commit": "128", "message": "Got the Set 'sort' functions working!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-31T23:43:28.000000Z", "commit": "127", "message": "Changed EditMol to use a Set to store its residues! Now have nice indexing in python, so can write code like;\n\nfor res in editmol:\n\tfor atm in res:\n\t\tatm.doStuff()\n\nIt works!!!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-31T20:27:32.000000Z", "commit": "126", "message": "Got working exception translation - its pretty cool!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-31T20:09:25.000000Z", "commit": "125", "message": "Got working wrapping of EditMol/EditRes (with implicit shared_ptr!). Starting work on exception translation...", "author": "chryswoods@gmail.com"}, {"date": "2005-03-31T19:15:24.000000Z", "commit": "124", "message": "A little more renaming, and have got 'indexer' function for a Set working. Now CutGroupPtr is just a plain shared_ptr<CutGroup> (oh how things have changed!)", "author": "chryswoods@gmail.com"}, {"date": "2005-03-31T18:39:47.000000Z", "commit": "123", "message": "Finished renaming the List classes to Set. Also moved some typedefs into their own header files...\n\nCode compiles and some of it even runs...", "author": "chryswoods@gmail.com"}, {"date": "2005-03-31T18:07:02.000000Z", "commit": "122", "message": "Just renamed the 'list' classes to 'set' classes to better represent their base types...", "author": "chryswoods@gmail.com"}, {"date": "2005-03-31T11:12:02.000000Z", "commit": "121", "message": "Fixed problem, now have implicit conversion to CutGroupPtrs working in both directions. Now need to update the whole of the rest of the code to use this 'new way' of doing things.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-31T10:29:01.000000Z", "commit": "120", "message": "Finished changing CutGroupList into CutGroupSet, and have partially wrapped it. Code compiles and now works, but while I have automatic conversion of python CutGroup to CutGroupPtr, I do not have conversion of CutGroupPtr to python CutGroup... Oh the annoyance!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-30T23:01:43.000000Z", "commit": "119", "message": "Switching over to using boost::shared_ptr (implicit) and CutGroupSet as opposed to CutGroupList... Broken code!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-30T19:48:34.000000Z", "commit": "118", "message": "Got the wrapping of Atom working again!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-30T10:35:02.000000Z", "commit": "117", "message": "The code now compiles, but it doesn't yet work. I have commented out a lot of the wrapping, and am about to experiment with the implicit shared_ptr wrapping of boost::python. Hopefully if this works I will be able to remove all of my explicit ClassPtr code (since it is such a hassle to maintain!)", "author": "chryswoods@gmail.com"}, {"date": "2005-03-29T23:41:46.000000Z", "commit": "116", "message": "Incredibally the code is even more broken! I have created a SetPtr template class that provides a shared_ptr version of Set that may be wrapped up in python. I have also extended the exceptions, and added the file location macro.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-29T19:17:02.000000Z", "commit": "115", "message": "Really broken code...\n\nI am making a 'BondIndex' class for 'Bond' as I have done for 'Atom' ('AtomIndex'). The aim of this is that I can then replace BondList with a Set<BondIndex,Bond>, and thus have better code reuse and also be able to do quick Set<BondIndex,Bond>.contains(BondIndex(atomindex1,atomindex2)). I am only about a quarter of the way through this change though, and (perhaps rather stupidly!) I have still not finished the changes required when I swapped Atom to be derived from AtomIndex...", "author": "chryswoods@gmail.com"}, {"date": "2005-03-27T23:41:54.000000Z", "commit": "114", "message": "Still working on the change-over to AtomIndex. Now multiply inherit Atom so that I get implicit casting (eases overloading of functions). Also worked some more on the exceptions and beginning to switch over to BOOST_ASSERT.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-27T19:58:06.000000Z", "commit": "113", "message": "Working on integrating the new Set class. Also beginning exception framework. Code still very broken!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-27T16:44:07.000000Z", "commit": "112", "message": "Lots of change to the Set and Atom classes. Will change over to using a Set class that holds objects that are uniquely indexed via an index class (so am modifying atom to return an AtomIndex class. Will also eventually change over the CutGroupList to be based on the Set class.\n\nVery broken code at the moment!!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-24T22:19:50.000000Z", "commit": "111", "message": "Updated code to use a template wrapper function for python indexing, that throws a C++ out_of_range exception when the index is out of range. This fixes a small bug in the 'for i in list' wrapping.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-24T10:38:39.000000Z", "commit": "110", "message": "Got indexing working on a few classes now, and moved 'str' function to python code (as it didn't work at all with the c++ code!).", "author": "chryswoods@gmail.com"}, {"date": "2005-03-23T22:31:09.000000Z", "commit": "109", "message": "Beginning work to standardise all of the python wrapped classes to have print (str) functions, and also wrap up all containers to have python subscripting operators.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-23T09:05:09.000000Z", "commit": "108", "message": "Learning how to turn my C++ classes into Python objects that look like containers (e.g. can do for i in list:, or use [] subscripting). Have updated BondList, AtomArray and EditMolList to appear as read-only Python containers.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-21T21:55:39.000000Z", "commit": "107", "message": "Providing the python wrapping of the Bond and BondList classes. Code seems to compile and run ok.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-21T20:22:59.000000Z", "commit": "106", "message": "Updated the wrapping of EditMol and EditRes. It all compiles and runs again.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-21T09:28:52.000000Z", "commit": "105", "message": "Working on the python wrapping of the bond functions of EditMol/Res. Code is broken as I haven't finished!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-20T22:48:54.000000Z", "commit": "104", "message": "Still working on the EditMol/Res bond classes. Added a specialised BondList class and BondListPtr to fix reference problems and to also clear up the code. It all compiles and works again (though probably still missing some functions...)", "author": "chryswoods@gmail.com"}, {"date": "2005-03-19T23:03:53.000000Z", "commit": "103", "message": "Still working on the bonding of EditMols... Added a Sparse Symmetrix Matrix (SSMatrix) template class to hold the inter-residue bonds. EditMol/Res code is broken at the moment and will not compile...", "author": "chryswoods@gmail.com"}, {"date": "2005-03-19T14:48:45.000000Z", "commit": "102", "message": "Added a template 'Set' class that does a similar thing to the Python Set class. Working on applying a residue template to an EditRes...", "author": "chryswoods@gmail.com"}, {"date": "2005-03-18T10:06:34.000000Z", "commit": "101", "message": "Added a TmplType class that allows complicated combinations of options to be specified in python.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-14T08:55:57.000000Z", "commit": "100", "message": "Working on adding bonds to EditMol. Also added a residue number to an Atom (as this makes a lot of algorithms more simple to implement). The EditMol/EditRes (being the only way to edit a molecule) should always ensure that an Atom has the right residue number.\n\nAlso decided that EditMol/EditRes will be the only way to edit molecules. Read in EditMols, convert them to CutGroups. CutGroups cannot be edited. Must be converted to EditMol, edited, then add a CutGroup function that allows it to be rebuilt from an EditMol.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-13T22:41:13.000000Z", "commit": "99", "message": "Now working on a 'Bond' class, and how I will be adding this to the FlexMol and EditMol/Res classes.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-13T15:30:54.000000Z", "commit": "98", "message": "Playing around with Doxygen. Doxygen gives really nice autodocs output now!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-13T15:11:40.000000Z", "commit": "97", "message": "Sped it up a little more, and also ran another comparison to ProtoMS2.\n\nProtoMS2 gives an energy of -14468.3743 in 4093 ms.\n\nProtoMS3 with sqrt gives an energy of -14468.3 in 2898 or 2967 ms\nProtoMS3 with fastInvSqrt gives an energy of -14468.1 in 2283 ms\n\nFast sqrt version runs in 56% of the time of ProtoMS2! The error using the sqrt approximation is 0.001% (about 1 part in 100,000!)\nEven normal sqrt version runs in 72% of the time of ProtoMS2. The use of fastInvSqrt speeds up ProtoMS3 by 25% compared to the use of the normal sqrt.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-13T14:52:55.000000Z", "commit": "96", "message": "Added back the explicitly inline functions and have brought the speed back up. It now takes 3049 ms using invDistance and 2450 ms using fastInvDistance.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-13T14:31:48.000000Z", "commit": "95", "message": "Got the water box energy test working again, but while the energy is correct, the time to calculate has gone up to 5.5s! I think that I will need to inline a load of functions again...", "author": "chryswoods@gmail.com"}, {"date": "2005-03-13T13:54:31.000000Z", "commit": "94", "message": "Correcting another filename typo!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-13T13:52:48.000000Z", "commit": "93", "message": "Working of forcefield module... Had to rename ForceField class to FFBase to prevent name clash", "author": "chryswoods@gmail.com"}, {"date": "2005-03-13T13:39:04.000000Z", "commit": "92", "message": "Now updating forcefield module to new namespace conventions", "author": "chryswoods@gmail.com"}, {"date": "2005-03-13T12:57:42.000000Z", "commit": "91", "message": "Finished porting across the volume classes to the new namespace. Still need to wrap it up though...", "author": "chryswoods@gmail.com"}, {"date": "2005-03-13T12:41:20.000000Z", "commit": "90", "message": "Fixing a typo in the filename!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-13T12:40:57.000000Z", "commit": "89", "message": "In the process of renaming and arranging the 'volume' module", "author": "chryswoods@gmail.com"}, {"date": "2005-03-13T12:38:00.000000Z", "commit": "88", "message": "Update IO classes to use new names and namespaces. Also got rid of the MoleculeIO class as this was redundant!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-13T11:27:57.000000Z", "commit": "87", "message": "Continuing to set up the files...", "author": "chryswoods@gmail.com"}, {"date": "2005-03-13T11:25:08.000000Z", "commit": "86", "message": "Renamed a lot of the 'io' classes.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-13T11:22:29.000000Z", "commit": "85", "message": "Moved 'protoms3-gui' to 'gui'", "author": "chryswoods@gmail.com"}, {"date": "2005-03-13T11:19:23.000000Z", "commit": "84", "message": "Working now on adding the volume and io modules. Code is now broken again!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-12T23:03:58.000000Z", "commit": "83", "message": "Fixed test.py script and had a go at generating the doxygen source docs...", "author": "chryswoods@gmail.com"}, {"date": "2005-03-12T22:53:57.000000Z", "commit": "82", "message": "Capitalising the names of the python modules to match the C++ namespaces...", "author": "chryswoods@gmail.com"}, {"date": "2005-03-12T22:52:22.000000Z", "commit": "81", "message": "Modified all of the code so that it uses C++ namespaces. This clean a lot of things up! Also removed all explicit inline functions. The compiler should be clever enough to be able to inline the functions that were explicitly inlined, and this makes the header files look a lot cleaner. I still need to test whether or not the functions have actually been implicitly inlined...", "author": "chryswoods@gmail.com"}, {"date": "2005-03-12T18:02:36.000000Z", "commit": "80", "message": "Finally got it working. All C++ code must now be linked to the ProtoMS3 executable, with each C++ library having associated with a Python module with a related name (e.g. core library has associated python C++ module _core, which is wrapped up with other python functions to form the 'core' python module.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-12T17:48:48.000000Z", "commit": "79", "message": "Nearly there - this is quite complex!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-12T17:28:43.000000Z", "commit": "78", "message": "Realised that the current method won't work (mixing python and C++ linking of libraries). I am thus going to have to redo it all as C++ libraries (so that the modules can use each other's code and form hierarchies).", "author": "chryswoods@gmail.com"}, {"date": "2005-03-12T17:07:51.000000Z", "commit": "77", "message": "Fixed bug in core module that was causing a crash. I forgot to add a function to initialise the core library upon loading! Am now beginning to add a test library that can provide all of the tools and code needed to test ProtoMS", "author": "chryswoods@gmail.com"}, {"date": "2005-03-11T22:52:52.000000Z", "commit": "76", "message": "Working on tidying up the Python modules, and ensuring that they load up correctly. Got nice printing of their loading to the debug stream.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-11T22:05:09.000000Z", "commit": "75", "message": "Got working linking of dynamic core library!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-11T22:00:21.000000Z", "commit": "74", "message": "Got a working dynamically linked python module, though have had to cheat a little with the build process!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-11T10:43:30.000000Z", "commit": "73", "message": "Now working on building the core module.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-11T08:50:00.000000Z", "commit": "72", "message": "Just removing moc files from the svn status listing", "author": "chryswoods@gmail.com"}, {"date": "2005-03-11T08:47:55.000000Z", "commit": "71", "message": "Got the protoms3 program working!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-11T08:41:23.000000Z", "commit": "70", "message": "Still working on rearranging the directories. I have started by trying to get the protoms3 program sorted out and running...", "author": "chryswoods@gmail.com"}, {"date": "2005-03-11T08:23:23.000000Z", "commit": "69", "message": "Lots more reorganisation! Have decided to have a full featured protoms3 program that acts as the server and has all of the boiler-plate functionality. This removes a lot of things from core that should not really be there. Note that the code is *so* broken!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-11T08:01:21.000000Z", "commit": "68", "message": "Begun the directory rearrangment. Splitting the code up into a series of modules. Everything will be very broken for a little bit...", "author": "chryswoods@gmail.com"}, {"date": "2005-03-11T07:50:33.000000Z", "commit": "67", "message": "Creating a tag that corresponds to a version of ProtoMS3 that has the correct calculation of the energy of a box of 1679 water molecules in a time that is 40% quicker than ProtoMS2", "author": "chryswoods@gmail.com"}, {"date": "2005-03-11T07:48:25.000000Z", "commit": "66", "message": "About to reorganise directory structure to make proper python packages and to better use C++ namespaces", "author": "chryswoods@gmail.com"}, {"date": "2005-03-10T09:16:05.000000Z", "commit": "65", "message": "Used temporary arrays in the combineParameters function and have reduced the time needed to calculate the energy to 2450ms!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-10T08:53:41.000000Z", "commit": "64", "message": "Got agreement between energies of 1679 water box in ProtoMS2 and ProtoMS3.\n\n0.INFO    Energy = -14468.1, time = 3079 ms\n0.INFO    Energy = -14468.1, time = 3053 ms\n\nThis compares to -14468.37 in ProtoMS2, which took on average 4.1 seconds to calculate!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-09T09:11:39.000000Z", "commit": "63", "message": "Continuing work on the generic MM forcefield. The code is currently broken.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-08T22:10:57.000000Z", "commit": "62", "message": "Since the energy evaluation seems to be efficient I am now working on the implementation of the generic molecular mechanics forcefield. I have written a CLJParameter class to hold CLJ parameters, and have begun work on an MMParameterDB class that can read and store MM parameters (from ProtoMS2 style input files).", "author": "chryswoods@gmail.com"}, {"date": "2005-03-08T09:36:17.000000Z", "commit": "61", "message": "Got rudimentary calculation of the energy (wrong energy, but right form of the calculation). This performs the calculation of the total interaction of 1679 TIP4P waters in 1800ms, compared to around 4s for ProtoMS2! Probably not a real result though...", "author": "chryswoods@gmail.com"}, {"date": "2005-03-07T09:00:13.000000Z", "commit": "60", "message": "Continuing to work on the ForceField class. The code is still broken.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-06T18:22:10.000000Z", "commit": "59", "message": "Beginning work on core ForceField class. The code is currently broken...", "author": "chryswoods@gmail.com"}, {"date": "2005-03-05T18:44:56.000000Z", "commit": "58", "message": "Wrapped up SimVolume, and am now performing some timings of the intermolecular distance evaluations. Get 1910 atom mol with 1900 atom mol distances in 270ms, fastinv distances in 190ns and distances squared in 95ns", "author": "chryswoods@gmail.com"}, {"date": "2005-03-05T14:15:52.000000Z", "commit": "57", "message": "Changed CutGroupRegistry and StreamManager/TxtStream to use smart_ptrs/weak_ptrs. Also updated PairMatrix so that it can be quickly redimensioned at any point during its use.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-04T08:53:56.000000Z", "commit": "56", "message": "Adding framework to set the SimVolume of a SimSystem, and have wrapped up a PairMatrix for Python.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-03T09:07:42.000000Z", "commit": "55", "message": "Written a PairMatrix class to allow rapid access to pre-calculated pair-pair distances (or other pair-pair information) and have begun the infinite cartesian volume class.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-02T09:19:10.000000Z", "commit": "54", "message": "Added an AABox (axis-aligned bounding box) class that can be used to improve the efficiency of the intermolecular distance calculation. Beginning to think about how to work with different boundary conditions (derived from SimVolume), and have also fixed a bug in PDB reader (QTextStream does not read the last line of the file properly) and moved ostream<< functions to class header/cpp files.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-01T20:25:19.000000Z", "commit": "53", "message": "Fixed a small bug in PtrHandle::isValid (it was returning false when it meant true!)", "author": "chryswoods@gmail.com"}, {"date": "2005-03-01T20:21:58.000000Z", "commit": "52", "message": "Got passing of handles to SimSystem working, and nice shared_ptr/weak_ptr co-operation as well in the PtrHandle class.", "author": "chryswoods@gmail.com"}, {"date": "2005-03-01T19:17:25.000000Z", "commit": "51", "message": "Small implementation and optimisation of CutGroupList. Adding 1679 CutGroups is now quite quick!", "author": "chryswoods@gmail.com"}, {"date": "2005-03-01T09:10:29.000000Z", "commit": "50", "message": "Created a template form of PtrHandle, and have wrapped up SimSystem for Python. Seems to work quite well!", "author": "chryswoods@gmail.com"}, {"date": "2005-02-28T21:32:25.000000Z", "commit": "49", "message": "Working on SimSystem. Trying to build a 'handle' class, that is automatically set to null when the held object is deleted. Probably should turn this into a template class. Also added the element names (for 109 elements!) to the ElementDB!", "author": "chryswoods@gmail.com"}, {"date": "2005-02-28T09:13:08.000000Z", "commit": "48", "message": "Begun work on the SimSystem class. Broken code!", "author": "chryswoods@gmail.com"}, {"date": "2005-02-27T22:51:55.000000Z", "commit": "47", "message": "Updated StreamManager so that it is much easier to add new streams (now QString based) and have wrapped up all of the stream functions for python.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-27T15:49:16.000000Z", "commit": "46", "message": "Wrapped up the AtomArray class, fixed a small bug in PDB reader and have got quite nice python control of reading files!", "author": "chryswoods@gmail.com"}, {"date": "2005-02-27T14:33:33.000000Z", "commit": "45", "message": "Created Element class to hold ElementData pointers, thus allowing Atom (and other) classes to pass Elements by value, rather than ElementData by pointer! Fixed a bug in the EditMol index by atom number, and have updated all code to use Element (and have wrapped Element as well).", "author": "chryswoods@gmail.com"}, {"date": "2005-02-26T23:09:56.000000Z", "commit": "44", "message": "Written thin shared_ptr wrappers of most classes now, and have written python interface based on these thin wrappers.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-25T23:30:02.000000Z", "commit": "43", "message": "Updated AtomList to use shared pointer to array, and updated CutGroup so that CutGroupPtr registers CutGroup to registry, preventing two different CutGroupPtrs trying to own the same CutGroup!", "author": "chryswoods@gmail.com"}, {"date": "2005-02-25T09:17:35.000000Z", "commit": "42", "message": "Switched CutGroup (and list and registry) over to using shared pointers to CutGroups. Still need to sort out AtomArrays though...", "author": "chryswoods@gmail.com"}, {"date": "2005-02-24T22:47:10.000000Z", "commit": "41", "message": "Added a PDB reader class (that works!) and am in the process of switching CutGroup/List over to using boost::shared_ptr. This should allow better passing of CutGroups between functions / python / C++, as it does reference counting. However, it is not thread safe?", "author": "chryswoods@gmail.com"}, {"date": "2005-02-24T21:36:06.000000Z", "commit": "40", "message": "Fixed bug in elementdata references in Atoms...", "author": "chryswoods@gmail.com"}, {"date": "2005-02-23T22:13:04.000000Z", "commit": "39", "message": "Written initial conversion of EditMol to CutGroup, though there appears to be a bug in copying the element data.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-22T22:33:13.000000Z", "commit": "38", "message": "Begun work on an EditMol/EditRes framework that enables the IO functions to work with EditMols, rather than directly with CutGroups.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-22T10:09:08.000000Z", "commit": "37", "message": "Have got python string to QString implicit conversion working, have wrapped up a quit function, debugged Vector::fromString and have wrapped up the printLine functions.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-21T08:16:16.000000Z", "commit": "36", "message": "Got 'str(self)' working for wrapped python classes! Can now finally print a QString!", "author": "chryswoods@gmail.com"}, {"date": "2005-02-20T21:40:24.000000Z", "commit": "35", "message": "Got a working element database that can get or guess the element data while reading a coordinate file.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-20T19:41:19.000000Z", "commit": "34", "message": "Changed AtomList to AtomArray. Code now works again!", "author": "chryswoods@gmail.com"}, {"date": "2005-02-20T19:29:47.000000Z", "commit": "33", "message": "Beginning rename of AtomList to AtomArray. Broken code!", "author": "chryswoods@gmail.com"}, {"date": "2005-02-20T19:29:06.000000Z", "commit": "32", "message": "Working on .mct file loading class. This code is currently broken.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-20T14:12:13.000000Z", "commit": "31", "message": "Now working on a new file format parser...", "author": "chryswoods@gmail.com"}, {"date": "2005-02-20T13:22:29.000000Z", "commit": "30", "message": "Got working streaming output!", "author": "chryswoods@gmail.com"}, {"date": "2005-02-19T23:38:11.000000Z", "commit": "29", "message": "Working on streamed printing and thinking about the format used to read in a molecule/group of molecules.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-18T20:58:25.000000Z", "commit": "28", "message": "Have changed AtomList (again!) so that now it is implemented as a simple array, and everything is based on direct references. Hopefully this should be something that the compiler can turn into quick code.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-16T21:55:44.000000Z", "commit": "27", "message": "Redesigned parts of the system so that AtomLists now hold pointers to atoms, and thus only one copy of the coordinates is required for a ChainMol/Res. Also created a template registry class and have tried to clean up the deep copying semantics.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-15T22:10:42.000000Z", "commit": "26", "message": "Have started the wrapping of a CutGroupList. Things are working quite well now! There are a few little bugs but I am definitely calling python code from with C++!", "author": "chryswoods@gmail.com"}, {"date": "2005-02-15T21:00:19.000000Z", "commit": "25", "message": "Got working virtual inheritance working! Can override a C++ function with a Python function!", "author": "chryswoods@gmail.com"}, {"date": "2005-02-14T21:59:33.000000Z", "commit": "24", "message": "Added a class to keep a registry of all CutGroups, have finished most of the CutGroupList and have started wrapping a CutGroup.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-13T21:35:57.000000Z", "commit": "23", "message": "Worked on the CutGroupList to add all of the features that should be necessary.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-13T16:04:49.000000Z", "commit": "22", "message": "Working on creating a list of CutGroups, and beginnings of IO class for CutGroups.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-13T14:48:23.000000Z", "commit": "21", "message": "Successfully wrapped some classes, and now begun work of the molecular data structures.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-11T09:38:38.000000Z", "commit": "20", "message": "Added the ability for the PythonError class to generate a traceback!", "author": "chryswoods@gmail.com"}, {"date": "2005-02-10T22:47:20.000000Z", "commit": "19", "message": "Got server parsing a complete python script from a file. Cleaned up PythonScript so that it works better, and also so that it can print out more informative debugging information. Cleaned up PythonError so that it takes a copy of the exception information and then returns the exception to python for printing.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-10T10:12:03.000000Z", "commit": "18", "message": "Looking at how to get C++ types from python types. Written a few convienience functions and playing around with python exceptions.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-09T19:11:11.000000Z", "commit": "17", "message": "Replace StringQueue with PythonScript and PythonError, classes that handle the representation of python scripts as sequences of blocks themselves (rather than having a basic StringQueue and leaving it up to the Parser to do everything!)", "author": "chryswoods@gmail.com"}, {"date": "2005-02-09T09:46:26.000000Z", "commit": "16", "message": "Have redesigned the server and parser to use the new Qt4 features (each now has its own event loop and works via signals/slots). This has allowed easy implementation of new features, such as the ability to pause the parser.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-08T22:24:19.000000Z", "commit": "15", "message": "Finished porting to Qt4. The server seems to work again. I will need to change some of the design to take advantage of the new Qt4 features (especially thread-safe signals!)", "author": "chryswoods@gmail.com"}, {"date": "2005-02-08T10:47:31.000000Z", "commit": "14", "message": "Added a file to source to allow the use of Qt4", "author": "chryswoods@gmail.com"}, {"date": "2005-02-08T10:13:18.000000Z", "commit": "13", "message": "Beginning the process of porting the code from Qt3 to Qt4. The code is currently very broken (but it is better to get this out of the way now rather than in 6 months time!)", "author": "chryswoods@gmail.com"}, {"date": "2005-02-07T21:02:16.000000Z", "commit": "12", "message": "Added geometry code originally written for Ataqua, and moved wrapping of classes into their .cpp files. Have successfully wrapped Vector and MD5Sum.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-07T19:36:31.000000Z", "commit": "11", "message": "Actually made protoms3-gui into a gui!", "author": "chryswoods@gmail.com"}, {"date": "2005-02-07T09:40:10.000000Z", "commit": "10", "message": "Created a basic client that can successfully connect to the server. Have also added a class to handle command line options.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-06T22:42:28.000000Z", "commit": "9", "message": "Have now got a working server that can execute Python!", "author": "chryswoods@gmail.com"}, {"date": "2005-02-06T21:19:23.000000Z", "commit": "8", "message": "Have a working network server!", "author": "chryswoods@gmail.com"}, {"date": "2005-02-06T20:27:58.000000Z", "commit": "7", "message": "Begun work on the network server used to separate the simulation program from the GUI.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-06T18:21:50.000000Z", "commit": "6", "message": "Added ideas files so that they are part of the repository", "author": "chryswoods@gmail.com"}, {"date": "2005-02-06T18:20:57.000000Z", "commit": "5", "message": "Probably now have a working Python interpretor in a thread.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-05T21:24:56.000000Z", "commit": "4", "message": "Beginning to add some code. Nothing works yet though.", "author": "chryswoods@gmail.com"}, {"date": "2005-02-05T20:06:12.000000Z", "commit": "3", "message": "Set the ignore property for this directory (svn propedit svn:ignore .)", "author": "chryswoods@gmail.com"}, {"date": "2005-02-05T19:56:02.000000Z", "commit": "2", "message": "Creating kdevelop project...", "author": "chryswoods@gmail.com"}, {"date": "2005-02-05T19:51:51.000000Z", "commit": "1", "message": "Initial creation of ProtoMS 3.0 repository", "author": "chryswoods@gmail.com"}], "googlecode": [{"date": "2015-04-01T22:42:49.139477Z", "commit": "2775", "message": "minimizer method for OpenMMFrEnergyST now working\n\n", "author": "julienmich@googlemail.com"}, {"date": "2015-04-01T15:33:06.730637Z", "commit": "2774", "message": "Fixed a method declaration syntax error in OpenMMFrEnergySt::minimzer(...)", "author": "julienmich@gmail.com"}, {"date": "2015-04-01T15:30:17.589726Z", "commit": "2773", "message": "Commit of the python wrappers for new interface to OpenMMFrENergyST ", "author": "julienmich@gmail.com"}, {"date": "2015-04-01T14:53:21.389245Z", "commit": "2772", "message": "Corelib commit of minimizer method for OpenMMFrEnergyST object (code is broken)\n", "author": "julienmich@googlemail.com"}, {"date": "2015-03-30T08:24:31.430696Z", "commit": "2771", "message": "Added support for distance restraints (python layer)\n", "author": "julienmich@googlemail.com"}, {"date": "2015-03-30T08:23:13.471556Z", "commit": "2770", "message": "Added support for distance restraints in OpenMM free energy calculations\n", "author": "julienmich@googlemail.com"}, {"date": "2015-02-25T22:14:13.781189Z", "commit": "2769", "message": "gradient is calculated per block and not as cumulative gradient - update interface", "author": "nividic73@googlemail.com"}, {"date": "2015-02-25T21:57:48.327929Z", "commit": "2768", "message": "The gradient is calculated per block and not as accumulative gradient", "author": "nividic73@googlemail.com"}, {"date": "2015-02-04T14:38:09.936918Z", "commit": "2767", "message": "equlibration bug", "author": "nividic73@googlemail.com"}, {"date": "2014-11-29T00:02:17.490751Z", "commit": "2766", "message": "test", "author": "nividic73@googlemail.com"}, {"date": "2014-11-28T23:15:57.988217Z", "commit": "2765", "message": "CPU flag bug correction", "author": "nividic73@googlemail.com"}, {"date": "2014-11-28T23:15:29.255701Z", "commit": "2764", "message": "test commit", "author": "nividic73@googlemail.com"}, {"date": "2014-11-28T23:14:37.296863Z", "commit": "2763", "message": "CPU flag bug correction", "author": "nividic73@googlemail.com"}, {"date": "2014-11-17T11:00:28.349673Z", "commit": "2762", "message": "Adding in the fixed version of QuantumToMM that correctly calculates and passes in the charge\nof charged ligands\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-10-30T13:41:42.599453Z", "commit": "2761", "message": "\npython code for stefano's branch\n\nsvn copy https://sire.googlecode.com/svn/python2/branches/users/julien https://sire.googlecode.com/svn/python2/branches/users/stefano\n\n", "author": "julienmich@googlemail.com"}, {"date": "2014-10-30T13:39:41.172892Z", "commit": "2760", "message": "\nCreating a branch of julien for stefano\n\nsvn copy https://sire.googlecode.com/svn/corelib/branches/users/julien https://sire.googlecode.com/svn/corelib/branches/users/stefano\n\n", "author": "julienmich@googlemail.com"}, {"date": "2014-10-29T16:48:28.482163Z", "commit": "2759", "message": "Bugfix DCD trajectory writer\n", "author": "julienmich@googlemail.com"}, {"date": "2014-10-28T16:23:21.707396Z", "commit": "2758", "message": "updated wrappers", "author": "julienmich@gmail.com"}, {"date": "2014-10-28T15:40:15.046829Z", "commit": "2757", "message": "I have started modifying the rigid body code so it is possible to pass manually atomic forces to be used to compute the forces and torques of \nacting on a rigid body made of atoms \n", "author": "julienmich@googlemail.com"}, {"date": "2014-10-27T11:39:19.400110Z", "commit": "2756", "message": "Fixed some bugs compiling the new dependencies on Linux\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-10-24T11:19:03.648935Z", "commit": "2755", "message": "Updated the python interpreter to 3.4.2 to fix a compile error on Yosemite. Also updated\nto ensure that Python finds and links to the bundled zlib, ssl and sqlite libraries.\nAlso added scripts that can automatically scan for and correct RPATH issues on OS X\nand to install the default Sire modules (nose, ipython) using easy_install and pip.\n\nUpdated package_sire so that it installs the default Sire modules (and tests their\ninstallation) and then updates RPATH before packaging. Also added a unit test\nfor Sire.Maths.Matrix to ensure that matrix multiplication is working\n\nAll tested on OS X (Yosemite). Need to test on lower OS X and Linux\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-10-24T11:15:15.272501Z", "commit": "2754", "message": "Added in the bundles for new dependencies opensll, zlib and sqlite. This should help\nmake it easier to build and package binaries of Sire that can be extended using\npip and easy_install. Currently only tested on OS X. Need to test on Linux\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-10-23T20:56:27.098011Z", "commit": "2753", "message": "bugfix rbworkspace in evotec branch", "author": "julienmich@googlemail.com"}, {"date": "2014-10-23T19:50:57.205244Z", "commit": "2752", "message": "Bugfixes to rb code. Some matrices elements are not initialise an order consistent with the behavior of SireMaths::Matrix.\n\nThe desired behavior has been restored by use of .transpose() before matrix multiplication, but the matrix objects are still 'incorrect'\n \n", "author": "julienmich@googlemail.com"}, {"date": "2014-10-21T08:23:29.382989Z", "commit": "2751", "message": "Updated python wrappers for evotec2014pre.1 branch", "author": "julienmich@googlemail.com"}, {"date": "2014-10-21T08:22:19.550605Z", "commit": "2750", "message": "Commit of changes to cljpotential.cpp on evotec2014pre.1 branch", "author": "julienmich@googlemail.com"}, {"date": "2014-10-21T08:18:39.372258Z", "commit": "2749", "message": "\nAdded support for reaction field in the force table calculation subroutines\n\n", "author": "julienmich@googlemail.com"}, {"date": "2014-10-14T12:32:31.723226Z", "commit": "2748", "message": "temporary fix to the dcd writing problem with ions", "author": "nividic73"}, {"date": "2014-09-25T15:23:01.584098Z", "commit": "2747", "message": " ", "author": "nividic73"}, {"date": "2014-09-25T14:45:38.197940Z", "commit": "2746", "message": "fixed bug in the Platform selection", "author": "nividic73"}, {"date": "2014-09-22T13:52:51.947613Z", "commit": "2745", "message": "svn mv https://sire.googlecode.com/svn/corelib/tags/evotec2014pre\nhttps://sire.googlecode.com/svn/corelib/tags/evotec2014pre.1\n\n", "author": "julienmich@googlemail.com"}, {"date": "2014-09-22T13:51:13.884706Z", "commit": "2744", "message": "svn copy https://sire.googlecode.com/svn/python2/branches/users/julien\n\nhttps://sire.googlecode.com/svn/python2/tags/evotec2014pre.1\n\n", "author": "julienmich@googlemail.com"}, {"date": "2014-09-18T09:04:22.663765Z", "commit": "2743", "message": "svn copy https://sire.googlecode.com/svn/python2/branches/users/julien https://sire.googlecode.com/svn/python2/tags/evotec2014pre\n\n", "author": "julienmich@googlemail.com"}, {"date": "2014-09-18T09:02:52.319797Z", "commit": "2742", "message": "Updated sire_test so can run tests in test folders, e.g\n\n~/sire.app/bin/sire_test Tools\n\nAdded Tools to the list of test folders to install\n\nUpdated test_idpoints.py to delete generated output after test has run. \n\n\n", "author": "julienmich@googlemail.com"}, {"date": "2014-09-17T14:49:00.543737Z", "commit": "2741", "message": "snapshot of python2 evotec pre release\n", "author": "julienmich"}, {"date": "2014-09-17T14:48:12.738425Z", "commit": "2740", "message": "snapshot of corelib, evotec pre release\n\n", "author": "julienmich"}, {"date": "2014-09-17T14:20:11.894083Z", "commit": "2739", "message": "Disabled a debug statement that is triggered by the way Nautilus setup force fields\n\n", "author": "julienmich"}, {"date": "2014-09-16T12:26:58.997049Z", "commit": "2738", "message": "New wrappers with support for energytable", "author": "julienmich@gmail.com"}, {"date": "2014-09-16T12:26:32.202641Z", "commit": "2737", "message": "Bugfixes to get wrappers to compile ", "author": "julienmich@gmail.com"}, {"date": "2014-09-16T09:48:35.942936Z", "commit": "2736", "message": "Commit of updated python wrappers", "author": "julienmich@gmail.com"}, {"date": "2014-09-16T09:12:41.878096Z", "commit": "2735", "message": "Forgot to remove incorrect entry for atombeading.h\n\n", "author": "julienmich"}, {"date": "2014-09-16T09:08:18.987242Z", "commit": "2734", "message": "Added back energytable interface to system using code from julienmich's branch\n\n", "author": "julienmich"}, {"date": "2014-09-15T18:41:28.846745Z", "commit": "2733", "message": "Stubbed out the functions that will be needed for the force, potential and field\ncalculations.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-15T12:24:40.344546Z", "commit": "2732", "message": "Minor changes to UI in analyse_freenrg and in output of somd-freenrg\n\n", "author": "julienmich"}, {"date": "2014-09-12T15:47:25.247945Z", "commit": "2731", "message": "Increased the release number to 2014.4\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-12T14:47:52.843400Z", "commit": "2730", "message": "Merged devel into trunk\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-12T14:13:02.689953Z", "commit": "2729", "message": "Finished all of the reaction field functions. Now completed the soft core\nintramolecular function :-)\n\nCode compiles, links, runs and passes all unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-12T14:12:27.812364Z", "commit": "2728", "message": "Added in the unit tests for the soft core intramolecular reaction field function\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-12T13:46:03.852415Z", "commit": "2727", "message": "Finished the intramolecular reaction field function. Just the soft core\nintramolecular reaction field function to go...\n\nCode compiles, links, runs and passes unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-12T13:39:13.313266Z", "commit": "2726", "message": "Adding in more unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-12T11:45:55.903582Z", "commit": "2725", "message": "Finished writing the CLJSoftRFFunction. Now have a working intermolecular soft core\nreaction field function that passes all of its unit tests\n\nCode compiles, links, runs and passes all unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-12T11:45:21.032994Z", "commit": "2724", "message": "Added unit test for the soft reaction field function\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-12T11:33:38.862371Z", "commit": "2723", "message": "Finished CLJRFFunction. Now have a working intermolecular reaction field\nfunction that passes all of its unit tests :-)\n\nCode compiles, links, runs and passes unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-12T11:32:55.711379Z", "commit": "2722", "message": "Added unit tests for CLJRFFunction\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-09T15:29:33.051263Z", "commit": "2721", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-09T15:26:15.665838Z", "commit": "2720", "message": "Stubbed out the reaction field CLJ functions...\n\n(and fixed an annoying typo in the last commit - code is now compiling,\nrunning and passing all unit tests!)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-09T14:49:12.160240Z", "commit": "2719", "message": "Added in the CLJSoftIntraShiftFunction. Now have a complete set of inter and intramolecular,\nhard and soft core electrostatic shifting functions, which all work and all pass\ntheir respective unit tests :-)\n\nCode compiles, links, runs and passes all unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-09T14:46:44.726854Z", "commit": "2718", "message": "Added in a unit test for the new CLJSoftIntraShiftFunction\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-09T13:11:45.843125Z", "commit": "2717", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-09T13:10:40.912004Z", "commit": "2716", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-08T14:55:26.886038Z", "commit": "2715", "message": "Stubbed out the CLJSoftIntraShiftFunction...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-08T10:53:38.026788Z", "commit": "2714", "message": "Fixed a compile bug on linux\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-08T10:50:47.439284Z", "commit": "2713", "message": "Added in the unit tests for CLJSoftShiftFunction\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-08T10:50:01.710097Z", "commit": "2712", "message": "I've finished writing the CLJSoftShiftFunction that provides a soft-core intermolecular\nshift-electrostatics function. This passes the unit tests that I will add in the next\ncommit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-08T09:25:54.744206Z", "commit": "2711", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-08T09:25:31.477313Z", "commit": "2710", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-09-08T09:17:33.581996Z", "commit": "2709", "message": "Beginning work on the soft core shift electrostatics function\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-26T15:18:32.985430Z", "commit": "2708", "message": "I've fixed some bugs in response to the new unit test. The unit test now\npasses and I can run simulations that correctly compare the old\nand new intramolecular forcefields\n\nCode compiles, links, runs and passes all unit tests\n\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-26T15:17:40.740880Z", "commit": "2707", "message": "Added in a unit test for the new 1-4 calculation in InternalFF.\nCan now run simulations that compare IntraCLJFF + InternalFF (no-1-4)\nagainst IntraFF + InternalFF (with 1-4), which both give\nthe same answer (with the new code being faster!)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-26T13:39:25.548976Z", "commit": "2706", "message": "Python wrappers for  the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-25T15:17:41.369318Z", "commit": "2705", "message": "Finished integrating CLJ14Group with InternalFF so that I can now calculate\n1-4 nonbonded energies as part of calculating the bond, angle, dihedral\nenergies etc.\n\nCode needs python wrapping and unit testing\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-25T14:05:44.984287Z", "commit": "2704", "message": "Added in components for the intramolecular 1-4 total, coulomb and LJ energies\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-23T11:30:56.319145Z", "commit": "2703", "message": "fixed bug. Soft core was not correctly applied between To dummy and From dummy atoms at lam=0,1", "author": "nividic73"}, {"date": "2014-08-23T11:30:28.251837Z", "commit": "2702", "message": "fixed bug. Soft core was not correctly applied between To dummy and From dummy atoms at lam=0,1", "author": "nividic73"}, {"date": "2014-08-22T16:19:31.767846Z", "commit": "2701", "message": "Fixed bugs revealed by unit testing. CLJ14Group now seems to behave well :-)\n\nCode compiles, links, runs and all unit tests pass\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-22T16:19:04.689897Z", "commit": "2700", "message": "Added in unit tests for the CLJ14Group\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-22T14:27:30.915206Z", "commit": "2699", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-22T14:21:28.200042Z", "commit": "2698", "message": "Added in all the code for CLJ14Group, which will be used to calculate\n1-4 scaled nonbonded interactions. This now needs python wrapping\nand testing\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-22T09:47:15.690900Z", "commit": "2697", "message": "I've added an 'isBiased' function to Sampler that allows the different move\ntypes to skip the calculation of probabilities if the move is not biased.\nThis saves a significant amount of time, especially for residue move\n(about 1 second per 1000 moves!). With this change, the new energy\ncode is significantly faster than the old energy code.\n\nCode compiles, links, runs and all unit tests pass\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-21T16:22:39.184199Z", "commit": "2696", "message": "Starting work on adding in the forcefield for calculating 14-nonbonded\ninterations (as this is no longer performed by IntraFF). \n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-21T11:21:54.877681Z", "commit": "2695", "message": "Updated the unit test to remove sources of randomness and to reduce the\nlength of the simulation. It does just look like numerical imprecision\naffecting the occasional move...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-21T11:05:20.510093Z", "commit": "2694", "message": "Updated the IntraGroupFF test to check that errors were not caused by lack of precision.\nI think that there is something random going on, perhaps caused by an uninitialised\nvariable?\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-21T10:41:10.804961Z", "commit": "2693", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-21T10:38:12.096350Z", "commit": "2692", "message": "Updated CLJExtractor and CLJGroup so that they can tell when a change of molecule\ncauses no change in the atoms selected in the group. This was needed to optimise\nthe IntraGroupFF as without this change, the energy was continually recalculated\nfrom scratch. Now, updating one half of the molecule will not change the other\nhalf, so the energy is calculated quickly using a delta.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-21T10:37:03.599435Z", "commit": "2691", "message": "Reduced the number of moves in the test as numerical imprecision from\ncalculating the energy in different ways causes one move to be accepted/rejected\ndifferently between the old and new forcefields.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-21T09:56:47.827668Z", "commit": "2690", "message": "Updated the test_intragroupff.py unit test to work around the problem\nthat the benchmark old IntraGroupCLJFF forcefield is broken...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-20T16:12:29.836421Z", "commit": "2689", "message": "Added in a unit test for the IntraGroupFF. This passes, and indeed performs well.\nIndeed, this has revealed that the old IntraGroupCLJFF (which has never been\nused, as far as I know) is actually buggy and gives the wrong energy when\nmolecules are moved! The only problem with IntraGroupFF is that the energy\nrecalculation is a little too slow when part of a molecule is moved.\n\nCode compiles, links, runs and all unit tests pass\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-20T16:10:49.267600Z", "commit": "2688", "message": "Fixed a bug in CLJAtoms that caused an exception when an empty molecule was added.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-20T13:45:53.649492Z", "commit": "2687", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-20T11:22:45.151210Z", "commit": "2686", "message": "Added in the IntraGroupFF. This compiles and links, but needs wrapping and testing\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-20T10:05:27.911022Z", "commit": "2685", "message": "Fixed a small bug in analyse_freenrg.py and have also added a unit test\nfor protein backbone moves for the new IntraFF. \n\nCode compiles, links, runs and all unit tests pass\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-19T14:30:17.345973Z", "commit": "2684", "message": "Fixed a bug in OpenMMMD.py which meant the soft-core energies of todummy-fromdummy pair interactions was too hard. \nWork in progress on support for multiple gradients.s3 files as input to analyse_freenrg.py (code is broken)\n\n", "author": "julienmich"}, {"date": "2014-08-14T16:30:45.656375Z", "commit": "2683", "message": "Added functionality to sire_test. Allowed tests to be restricted to \nindividual directories and have also added clearer output that will\nmake it easier to tell if any tests failed, and which tests failed.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-14T16:03:35.640317Z", "commit": "2682", "message": "I've fixed bugs revealed by the unit tests and have an IntraFF that is pretty\nwell working :-). While all of the current tests pass, I know that there\nis an energy leak when I move part of a multi-residue molecule (e.g. protein).\n\nCode compiles, links, runs and all unit tests pass\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-14T16:01:36.770318Z", "commit": "2681", "message": "Adding in the unit tests for the new IntraFF forcefield. So far these tests\npass, but they only test moving single-residue molecules. My quick test\nof multi-residue molecules suggests that I have an energy leak somewhere...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-14T14:27:08.995119Z", "commit": "2680", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-14T14:23:38.266520Z", "commit": "2679", "message": "I've added in the code for the intramolecular version of InterFF, IntraFF. This needs\nto be wrapped and tested...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-14T11:51:21.862592Z", "commit": "2678", "message": "Forgot to set the environment variable OPENMMDIR which caused incorrect generation of the OpenMM wrappers", "author": "julienmich@gmail.com"}, {"date": "2014-08-13T20:58:33.319499Z", "commit": "2677", "message": "added a bunch of wrappers that were not on version control. renamed sommmd to somd", "author": "julienmich@gmail.com"}, {"date": "2014-08-13T20:49:01.975744Z", "commit": "2676", "message": "commit of the python wrappers", "author": "julienmich@gmail.com"}, {"date": "2014-08-13T13:27:14.392539Z", "commit": "2675", "message": "Epic partial merge of devel.  \n\n", "author": "julienmich"}, {"date": "2014-08-13T10:55:44.161272Z", "commit": "2674", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-13T10:53:13.175353Z", "commit": "2673", "message": "Updated InterGroupFF to support use of a grid and also use of multiple\nCLJFunctions. This is now almost a complete copy of InterFF, with\nchanges made to support two CLJGroups.\n\nNeeds python wrapping and testing\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-13T10:26:29.538222Z", "commit": "2672", "message": "I've fixed bugs revealed by the unit test of multiple CLJFunctions in a single\nInterFF forcefield. The code is now working and the unit test passes without\nproblem.\n\nCode compiles, links, runs and passes all unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-13T10:25:43.618525Z", "commit": "2671", "message": "Added in a unit test for using multiple CLJFunctions in a single InterFF forcefield\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-12T16:57:18.300817Z", "commit": "2670", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-12T16:53:06.620330Z", "commit": "2669", "message": "I've updated InterFF and CLJFunction to work with multiple functions\nsimultaneously. This now needs to be wrapped and tested...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-12T16:19:33.045222Z", "commit": "2668", "message": "Fixed missing assert function\n\nCode compiles, links, runs and passes all unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-12T16:15:04.227175Z", "commit": "2667", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-12T16:11:37.934387Z", "commit": "2666", "message": "I've added in MultiCLJComponent and MultiCLJEnergy classes that will simplify\nthe addition of named addition components to CLJ forcefields, e.g.\nyou will soon be able to add a \"forwards\" and \"backwards\" CLJ component,\nwhich would be useful for soft core forcefields in free energy\ncalculations\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-12T15:38:18.004821Z", "commit": "2665", "message": "Merged python/scripts from devel. Renamed sommmd to somd (too many m's ! )\n\njulien@ubuntu:~/software/devel/sirejulien/python2/python/scripts$ svn merge https://sire.googlecode.com/svn/python/branches/devel/python/scripts .\n--- Merging r2423 through r2663 into '.':\nA    ligandswap.py\nA    align.py\nA    transform.py\nU    waterswap.py\nA    waterview.py\nA    analyse_reti.py\nU    quantomm.py\nA    analyse_freenrg.py\n\n\n", "author": "julienmich"}, {"date": "2014-08-12T15:35:46.262974Z", "commit": "2664", "message": "Merged devel/corelib/src/libs/SireAnalysis into my branch \n\njulien@ubuntu:~/software/devel/sirejulien/corelib/src/libs/SireAnalysis$ svn merge https://sire.googlecode.com/svn/corelib/branches/devel/src/libs/SireAnalysis .\n--- Merging r2391 through r2663 into '.':\nU    fep.h\nU    ticomponents.cpp\nU    bennetts.cpp\nU    bennetts.h\nU    fep.cpp\nConflict discovered in 'ti.cpp'.\nSelect: (p) postpone, (df) diff-full, (e) edit,\n        (mc) mine-conflict, (tc) theirs-conflict,\n        (s) show all options: tc\n\n", "author": "julienmich"}, {"date": "2014-08-12T13:50:36.222264Z", "commit": "2663", "message": "Completed and debugged the InterGroupFF forcefield. This passes its unit tests\nbut is slightly slower than InterGroupCLJFF. I will optimise this at another\ntime...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-12T13:49:53.979635Z", "commit": "2662", "message": "Added in the unit tests for InterGroupFF - which all pass :-)\n\n(although the InterGroupFF forcefield is slightly slower than the \nInterGroupCLJFF forcefield...)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-12T10:59:55.263318Z", "commit": "2661", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-12T10:56:02.434814Z", "commit": "2660", "message": "Cleaned up the private API of InterFF and have written InterGroupFF.\nThis was very quick to write, showing that the CLJGroup API works\nvery well :-). InterGroupFF compiles, but I now need to add python\nwrappers and proper unit tests\n\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-12T10:18:19.397170Z", "commit": "2659", "message": "I found the cause behind the weird slow code - it was that cljexts was very\nbig so the implicit \"detach()\" when writing (copy on write) was very slow,\nof the order of 20-30ms. Changing cljexts from a QHash to ChunkedHash\nhas solved the problem and now the new InterFF code is very fast.\n\nCode is working and passes all unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-11T16:53:34.703212Z", "commit": "2658", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-11T16:50:31.880779Z", "commit": "2657", "message": "Fixed code used to extract by cutgroup. Now debugging a really weird slowdown in the\ncode caused when I access a CLJExtractor by molecule number...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-11T15:48:30.992682Z", "commit": "2656", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-11T15:43:06.606656Z", "commit": "2655", "message": "I'm updating CLJExtractor so that it can extract atoms by CutGroup. This should\nbe faster than extracting by residue\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-11T15:15:50.943598Z", "commit": "2654", "message": "Committing code that passes all of the unit tests :-). However, optimisation\nhas revealed that CLJExtractor should be working per CutGroup not per\nResidue, so I will need to update it...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-11T14:05:42.912421Z", "commit": "2653", "message": "Fixed a bug in the unit test!\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-11T14:05:13.107296Z", "commit": "2652", "message": "Optimised the CLJ functions a little... Units tests all appear to be working\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-11T11:01:58.492598Z", "commit": "2651", "message": "Fixed the cause of the exception in test_interff_residue.py, which now completes,\nbut gives a different energy for the \"optimised moves\" systems...\n\nCode compiles, links and runs and most unit tests pass\n\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-11T11:00:33.254843Z", "commit": "2650", "message": "Fixed problems with the test_interff_residue unit test\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-08T14:27:40.912942Z", "commit": "2649", "message": "Found the cause of exceptions causing a segfault - it seems to be that\n-fomit-frame-pointer causes problems on a mac when the exception moves from\nC++ to python. I've removed this option from the CMakeFiles.\n\nI have also turned back on backtraces and added code to exception so that\n'slow' exceptions can be disabled. This allows code that throws lots\nof exceptions (correctly, and are handled correctly) to run quickly\nwithout being slowed down by the need to generate backtraces or other\nhuman-useful information\n\nFound the cause of the segfault in the test_interff_residue.py unit\ntest. The segfault was because of an unhandled exception. The exception\nis because something is going wrong in CLJExtractor::_pvt_update when\npart of a multi-residue molecule is changed.\n\nCode compiles, links and runs, but the test_interff_residue.py\nunit test fails\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-06T16:09:59.212307Z", "commit": "2648", "message": "Updated the test_cljdelta.py unit test to match the new CLJDelta API\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-06T15:54:25.767607Z", "commit": "2647", "message": "Python wrappers for last commits\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-06T15:50:47.811896Z", "commit": "2646", "message": "Temporarily removing the test in test_interff_residue.py so that\nI can use sire_test to check that everything else is working...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-06T15:47:38.988395Z", "commit": "2645", "message": "I've fixed more bugs and parallelised the delta energy calculation. This\nnow speeds up the calculation even more. Most of the unit tests are now\npassing, with the exception of test_interff_residue.py\n\nCode compiles, links and runs, but fails some unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-06T15:43:41.469291Z", "commit": "2644", "message": "Updated the unit test\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-06T13:45:54.829041Z", "commit": "2643", "message": "I've found the cause of the new code's lethargy - I was implicitly creating\nlots of PartialMolecules when I was testing whether or not the move had\nremoved the molecule. This costed about 0.8 s per thousand moves! I've fixed\nthe code and now the new forcefield is twice as fast as the old forcefield\n\ntest_interff.py works, as does test_optimise.py, but the parallel code\nis slower (because I think it is creating new CLJBoxes)\n\ntest_interff_residue.py still segfaults\n\nCode compiles, links and runs, but fails the unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-06T11:20:35.515053Z", "commit": "2642", "message": "Continued to fix bugs. Now the test_interff.py unit test passes without\nproblems. The new energy code is twice as fast as the old code, but the\nupdate code is extremely slow, negating any speedup. However, it now works,\nso I am able to optimise it. test_optimise.py works, but test_interff_residue.py\nsegfaults...\n\nCode compiles, links and runs but fails unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-06T11:19:17.276897Z", "commit": "2641", "message": "Updates to the unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-05T16:49:06.295509Z", "commit": "2640", "message": "Updated unit tests and exposed tuple<CLJAtoms,CLJAtoms,CLJAtoms>\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-05T16:48:44.330126Z", "commit": "2639", "message": "Continuing to work through the failed unit tests... I am definitely\nleaking energy, although it seems to be somewhere in InterFF rather\nthan CLJGroup (which passes its tests)\n\nCode compiles, links and runs but fails unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-05T16:03:46.814618Z", "commit": "2638", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-05T16:00:43.917135Z", "commit": "2637", "message": "Had to update the API as I had not accounted for cases where the \nchanging atoms interact with one another. I am still moving through\nthe unit tests fixing things as I go...\n\nCode compiles and links but fails unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-05T14:31:23.097737Z", "commit": "2636", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-05T14:27:57.250021Z", "commit": "2635", "message": "Added in missing comparison operators for Molecule\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-05T14:16:04.789443Z", "commit": "2634", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-05T14:11:30.562870Z", "commit": "2633", "message": "Fixing bugs and adding extract functions to the API that allow for more in-depth\nunit testing\n\nCode compiles and links but fails tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-05T11:06:39.024524Z", "commit": "2632", "message": "Working on fixing bugs in the new CLJGroup/InterFF. Currently total energies\nare correct but the unit tests are failing on calculating energy differences.\nI have an energy leak...\n\nCode compiles and links but fails unit tests\n\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-05T09:18:43.121175Z", "commit": "2631", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-05T09:15:04.698519Z", "commit": "2630", "message": "Filled in missing functions in the API\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-04T16:33:43.121037Z", "commit": "2629", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-04T16:23:18.337923Z", "commit": "2628", "message": "Filled in all of the functionality and updated InterFF to use CLJGroup. This has\nsignificantly simplified the code and paves the way to re-use CLJGroup in\nInterGroupFF, IntraFF and IntraGroupFF. Now need to create the python wrappers\nand to check that the InterFF unit tests still work...\n\nCode compiles but code is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-04T11:07:59.248835Z", "commit": "2627", "message": "I've filled in a lot of the functionality of CLJGroup, CLJWorkspace and CLJExtractor.\nThey should all now be working with each other. I now need to update InterFF\nto use CLJGroup.\n\nCode is very broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-01T16:27:36.516736Z", "commit": "2626", "message": "I'm putting down the design of the code used to manage updates to molecules\nwhen in CLJ forcefields. This is quite complex and new code and I am still\nin the process of writing it. \n\nCode is very broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-08-01T11:03:00.554877Z", "commit": "2625", "message": "Creating a branch of python nividic", "author": "julienmich"}, {"date": "2014-08-01T11:01:15.075826Z", "commit": "2624", "message": "Creating a branch of nividic", "author": "julienmich"}, {"date": "2014-07-29T15:39:13.142615Z", "commit": "2623", "message": "Added a unit test for the parallel and MC optimised moves versus the \nnon-optimised serial moves. Test passes and the parallel optimised\ncode is about 30% faster than the non-parallel non-optimised code\n(equal contributions from parallel and from optimisation)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-07-29T15:01:57.656796Z", "commit": "2622", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-07-29T14:43:51.723541Z", "commit": "2621", "message": "Adding in options to turn on or off the parallel calculation in the new forcefields,\nto turn on or off the reproducible parallel energy sum algorithm, and to also\nturn on of off the optimised MC moves that are potentially buggy, but will\nprevent repeated memory allocation and deallocation. Providing a switch\nwill allow me to write unit test python scripts that will test the code\nwith the optimised moves on, versus code with the optimised moves off.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-07-25T15:32:28.805879Z", "commit": "2620", "message": "Removed some debug statements for easier use in production runs\n", "author": "julienmich"}, {"date": "2014-07-25T13:27:30.552373Z", "commit": "2619", "message": "restart file bug fixed", "author": "nividic73"}, {"date": "2014-07-25T10:25:23.497970Z", "commit": "2618", "message": "fixed compilation error with old compiler", "author": "nividic73"}, {"date": "2014-07-25T10:21:27.685163Z", "commit": "2617", "message": "fixed compilation error with old compiler", "author": "nividic73"}, {"date": "2014-07-25T10:11:29.388959Z", "commit": "2616", "message": "Glycam support has been added to the free energy. 0^0 bug has been fixed- the code is broken restart file is not working", "author": "nividic73"}, {"date": "2014-07-21T11:01:59.309068Z", "commit": "2615", "message": "update", "author": "nividic73@googlemail.com"}, {"date": "2014-07-21T10:47:51.089454Z", "commit": "2614", "message": "code broken - do not used it", "author": "nividic73"}, {"date": "2014-07-18T09:31:12.039109Z", "commit": "2613", "message": "Updated version string from 2014.2 to 2014.3\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-07-18T09:27:03.733863Z", "commit": "2612", "message": "Merged branches/devel into trunk \n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-07-18T09:22:42.977338Z", "commit": "2611", "message": "Last commit of devel before merging back to trunk for the 2014.2 release\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-07-02T10:51:41.376332Z", "commit": "2610", "message": "Updated the reflection volume code so that it can build reflection volumes\nusing the atomic mass property (if the atom element property is not available)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-30T14:09:36.251274Z", "commit": "2609", "message": "Updated WSRC so that I can add a buffer to the LJ lambda scaling to try to\nremove the discontinuity in the PMF caused by lambda = 0 and lambda = 1\n(or the discharged equivalents) sampling configurations where there is\nsignificant atomic overlap between the reference and perturbed states.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-30T13:41:59.523262Z", "commit": "2608", "message": "Updated quantomm to use the new parameters and capabilities exposed. Added\nthe \"--intermolecular-only\" option and the \"--scale-charges\" option and \nhave updated its documentation\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-30T13:21:03.944545Z", "commit": "2607", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-30T13:18:03.713171Z", "commit": "2606", "message": "Added in 'toString' operators so that more information is available to the user\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-30T11:10:58.614643Z", "commit": "2605", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-30T11:08:49.814421Z", "commit": "2604", "message": "Added in support for scaling the MM charges in the QM/MM interaction\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-30T10:40:40.061028Z", "commit": "2603", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-30T10:37:32.543087Z", "commit": "2602", "message": "Fixed some bugs in the QM/MM script related to the handling of periodic boundaries,\nhave added in support for the intermolecularOnly option, and have added a simple\nscript to analyse the RETI trajectory from a restart file\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-30T10:36:48.295881Z", "commit": "2601", "message": "I've added an \"intermolecularOnly\" option to QMMMFF that sets the QM/MM forcefield\nto only calculate the intermolecular energy between the QM and MM atoms. This is \nuseful to overcome the problem of sometimes the QM and MM bond lengths disagree,\nleading to a lower than expected acceptance ratio for the QM model.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-27T16:20:30.570480Z", "commit": "2600", "message": "I've added code to detect when there are too many MM atoms for SQM and to \n\"fix\" the problem by removing atoms starting from those that are furthest\naway. This is not great, but it is the best that can be done until the\ninput file size limit is lifted. I print a warning for the user and also\nhave set options to remove this check if SQM is fixed.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-27T13:30:51.435075Z", "commit": "2599", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-27T13:25:30.392011Z", "commit": "2598", "message": "Updated the API of QMProgram so that it can report the maximum number of MM atoms\nthat it can support. Added in code to SQM to detect when this maximum has been\nexceeded.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-27T13:24:58.725377Z", "commit": "2597", "message": "Updated the QuantumToMM and quantomm scripts so that they can use SQM, and\nhave switched over to using SQM as default. Currently have a problem that\nSQM only supports command files with 1000 lines, so there is a limit on the\nnumber of MM atoms...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-27T10:33:21.616240Z", "commit": "2596", "message": "Added a unit test for the SQM interface\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-27T10:32:59.781574Z", "commit": "2595", "message": "Fixed bugs in SQM so that it now works :-). Also updated Process so that it\nchecks whether a process has finished every 20 ms rather than every second\n(SQM processes are very quick!)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-26T14:04:53.104794Z", "commit": "2594", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-26T13:59:41.466979Z", "commit": "2593", "message": "I've added an interface for the SQM package that comes free with AmberTools14.\nThis provides a complete semiempirical and DFTB QM package that can be used\nfor QM/MM calculations :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-25T15:57:51.129272Z", "commit": "2592", "message": "I've fixed a couple of small bugs in the waterswap module that meant caused\nthe (obviously) incorrect Bennetts and FEP free energies, and I have also\ntweaked the discharging Hamiltonian so that the user can choose to \ndischarge a percent of the charge (rather than all of it)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-23T16:01:45.947335Z", "commit": "2591", "message": "Python wrappers for the last commit, together with some tests that exceptions\ncan be thrown without segfaults from each of the modules\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-23T16:00:56.007623Z", "commit": "2590", "message": "Updated Amber so that the exception thrown when the files don't exist doesn't cause\na segfault on mac. The problem seems to be caused by the exception being thrown\nfrom within a function that is too big(!). I found that shrinking the function\nstopped the segfault. I thought this was due to running out of stack space, but\nincreasing the stack didn't fix the problem. Instead, I now check that the files\nexist in a small wrapper function, and then call the larger function if they\ndo exist. It is not an elegant fix, but until I understand the problem it is \nthe best that I can do...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-06T17:02:52.142014Z", "commit": "2589", "message": "Final commit for the release of Sire 2014.2\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-06T15:14:14.236099Z", "commit": "2588", "message": "Merged devel/corelib and devel/python into trunk/corelib and trunk/python. sire_test\ncompletes successfully for the devel branch. I am now compiling the trunk on OS X\nand will need to do this on Linux too as a test.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-06T14:43:56.644294Z", "commit": "2587", "message": "Adding descriptions and cleaning up all of the apps in preparation for the 2014.2 release\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-06T14:43:20.742330Z", "commit": "2586", "message": "Updating the source in preparation for the 2014.2 release\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-05T10:25:18.746874Z", "commit": "2585", "message": "Fixed some bugs in the new waterswap Hamiltonians (they were blatantly wrong!)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-04T12:22:54.110244Z", "commit": "2584", "message": "Re-enabling RETI moves for WSRC. They work well in ligandswap and will help\nwith sampling when I am discharging and recharging\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-04T12:06:32.946863Z", "commit": "2583", "message": "I've fixed a small bug in the calculation of lambda values when discharging\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-04T11:54:16.050154Z", "commit": "2582", "message": "Rewrote the hamiltonians in waterswap so that I can discharge the ligand and swap\nwater cluster before swapping (and then recharge them after swapping).\n\nTesting all of this now...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-03T14:15:47.145503Z", "commit": "2581", "message": "Added a sphere pair volume test to the sphere unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-03T10:11:39.295003Z", "commit": "2580", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-06-03T10:05:14.011087Z", "commit": "2579", "message": "Added code to return the reflection volume and to calculate the volume of that space\nin RigidBodyMC\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-30T15:26:44.869298Z", "commit": "2578", "message": "Python wrappers and unit test for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-30T15:26:27.206918Z", "commit": "2577", "message": "I've added the MC volume calculator and have also filled in the special cases\nfor the analytic triple intersection code. I've added unit tests (next commit)\nand have been debugging. So far, it looks like the code performs well, except\nfor when the spheres are heavily overlapping (when there are large disagreements\nbetween the MC and analytic code, and the MC code looks more correct...).\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-30T11:51:41.681992Z", "commit": "2576", "message": "Python wrapper for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-30T11:49:10.424832Z", "commit": "2575", "message": "I've implemented most of the triple intersection algorithm and get a result that\nis the same as that reported in the paper. I am now about to write a Monte Carlo\nsolver for the volume so that I can perform more tests, and will then add in the \ncode to deal with special edge cases of triple intersection mentioned in \nthe paper\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-30T11:16:41.196412Z", "commit": "2574", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-30T11:15:52.941505Z", "commit": "2573", "message": "Added the algorithm from Gibson and Scheraga paper to calculate the volume of \nintersection of three spheres. Needs to be wrapped and tested\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-29T18:27:09.907627Z", "commit": "2572", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-29T18:26:55.304152Z", "commit": "2571", "message": "Added in the code to calculate volume of intersecting spheres (tested against\nknown volumes)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-29T16:04:55.689225Z", "commit": "2570", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-29T16:00:20.835820Z", "commit": "2569", "message": "Starting work on calculating the volume of intersecting spheres\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-28T16:01:06.216000Z", "commit": "2568", "message": "I've updated waterswap to provide the option of using the reflection volume to\nhold the swap water cluster in place. I've tested this and it looks like\nit works...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-28T15:30:52.099055Z", "commit": "2567", "message": "Fixed some bugs and now the reflection volume extraction and reflection volume moves\nwork really well :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-28T14:35:43.041680Z", "commit": "2566", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-28T14:33:19.461447Z", "commit": "2565", "message": "Added functions to extract molecules that will be moved by the reflection sphere/volume\nfrom the set of passed molecules. Also added code to \"shift\" molecules that are just\noutside the volume to move them just inside the volume.\n\nThis needs testing\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-28T13:26:51.671632Z", "commit": "2564", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-28T13:24:51.895186Z", "commit": "2563", "message": "I've updated the API of RigidBodyMC to more properly show that the \"restricted volume\"\nmove is actually a reflection volume move (thus a more generic case of the reflection sphere).\n\nI've also updated the code internally to more properly reflect this :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-28T11:11:43.447417Z", "commit": "2562", "message": "I've debugged and tested the new reflection sphere and reflection volume code. It seems\nto work well and is not pretty quick :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-27T16:10:55.096029Z", "commit": "2561", "message": "Updating the reflection sphere code so that I can use it with the restricted\nvolume moves code to better sample a restricted volume (the attempt/reject\nmethod is too slow, so I have had to work out the maths of using multiple,\nintersecting reflection spheres).\n\nCode needs testing, so please don't trust this version! (RigidBodyMC with\nreflection sphere or restricted volume sampling)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-27T13:50:28.994394Z", "commit": "2560", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-27T13:46:34.833201Z", "commit": "2559", "message": "I've added code to allow rigid body moves to be restricted to sampling (semi) arbitrary\nvolumes of space\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-12T13:08:43.610642Z", "commit": "2558", "message": "Fixed a bug with ComponentConstraint where it was saying it was satisfied,\nbut it was not (this was caught by a higher level in the code and resulted\nin an exception, so does not break any existing simulation)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-12T10:10:44.326625Z", "commit": "2557", "message": "I've updated QuantumToMM so that vacuum correction simulations no longer fail\nbecause of a bug where volume moves were added despite the simulation being\nrun using an infinite cartesian space!\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-06T15:47:37.303332Z", "commit": "2556", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-06T15:41:16.611496Z", "commit": "2555", "message": "Added functionality to VolumeMap allowing the map to be masked using a distance\nmask from a molecule. This should make the masks easier to visualised in VMD etc.\n\nNeeds python wrapping and testing\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-06T11:14:13.972731Z", "commit": "2554", "message": "Updated WSRC so that waterswap can use the reflection sphere to constrain\nthe position of the swap water cluster.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-06T10:14:01.909499Z", "commit": "2553", "message": "I've added in unit tests for the central and local reflection spheres, which all pass :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-05T10:45:26.706590Z", "commit": "2552", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-05-05T10:37:38.639266Z", "commit": "2551", "message": "I've added support for per-molecule reflection spheres in RigidBodyMC.\nThis will allow me to use the reflection sphere constraint to hold the\nswap water cluster in place in the waterswap calculations. Now needs\nto be python wrapped and tested\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-25T10:16:26.574661Z", "commit": "2550", "message": "I've added a 'waterview' executable that allows you to visualise the water structure\nin a binding site, both with and without the ligand present. I've also added in a unit\ntest for SireBase::Process so that the bugfix will be permanently fixed ;-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-25T09:36:15.128540Z", "commit": "2549", "message": "I've fixed a bug in SireBase::Process where it crashed when trying to start\na sub-process. I've also removed the debugging output from VolumeMap\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-23T14:53:29.790971Z", "commit": "2548", "message": "just cosmetic changes", "author": "nividic73"}, {"date": "2014-04-23T11:17:58.874768Z", "commit": "2547", "message": "Fixed a small missing function. The MolWithResID code has now been tested\nand it does indeed work :-)\n\nligand = system[ MolWithResID(\"LIG\") ].molecule()\n\nworks exactly as you would expect\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-23T11:06:30.866142Z", "commit": "2546", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-23T11:00:22.663888Z", "commit": "2545", "message": "Added in a \"MolWithResID\" molecule identifier class that will make it much easier\nto pick out specific molecules from a file by matching residues within that\nmolecule (e.g. to get the molecule with residue called \"LIG\" from a system, you\nshould be able to code\n\nligand = system[ MolWithResID(\"LIG\") ]\n\nThis needs to be python wrapped and tested...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-23T10:21:04.269229Z", "commit": "2544", "message": "I've added an analyse_freenrg program to automatically analyse and average\nfree energies collected during a simulation.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-22T15:53:44.127044Z", "commit": "2543", "message": "I've added code that prints out PDBs of the aligned molecules at the start of the simulation.\nThis should allow the user to check that the ligands are aligning properly before running\nlots of simulation...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-22T15:52:13.324235Z", "commit": "2542", "message": "I've fixed a bug in the alignment code that meant that, rarely, molecules were not\ncorrectly aligned. I've added new code to check that this is correct at run time,\nand have also added a check to the Quaternion code that makes sure that the passed\nmatrix is a rotation matrix (has a determinant of 1)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-18T15:37:23.617892Z", "commit": "2541", "message": "Fixed small link bug (missing volumeMap() function!)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-18T15:28:22.382421Z", "commit": "2540", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-18T15:12:00.980350Z", "commit": "2539", "message": "Updated VolMapMonitor to use VolumeMap\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-18T11:28:06.562783Z", "commit": "2538", "message": "Moved the GridInfo unit test to SireVol (to match the move for GridInfo itself) \nand have written and tested the unit test for VolumeMap\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-18T11:27:26.360265Z", "commit": "2537", "message": "Filled in all functionality in VolumeMap and have written unit tests and checked\nthat it is working :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-17T16:06:33.208741Z", "commit": "2536", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-17T15:41:19.047533Z", "commit": "2535", "message": "Added useful functionality to GridInfo and have filled in most missing functionality\nin VolumeMap. Now need to wrap and test the code\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-17T11:24:32.302648Z", "commit": "2534", "message": "I've modified ligandswap so that \"--vacuum\" will swap ligands with a vacuum box.\nThis allows relative hydration free energies to be calculated :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-16T16:19:06.230669Z", "commit": "2533", "message": "I've added a wrapper for the lambda trajectory history and have also modified LSRC and WSRC\nto use the correct backwards energy terms (before, I was prematurely taking the negative)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-16T16:14:51.622243Z", "commit": "2532", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-16T16:11:16.593240Z", "commit": "2531", "message": "I've fixed a new bug in the calculation of error margins in TI and have added in\nthe ability to record the lambda trajectory in a RETI simulation\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-16T15:41:50.434082Z", "commit": "2530", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-16T15:36:39.464977Z", "commit": "2529", "message": "Fixing bugs in how I calculate errors in FEP, TI, Bennetts, fixed incorrect calculation\nof free energies in FEP and Bennetts and removed the use of taylor expansions in the\nfree energy calculations (they add too much noise!)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-16T11:08:37.766009Z", "commit": "2528", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-16T11:06:06.761491Z", "commit": "2527", "message": "Added the ability to sum only the raw free energy data in FEP and have\nfilled in stubs so that VolumeMap will compile\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-15T16:39:10.245659Z", "commit": "2526", "message": "I've fixed a bug when reading TIComponents when no components have been collected\nand have begun work to move the VolumeMap code from SireSystem::VolMapMonitor into \na dedicated SireMol::VolumeMap class (as volume maps are quite useful in themselves\noutside of the SystemMonitor framework)\n\nCode is broken as I have to go home ;-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-15T15:45:51.009555Z", "commit": "2525", "message": "enabled mixed precision mode", "author": "nividic73"}, {"date": "2014-04-15T15:25:20.149277Z", "commit": "2524", "message": "Fixed a small bug in the LSRC script\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-15T15:18:16.430571Z", "commit": "2523", "message": "Fixed bugs with the application of WindowedComponent constraints. These caused exceptions to be\nraised regarding unsatisfied constraints\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-15T13:36:45.826112Z", "commit": "2522", "message": "bugs fixed", "author": "nividic73"}, {"date": "2014-04-15T13:35:11.051383Z", "commit": "2521", "message": "fixed a bug in standard MD", "author": "nividic73"}, {"date": "2014-04-15T10:53:15.272483Z", "commit": "2520", "message": "Changes to support the new openmm6.0 features", "author": "nividic73"}, {"date": "2014-04-15T10:24:17.213260Z", "commit": "2519", "message": "update DCD writer and adding support to perform free energy calculation", "author": "nividic73"}, {"date": "2014-04-14T16:27:15.784729Z", "commit": "2518", "message": "Fixed a small problem with the python wrapper\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-14T15:54:52.828699Z", "commit": "2517", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-14T15:47:55.389003Z", "commit": "2516", "message": "I've moved GridInfo / GridIndex from SireMM to SireVol as it is better placed there,\nand I am beginning to use it a lot in the other Sire modules\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-14T15:12:45.174129Z", "commit": "2515", "message": "Committing small updates to the ligandswap module\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-14T15:11:49.682632Z", "commit": "2514", "message": "Fixed problems with application of constraints. With WindowedComponent, if the target value\nwas already set to the correct value previously, but changes, this constraint will not change\nit back to the correct value. This affected the FEP free energies in ligandswap for\nlambda = 0.995. Code is fixed\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-14T13:12:59.192075Z", "commit": "2513", "message": "Removed exception thrown if a molecule has no internal parameters\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-11T16:14:29.119363Z", "commit": "2512", "message": "added getPotentialEnergy()", "author": "nividic73@googlemail.com"}, {"date": "2014-04-11T16:05:39.382877Z", "commit": "2511", "message": "added getPotentialEnergy() function - code broken", "author": "nividic73"}, {"date": "2014-04-09T16:10:21.200925Z", "commit": "2510", "message": "Fixed bugs in the VolMapMonitor and DX writer. They both seem to work well, and I have\nsuccessfully created a volume map around a cluster of water molecules that visualises\nwell in VMD :-). I now need to test the monitoring capabilities via a simulation.\n\nCode compiles, links, runs and passes unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-09T14:54:37.485225Z", "commit": "2509", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-09T14:46:02.151281Z", "commit": "2508", "message": "I've added a VolMapMonitor class which will monitor the volume occupied by \natoms in space during a simulation. To write the resulting grids out into a format\nthat can be read by VMD, I've also added a DX grid writer class.\n\nCode needs to be debugged.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-08T14:22:10.426712Z", "commit": "2507", "message": "Fixed a bug that prevented analysis of the ligandswap simulations\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-08T10:52:17.930732Z", "commit": "2506", "message": "Debugging the ligandswap script. Initial energies look good and am now ready for\na ligand<=>ligand swap test (which should give a delta G of 0). Also updated the \nalign script to include a flag for matching light atoms\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-08T10:51:18.506228Z", "commit": "2505", "message": "Small update to fix the interpretation of the 'prematch' flag\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-08T10:13:36.868791Z", "commit": "2504", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-08T10:04:47.160423Z", "commit": "2503", "message": "I've modified the MCS matcher so that it can match hydrogens, and have updated\nthe API for AtomMatcher et al so that virtual overloading \"match\" doesn't block\npython wrapping of the other 'match' functions. To do this, I've had to make\n'match' non-virtual, and to have this call the virtual 'pvt_match' function\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-07T16:19:02.554924Z", "commit": "2502", "message": "Working on the ligandswap script. The two systems have been loaded and the simulation \nis able to progress... Still likely to be buggy and incorrect however! ;-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-04-01T10:03:59.904987Z", "commit": "2501", "message": "Updated the align script so that the match can be modified by specifying atom matches\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-31T16:13:50.855493Z", "commit": "2500", "message": "Added in proper support for user-supplied matching in FindMCS. This forces the MCS algorithm\nto only return matches that include the mapping supplied by the user\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-31T16:13:13.614898Z", "commit": "2499", "message": "Added in wrappers for QHash containers needed by AtomIDMatcher\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-31T15:39:46.656112Z", "commit": "2498", "message": "Adding in updated boost headers that includes the boost::graph code used in findMCS\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-31T15:36:17.150856Z", "commit": "2497", "message": "Python wrapper for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-31T15:31:38.768316Z", "commit": "2496", "message": "Added conversion from QHash to match for AtomIDMatcher\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-31T09:26:14.266829Z", "commit": "2495", "message": "Python wrappers for the last commit\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-31T09:19:26.208580Z", "commit": "2494", "message": "Committing the fixed align code, with an LSRC that at least compiles...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-31T09:18:38.970410Z", "commit": "2493", "message": "I've moved most of the AtomMatcher classes to atommatchers.h/.cpp to reduce dependencies\nin the rest of the code. I've also fixed bugs such that alignment seems to work, even\nfor complex cases (e.g. peramivir on top of oseltamivir)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-27T13:58:11.305227Z", "commit": "2492", "message": "test submission", "author": "nividic73"}, {"date": "2014-03-27T13:13:15.648416Z", "commit": "2491", "message": "test submission VM", "author": "nividic73@googlemail.com"}, {"date": "2014-03-27T13:09:46.661942Z", "commit": "2490", "message": "Test submission from VM", "author": "nividic73@googlemail.com"}, {"date": "2014-03-27T11:02:56.249747Z", "commit": "2489", "message": "Code updates and bugfixes needed to get the align script to work\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-27T11:02:29.994550Z", "commit": "2488", "message": "Added a 'transform' script for translating and rotating molecules from the command line.\nUpdated the 'align' script so that it now works ;-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-26T11:34:18.751558Z", "commit": "2487", "message": "python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-26T11:29:54.360615Z", "commit": "2486", "message": "Added in AtomMatchInverter so that the atom matching occurs the right way round \nfor mol.move().align() and have added a 'timeout' parameter to AtomMCSMatcher\nso that we can limit how long we will need to wait\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-26T11:23:32.086302Z", "commit": "2485", "message": "Added a script to align molecules\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-25T17:58:49.488625Z", "commit": "2484", "message": "Python wrappers including the rmsd function\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-25T17:54:53.595814Z", "commit": "2483", "message": "I've updated and nearly finished the alignment code. In creating this I noticed\nthat my matrix was actually performing matrix multiplication with the *transpose*\nof the correct matrix! This has not been a problem before as I have been using\nrandom rotations, but is obviously a problem for alignment. I have fixed the problem\nand have added a unit test in the python wrappers to check for this in the future.\n\nI have also added code to evaluator to calculate RMSDs\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-25T17:53:23.207312Z", "commit": "2482", "message": "Added in some unit tests to check that my matrix and quaternion rotations are\nbehaving, and that I can safely transform between matrices and quaternions\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-24T18:09:50.014894Z", "commit": "2481", "message": "Fixed a compile bug. Now everything compiles and links.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-24T17:30:32.393022Z", "commit": "2480", "message": "Fixed problems wrapping the \"transform\" functions\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-24T15:29:02.068737Z", "commit": "2479", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-24T15:23:24.184786Z", "commit": "2478", "message": "python wrapper help\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-24T15:18:18.436140Z", "commit": "2477", "message": "Committing code that compiles - this merges in \"Transform\" to all of the coords\nand movement classes\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-24T14:49:54.349675Z", "commit": "2476", "message": "Fixing bugs in Mover::align by adding in a special \"Transform\" class that can be used\nto hold all of the information about a geometric transformation\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-21T18:29:15.528405Z", "commit": "2475", "message": "Updated wrappers\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-21T18:21:35.464437Z", "commit": "2474", "message": "Fix to generation of mover wrappers\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-21T17:55:34.679402Z", "commit": "2473", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-21T17:51:45.164319Z", "commit": "2472", "message": "Updated the API of Mover and added some alignment utility functions\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-21T17:24:55.638367Z", "commit": "2471", "message": "Committing additional python-wrapped containers\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-21T17:24:34.490767Z", "commit": "2470", "message": "Got the alignment code working. Now integrating with Mover so that I can have\n\nmol = mol.move().align(other).commit()\n\n:-)\n\nCode is untested...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-21T15:51:59.485526Z", "commit": "2469", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-21T15:44:41.725030Z", "commit": "2468", "message": "I've updated the Matrix API to support the needs of \"align\"\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-21T14:23:19.458523Z", "commit": "2467", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-21T14:21:10.179651Z", "commit": "2466", "message": "Working on the alignment code needed to align the two ligands for ligandswap\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-20T17:19:02.081079Z", "commit": "2465", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-20T17:14:28.694259Z", "commit": "2464", "message": "Allowing automatic conversion from boost::tuple to AtomIDMatcher...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-20T17:01:34.989298Z", "commit": "2463", "message": "Merging the MCS code with AtomMatcher, as this seems like the logical place for it to exist\n(especially as AtomMatcher is used for alignment). Also updated the API of AtomMatcher\nand added in AtomIDMatcher for limited ID matching and AtomMultiMatcher so that AtomMatches\ncan be combined together\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-20T12:02:12.704957Z", "commit": "2462", "message": "svn commit test\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-20T12:00:37.663259Z", "commit": "2461", "message": "Committing my progress on ligandswap. Code is still in development...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-20T12:00:30.215517Z", "commit": "2460", "message": "I'm in the process of adding in a function to find the maximum common substructure\nusing boost::graph. The code is working but I need to add some of the boost\nheader files that are missing from boost::graph to the bundled boost directory,\nso this will not yet compile elsewhere.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-18T12:13:33.823791Z", "commit": "2459", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-18T11:59:27.822339Z", "commit": "2458", "message": "A lot of changes so that Class::update(molecule) or Class::update(molecules) changes to\nClass::update(molecule, bool auto_update=true) and Class::update(molecules, bool auto_update=true).\n\nThis will ensure that the default behaviour of the old code (no partially-updated groups\nand forcefields) is preserved for older code that is unaware of the time-savings \n(and danger) of partial updates. Now, the user will have to explicitly ask for partial\nupdating, and so should be aware of the limitations.\n\nAll compiles but need to generate python wrappers\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-17T16:06:53.975008Z", "commit": "2457", "message": "Making progress writing the ligandswap code...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-17T12:17:43.423114Z", "commit": "2456", "message": "I'm beginning work on the ligandswap script. The ligandswap script is still work in progress...\n\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-17T11:10:46.302256Z", "commit": "2455", "message": "Test Xcode commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-17T10:50:41.632170Z", "commit": "2454", "message": "Fixed a compile bug and some compile warnings when using LLVM 5.1 from Xcode 5.1\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-17T10:49:40.565232Z", "commit": "2453", "message": "Fixed a compile bug and some compile warnings when using LLVM 5.1 with Xcode 5.1\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-14T18:47:27.393858Z", "commit": "2452", "message": "Code has been fixed and tested. The changes increase the speed on my macbook air\nto a smidge under 4000 moves per second :-). The new code is now cleanly twice\nas fast as the old\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-14T18:23:26.275401Z", "commit": "2451", "message": "Added in a workspace class for MoleculeGroup so that molecule updates can be cached,\npreventing needless allocation/deallocation during MC moves. Code is now compiling\nand is untested\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-14T11:17:12.770277Z", "commit": "2450", "message": "I've got the memory pool for the CLJWorkspace working so that now CLJWorkspaces are not\ncreated or destroyed during MC moves. The solution uses thread-local storage to provide\na per-thread pool of CLJWorkspaceData objects that are pushed and pulled from a stack\nas needed. With this, I am now running at over 3000 MC moves per second :-). I think\nthat a similar solution for MoleculeGroup will further speed up the move delta code.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-14T00:15:43.122782Z", "commit": "2449", "message": "test2", "author": "nividic73"}, {"date": "2014-03-14T00:15:08.579016Z", "commit": "2448", "message": "test", "author": "nividic73"}, {"date": "2014-03-13T17:40:35.347103Z", "commit": "2447", "message": "I've got the OpenMMMD.py tools working and have created the 'sommmd' executable\nto run simple MD\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-12T17:37:48.357455Z", "commit": "2446", "message": "Committing the beginning of our work to create the OpenMMMD.py helper library\nin time for sommmd\n\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-12T17:36:40.661154Z", "commit": "2445", "message": "Fixed the bug so that the free energy code now works with OpenMM 6 on OpenCL :-)\n\nThe problem was that the OpenCL driver did not set the dimensions of the periodic\nbox correctly as we needed to (a) set the default box dimensions in openmm_system\nand (b) need to set the box dimensions and call \"reinitialize()\" before we set\nthe atom coordinates.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-11T16:17:20.276622Z", "commit": "2444", "message": "Updated DCDFile to stop writing a PDB and also changed the test to use the CPU platform\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-11T14:42:56.017111Z", "commit": "2443", "message": "Cleaning up the code and matching to the devel branch\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-11T14:34:43.883209Z", "commit": "2442", "message": "Fixed bugs caused by misordering of molecules when writing the DCD file\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-11T14:13:56.851128Z", "commit": "2441", "message": "Moved the DCD writing code into its own module\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-11T11:46:40.790539Z", "commit": "2440", "message": "Here is the first OpenMM unit test to show that the Sire and OpenMM energies are equal.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-11T11:35:59.323364Z", "commit": "2439", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-11T11:32:25.559890Z", "commit": "2438", "message": "Updated the openmm api so that we can get the energy of the context\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-11T10:48:39.011249Z", "commit": "2437", "message": "Updated create_wrappers.py so that it knows how to create the openmm wrappers and have wrapped\nup the new api for OpenMMMDIntegrator\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-11T10:47:21.364783Z", "commit": "2436", "message": "Updated the python wrappers for Amber and have created space for some OpenMM unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-11T10:44:46.945924Z", "commit": "2435", "message": "Merged back the devel Amber class and have added the ability to extract the total\npotential energy from OpenMMMDIntegrator\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-10T17:20:59.965727Z", "commit": "2434", "message": "Removed the, now unused, Siren library\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-10T16:35:08.920783Z", "commit": "2433", "message": "Regenerated OpenMM wrappers with openmm on the generating machine. Saved the wrappers when openmm is not\navailable into NoOpenMM\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-10T16:08:15.153120Z", "commit": "2432", "message": "Made sure that the wrappers include OpenMM\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-10T15:29:44.840399Z", "commit": "2431", "message": "Added the missing TitrationMove and Titrator classes to CMakeLists.txt\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-10T15:23:27.550889Z", "commit": "2430", "message": "Restored OpenMMIntegrator...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-10T15:19:30.286521Z", "commit": "2429", "message": "Adding back in the OpenMM source and header files in SireMove\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-10T14:44:37.974961Z", "commit": "2428", "message": "Fixing some errors when compiling the python wrappers\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-10T14:30:17.548968Z", "commit": "2427", "message": "Fixed the python wrapper for EnergyTable\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-10T14:09:57.809828Z", "commit": "2426", "message": "Committing the updated python wrappers in Gaetano's branch\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-10T14:03:02.030826Z", "commit": "2425", "message": "Added in OpenMM to CMakeLists.txt and restored the tests directory\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-10T13:29:36.597438Z", "commit": "2424", "message": "Merged everything from the devel branch up to revision 2390 into Gaetano's branch. Still\nhave to check everything, but this appears to compile.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-10T13:20:18.828186Z", "commit": "2423", "message": "Created space for Gaetano's python 3 wrappers\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-07T18:19:03.339025Z", "commit": "2422", "message": "Fixed a python wrapper compile bug. Everything compiles, links, runs and \nall the unit tests pass\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-07T18:17:24.555574Z", "commit": "2421", "message": "Updated and fixed unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-07T18:10:53.540507Z", "commit": "2420", "message": "Python wrappers for hte last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-07T18:01:30.239878Z", "commit": "2419", "message": "Added in MolResID classes and added the code to allow InterFF to support multi-residue\nmolecules and to optimise adding and changing molecules.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-07T12:45:31.326567Z", "commit": "2418", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-07T12:34:41.169920Z", "commit": "2417", "message": "Fixed a compile bug...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-07T12:32:13.658333Z", "commit": "2416", "message": "Debugging the use of a workspace in InterFF. Also added a function \"needsAccepting\" that\ncomplements \"accept\" and allows a check of whether or not things needs accepting\nbefore copying and accepting them\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-07T11:05:29.884238Z", "commit": "2415", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-07T10:54:08.097903Z", "commit": "2414", "message": "Added an \"accept\" function that can be used to tell the system / moleculegroup / forcefield\nthat the last MC move has been accepted. This will support the use of workspaces that will\nprevent excessive copying of the system when performing small moves.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-06T18:09:52.945427Z", "commit": "2413", "message": "Fixed wrappers for CLJWorkspace\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-06T18:05:31.090408Z", "commit": "2412", "message": "Updates to allow the python wrappers to be correctly generated\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-06T17:52:30.116431Z", "commit": "2411", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-06T17:48:19.117018Z", "commit": "2410", "message": "Added in a CLJWorkspace to hold information about a change in atoms during a move\n(so minimising memory copies etc.). Integrated this with InterFF. All needs to be\npython wrapped and tested\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-06T14:40:05.686182Z", "commit": "2409", "message": "Got the QM and MM energies the wrong way around when setting the zero energy...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-06T14:22:10.658839Z", "commit": "2408", "message": "Fixed a small bug in the new analytic TI code\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-06T14:21:58.333064Z", "commit": "2407", "message": "Removed unnecessary print statements and updated default restart write rate for\nQuanToMM jobs\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-06T12:01:27.534039Z", "commit": "2406", "message": "Fixed some compile bugs in the wrappers\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-05T17:48:14.212675Z", "commit": "2405", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-05T17:43:18.098408Z", "commit": "2404", "message": "Updated TI so that it can work with pure, analytic TI gradients.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-05T17:17:28.116430Z", "commit": "2403", "message": "Added the option to completely freeze the ligand during a waterswap simulation.\n\nAlso added in the beginning of the \"quantomm\" program for automatically calculating\nQM/MM to MM correction free energies\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-03-05T17:15:05.413618Z", "commit": "2402", "message": "Fixed a small crash caused when getting the ensemble of an empty moves object\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-28T16:54:21.418766Z", "commit": "2401", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-28T16:51:44.714117Z", "commit": "2400", "message": "I've added functionality to calculate energies using the CLJDelta object. This needs to\nbe wrapped and unit tested\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-28T16:07:56.510721Z", "commit": "2399", "message": "Fixed a bug revealed by unit testing\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-28T16:07:45.731754Z", "commit": "2398", "message": "Updated the unit test to test applying the delta into the CLJBox\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-28T15:56:40.220165Z", "commit": "2397", "message": "Python wrappers for the last commit\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-28T15:40:37.353809Z", "commit": "2396", "message": "I've added code so that a CLJDelta can be applied to a CLJBox. Now to add unit tests...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-28T14:09:28.917718Z", "commit": "2395", "message": "Python wrappers for the last commmit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-28T14:04:45.958179Z", "commit": "2394", "message": "Filling in functionality in CLJDelta and preparing to write the unit test.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-28T11:55:04.428900Z", "commit": "2393", "message": "Fixed some small bugs caused by refactoring that were caught by unit testing. \nsire_test passes without problems on my macbook\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-28T11:20:26.419147Z", "commit": "2392", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-28T11:10:44.710815Z", "commit": "2391", "message": "I've optimised the memory layout of CLJBoxes (now store the boxes as a vector so it is \nquicker to iterate over, and will work better with the new CLJDelta class).\n\nI've also begun adding a CLJDelta class that will optimise memory management when\ncalculating changes in energies in moves\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-26T17:44:43.283020Z", "commit": "2390", "message": "Updated InterFF to have a 'fixed atom only' mode, and have cleaned up CLJBoxes so that\nit is easier for me to change the type of container used to store the boxes.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-26T17:44:10.444892Z", "commit": "2389", "message": "Updated unit tests to include a test of the grid/fixed only functionality of InterFF\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-26T16:09:50.156487Z", "commit": "2388", "message": "Added some more debugging to exception, and added some code to fix the behaviour of\nAmber() when it reads charmm-format topology files. The files still can't be read,\nand reading them causes a segfault, but at least now the molecules are built (a little)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-26T16:08:27.407946Z", "commit": "2387", "message": "Adding some debugging code when wrapping exceptions. I've noticed that exceptions\nthrown in the Amber object in Python cause a segfault.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-25T17:46:48.432478Z", "commit": "2386", "message": "Unit testing found that GridFF2 doesn't work. Switched to GridFF for comparison with\nInterFF.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-25T17:28:52.831244Z", "commit": "2385", "message": "Working on optimising and testing the integration of CLJGrid with InterFF\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-25T17:28:05.189853Z", "commit": "2384", "message": "Modified the unit test to include the grid and reflection sphere. The code is so slow...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-25T12:38:52.315598Z", "commit": "2383", "message": "Adding in optimisations and shortcuts in an attempt to speed up the simulation.\nThe new code is faster than the old, but not by as much as I want\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-25T11:23:27.817403Z", "commit": "2382", "message": "Unit test updated to test CLJBoxes calculation with CLJFunction\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-25T11:13:59.733458Z", "commit": "2381", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-25T11:02:34.912110Z", "commit": "2380", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-25T10:59:26.702600Z", "commit": "2379", "message": "Added additional functionality to CLJFunction so that it can calculate energies using\nCLJBoxes\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-24T17:51:06.875571Z", "commit": "2378", "message": "I've changed \"update\" so that it doesn't take a copy before updating. This removes\nsome safety but it stops lots of copying in most of the moves.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-24T17:50:23.245949Z", "commit": "2377", "message": "Slight update to the unit test. InterFF is passing the test and is not too slow now\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-24T17:25:05.932534Z", "commit": "2376", "message": "Here are the bugfixes and optimisations needed to get InterFF working.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-24T17:24:42.816044Z", "commit": "2375", "message": "Committing the unit test I am using to debug and profile InterFF (which is working,\nbut is too slow!)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-23T18:02:19.623891Z", "commit": "2374", "message": "Commit of the updated wrappers\n", "author": "julienmich@googlemail.com"}, {"date": "2014-02-23T18:01:38.731832Z", "commit": "2373", "message": "Modified the code to make EnergyTable work with distance restraints. \n\n", "author": "julienmich@googlemail.com"}, {"date": "2014-02-21T17:32:48.587519Z", "commit": "2372", "message": "Beginning of the unit test for InterFF. It is much faster, but gives the wrong \nanswer and is slower for adding and updating than I want\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-21T17:32:12.867042Z", "commit": "2371", "message": "Beginning to debug and test...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-21T17:11:58.219052Z", "commit": "2370", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-21T17:06:02.525975Z", "commit": "2369", "message": "I've filled in nearly all of the functionality of InterFF. This all needs to be wrapped and\ntested. I foresee a week of debugging and optimising ahead...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-21T15:17:04.619899Z", "commit": "2368", "message": "Fixed small problem when running the test as part of sire_test\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-21T15:09:09.156898Z", "commit": "2367", "message": "Here is the unit test...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-21T15:07:53.395947Z", "commit": "2366", "message": "Fixed the bugs when adding a molecule to a box (as tested in the unit test about\nto be committed)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-20T18:54:47.391973Z", "commit": "2365", "message": "I am debugging adding atoms to CLJBoxes. The code is working a bit, but is not\npassing all of my tests (in last committed unit tests)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-20T18:54:15.519387Z", "commit": "2364", "message": "Committing the unit test that I am using to debug the adding of atoms to CLJBoxes\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-20T18:36:15.045428Z", "commit": "2363", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-20T17:59:15.133940Z", "commit": "2362", "message": "Debugging the new CLJBox/es code, and added functions to retrieve a CLJAtom from\na CLJBox / CLJBoxes using an index or CLJBoxIndex\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-20T16:55:49.948913Z", "commit": "2361", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-20T16:50:33.592536Z", "commit": "2360", "message": "Adding in functionality to CLJBoxes / CLJAtoms so that atoms can be added and removed\nfrom boxes, with the indexes of the atoms recorded (allowing for rapid removal)\n\nNeeds to be python wrapped and tested\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-20T10:37:24.438486Z", "commit": "2359", "message": "Added a unit test that ensures that negating a set of CLJAtoms works, and that \ncalculating the energy of a set of CLJAtoms with its negative gives an energy of zero\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-20T10:24:54.793703Z", "commit": "2358", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-20T10:20:20.783843Z", "commit": "2357", "message": "Optimised the MultiFloat negation operator and added a function to get the negative\nof a group of CLJAtoms (this will allow optimised calculations of energy differences)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-19T17:32:11.484927Z", "commit": "2356", "message": "Fixed a runtime bug picked up by the unit tests whereby implicit conversion\nof the Length type to LengthProperty resulted in infinite recursion\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-19T17:14:25.074039Z", "commit": "2355", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-19T17:04:19.133387Z", "commit": "2354", "message": "I've begun work on the intermolecular CLJ forcefield (InterFF). In doing this I have had\nto add functions to CLJFunction to cope with setting and getting properties of the\nenergy function (hence added in a LengthProperty class). InterFF is complete, although\ncompletely functionally useless ;-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-19T15:00:38.178699Z", "commit": "2353", "message": "Update to add in an ID number for fixed atoms, to add code to ensure that dummy and\natoms with IDs equal to fixed atoms are ignored in the grid calculation and also\nadded the code to support periodic boundaries in the grid. All of this is working,\noptimised and unit tested :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-19T14:59:24.102138Z", "commit": "2352", "message": "Committing unit test that includes test for grids built using periodic boundaries\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-19T11:33:43.274082Z", "commit": "2351", "message": "Fixed a broken unit test\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-19T11:30:26.937834Z", "commit": "2350", "message": "Here is the updated unit test that ensures that the CLJGrid function\nis behaving correctly\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-19T11:30:04.125932Z", "commit": "2349", "message": "I've found the bug - I did not realise that the SSE/AVX integer multiplies \nonly multiplied half of the 32bit integers to give the 64bit results. I have \nupdated MultiInt so that the multiplication is performed manually.\n\nEverything is now working and the code is pretty fast :-)\n\nGRID  2:  -47.57409639941761  -53.465994983911514  5.891898584493902  (0.06369799999999999 ms)\nNO GRID:  -47.57338641530754  -53.46528499980144  5.891898584493902  (0.142954 ms)\nEXACT  :  -47.57338641530754  -53.46528499980144  5.891898584493902  (0.144115 ms)\nOLD    :  -47.573341982149756  -53.46525254843689  5.891910566287131  (1.5694009999999998 ms)\n\n(note vectorised code looks minutely slower as the non-vectorised code was\nnot testing if the atoms were within the grid)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-18T17:46:35.064543Z", "commit": "2348", "message": "I've tracked down the problem to the vectorised grid energy code... I've replaced\nthis with a non-vectorised version (which now works and agrees with the exact \ncalculation). I will need to debug the vectorised code to work out if this\nbug was due to something deeper in MultiFloat etc., or whether it was just\nme making a mistake when I wrote the vector version of pointToGridCorners\n\nAs as aside, here are the timings for the new CLJGrid energy :-)\n\nGRID  2:  -47.57409733950016  -53.465995923994065  5.891898584493902  (0.049217 ms)\nNO GRID:  -47.57338641530754  -53.46528499980144  5.891898584493902  (0.147337 ms)\nEXACT  :  -47.57338641530754  -53.46528499980144  5.891898584493902  (0.15206699999999998 ms)\nOLD    :  -47.72719650981324  -53.465252548436986  5.738056038623743  (1.207195 ms)\n\nThe energy has gone down from the old code (1.2 ms, to the new, grid code (0.05 ms).\n\nThis is quite a significant speed up :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-18T17:44:13.738270Z", "commit": "2347", "message": "Updated unit test that I have been using to debug the CLJGrid energy function\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-18T16:52:01.538314Z", "commit": "2346", "message": "Python wrappers for the last commit (to help dubugging!)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-18T16:46:54.161521Z", "commit": "2345", "message": "I am debugging the CLJGrid class as the grid energy is not correct...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-18T12:15:44.297852Z", "commit": "2344", "message": "Updated MultiInt/MultiFloat to use SSE4 for integer multiplication\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-18T11:53:27.904186Z", "commit": "2343", "message": "I've moved the parallel code into CLJFunction and have optimised the grid calculation in \nCLJShiftFunction (now twice as fast as the optimised GridFF2 and about 15 times faster\nthan the original GridFF)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-17T18:31:37.717752Z", "commit": "2342", "message": "I've added in the code to fully calculate grid energies and am in the process\nof parallelising and testing the code\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-17T18:31:12.548568Z", "commit": "2341", "message": "Adding in some unit tests for the new code\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-17T16:07:04.326695Z", "commit": "2340", "message": "Fixed python wrapper compile bugs\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-17T16:01:53.719965Z", "commit": "2339", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-17T15:58:51.406848Z", "commit": "2338", "message": "Fixed small bugs in the definition of boxes and added functions to get the \ncoordinates of each grid point\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-17T15:48:45.951999Z", "commit": "2337", "message": "Python wrapper for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-17T15:42:37.106586Z", "commit": "2336", "message": "I've moved the tri-linear interpolation code into GridInfo and have added a vectorised\nversion of the algorithm\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-17T12:12:04.353207Z", "commit": "2335", "message": "Working on adding functionality to GridInfo...\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-17T11:10:38.829976Z", "commit": "2334", "message": "Fixed compile bug with GridInfo\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-17T10:49:23.517961Z", "commit": "2333", "message": "Python wrappers for the last commits\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-17T10:41:37.762612Z", "commit": "2332", "message": "Adding streaming operators to GridIndex\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-14T14:20:18.177979Z", "commit": "2331", "message": "I've updated and finished the code for CLJGrid. It all compiles and links. I will \nneed to update the python wrappers to include the new code...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-14T12:20:47.865755Z", "commit": "2330", "message": "I've finished off the GridInfo/GridIndex classes and have updated CLJGrid to use them.\nEverything seems to compile but it all needs testing and finishing.\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-13T17:20:51.414108Z", "commit": "2329", "message": "Building a CLJGrid object that will use CLJFunctions to calculate energies using\na grid (replacement for GridFF and GridFF2). This will be built into all forcefields\nso that I don't need to have separate grid- and non-grid forcefields (as this makes\nthe resulting energy expressions really painful, especially for such a simple\nand sometimes tiny optimisation!)\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-12T17:16:32.708225Z", "commit": "2328", "message": "Units tests included for intramolecular geometric combining rules\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-12T17:16:09.088325Z", "commit": "2327", "message": "Added in geometric combining rules for the intramolecular energies.\nAll unit tested and all correct :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-12T17:02:26.940819Z", "commit": "2326", "message": "Unit tests for geometric combining rules\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-12T17:01:43.331840Z", "commit": "2325", "message": "Added in all of the geometric combining rules intermolecular energies\nwith associated unit test (all passed)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-12T16:35:25.316061Z", "commit": "2324", "message": "Here is the updated unit test\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-12T16:35:13.899612Z", "commit": "2323", "message": "Added in the code for periodic boundaries support for intramolecular calculations. This\nis unit tested (unit test in next commit) and works :-). And is very fast.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-12T15:29:34.513449Z", "commit": "2322", "message": "Updated the tests for the new inter and intramolecular energy functions. Made them\ninto proper tests and have checked that sire_test has all tests pass on my macbook\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-12T12:18:45.113738Z", "commit": "2321", "message": "Here is the timing and unit test script\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-12T12:18:22.300177Z", "commit": "2320", "message": "I've fixed the bugs in the periodic boundaries version of CLJFunction and have\ncode now that is very fast compared to the original :-)\n\nVacuum boundary conditions\nOLD: -20798.715216502675  -24208.43612722678  3409.7209107241083  148.843717 ms\nNEW: -20798.716843382957  -24208.435475442242  3409.7186320592846  69.205522 ms\nBOX: -20798.716843382936  -24208.43547544222  3409.7186320592846  19.725652 ms\n\nPeriodic box boundary conditions\nOLD: -23626.215067800073  -27244.51680654721  3618.3017387471377  292.450163 ms\nNEW: -23626.21594117391  -27244.51287413524  3618.2969329613297  107.070025 ms\nBOX: -23626.215941173938  -27244.512874135267  3618.2969329613297  55.433907999999995 ms\n\nGroup Vacuum boundary conditions\nOLD: -167.38332965416353  -191.46433947055957  24.081009816396023  1.67947 ms\nNEW: -167.38351001453188  -191.464498922984  24.080988908452127  0.554539 ms\nBOX: -167.38351001453188  -191.464498922984  24.080988908452127  0.341781 ms\n\nGroup Periodic box boundary conditions\nOLD: -191.08093521097652  -215.83191565094342  24.75098043996691  2.8477799999999998 ms\nNEW: -191.08109450552442  -215.83205639603042  24.750961890506005  0.88747 ms\nBOX: -191.08109450552442  -215.83205639603042  24.750961890506005  0.703114 ms\n\n(output from test_newinter.py, which will be committed next)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-11T17:21:50.084757Z", "commit": "2319", "message": "Here is that unit test...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-11T17:21:37.408113Z", "commit": "2318", "message": "I've added in the code to calculate energies with periodic boundaries, but while\nthe energy using a single CLJAtoms object is correct, the one using \na set of CLJBoxes is not... (offending unit test update committing next..)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-11T15:07:22.433016Z", "commit": "2317", "message": "Optimised the abs function by moving the mask into static const space\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-11T14:53:38.091141Z", "commit": "2316", "message": "Added a quick test of the abs function\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-11T14:44:11.760389Z", "commit": "2315", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-11T14:41:33.438178Z", "commit": "2314", "message": "Fixed some small compile bugs in MultiFloat and MultiUInt\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-11T14:37:34.287569Z", "commit": "2313", "message": "Added an \"abs\" function to MultiFloat\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-11T13:59:40.168826Z", "commit": "2312", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-11T13:50:41.706063Z", "commit": "2311", "message": "Added a unit test for the QElapsedTimer\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-11T12:04:25.536361Z", "commit": "2310", "message": "I've added code to calculate only the coulomb and LJ energies and have also\ngenerally debugged the energy functions\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-11T12:03:44.190160Z", "commit": "2309", "message": "Adding in wrappers for QElapsedTimer (a nanosecond timer!) and added a new unit\ntest for the intermolecular energy CLJ functions.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T18:21:41.270912Z", "commit": "2308", "message": "Here's the python script that can be used for timing.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T18:21:23.851320Z", "commit": "2307", "message": "Yes, that did it - the energy calculation has fallen to 16 ms, which is close to the \ntime for the calculation without the non-bonded test :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T18:18:04.769360Z", "commit": "2306", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T18:15:24.275140Z", "commit": "2305", "message": "I've added the ability to pass the minimum distance to the CLJFunctions, so that\nthe intramolecular code can use this to work out if it needs to test if the atoms\nare bonded together\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T17:57:41.853770Z", "commit": "2304", "message": "I've slightly optimised the code to discover if two sets of CLJAtoms are bonded\nor not. The calculation now takes about 22 ms compared to over 340 ms for the \noriginal code.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T17:19:31.083741Z", "commit": "2303", "message": "I've added code to find water molecules that overlap with the ligand to see if this is \na better way of finding the identity points.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T16:28:42.685425Z", "commit": "2302", "message": "I've added an option to fix the identity points so that they don't move with the \nligand during a waterswap calculation\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T16:08:26.382771Z", "commit": "2301", "message": "The intramolecular energy function is definitely working and is about 20 times faster\nthan the old code on my macbook air :-)\n\nI've also fixed a bug in the WSRC code where the random order of the keys in a python 3\ndictionary was causing the identity points algorithm to return a random set of identity\npoints\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T15:41:58.361157Z", "commit": "2300", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T15:37:02.018158Z", "commit": "2299", "message": "The intramolecular CLJ function appears to be working. As it doesn't calculate\nthe 14 energies, I have had to update Amber so that I can set the 14 scale factors\n(which I will set to 0) so that I can test it. As I was updating Amber, I have\nalso changed it to return a MoleculeGroup rather than Molecules object\n(to solve all of the 'order of molecules' problems)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T12:14:44.797127Z", "commit": "2298", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T12:11:39.611573Z", "commit": "2297", "message": "Updated CLJIntraFunction and CLJIntraShiftFunction to use the new Connectivity functions\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T11:53:46.556109Z", "commit": "2296", "message": "Here are the python wrappers together with unit tests for the new connectivity functions\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T11:53:19.637695Z", "commit": "2295", "message": "I've got all of the bond matrix functions working, optimised and tested\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T11:23:26.626305Z", "commit": "2294", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T11:20:17.267338Z", "commit": "2293", "message": "Adding in functions to test if atoms are in bonds, angles or dihedrals\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T10:49:35.779489Z", "commit": "2292", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-10T10:38:54.162215Z", "commit": "2291", "message": "I'm working on finding ways of speeding up the intramolecular evaluation. I've added\ncode to Connectivity to build bond matricies.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-06T18:14:09.279503Z", "commit": "2290", "message": "I've added a wrapper for tuple<double,double>, have moved the TBB initialisation\nto python/main.cpp and have added some more code to the unit test for the new\nintramolecular energy function\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-06T18:13:06.659471Z", "commit": "2289", "message": "The CLJIntraShiftFunction is now working and giving the same energy as the \nIntraCLJFF forcefield. However, when doing this I noticed that in IntraCLJPotential\nI had deliberately not applied to cutoff to the 1-4 interactions. I think that this\nis not a good choice, so I have now applied the cutoff to all intramolecular\ninteractions, including the 1-4. This will slightly change the intramolecular\nCLJ energy calculated by Sire if using the shift_electrostatics or reaction_field\ncutoffs.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-06T14:31:16.762106Z", "commit": "2288", "message": "I've accelerated the code to get the nonbonded pairs into the CLJIntraFunction\n(now takes less than a second instead of hours!) and have slightly optimised\nthe loading of pairs in Amber.\n\nI will likely rewrite the pairs or make Amber() give me new style pairs\nas the ones optimised for access by CutGroup are extremely inefficient\nfor any other form of access.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-06T12:15:48.046658Z", "commit": "2287", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-06T12:02:57.034109Z", "commit": "2286", "message": "I've refactored CLJIntraScaleFunction to bring out the parts common for intramolecular\ncalculations into CLJIntraFunction. I've filled in the code to extract the non-bonded\nscale factors from CLJNBPairs and have updated the energy code to use these factors.\nHopefully it is now all working... Just need to update the python wrappers and write\nsome unit tests to be sure.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-06T10:40:03.666686Z", "commit": "2285", "message": "Adding in unit test for CLJIntraShiftFunction\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-06T10:39:44.478135Z", "commit": "2284", "message": "Fixed compile bug in the CLJIntraShiftFunction\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-04T17:38:12.991493Z", "commit": "2283", "message": "I've added in most of the code to calculate intramolecular energies. It all needs to be \ndebugged, and I also have to write the code to generate the hash of intramolecular\ninteratomic non-bonded scale factors\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-04T17:06:53.890062Z", "commit": "2282", "message": "Fixed a small bug where the cutoff distances were not being correctly recorded \nin CLJCutoffFunction\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-04T16:53:34.244390Z", "commit": "2281", "message": "Fixed a python wrapper compile bug\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-04T16:43:20.908972Z", "commit": "2280", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-04T16:39:37.402618Z", "commit": "2279", "message": "I've refactored the CLJ energy functions so that I can add a CLJIntraShiftFunction\nto calculate intramolecular energies\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-04T14:15:16.949170Z", "commit": "2278", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-04T14:10:45.319077Z", "commit": "2277", "message": "Added code to set IDs in CLJAtoms from AtomIdx. This will allow calculation\nof the intramolecular non-bonded terms\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-03T17:31:18.546564Z", "commit": "2276", "message": "Added the code to parallelise energies where the function doesn't have a cutoff.\n\nAlso played around with the grain size and saw that it didn't make much difference.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-03T17:03:39.000709Z", "commit": "2275", "message": "Fixed the weird CLJ bug. It was caused by a small miscalculation of whether\nI can discard a box pair based on only the sum of the integer delta values.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-03T15:58:20.510668Z", "commit": "2274", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-03T15:57:51.385803Z", "commit": "2273", "message": "Fix to generate the python wrappers...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-03T15:46:09.384552Z", "commit": "2272", "message": "I've added in the parallel code for the inter-group calculation. This all works\nreally well for lots of different cutoffs, but there is a discrepancy in the energy\nwhen the cutoff is 50 A / 50 A... Very strange.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-02-03T12:14:04.960211Z", "commit": "2271", "message": "I've optimised the code to test if CLJBoxes are within cutoff (and to calculate\ntheir minimum distances), and have added a CLJCalculator class that will handle\nall of the parallelisation of calculating CLJBox energies.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-31T15:37:52.546571Z", "commit": "2270", "message": "md integrator update", "author": "nividic73@googlemail.com"}, {"date": "2014-01-30T16:37:14.343549Z", "commit": "2269", "message": "new update MD integrator", "author": "nividic73@googlemail.com"}, {"date": "2014-01-30T11:57:33.130919Z", "commit": "2268", "message": "update to the standard MD integrator", "author": "nividic73@googlemail.com"}, {"date": "2014-01-30T10:49:51.857156Z", "commit": "2267", "message": "Added in the code to test a parallel implementation of the nonbonded energy calcualtion\nusing intel's threaded building blocks. Really easy to use and immediate 2x speed up\ncompared to the single-core code. All get the same energy, with original Sire code\ntaking 81 ms, the new serial Sire code taking 11.3 ms, and the test parallel code\ntaking 5.7 ms.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-29T15:40:05.506711Z", "commit": "2266", "message": "I've run a quick test of the boxed CLJ energy calculation and it is extremely quick\non my mac (about 1 ms for the swap-cluster/water box energy, and 11 ms for the \nwater box intermolecular energy (compared to 71 ms for the original InterCLJFF\ncalculation). \n\nImportantly, this has sped up by 4-5 times the new CLJ energy, as now the cutoff\nblocks out huge chunks of the CLJ atoms, rather than every CLJ atom needing to\nbe considered.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-29T15:12:58.117786Z", "commit": "2265", "message": "Python wrappers with the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-29T15:08:33.033763Z", "commit": "2264", "message": "I've added in the code to generate the work list for the CLJBoxes CLJ calculation\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-29T12:08:37.840260Z", "commit": "2263", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-29T12:05:37.122853Z", "commit": "2262", "message": "Added a CLJBoxDistance class to store distances between boxes. This will be used\nwhen creating the task list of box-pairs whose non-bonded interactions need\nto be evaluated\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-29T11:43:36.764894Z", "commit": "2261", "message": "Added some unit tests for the space AABox distance functions\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-29T11:24:30.599045Z", "commit": "2260", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-29T11:19:57.875246Z", "commit": "2259", "message": "Fixed a bug in the AABox withinDistance function (failed for overlapping boxes), and\nhave added a getMinimumDistance function to the spaces so that I can work out which\nAABoxes are within cutoff, and so should be included in the non-bonded calculation.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-28T13:46:41.369317Z", "commit": "2258", "message": "Update the total energy after MD moves and added NaN support", "author": "nividic73@googlemail.com"}, {"date": "2014-01-27T17:11:20.706758Z", "commit": "2257", "message": "I've fixed bugs in CLJBoxIndex (as tested by the last committed unit test) and have\noptimised the code to box up atoms a little. So far, boxing atoms takes about the same\namount of time as converting them from Molecules to CLJAtoms\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-27T17:09:36.398027Z", "commit": "2256", "message": "Added a unit test for the CLJBoxIndex class (used to work out in which box each atom\nis located)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-27T15:30:04.790987Z", "commit": "2255", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-27T14:54:18.660168Z", "commit": "2254", "message": "I'm working on filling in the API and debugging the CLJBoxes classes...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-24T17:40:06.528047Z", "commit": "2253", "message": "Python wrappers for the new CLJBox* classes\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-24T17:39:50.502793Z", "commit": "2252", "message": "Fixes to allow python wrappers to compile\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-24T17:22:34.593677Z", "commit": "2251", "message": "Starting work on the CLJBoxes and related classes that will be used to partition\natoms in space, thereby allowing the non-bonded cutoff to significantly improve\nthe efficiency of the calculation\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-24T12:54:33.561772Z", "commit": "2250", "message": "Adding functions to allow quick addition of CLJAtom objects to CLJAtoms collections\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-24T12:24:06.007548Z", "commit": "2249", "message": "Committing the python wrappers, including wrapping CLJAtom\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-24T12:23:35.948554Z", "commit": "2248", "message": "Fixes to aid python wrapping\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-24T11:48:21.464726Z", "commit": "2247", "message": "Optimised the code for converting molecules to CLJAtom/CLJAtoms objects (4 times faster!).\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-23T17:30:56.744144Z", "commit": "2246", "message": "Updated the python wrappers for the updated Multi* API\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-23T17:25:04.409009Z", "commit": "2245", "message": "Cleaned up the API of the Multi* classes and have made MultiUInt and mirror of MultiInt\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-23T14:54:11.640435Z", "commit": "2244", "message": "I've added a first pass at calculating the intermolecular CLJ energy of a group\nof molecules using MultiFloat/MultiInt. The result is about 8 times faster than\nthe equivalent in InterCLJFF and gives the same result :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-23T12:26:05.822693Z", "commit": "2243", "message": "Fixed a small bug in the AVX2 MultiInt code (missing < comparison!)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-23T12:02:46.302537Z", "commit": "2242", "message": "Cleaned up the Multi* classes and added AVX2 support to MultiInt (with detection\ncode added to the CMakeLists.txt file) \n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-23T10:43:52.787218Z", "commit": "2241", "message": "Fixed a potential alignment bug in the AVX version of MultiInt\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-23T10:34:17.912029Z", "commit": "2240", "message": "Another AVX compile fix\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-23T10:31:35.257936Z", "commit": "2239", "message": "Fixing AVX bug\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-22T17:17:02.580820Z", "commit": "2238", "message": "Slightly optimised the energy expression and fixed bugs with the AVX version\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-22T16:53:40.250047Z", "commit": "2237", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-22T16:53:13.557116Z", "commit": "2236", "message": "Fixed CLJFunction to use the correct comparison operators in all parts of the energy expression. This\nnow gives the correct energy on Linux :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-22T16:41:12.519129Z", "commit": "2235", "message": "Fixed a small compile bug in the SSE version of \nMultiFloat::logicalAndNot(MultiInt)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-22T16:37:25.101875Z", "commit": "2234", "message": "I've switched back over to using MultiInt for the ID as I think my linux error\nwas because I was assuming that floating point equality comparison was bitwise,\nbut it may be rounded... At the very least, it is clearly non-portable, so \nbest avoided.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-22T12:37:02.836950Z", "commit": "2233", "message": "time to skip is working now", "author": "nividic73@googlemail.com"}, {"date": "2014-01-22T10:41:10.157663Z", "commit": "2232", "message": "Replacing SSE with manual comparison in compareEqual to see if thiss fixes the linux problem\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-21T18:40:31.824877Z", "commit": "2231", "message": "Fixed semantics of logicalAndNot and have used this in CLJFunction as a way of\navoiding compareNotEqual...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-21T16:45:18.847492Z", "commit": "2230", "message": "Fixed MultiInt so that it will compile with AVX. Still debugging on Linux. So far,\nLinux gives the absurd result that, when a != b and b == c that a == c...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-21T16:35:12.339241Z", "commit": "2229", "message": "correct a bug in the != operator", "author": "nividic73@googlemail.com"}, {"date": "2014-01-21T13:57:34.656091Z", "commit": "2228", "message": "Continuing to debug - it appears that perhaps MultiFloat::compareNotEqual is not working...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-21T13:51:08.009445Z", "commit": "2227", "message": "Debugging the float conversion problem on Linux...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-17T15:57:48.394922Z", "commit": "2226", "message": "Cleaned up the code that cast values in CLJAtoms...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-17T15:47:25.028510Z", "commit": "2225", "message": "I've added a unit test for the reinterpret casting in CLJAtoms...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-17T15:44:59.961920Z", "commit": "2224", "message": "Updated python wrappers...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-17T15:26:54.057244Z", "commit": "2223", "message": "Moved all casting from int to float into CLJAtoms... This may fix the Linux problem...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-17T15:03:17.824784Z", "commit": "2222", "message": "I've changed CLJFunction to use a reinterpret_cast to MultiFloat, as the code\nthat worked on my mac did not work on Linux...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-17T14:13:35.372189Z", "commit": "2221", "message": "I've update CLJFunction to use the correct comparisons using MultiInt in the energy\nexperession. This doesn't appear to slow down the function and it means that I can\nproperly test if atoms have been masked out (e.g. ID set to 0) or if they belong\nto the same molecule (have same ID number)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-17T11:42:35.176192Z", "commit": "2220", "message": "Updated the python wrappers\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-17T11:34:14.410388Z", "commit": "2219", "message": "I've added a vectorised MultiInt class so that I can see if masking based on molecule\nID is fast enough to be used in CLJFunction...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-16T11:36:36.204967Z", "commit": "2218", "message": "Added timing in the function to convert Molecules to CLJAtoms. This lets me benchmark...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-16T11:32:09.542018Z", "commit": "2217", "message": "CLJVacShiftAriFunction works well, gives the same energy as InterGroupCLJFF, GridFF and GridFF2, \nand does so in significantly less time (2.3 ms compared to 5.8 ms for GridFF2, 25.1 ms for GridFF\nand 51 ms for InterGroupCLJFF!)\n \n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-16T11:28:23.306637Z", "commit": "2216", "message": "Wrapped up the containers that are useful for CLJAtoms\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-16T10:25:20.415599Z", "commit": "2215", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-16T10:25:07.568936Z", "commit": "2214", "message": "Added the code to create CLJAtoms from a single MoleculeView\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-15T16:42:59.457125Z", "commit": "2213", "message": "Fixed to allow everything to compile with the python wrappers, and updates to test/SireMM/testgridff2.py to use\nTestFF. So far, TestFF gives the wrong energy...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-15T16:41:53.917939Z", "commit": "2212", "message": "Python wrappers for the last commit...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-15T16:16:14.212955Z", "commit": "2211", "message": "I've moved the CLJAtoms object out of GridFF2 and into its own class, and have created\nfunctions to allow easy construction from SireMol::Molecules. To this end, I had to \nextend MultiFloat/MultiDouble with a MultiUInt class (vector of unsigned 32 bit integers).\nI have also moved the actual energy code into its own class (CLJFunction, derived to\nCLJVacShiftAriFunction), and have written a very simple forcefield (TestFF) to test\nall of the above. Now need to generate the python wrappers so that I can add the \ntest to test/SireMM/testgridff2.py...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-08T16:46:18.289439Z", "commit": "2210", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-08T16:43:11.782537Z", "commit": "2209", "message": "I've moved the energy code into a special function and created a CLJAtoms object that \nholds just the vectorised coordinates and parameters of a set of atoms. I will use\nthis, plus energy calculating functions as the basis of the code to calculate fast\nCLJ energies. Timing shows that the code is now accurate and very quick\n(see test/SireMM/testgridff2.py), with most of the time (60%) now being the conversion\nfrom the current memory layout of a CoordGroup into the CLJAtoms layout. I will need\nto update GridFF2 to store the atoms using the new layout and will need to work out\nthe best way of maintaining this through the simulation...\n\nAlso, I found that adding \"if\" statements inside the energy loop was really painful,\neven if they were hard coded to give the same answer (e.g. always use arithmetic\ncombining rules). I guess that this prevents pipelining of the code, and so\nI will have to go down the route of creating specialised CLJ energy functions for\neach type of calculation... (arithmetic, geometric, periodic box, cartesian,\nsoft-core, each different cutoff type...!). I've also decided that I will abandon\ngroup-based cutoffs as they are a pain in the neck to code and have been shown\nto give a poor representation of the electrostatics.\n\nFinally, I've seen that the grid evaluation code is so fast that it has negligable\nimpact on the time.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-08T14:16:33.129208Z", "commit": "2208", "message": "The fast version of GridFF2 calculates the energy in about twice the speed of the original...\nI can do better...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-08T11:46:06.328444Z", "commit": "2207", "message": "I've implemented all of the Newton-Raphson-refined approximate functions in MultiFloat\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-08T10:37:03.778227Z", "commit": "2206", "message": "Continuing to work on speeding up MultiFloat...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-07T17:48:21.155570Z", "commit": "2205", "message": "Working on the approximate functions in MultiFloat as I have seen that these are the \ncause of the numerical imprecision between GridFF and GridFF2. I want the speed of\nthe imprecise code, but not the imprecision... ;-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-07T17:46:47.710318Z", "commit": "2204", "message": "Fixed a small problem with the extraction test (need to compare numbers\nin assert_almost_equal)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-07T15:45:48.988431Z", "commit": "2203", "message": "I've updated the energy evaluation term for GridFF2 and get comparable energies about\n5-10 times faster than GridFF. There is some numerical imprecision that I will now\nneed to investigate (as I am evaluating using float and summing with double)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-07T14:40:42.079276Z", "commit": "2202", "message": "Updated python wrappers to include new functions in Space (and derived classes)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-07T14:31:27.102056Z", "commit": "2201", "message": "Working on rewriting the GridFF forcefield to use MultiFloat/Double and Intel's TBB. This will\npave the way for the rewrite of the InterCLJFF forcefield to behave similarly, thereby\nmassively speeding up the non-bonded calculation (major bottleneck!)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-06T15:37:42.820308Z", "commit": "2200", "message": "I've merged branches/devel into trunk in preparation for a release...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-06T15:25:31.261760Z", "commit": "2199", "message": "Updated python wrappers for Vector, DistVector etc.\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-06T15:25:14.326517Z", "commit": "2198", "message": "Updated DistVector to fix a compile bug... Nearly ready to make a release...\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-06T15:09:09.761578Z", "commit": "2197", "message": "Updated Vector so that it can be accessed by index in Python and so that the behaviour when\ngetting the cross-product of parallel vectors is defined\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-06T15:00:03.621566Z", "commit": "2196", "message": "I've made changes to properly wrap the auto-conversion functions of NumberProperty and StringProperty,\nand have also replaced assert_equal with assert_almost_equal so that all of the tests now pass.\nI am ready to make a release :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-06T14:39:46.787364Z", "commit": "2195", "message": "Updated the python wrappers to use the new __len__ and __getitem__ functions, and generated using\nmy (now standard) ScientificLinux5 VM\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-06T14:38:50.890722Z", "commit": "2194", "message": "Disabling some compiler warnings so that the wheat can be distinguished from the chaff\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-06T12:01:25.667258Z", "commit": "2193", "message": "Added auto-generation of the \"__len__\" function and working on adding indexing functions for the ArrayProperty\ntype\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-06T12:00:29.039776Z", "commit": "2192", "message": "Working on giving indexing operators to the ArrayProperty type so that the SireBase unit tests can pass\n\n", "author": "chryswoods@gmail.com"}, {"date": "2014-01-06T10:51:26.357358Z", "commit": "2191", "message": "I've updated the default parameters for waterswap to match those that I used for \nthe large thrombin simulations\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-12-19T16:28:09.884100Z", "commit": "2190", "message": "Made a similar change to the python wrappers so that dependencies are also compiled in parallel\n", "author": "chryswoods@gmail.com"}, {"date": "2013-12-19T16:25:30.714215Z", "commit": "2189", "message": "I've upgraded Qt to 5.2 (final) and have added code to detect the number of cores and to compile all dependencies \nusing the maximum number of cores available (speeds up the initial cmake a lot!)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-12-11T16:13:55.440597Z", "commit": "2188", "message": "Made sure compilation of inquire is disabled if SIRE_BUILD_GUI is OFF\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-12-11T14:45:26.331659Z", "commit": "2187", "message": "Small update to turn off default compilation of the graphical parts of Sire\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-29T16:15:32.886791Z", "commit": "2186", "message": "fixed a bug in the hbond contraint mode", "author": "nividic73@googlemail.com"}, {"date": "2013-11-28T17:18:39.470437Z", "commit": "2185", "message": "I've updated all of the Python wrappers to match the corelib (finally!). I've done this\nin a linux virtual machine and still need to test that this will all compile\n(as Sire is currently broken on linux, I will need to test this on OS X...)\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-28T17:13:06.689483Z", "commit": "2184", "message": "I've added a patch for qmetatype.h so that it can be parsed by GCCXML. I am in the\nprocess of regenerating the python wrappers for the latest code on a linux virtual\nmachine as it looks like gccxml and py++ don't work well with Mavericks\n(I think because gcc has been removed and only clang remains - I have not had\nsuccess get gccxml to happily use a gcc 4.8 that I've installed...)\n\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-26T09:31:53.277084Z", "commit": "2183", "message": "minimization update", "author": "nividic73@googlemail.com"}, {"date": "2013-11-25T15:40:19.511821Z", "commit": "2182", "message": "Commit of Hanne's update to the pdb parser\n\n", "author": "julienmich@googlemail.com"}, {"date": "2013-11-25T15:03:10.038719Z", "commit": "2181", "message": "minimization and equilibration improvements", "author": "nividic73@googlemail.com"}, {"date": "2013-11-21T17:20:05.911741Z", "commit": "2180", "message": "I've added in functions to query the metatype information about a class and have\nbegun using these in inquire to pick out the TI object and plotting the \nPMF contained therein.\n\ncorelib is working but the python wrappers are broken\n(mavericks has destroyed my gccxml and py++...!)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-21T14:45:36.180382Z", "commit": "2179", "message": "I've finished updating all of the RegisterMetaType lines. I took the opportunity\nas well of fixing many of the hidden overloaded virtual function errors, which\nreduces many of the compile-time warnings.\n\nStill need to update the python wrappers...\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-21T14:27:48.960376Z", "commit": "2178", "message": "I started adding support for minimization and equilibration", "author": "nividic73@googlemail.com"}, {"date": "2013-11-21T12:01:00.928636Z", "commit": "2177", "message": "I'm in the process of adding greater introspection capabilities to the streamed\nclasses. This involves registering the base (root) class of all polymorphic\ntypes in RegisterMetaType so that I can safely cast the void* pointers returned\nby SireStream::load.\n\nI am in the process of updating the registration functions so the code is broken\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-20T17:26:53.949898Z", "commit": "2176", "message": "I've got inquire displaying a simple graph on a mac :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-20T17:05:39.127942Z", "commit": "2175", "message": "I've updated the wrapped version of Python 3.3.3 to (again!) fix crashes\ncaused by my upgrade to Mavericks... Upgrade was free, but the pain\nof fixing everything caused by the upgrade is priceless.\n\nCode looks like it is working well, but care must be taken\nas the beta version of Qt 5.2 is in use\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-20T16:05:17.959084Z", "commit": "2174", "message": "I've fixed the qt5 install cmake file so that the libraries are given the corrent\nrpath on OS X\n\nCode appears to be working. Treat with caution as it links against\na beta version of Qt 5.2\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-20T15:43:21.645061Z", "commit": "2173", "message": "I've checked and the code compiles, links and runs on OS X and on Linux using 5.2 beta 1.\n\nHowever, I now have the problem that I cannot set the RPATH correctly for QtGui linking\nto QtCore on OS X... This is needed so that inquire can link libraries and start.\n\nCode is semi-broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-20T14:31:21.059735Z", "commit": "2172", "message": "I made a mistake with the packaged Qt 5.2 files... Here are the correct files...\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-20T14:13:55.125792Z", "commit": "2171", "message": "I've had to update Qt to Qt 5.2beta1 as 5.1 won't compile on OS X Mavericks. corelib\nnow compiles but I am waiting on the python wrappers and need to test this on linux.\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-18T10:55:07.708084Z", "commit": "2170", "message": "Starting to construct \"inquire\" (the graphical viewer for free energy plots\nand for inspecting simulation output). I've added an option to the cmake files\nto disable graphical libraries and have renamed qtbase... to qt5 as I will need\nto compile QtGui etc. if graphical libraries / applications are required.\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-13T14:20:52.238189Z", "commit": "2169", "message": "Fixed a bug in WSRC.py where the component free energies were using a swap water\ngroup that was not added to the system, and was thus not updated throughout\nthe simulation. This is why the component free energies were so wrong!\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-12T17:25:10.354129Z", "commit": "2168", "message": "Adding in the unit tests for the SireSystem FreeEnergyMonitor\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-12T17:24:29.335231Z", "commit": "2167", "message": "Fixed some bugs in the hard CLJ FreeEnergyMonitor. These were revealed via unit\ntesting in the unit test to be committed in the next commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-12T10:11:47.215842Z", "commit": "2166", "message": "Updated the merge commands in trunk\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-12T10:10:35.828793Z", "commit": "2165", "message": "Merged the changes and bugfixes in \"trunk\" back into devel. This is a good reminder\nwhy I MUST NOT CHANGE TRUNK DIRECTLY!!!\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-12T10:06:02.854451Z", "commit": "2164", "message": "Merged the changes and bugfixes in \"trunk\" back into devel. This is a good reminder\nwhy I MUST NOT CHANGE TRUNK DIRECTLY!!!\n \n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-11T17:06:55.727724Z", "commit": "2163", "message": "I've updated the WSRC script to separate out the intermolecular free energy components\n(which do change with lambda) from the intramolecular components (which don't). This should\nmake the \"bound\" and \"free\" reported free energy components more meaningful as, at the moment,\nthey are dominated by the intramolecular energy of removing the ligand from the bound leg and\nadding it to the free leg, and by the intermolecular energy within the swap water cluster\nas it moves the other way (about 100+ kcal mol-1 for each, which cancel out in the total\nfree energy PMF)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-11T17:04:57.853760Z", "commit": "2162", "message": "Fixed a bug in structureeditor where the last_uid was not initialised correctly when the \neditor was constructed from a MoleculeData.\n\nAlso fixed a bug in WindowedComponent where in some situations the windowed component\nwas not being updated correctly when the system constraints were applied\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-11T14:04:28.285660Z", "commit": "2161", "message": "Fixing a bug in StructureEditor where last_uid is not properly initialised in the MoleculeData\nconstructor (spotted by Hannes)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-11-07T11:27:50.811276Z", "commit": "2160", "message": "Fixed a bug in the free energy monitor that meant that the component free energies\nwere accumulated incorrectly (they used the wrong alpha value and use 1 - lambda + delta_lambda\nwhen it should be 1 - lambda - delta_lambda).\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-10-28T11:37:43.184184Z", "commit": "2159", "message": "cleaning", "author": "nividic73@googlemail.com"}, {"date": "2013-10-22T12:17:04.183578Z", "commit": "2158", "message": "Removed references to QtGUI and QtOpenGL from AutoGenerate/create_wrappers.py\nAlso commit of recently updated wrappers\n\n", "author": "julienmich@googlemail.com"}, {"date": "2013-10-21T08:59:28.632683Z", "commit": "2157", "message": "the improper periodicity was define as double and not int", "author": "nividic73@googlemail.com"}, {"date": "2013-10-09T12:16:22.836642Z", "commit": "2156", "message": "Context creation/reinitialization has been implemented - hanlges mode has been fixed", "author": "nividic73@googlemail.com"}, {"date": "2013-10-01T10:54:31.211591Z", "commit": "2155", "message": "Tagging the 2013.2 release of the python wrappers\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-10-01T10:53:17.551743Z", "commit": "2154", "message": "Tagging the 2013.2 release of the core library\n", "author": "chryswoods@gmail.com"}, {"date": "2013-10-01T10:51:08.683859Z", "commit": "2153", "message": "Added a directory to hold the tag for the 2013.2 release\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-30T19:41:19.636388Z", "commit": "2152", "message": "disabled qdebug statements- code broken", "author": "nividic73@googlemail.com"}, {"date": "2013-09-30T14:53:16.812892Z", "commit": "2151", "message": "Update custom bonded units units to match the standard bonded units", "author": "nividic73@googlemail.com"}, {"date": "2013-09-30T14:20:28.422281Z", "commit": "2150", "message": "Still fixing the chown bug in package_sire...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-30T14:02:41.970746Z", "commit": "2149", "message": "Fixed a small bug in the makeself-header.sh script where it tried to chown the entire directory\nin which sire.run was unpacked!\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-30T14:01:21.099999Z", "commit": "2148", "message": "I've fixed a small bug in the python executable where it ignored the number of threads\nrequested by the user (or detected on the node)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-27T14:44:09.961639Z", "commit": "2147", "message": "I started adding support for the HANGLES constraint mode on the perturbed molecule - code broken", "author": "nividic73@googlemail.com"}, {"date": "2013-09-26T10:46:12.583219Z", "commit": "2146", "message": "I've tagged the 2013.1 release of Sire :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-26T10:45:11.241527Z", "commit": "2145", "message": "I've added tags for releases of Sire\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-26T09:56:04.784410Z", "commit": "2144", "message": "Fixed the unit test\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-26T09:53:10.673715Z", "commit": "2143", "message": "Fixed a bug in generating the API docs using Doxygen\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-26T09:47:37.525219Z", "commit": "2142", "message": "fixed a bug in the HBOND perturbation constraint mode", "author": "nividic73@googlemail.com"}, {"date": "2013-09-26T08:39:56.157490Z", "commit": "2141", "message": "Merged the devel branch back into \"trunk\"\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-26T08:33:11.278322Z", "commit": "2140", "message": "Python wrappers containing the updated API from ComponentGradients::data(int i) to\nComponentGradients::data()\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-26T08:31:08.865179Z", "commit": "2139", "message": "Fixed a small API bug. ComponentGradients::data(int i) didn't need the 'i' argument, so\nreplaced with ComponentGradients::data()\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-25T16:17:30.831078Z", "commit": "2138", "message": "Updated WSRC to disable RETI swap moves\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-25T16:08:44.825505Z", "commit": "2137", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-25T16:08:14.083461Z", "commit": "2136", "message": "I've updated RepExMove so that I can disable RETI moves. This is useful for waterswap\nas the RETI moves are only accepted infrequently, and may be messing up convergence...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-25T15:46:43.910756Z", "commit": "2135", "message": "I've updated the tutorial so that it is compatible with python 3, and have\nwritten an up-to-date README and INSTALL file\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-25T15:47:23.184595Z", "commit": "2134", "message": "Fixed a small bug in download_source.py (didn't copy the README etc. files correctly)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-25T14:50:41.170890Z", "commit": "2133", "message": "Had to fix sire.qrc to update the location of COPYING\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-25T14:45:09.951890Z", "commit": "2132", "message": "Updated the download_source.py script to create a complete source snapshot directory\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-25T14:44:36.203157Z", "commit": "2131", "message": "Putting files in place so that the new source download script will create a complete\nsource snapshot, together with build instructions and license file\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-25T14:36:57.402484Z", "commit": "2130", "message": "I've added a script that downloads the source for the current Sire binary from\nthe google code repository\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-25T14:07:04.372756Z", "commit": "2129", "message": "Python wrappers for the last release together with updates to allow easy access\nto the python repository URL and version of a binary\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-25T14:06:01.339430Z", "commit": "2128", "message": "I've moved download_compile_sire.py into build, have fixed the bug in that script that \nmeant that \"--download-only\" was inactive, have added easy access to the repository\nversion and url of a binary and have fixed a bug in TIComponents that meant that \nit wasn't conserving as much memory as it could\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-23T13:16:42.626096Z", "commit": "2127", "message": "I've fixed a small typo in the printed output of the analysis function (didn't print the \niteration number correctly)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-23T11:07:56.699246Z", "commit": "2126", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-23T11:07:39.877496Z", "commit": "2125", "message": "I've added the ability to merge the molecules stored in the FreeEnergyMonitor and\nTIComponents / ComponentGradients classes as this was leading to stupidly big\n.s3 files for the component free energies.\n\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-23T10:32:06.022520Z", "commit": "2124", "message": "I've modified Histogram so that setting a bin width of zero disables collection of a histogram.\nI've also updated FreeEnergyMonitor so that it stops collecting histograms for components\n(they were massive memory hogs!)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-23T10:30:34.359760Z", "commit": "2123", "message": "Fixed a bug in WSRC where it was not passing the user-specified temperature to the \nfree energy component monitors\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-20T15:28:57.157809Z", "commit": "2122", "message": "Cleaning up the output for the waterswap scripts\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-20T15:27:30.025918Z", "commit": "2121", "message": "Cleaning up the output and fixing some small analysis bugs\n\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-20T11:14:20.098500Z", "commit": "2120", "message": "Added a test to see if monitors are compatible ignoring lambda values. This is to fix\na bug where the gradients could not be recorded as the code thought they were\nincompatible as they had different lambdas\n\n--\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-20T11:13:15.127846Z", "commit": "2119", "message": "Fixed some bugs in the new code that prevented the new monitors from being recorded.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-20T10:59:28.109428Z", "commit": "2118", "message": "I've finished coding up TIComponents and ComponentGradients so that I can analyse the free energy\ncomponents obtained during waterswap simulations. Code compiles and links but needs to be tested...\n\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-20T10:58:02.793366Z", "commit": "2117", "message": "Python wrappers for the next commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-19T16:48:29.083096Z", "commit": "2116", "message": "I'm in the process of coding a TIComponents class to perform the analysis of the component\nfree energies collected by the FreeEnergyMonitor. Work is in progress...\n\nCODE IS BROKEN\n\n--\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-19T16:47:25.003947Z", "commit": "2115", "message": "Python wrappers for the next commit...\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-17T15:58:58.244400Z", "commit": "2114", "message": "Fixed further compile bugs in the python wrappers\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-17T15:58:39.703717Z", "commit": "2113", "message": "Filled in missing functions in FreeEnergyMonitor\n\n--\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-17T15:37:33.548639Z", "commit": "2112", "message": "Fixed a compile bug in the updated python wrappers\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-17T15:37:13.901484Z", "commit": "2111", "message": "Fixed some bugs in the FreeEnergyMonitor code\n\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-17T15:13:53.620073Z", "commit": "2110", "message": "Merged changes in devel back to trunk\n\n-\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-17T15:11:04.869343Z", "commit": "2109", "message": "Python wrappers to accompany the new FreeEnergyMonitor class\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-17T15:10:39.339591Z", "commit": "2108", "message": "I've added a FreeEnergyMonitor class that can calculate the free energy components \nof dual-topology calculations correctly, rather than using the estimating method\nI tested in the current waterswap scripts\n\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-11T15:56:53.477869Z", "commit": "2107", "message": "I've merged in changes from devel and have added instructions on how to manage\nand merge trunk\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-11T15:50:57.879872Z", "commit": "2106", "message": "I've added a script to simplify downloading, compiling and installing Sire, and have\nupdated the INSTALL file with the installation instructions\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-11T13:33:52.815628Z", "commit": "2105", "message": "I've copied branches/devel/corelib and branches/devel/python to trunk/corelib and trunk/python.\nI will keep the trunk up to date with the latest, stable version of Sire, and use devel\nfor the day-to-day development of Sire.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-11T13:29:14.356327Z", "commit": "2104", "message": "Cleaning up the repository...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-11T13:22:33.766957Z", "commit": "2103", "message": "I've added a \"trunk\" directory so that the latest, stable version of Sire\nis in the expected place in the repository\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-10T16:20:23.562385Z", "commit": "2102", "message": "I've added in a unit test for the PartialMolecule::extract() by comparing the\nintramolecular energies against the original partial molecule\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-10T16:19:41.445877Z", "commit": "2101", "message": "Fixed the efficiency problems of PartialMolecule::extract() - I've worked around\nthem by only updating the AtomPairs value if it is not default. I've tested this is\nok in the unit test accompanying the next python commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-10T14:37:56.041134Z", "commit": "2100", "message": "I've finished adding support to constraint the perturbed molecule", "author": "nividic73@googlemail.com"}, {"date": "2013-09-10T10:07:46.844753Z", "commit": "2099", "message": "Made some updates to atompairs and shareddatapointer to see if repeated (unnecessary)\ndetach and copying was the cause of the slowdown...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-10T09:27:39.057029Z", "commit": "2098", "message": "I'm in the process of debugging the very slow \"extract\" function in AtomicPairs.\nThis was not slow using Qt4, but is excrutiatingly slow in Qt5!\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-06T15:45:17.388689Z", "commit": "2097", "message": "I have started adding support for the constraints on the perturbed ligand", "author": "nividic73@googlemail.com"}, {"date": "2013-09-06T11:46:14.515141Z", "commit": "2096", "message": "Initial work on adding an aMD integrator \n\n", "author": "julienmich@googlemail.com"}, {"date": "2013-09-03T17:46:38.573664Z", "commit": "2095", "message": "I've updated the python executable to use as many threads as there are cores\nby default, and have also updated the default settings for the waterswap\nscript to match those validated for the chinese flu system\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-09-02T15:09:49.806402Z", "commit": "2094", "message": "Minimization stage has been added", "author": "nividic73@googlemail.com"}, {"date": "2013-08-30T15:06:08.531184Z", "commit": "2093", "author": "nividic73@googlemail.com"}, {"date": "2013-08-29T11:14:16.286169Z", "commit": "2092", "message": "Compile-time fixes to allow compilation on Scientific Linux 5.9 32bit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-27T17:12:03.784413Z", "commit": "2091", "message": "I've added some unit tests to the tests/SireBase directory. These should be run\nby the sire.app/bin/sire_test executable after install\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-27T17:08:37.830111Z", "commit": "2090", "message": "I have ported all of the scripts in test to python 3 and have begun removing old and broken\ntest scripts. I am currently up to test/SireMove...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-27T15:36:10.579324Z", "commit": "2089", "message": "I've added a thin wrapper for pip so that software can be installed correctly\n(sire.app/bin/python knows where it is, and can be moved), and I have also\ncreated a sire_test.py script that can be used to run all of the unit tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-27T15:35:17.745198Z", "commit": "2088", "message": "I'm beginning to create proper unit tests and am moving them to the python directory...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-27T11:26:18.147380Z", "commit": "2087", "message": "I've moved the \"scripts\" directory to a subdirectory of \"python\" to speed up\ninstallation (I don't now need to install every directory to change a script).\n\nI have also added my first stab at the waterswap script. I've decided to\nuse python argparse module to parse command line arguments and have\nmade sire's python ignore ipython when auto-running a script\n(as ipython's argument parser got in the way of the script's argument parser)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-27T11:22:43.692548Z", "commit": "2086", "message": "I've added a script that downloads/updates Sire from svn, then configures and performs a complete\ncompile and install into a sire_test directory. This is the first part of having an automated\nnighly compile, install and run tests\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-26T17:06:34.999363Z", "commit": "2085", "message": "I've moved the test executables to a test directory and have updated RPATH so that\nit also looks in the current executable directory\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-26T16:58:00.583632Z", "commit": "2084", "message": "Removed static linking for the get_cpuid test executable\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-26T16:55:35.283195Z", "commit": "2083", "message": "I've added some small executables that will help when we need to gain\ninformation about the system (for choosing the correct install file)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-26T15:17:27.137046Z", "commit": "2082", "message": "I've fleshed out the CPUID class so that it can report the processor, number of cores,\nvendor, clock speed (measured), supported features etc. of the running processor.\n\nCode is working :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-26T15:16:27.900525Z", "commit": "2081", "message": "Python wrappers for the next commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-26T10:51:23.694735Z", "commit": "2080", "message": "Fixed compilation problem with libcpuid on old linux, and have fixed some bugs in the installer\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-23T15:43:14.116167Z", "commit": "2079", "message": "I've fixed a bug in the package_sire.py script and have added the wrappers for CPUID\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-23T15:41:51.172475Z", "commit": "2078", "message": "I've added the CPUID library and have cleaned up the install_sire.sh script a little...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-23T13:34:25.375685Z", "commit": "2077", "message": "Added in python/branches/devel and updated the package_sire.py script so that\nit clean up the sire package and tars up development files before packaging\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-23T13:30:23.053687Z", "commit": "2076", "message": "Removed python2/branches/devel as renamed to python/branches/devel\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-23T13:17:27.594022Z", "commit": "2075", "message": "I've updated the install_sire.sh script so that sire.run unpacks to tmp_sire.app\nrather than sire.app (as I annoyingly wiped my sire.app installation during testing!)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-23T10:31:33.017471Z", "commit": "2074", "message": "Setting up the move from python2/branches/devel to python/branches/devel...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-23T10:24:25.207808Z", "commit": "2073", "message": "I've added code to the python executable that allows it to automatically run a script\nbased only on the name of the symbolic link, e.g. linking \"python\" to \"package_sire\" \nwill cause it to run the \"package_sire.py\" script in share/scripts :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-23T10:01:50.364995Z", "commit": "2072", "message": "I've cleaned up the Sire installation script and have removed version numbers\nfrom the sire executables\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-22T17:00:36.122287Z", "commit": "2071", "message": "I've added the python script that is used to create a sire.run self-extracting\ninstaller from any sire.app directory :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-22T16:57:34.296941Z", "commit": "2070", "message": "I've added in some scripts to help automate and check the installation of Sire, and for\ncreating portable binaries. My windows desktop arrived today, so I can start to build\na ton of VMs to test this all on different systems :-)\n\nSo far, this is all working on Mac and teh linuxes I have available (e.g.\ngrendel, curie and bluecrystalp2)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-22T11:18:57.754856Z", "commit": "2069", "message": "I've added a simple script to get the C and C++ library versions needed\nby the Sire and bundled libraries. This will help me when building and \ndistributing portable binaries...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-22T10:56:20.501049Z", "commit": "2068", "message": "Forgot to actually add the QDir and QFileInfo files...!\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-22T10:55:11.279328Z", "commit": "2067", "message": "Updated python install script to install pip and setuptools, and have also added QFileInfo to\nthe set of wrapped Qt classes\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-22T09:13:19.634851Z", "commit": "2066", "message": "I've fixed a bug in the code that is used to find the install directory of Sire on linux\n\n", "author": "chryswoods"}, {"date": "2013-08-21T16:36:55.242734Z", "commit": "2065", "message": "I've updated the python install file so that it sets the correct RPATH on linux (pointing to $ORIGIN/../lib)\n\n", "author": "chryswoods"}, {"date": "2013-08-21T14:21:49.929975Z", "commit": "2064", "message": "I've added a more informative error message if sire.app is not supplied to the \npython wrapper's cmake command\n\n", "author": "chryswoods"}, {"date": "2013-08-21T14:05:36.517582Z", "commit": "2063", "message": "I've fixed the wrapping of QDate and have added some convenience code to the python main\n(sets number of threads, automatically starts ipython if available)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-21T13:22:50.641076Z", "commit": "2062", "message": "I've fixed compile and link errors on Linux and now the corelib successfully compiles, installs\nand runs on Linux. The resulting sire.app directory is fully self-contained and relocateable\n(i.e. you can move it to wherever you want and sire will still find its own library paths\nand install path etc.). I think, if I compile against an old enough libstdc++ and libc, \nthat the resulting binary should be pretty portable across different linuxes.\n\nCode is still experimental\n\n", "author": "chryswoods"}, {"date": "2013-08-19T16:55:09.420747Z", "commit": "2061", "message": "I've fixed a streaming bug on mac. This only affected the Qt5 version of Sire, and \nwas caused by me forgetting to specify the Qt datastream format version when writing\nthe datastream file header.\n\nCode appears to be working well on mac, but fails to compile on linux\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-19T16:43:32.806322Z", "commit": "2060", "message": "Fixes to enable compilation of Sire plus dependencies on linux. All of the dependencies\nnow compile, but I need to fix compile errors for corelib...\n\nCode is broken on Linux\n\n", "author": "chryswoods"}, {"date": "2013-08-19T10:56:17.584448Z", "commit": "2059", "message": "Updating the python modules with fixes for python 3 and fixing the change of name from\nSoiree to SireAnalysis\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-19T10:17:57.821830Z", "commit": "2058", "message": "I've fixed a reference counting bug in the shared pointer classes in the updated Sire.\nThis only affects the Qt5 version of Sire, and caused obvious crashes ;-)\n\nThe Qt5 / python 3 / c++ 11 version of Sire is now becoming more stable, but should\nstill be considered experimental\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-16T10:29:59.107266Z", "commit": "2057", "message": "I've added in support for letting the streaming system know that a class name has been\nchanged. This was added so that my old s3 files that used Soiree classes could be \nloaded, now that Soiree has been renamed to SireAnalysis\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-16T10:28:42.214478Z", "commit": "2056", "message": "I've made a small change so that the streaming functions know that Soiree has been \nrenamed to SireAnalysis\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-15T16:52:40.502921Z", "commit": "2055", "message": "I'm starting to test the python 3 wrappers. So far I get crashes when I load molecules\nbecause of a strange dynamic_cast bug in Property.\n\nI am having to port the test scripts - fortunately python comes with 2to3 which\ndoes all of the hard work. Just run sire.app/bundled/bin/2to3 -w script.py to \nport the script.\n\nCode is experimental\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-15T16:50:34.022808Z", "commit": "2054", "message": "The python wrappers now load correctly into the python 3 interpreter and some of\nmy tests work. However, there are crashes when trying to load molecules due\nto a strange dynamic_cast bug in Property...\n\nI've also added setuptools and pip to the bundled modules so that additional\npython modules can be installed using these tools (and I don't need to bundle\nthem here!)\n\nCode is still experimental\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-15T14:31:54.846185Z", "commit": "2053", "message": "I've renamed Soiree to SireAnalysis. This is a slightly less confusing name... ;-)\n\nThis version should be considered highly experimental\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-15T14:25:49.979175Z", "commit": "2052", "message": "Most of the python wrappers are now working :-). I've just got to sort out some import\nproblems for QDate, QTime and QDateTime\n\nThere are a lot of changes. I've renamed Soiree as SireAnalysis, have renamed\nsire_python to python, and have remove sire_ipython. I have also changed\nevery \"Python2\" reference to \"Python\", e.g. libSirePython2 is now libSirePython.\nI have also updated the manual wrappers to use the Python3 API, so these are now\ndefinitely python 3 only wrappers.\n\nCode should be considered as highly experimental\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-15T11:27:37.061988Z", "commit": "2051", "message": "All of the python wrappers and their dependencies now compile and install correctly in sire.app.\nThe python3 interpreter runs, but cannot run any scripts and cannot import any modules...\n\nCode is broken\n \n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-15T11:26:35.787807Z", "commit": "2050", "message": "Added options needed by the python wrappers\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-14T17:00:41.503192Z", "commit": "2049", "message": "Some fixes to help the compilation of the python wrappers\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-14T16:59:08.419692Z", "commit": "2048", "message": "I've added in a bundled python3 and boost_python (including writing my own CMakeLists.txt for\nthe bundled boost::python). I'm in the process of updating everything to work against python3,\nso treat this all as broken\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-14T13:46:15.322911Z", "commit": "2047", "message": "Bundling of all dependencies of corelib is now working on OS X, creating a single, \nrelocatable directory. I've added in the dependencies to the tree so that all developers\nwill being working from the same version\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-13T16:55:21.007323Z", "commit": "2046", "message": "Made progress compiling the python wrappers with Qt5 and C++ 2011. Nearly all compile\nnow, with just some link errors at the end.\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-13T16:54:22.687192Z", "commit": "2045", "message": "Making progress bundling more libraries, and have also made some fixes that reduce\nerrors when compiling the python wrappers.\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-13T10:23:54.684377Z", "commit": "2044", "message": "I've ported Sire over to Qt 5.1, have fixed the code so that it compiles using C++ 2011, and \nhave modified the CMake files so that they use the latest cmake and support compiling and linking\nagainst libc++ rather than libstdc++. The code all compiles and appears to work (porting to \nQt5 was surprisingly easy). I now need to port all of the python code...\n\nCode should be considered as highly experimental and not used for production work\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-12T09:41:51.079251Z", "commit": "2043", "message": "I've updated sire_python so that it can work out the correct PYTHONPATH at runtime.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-12T09:41:25.278441Z", "commit": "2042", "message": "I've added in some functions in SireBase to get the full path to the current Sire install\ndirectory at runtime and to get the paths to the directories containing the libraries,\nbundled libraries etc.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-12T09:15:13.158334Z", "commit": "2041", "message": "I fixed a little bug", "author": "nividic73@googlemail.com"}, {"date": "2013-08-09T11:54:34.485263Z", "commit": "2040", "message": "Fixed setting the rpath on mac for libtbb and libtbbmalloc\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-09T11:54:16.439372Z", "commit": "2039", "message": "Fixed a bug in the path to the bundled libraries for sire_python\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-09T11:32:59.198524Z", "commit": "2038", "message": "I've finally(!) got rpath working on mac. The trick is to realise that each library on the \nmac must be named \"@rpath/library\", and then each executable has to have @executable_path/../library_path\nadded to the list of rpaths. CMake doesn't seem to do this yet on a mac, so I have added it\nas a post-build command for each executable.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-09T11:30:33.477109Z", "commit": "2037", "message": "Python wrappers for the next commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-08T14:43:15.899620Z", "commit": "2036", "message": "I've got cmake to compile and install the bundled tbb\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-08T11:41:54.291006Z", "commit": "2035", "message": "I've updated the cmake files so that all of the Sire libraries and modules are now installed\ninto a single, relocatable directory. By default this is $HOME/sire.app. This is the first stage\nto making a portable binary of Sire, and allows a user to run sire.app/bin/sire_python without\nneeding to set any environmental variables (e.g. LD_LIBRARY_PATH or PYTHONPATH). I will eventually\nchange the layout in this directory to match the OS X application bundle guidelines, but am now\nworking on having sire.app include bundles of its dependencies (thus allowing sire to be compiled\nwithout the user having to download or compile anything beforehand, and also allowing the sire.app\ndirectory to be copied from one user to another with the minimum of breakage).\n\nCode is all working, but consider this version highly experimental\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-08T11:38:46.210203Z", "commit": "2034", "message": "Python wrappers for the next commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-08T08:51:33.975971Z", "commit": "2033", "message": "The solvent-solvent interactions have been set off during the evaluation of the gradient in the TI method to reduce numerical instabilities", "author": "nividic73@googlemail.com"}, {"date": "2013-08-07T16:58:03.173389Z", "commit": "2032", "message": "Cleaning up the files in the devel branch...\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-07T16:26:27.277544Z", "commit": "2031", "message": "I've rewritten the addToGrid function in GridFF2 and it works, giving comparable answers\nto GridFF when tested using testnewgridff.py. The code is between 4-10 times faster :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-07T16:25:31.989841Z", "commit": "2030", "message": "Python wrappers for the next commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-07T11:03:03.717022Z", "commit": "2029", "message": "I'm beginning to rewrite the GridFF2 forcefield. Using MultiFloat looks like it will give\nover an order of magnitude speed-up :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-07T09:51:47.801525Z", "commit": "2028", "message": "I've duplicated GridFF to GridFF2 so that I can rewrite the underlying code using MultiFloat/MultiDouble\n(thus speeding it all up significantly, hopefully ;-)). I've added a new test, testnewgridff.py\nthat compares GridFF and GridFF2. At the moment, this test passes as both GridFFs are identical...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-07T09:50:49.880981Z", "commit": "2027", "message": "Python wrappers for the next commit...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-06T09:41:22.557606Z", "commit": "2026", "message": "I've fixed a bug caused by missing Soiree containers and have added the ability to \nsave restart files and pdbs only every N iterations\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-05T14:16:51.952347Z", "commit": "2025", "message": "Removed a compiler warning when compiling ti.cpp. Code now compiles on bluecrystal2 using an older gcc\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-05T14:13:45.193907Z", "commit": "2024", "message": "Fixing some compile bugs in multidouble.h...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-05T14:11:44.259759Z", "commit": "2023", "message": "Updated multidouble/multifloat to improve portability of the code\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-05T11:09:52.888667Z", "commit": "2022", "message": "I've finished coding up the Bennetts code. Now it all needs testing...\n\nCode compiles, runs, but the new free energy code needs to be tested\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-05T11:09:10.748739Z", "commit": "2021", "message": "Python wrappers for the next commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-05T10:21:55.910994Z", "commit": "2020", "message": "Fixed the naming of the Bennetts files...\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-05T10:21:08.862466Z", "commit": "2019", "message": "Work in progress - have finished the FEP classes, have finished the BennettsFreeEnergyAverage and\nam now working on the Bennetts processing classes... Need to commit as made a mistake \nwith Bennetts name (dropped the last 't'!)\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-01T14:11:18.440845Z", "commit": "2018", "message": "I've finished writing the FEP code. Now to write the Bennet's code...\n\nCode is working\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-01T14:10:57.205681Z", "commit": "2017", "message": "I've updated WSRC to calculate free energies using FEP in addition to FDTI\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-01T11:39:29.306209Z", "commit": "2016", "message": "I'm adding in the code to calculate FEP (and then Bennet's) free energies. Work in progress\nwhile I go to lunch...\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-08-01T11:38:48.971076Z", "commit": "2015", "message": "Python wrappers for the next commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-07-29T14:14:04.466001Z", "commit": "2014", "message": "Added ability to store and return to Sire accumulated average total energies computed during an OpenMM calculation. \nThis will be useful to compute enthalpy changes. \n\n", "author": "julienmich@googlemail.com"}, {"date": "2013-07-28T18:27:18.768095Z", "commit": "2013", "message": "Added mixed precision OpenCL mode by default in openmmmdintegrator as this appears to be the only way to use the platform with the Intel OpenCL SDK\n\nAlso changed the free energy code to set constraints between bonds that are in a perturbed solute, if the ff parameters do not change. \n\nThe constraint code probably needs to be revised. It should be possible to constrain perturbed bonds to their target equilibrium value and get \nreasonabe free energies without having to use a small timestep.\n\n", "author": "julienmich@googlemail.com"}, {"date": "2013-07-26T15:38:25.388829Z", "commit": "2012", "message": "I've made some optimisations to help speed up Amber().readCrdTop (in response to the speed bug).\nThese have sped things up a little, but not as much as would be needed\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-07-26T15:27:33.065866Z", "commit": "2011", "message": "Debugging free energy code to support multiple molecule perturbations. Code is broken.\n\n", "author": "julienmich@googlemail.com"}, {"date": "2013-07-26T09:43:12.402196Z", "commit": "2010", "message": "I've made the WSRC script save the old freenrgs.s3 file to a backup before writing the \nnew file. This will prevent data loss if the job is killed during the write.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-07-26T09:26:01.535517Z", "commit": "2009", "message": "Python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-07-26T09:25:42.754331Z", "commit": "2008", "message": "I've added in a taylor series expansion estimate of the free energy. This provides\nanother estimate of the convergence of the calculation and associated error,\nbut seems to become equal to the exponential value very quickly (within an iteration\nor so)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-07-25T14:09:53.171535Z", "commit": "2007", "message": "I am modifying the openmm free energy code so that perturbations on multiple molecules are supported\n\n", "author": "julienmich@googlemail.com"}, {"date": "2013-07-25T11:00:25.497072Z", "commit": "2006", "message": "I've added in the PMF class and have added the code for integrating the gradients using\ntrapezium rule and interpolation, together with adding in minimum and maximum errors.\n\nI've also extended the Sire.Tools.Plot code (in the last commit) so that it can plot\ndatapoints, histograms and curves more easily and prettily\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-07-25T10:59:09.916285Z", "commit": "2005", "message": "Python wrappers for the next commit \n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-07-23T15:01:01.549254Z", "commit": "2004", "message": "I've added additional functionality to histogram (calculating standard error, and error to\na given confidence level) and have also added a DataPoint class that lets me hold x,y values\nwith associated errors. This will be used for the next step, which is to integrate the\ngradients to obtain a PMF. I will attempt to do this both using trapezium integration\nand using the curve fitting code supplied by Julien\n\nCode is working\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-07-23T14:59:16.053654Z", "commit": "2003", "message": "Python wrappers for the next commit. I've also added a simple plotting module that\nuses matplotlib to draw some graphs for histograms and free energy gradients.\nThis uses the new DataPoint and updated Histogram code that is in the next\ncorelib commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-07-22T16:42:44.948785Z", "commit": "2002", "message": "I've added a \"Gradients\" class that holds the gradients for a TI simulation. The accumulators\nhave been given addition operators so that it is easy to average together the averages...\n\nCode is working\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-07-22T16:41:36.217803Z", "commit": "2001", "message": "Python wrappers for the next commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-07-22T15:36:40.270037Z", "commit": "2000", "message": "commit of the updated python wrappers\n", "author": "julienmich@googlemail.com"}, {"date": "2013-07-22T15:34:51.581882Z", "commit": "1999", "message": "Added back support to buffer coordinates in openmm free energy integrator code. Changed slightly the interface.\n\n", "author": "julienmich@googlemail.com"}, {"date": "2013-07-22T14:12:27.725059Z", "commit": "1998", "message": "I've fixed some bugs in Histogram, and have added the ability to calculate skew and kirtosis.\n\nI've updated FreeEnergyAverage so that it collects a histogram of data during the simulation.\n\nI've written the start of TI that collects FreeEnergyAverages for each lambda value for each\niteration, so that we can then run some statistical analysis on it all.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-07-22T14:06:08.169428Z", "commit": "1997", "message": "Python wrappers for next commit...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-07-19T16:20:49.268049Z", "commit": "1996", "message": "I'm in the process of adding in support for calculating PMFs and performing real-time statistical\nanalysis of a running simulation. As part of this, I've rewritten the Histogram class to provide\nmore statistical data. This has obsoleted the old design, which broke the RDFMonitor, RDF and\nWHAM classes. I have removed these classes as they were little-used. If anyone is using them,\nplease get in touch and I will rewrite them to use the new Histogram code.\n\nI've also added a copy of the calcpmf.py script that shows the kind of run-time analysis\nto which I aspire...!\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-07-19T16:16:32.526468Z", "commit": "1995", "message": "Here are the python wrapper updates for the next commit...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-07-19T13:10:02.551058Z", "commit": "1994", "message": "Commit of a few missing wrappers\n", "author": "julienmich@googlemail.com"}, {"date": "2013-07-12T14:00:34.408873Z", "commit": "1993", "message": "I have recompiled the python wrappers using the new python script. \n\nMy code now compiles and runs the OpenMMfree energy scripts without crashing :-) \n\n", "author": "julienmich@googlemail.com"}, {"date": "2013-07-12T13:59:34.853291Z", "commit": "1992", "message": "Added back files from my old dev branch in julienmich's branch\n", "author": "julienmich@googlemail.com"}, {"date": "2013-07-12T13:02:07.924231Z", "commit": "1991", "message": "Here is the updated create_wrappers.py script copied from Gaetano's branch\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-07-12T12:57:00.606439Z", "commit": "1990", "message": "Adding\n", "author": "julienmich@googlemail.com"}, {"date": "2013-07-12T12:53:33.877192Z", "commit": "1989", "message": "deleting before adding again \n", "author": "julienmich@googlemail.com"}, {"date": "2013-07-12T12:53:19.594176Z", "commit": "1988", "author": "julienmich@googlemail.com"}, {"date": "2013-07-12T12:50:08.684443Z", "commit": "1987", "message": "Will this commit ever work ??\n\n", "author": "julienmich@googlemail.com"}, {"date": "2013-07-11T10:00:30.598825Z", "commit": "1986", "message": "svn merge -r 1849:1978 http://sire.googlecode.com/svn/corelib/branches/users/nividic .\n\nalso resolved 13 conflicts\n\n", "author": "julienmich@googlemail.com"}, {"date": "2013-06-27T13:41:45.345875Z", "commit": "1985", "message": "I've fixed a lot of performance problems with MultiFloat and MultiDouble that were revealed\nwhen I updated the speedtest to do some realistic calculation (coulomb energy between two\ngroups of atoms). I've inlined most things and have also added SP/DP sums for the floating\npoint summation (which gives almost exactly the same result as for DP/DP).\n\nThe speed results are in speedtest_results, and show that the AVX floating point code\nis going as fast as the hardware will allow (13.8-13.9 GFLOPs per core, which is almost\nexactly the theoretical peak of 14.4 GFLOPs per core...! 95% efficient).\n\nThe speedtest also shows that all versions (vanilla, SSE and AVX, for float and double)\ngive the same energy, which is reassuring.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-26T15:43:04.073014Z", "commit": "1984", "message": "I've added code to convert between MultiFloat and MultiDouble, have added more tests for the classes\nand have also added a speed test executable (together with results for my Macbook Air in the same\ndirectory - my Air can get over 3 GFLOPs per core of single precision addition plus sqrt when using AVX\n(so 6 GFLOPs for the machine, when the theoretical peak is 28.8 GFLOPs...). I still have some way\nto go to speed things up, but it is not bad :-)\n \n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-26T15:39:52.870143Z", "commit": "1983", "message": "Python wrappers for the next commit of corelib\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-26T11:44:11.028002Z", "commit": "1982", "message": "I've added a MultiDouble class that provides a double vector with the same\nnumber of elements as MultiFloat\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-26T11:43:34.454646Z", "commit": "1981", "message": "Additional python wrappers for the MultiDouble class to be committed in the next commit of corelib\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-26T10:35:23.040985Z", "commit": "1980", "message": "Added in a MultiFixed vector, that provides a vector of 64bit fixed point numbers (32bits each for\neither side of the decimal point) for fixed point arithmetic. MultiFixed is dimensioned to have\nan identical vector size as MultiFloat.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-26T10:34:18.124669Z", "commit": "1979", "message": "Python wrappers for the next corelib commit, plus added the option to WSRC.py to \nchoose the swap water cluster from only the free water box\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-25T09:39:02.525352Z", "commit": "1978", "message": "python wrapper update", "author": "nividic73@googlemail.com"}, {"date": "2013-06-24T14:10:57.665270Z", "commit": "1977", "message": "single topology update", "author": "nividic73@googlemail.com"}, {"date": "2013-06-24T14:10:20.899945Z", "commit": "1976", "message": "Added python wrapping for the \"isAligned\" function. Note that this wrapper doesn't\nsupport alignment yet, so creating or calling MultiFloat functions can often result\nin an exception being raised.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-24T14:09:21.874366Z", "commit": "1975", "message": "I've got the AVX version of MultiFloat working (yay - my MacBook Air supports AVX 1 :-)). I've\nalso added a simple test application as python finds it difficult to allocate an aligned MultiFloat...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-21T16:59:06.229784Z", "commit": "1974", "message": "I've added the sse shuffle operation to perform the rotate. This crashes when I fully rotate the vector...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-21T16:45:59.413068Z", "commit": "1973", "message": "Updated python wrappers to accompany the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-21T16:45:36.022088Z", "commit": "1972", "message": "I've added functions to easily convert from an array of floats/doubles to an\narray of MultiFloats.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-21T16:07:25.357831Z", "commit": "1971", "message": "Here's the python wrappers for MultiFloat\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-21T16:06:46.121325Z", "commit": "1970", "message": "I've filled in all of the functionality of MultiFloat and have exposed it to python\n(and tested it all)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-21T12:16:29.803025Z", "commit": "1969", "message": "Beginning work on a vectorised multi-precision model to accelerate the forcefields\nin Sire. Just added an abstraction of a vectorised float.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-20T15:10:06.790086Z", "commit": "1968", "message": "Committing the updated python modules from devel to Julien's branch. This includes an FDTISingleBound.py\nthat supports the grid.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-20T15:05:44.944363Z", "commit": "1967", "message": "Fixed a bug in AmberLoader caused by some pythons not coping with the \"for atom in atoms:\" syntax...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-20T14:54:01.237313Z", "commit": "1966", "message": "Fixed a silly bug that slowed down the simulation by saving the coordinates of everything for every\nframe for the intermediate lambda values\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-20T14:28:31.744436Z", "commit": "1965", "message": "I've finished adding the grid to FDTISingleBound.py and am now debugging. It has significantly\nsped up the simulation, although part of this is the fact that most of the atoms are now\nremoved as fixed atoms.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-20T11:38:55.244570Z", "commit": "1964", "message": "Begun adding in support for the grid to FDTISingleBound.py. Get a segfault when running the simulation...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-19T14:21:01.216171Z", "commit": "1963", "message": "Committing updated FDTI scripts copied from devel branch\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-19T14:04:51.508040Z", "commit": "1962", "message": "Updated the scripts to properly interpret the nmoves_per_energy variable\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-19T10:23:07.904305Z", "commit": "1961", "message": "Ported the last fixes from devel to Julien's branch\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-19T10:22:48.551961Z", "commit": "1960", "message": "Ported the last fixes from devel to Julien's branch\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-19T10:01:57.137253Z", "commit": "1959", "message": "Fixed a bug in FDTISingleBound.py that added moves even when there were no molecules to be sampled\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-19T10:01:20.217328Z", "commit": "1958", "message": "Fixed a crash caused when a Move with no contained molecules is attempted (the sampler cannot cope\nwith having no molecules!)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-19T08:53:46.513750Z", "commit": "1957", "message": "Added skip time to single topoly method", "author": "nividic73@googlemail.com"}, {"date": "2013-06-17T16:37:44.179502Z", "commit": "1956", "message": "Committing the same PropertyList fix as for Julien's branch...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-17T16:36:43.808689Z", "commit": "1955", "message": "Committing the same fix to the devel branch\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-17T16:32:54.682492Z", "commit": "1954", "message": "Fixed python compile bug to support Python < 2.7\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-17T16:15:15.953814Z", "commit": "1953", "message": "Fixed compile problems with PropertyList for Qt 4.2\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-17T16:07:08.158164Z", "commit": "1952", "message": "Merged the optimised Amber and related functions back to Julien's branch.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-17T16:06:45.057840Z", "commit": "1951", "message": "Updated version of FDTISingleBound.py to match that in the devel branch.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-17T16:01:28.708339Z", "commit": "1950", "message": "I've ported the Amber crd/top reader from Julien's branch to the main devel branch, which\nmeant bringing across AmberParameters and AtomCutting too. I've optimised AmberParameters as\nthis was causing the read times for Amber().readCrdTop() to be huge! (90 seconds versus 35 seconds).\n\nCode seems to be working\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-17T15:59:45.699347Z", "commit": "1949", "message": "Python wrappers for the next commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-17T14:08:27.964889Z", "commit": "1948", "message": "I've added a script that uses astyle to beautify the code and enforce a consistent style.\nI've removed the backtrace from exception so that it is much faster (too much code relies\non throwing exceptions as part of normal operation). I've also improved the speed of\nthe perturbation code by removing its reliance on exceptions.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-17T11:50:14.802077Z", "commit": "1947", "message": "Single topology update", "author": "nividic73@googlemail.com"}, {"date": "2013-06-17T11:31:44.145762Z", "commit": "1946", "message": "I've merged all of the latest changes from the devel branch back into Julien's branch\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-17T11:28:34.536592Z", "commit": "1945", "message": "Updated python wrappers for the next commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-14T15:53:08.839279Z", "commit": "1944", "message": "Updated the main branch to merge in the differences from Julien's branch so that \nit can run the FDTISingleBound module that I've just added to Sire.Tools\n(last commit of the python wrappers)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-14T15:51:31.100788Z", "commit": "1943", "message": "Updated python wrappers and also added in the FDTISingleBound.py module to perform\nthe bound leg for a protein-ligand single topology simulation\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-14T11:15:41.382232Z", "commit": "1942", "message": "Added another test of the fixed center property code. This test rotates a ligand around its center\nproperty, and also performs internal moves on the ligand. The ligand does not drift and the center\nis retained throughout the run.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-14T11:02:10.644682Z", "commit": "1941", "message": "I've added a \"center\" property to the molecules that, if set, would force the rigid body MC move to\nrotate around the set \"center\", rather than the result of the center function. The center point is\nupdated automatically in mover.cpp as the molecule is translated and rotated.\n\nI've updated test/SireMove/rigidbodymc.py to demonstrate and test its use.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-14T10:10:09.152595Z", "commit": "1940", "message": "Updated the function to automatically assign identity points so that it can work from atomic masses,\nas well as atomic elements. This is to fix the case where the \"element\" property of a molecule has\nnot been set.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-13T15:46:59.729743Z", "commit": "1939", "message": "Debugging - Single topology", "author": "nividic73@googlemail.com"}, {"date": "2013-06-10T15:45:00.302557Z", "commit": "1938", "message": "I've added a test for the Sire.Tools.WaterChanger module that can convert TIP3P to TIP4P\n\nJust take a look at test/Tools/testmaketip4p.py for an example. Also, I've updated\nthe WSRC example to switch to TIP4P (for a test)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-10T15:44:01.297331Z", "commit": "1937", "message": "I've added a function to Sire.Tools that can convert TIP3P water molecules to TIP4P water molecules.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-10T15:35:38.332922Z", "commit": "1936", "message": "added DCD support to single topology - Debugging stage", "author": "nividic73@googlemail.com"}, {"date": "2013-06-10T14:09:16.009138Z", "commit": "1935", "message": "Fixed an annoying bug in AtomPairs that caused the intramolecular energy of a molecule to\nbe infinite if the extracted part of the molecule contained the last atom in the molecule.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-10T09:13:44.008507Z", "commit": "1934", "message": "single topology update", "author": "nividic73@googlemail.com"}, {"date": "2013-06-07T11:33:10.724814Z", "commit": "1933", "message": "I've finished adding the ability to save arbitrary data types as properties, e.g.\nif you look at test/SireBase/testwrap.py you can see that we can now easily store\nstrings, integers, doubles, vectors, and arrays of all of these in a molecule. This\nis really useful as it lets us save additional data to the molecule that can be\nused during setup and within the high level python scripts.\n\nCode compiles, links runs and appears to be working\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-07T11:30:39.240298Z", "commit": "1932", "message": "Python wrappers for the next commit...\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-06T16:10:14.446650Z", "commit": "1931", "message": "I'm adding in simple number, string, vector and array properties so that it is easy to\nsave additional information to a molecule etc.\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-06-05T12:58:11.543076Z", "commit": "1930", "message": "Added support for different integrators - single topology", "author": "nividic73@googlemail.com"}, {"date": "2013-06-03T15:00:13.185782Z", "commit": "1929", "message": "Update - single topology", "author": "nividic73@googlemail.com"}, {"date": "2013-06-01T20:27:12.478085Z", "commit": "1928", "message": "Fixed Bug related to the perturbed angle term - Single topology OpenMM", "author": "nividic73"}, {"date": "2013-05-31T14:56:29.551821Z", "commit": "1927", "message": "I've found a major bug in the WSRC module that caused free energies to be calculated\nincorrectly. This is the source of the strange PMFs that I have been seeing and that\nI have been debugging. The problem was that I hadn't used the correct lambda values\nfor the forwards and backwards energy expressions...\n\nAlso, to this I had added the ability to use a smaller reflection sphere for the ligand\nand to not print out the PDBs of intermediate lambda values.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-31T12:54:41.634459Z", "commit": "1926", "message": "Update single topology", "author": "nividic73@googlemail.com"}, {"date": "2013-05-31T10:26:56.213454Z", "commit": "1925", "message": "Update gradient calculation - single topology", "author": "nividic73"}, {"date": "2013-05-30T16:37:37.195871Z", "commit": "1924", "message": "Fixed a bug in the WSRC script that meant that the fixed buffered protein residues\nwere not printed in the output PDB file.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-30T14:57:52.578043Z", "commit": "1923", "message": "I've added a printout of the gradients to the PMF...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-30T14:54:14.602623Z", "commit": "1922", "message": "Update 14 interactions - single topology method", "author": "nividic73"}, {"date": "2013-05-30T13:55:43.070947Z", "commit": "1921", "message": "Added the ability to set the soften water parameter in the WSRC module.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-30T11:09:55.366136Z", "commit": "1920", "message": "Added back rigid body translation and rotation moves to the WSRC script and have slightly\nincreased the maximum move delta for the protein backbone moves as the acceptance\nratio was too high.\n\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-29T15:46:00.132040Z", "commit": "1919", "message": "Small fix to allow Sire to compile against older versions of Qt (Qt 4.4)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-29T14:54:11.869538Z", "commit": "1918", "message": "Small updates to the WSRC example...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-29T14:52:03.870111Z", "commit": "1917", "message": "I've added code to support FDTISingleFree.py with python 2.5, have ported WSRC.py over\nto using Sire.Tools.Parameters for parameters and have added code to allow the PDB\nof the WSRC system to be printed after each iteration\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-28T16:01:23.226792Z", "commit": "1916", "message": "I've fixed FDTISingleFree.py which used some new Python 3 syntax which didn't work for Python 2.5\n\nI've also edited the python wrappers for Move so that compilation still succeeds if OpenMM\nis not installed (this was to fix my install of Julien's branch on a Linux without OpenMM)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-28T15:10:51.987524Z", "commit": "1915", "message": "Added the capability in FDTISingleFree.py to specify the directory for all of the output files\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-27T14:42:20.472594Z", "commit": "1914", "message": "gradient calculation - single topology", "author": "nividic73@googlemail.com"}, {"date": "2013-05-24T12:29:17.896712Z", "commit": "1913", "message": "Added support to solvent - single topology", "author": "nividic73@googlemail.com"}, {"date": "2013-05-23T11:08:39.302716Z", "commit": "1912", "message": "I started adding support for the solvent - single topology", "author": "nividic73@googlemail.com"}, {"date": "2013-05-20T14:07:07.482527Z", "commit": "1911", "message": "Free enrgy update", "author": "nividic73@googlemail.com"}, {"date": "2013-05-20T09:04:03.966128Z", "commit": "1910", "message": "Free energy single topology update", "author": "nividic73"}, {"date": "2013-05-17T16:03:09.406411Z", "commit": "1909", "message": "Here are the python wrappers for the last commit. There are many changes caused by the\nchange in API from .energy(EnergyTable...) to .energyTable(EnergyTable...).\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-17T15:58:25.616489Z", "commit": "1908", "message": "I've ported across the changes from devel (adding in support for different coulomb and LJ\ncutoffs in forcefields) and also added all of the other cutoff methods to IntraSoftCLJPotential.\n\nAlso, I have renamed .energy(EnergyTable...) functions to .energyTable(EnergyTable...).\nThis is necessary as .energy() is a reserved function name that is to be used only to \ncalculate and return individual energies. Having .energy(EnergyTable...) caused many \nproblems as python was not able to handle the argument overloading correctly.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-17T15:51:20.645054Z", "commit": "1907", "message": "Removed the FastInterCLJFF forcefield\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-17T15:49:29.122567Z", "commit": "1906", "message": "Removed the FastInterCLJFF from SireMM\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-17T13:53:26.240587Z", "commit": "1905", "message": "Fixed some compilation errors in the SSE version of the softcljpotential routines.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-17T13:24:13.297106Z", "commit": "1904", "message": "I've cleaned up the CLJ and SoftCLJ code and have checked that all of the tests on the intra\nand inter forcefields have passed (testintersoftcljff.py, testintrasoftcljff.py and testgridff.py\nand testgridff2.py). It looks like all of the different cutoff schemes using different\ncoulomb and LJ cutoffs are working :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-17T11:31:18.828263Z", "commit": "1903", "message": "Update Reaction Field expression in OpenMM single topology file", "author": "nividic73@googlemail.com"}, {"date": "2013-05-17T10:26:35.372023Z", "commit": "1902", "message": "I've debugged and fixed problems in IntraCLJPotential and IntraSoftCLJPotential and have \nchecked that the energies given by both agree with one another, and that having\ndifferent coulomb and LJ cutoffs gives the same numbers as forcefields with same\ncutoffs (see test/SireMM/testintrasoftcljff.py). I will next work on a similar test\nfor InterCLJPotential and InterSoftCLJPotential.\n\nNote I also found a bug in SireFF/detail/ffmolecules.cpp that meant that it crashed\nwhen calculating intramolecular energies of molecules when the molecule had been\nadded to the forcefield one residue at a time. The idx_to_cgidx map was not being\nupdated when the atom selection was being changed.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-17T10:23:07.603862Z", "commit": "1901", "message": "Here is the updated Sire.Tools module ported from Julien's branch\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-16T17:00:32.211436Z", "commit": "1900", "message": "Reaction Field update", "author": "nividic73"}, {"date": "2013-05-16T13:58:32.892122Z", "commit": "1899", "message": "Here are the updated python wrappers for the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-16T13:57:16.704169Z", "commit": "1898", "message": "I've added support for different coulomb and LJ cutoff distances in the CLJ and SoftCLJ forcefields\nand have also ported across Julien's IntraSoftCLJFF forcefield into the devel branch.\n\nEverything compiles, but I need to test it all ;-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-15T15:45:32.493422Z", "commit": "1897", "message": "Added more functionality to the FDTISingleFree.py script and have verified that it gives\nthe same energies as the original script and for different cutoff schemes, use of grid etc.\nAlso added the ability to switch off soft core.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-15T15:38:44.607181Z", "commit": "1896", "message": "Reaction field support in the single topology method - code broken", "author": "nividic73@googlemail.com"}, {"date": "2013-05-15T12:26:34.660742Z", "commit": "1895", "message": "Non bondeded interactions update", "author": "nividic73"}, {"date": "2013-05-15T11:42:21.448191Z", "commit": "1894", "message": "I've finished adding support for spherical boundaries, and have also added support\nfor the grid forcefield and for different nonbonded cutoff schemes.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-14T15:31:24.600954Z", "commit": "1893", "message": "Updates to the FDTISingleFree script and fixing some bugs in Sire.Tools\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-13T16:18:44.879126Z", "commit": "1892", "message": "Fixed printing bugs with the Parameter object\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-13T16:09:36.246170Z", "commit": "1891", "message": "I've updated __init__.py to add a class that handles user-supplied script parameters and have\nadded Julien's FDTI single topology (free leg) script as FDTISingleFree.py and updated this\nto use those user parameters.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-10T15:46:47.698707Z", "commit": "1890", "message": "update", "author": "nividic73@googlemail.com"}, {"date": "2013-05-10T12:58:31.423552Z", "commit": "1889", "message": "Adding in the updated python wrappers for the backport from devel, and have also\nadded the \"Sire.Tools\" module\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-10T12:51:14.195377Z", "commit": "1888", "message": "Backporting advances in devel to this branch, and also adding in the WSRC example\n(see last commit to devel)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-10T10:54:36.152189Z", "commit": "1887", "message": "I've removed sirentest and sire_browser from the apps (so Sire now depends only on QtCore) and\nhave added in a WSRC example script in the examples directory\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-10T10:49:26.259259Z", "commit": "1886", "message": "Added a \"Sire.Tools\" module to hold useful python scripts and modules\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-05-09T15:31:43.198817Z", "commit": "1885", "message": "bypass OpenMM bug when an empty custom force field is added to the system", "author": "nividic73@googlemail.com"}, {"date": "2013-04-30T13:41:43.089576Z", "commit": "1884", "message": "Try to fix a bug related to the energy orders in openmm - possibly a bug in the openmm source", "author": "nividic73@googlemail.com"}, {"date": "2013-04-29T16:13:53.994071Z", "commit": "1883", "message": "attempt to fix a bug with the order of forces in the non bonded terms  - Single topology", "author": "nividic73@googlemail.com"}, {"date": "2013-04-28T19:24:43.131371Z", "commit": "1882", "message": "Final Hamiltonian Non-Bonded single topology", "author": "nividic73"}, {"date": "2013-04-26T16:32:31.685055Z", "commit": "1881", "message": "I've removed lots of old unused libraries and have removed dependencies on non QtCore Qt libraries\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-04-26T16:31:56.871129Z", "commit": "1880", "message": "Here are the python wrappers that remove many of the old libraries from Julien's branch\n(and remove dependency on non QtCore Qt libraries)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-04-26T15:42:04.776108Z", "commit": "1879", "message": "Here are the fixed python wrappers that remove old and unused libraries and also remove\ndependencies on all Qt libraries except QtCore.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-04-26T14:38:10.127450Z", "commit": "1878", "message": "I've removed unnecessary libraries from Sire. Now need to remove them from the python wrappers...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-04-24T15:09:05.059216Z", "commit": "1877", "message": "update openmm  single topogy potential to match sire potential - attempt -code broken", "author": "nividic73@googlemail.com"}, {"date": "2013-04-23T15:58:53.853465Z", "commit": "1876", "message": "fixed problem with opencl platform", "author": "nividic73@googlemail.com"}, {"date": "2013-04-23T12:53:56.155829Z", "commit": "1875", "message": "Update 1-4 non bonded interactions", "author": "nividic73"}, {"date": "2013-04-19T15:29:36.893754Z", "commit": "1874", "message": "update single topology", "author": "nividic73@googlemail.com"}, {"date": "2013-04-19T11:34:56.188705Z", "commit": "1873", "message": "single topology new force field - Code Broken", "author": "nividic73"}, {"date": "2013-04-16T15:24:47.704991Z", "commit": "1872", "message": "debugging intra non bonded interactions", "author": "nividic73"}, {"date": "2013-04-15T14:16:29.595875Z", "commit": "1871", "message": "Redesign of Non Bonded interactions - single topology method - Code Broken", "author": "nividic73"}, {"date": "2013-04-12T14:07:51.254220Z", "commit": "1870", "message": "There is a mismatch between Sire and OpenMM  when 3 atoms are aligned in the Dihedral energy", "author": "nividic73@googlemail.com"}, {"date": "2013-04-11T15:10:20.377470Z", "commit": "1869", "message": "Free enrgy soingle topology - I disabled all the bonded terms", "author": "nividic73@googlemail.com"}, {"date": "2013-04-11T09:46:03.218136Z", "commit": "1868", "message": "Free enegy calculation single topology  - Fixed bug in OpenCL mode", "author": "nividic73@googlemail.com"}, {"date": "2013-04-10T14:32:50.017684Z", "commit": "1867", "message": "free energy single topology update", "author": "nividic73"}, {"date": "2013-04-09T14:47:43.918741Z", "commit": "1866", "message": "Free Energy single topology - Bug if todummy group is empty - Code Broken", "author": "nividic73@googlemail.com"}, {"date": "2013-04-09T11:13:53.955038Z", "commit": "1865", "message": "Single Topology Free Energy Calculation - Fixed Dihedral bug - Code Broken", "author": "nividic73"}, {"date": "2013-04-08T15:56:09.394509Z", "commit": "1864", "message": "Debug free energy calculation - Dihedral term", "author": "nividic73@googlemail.com"}, {"date": "2013-03-22T15:59:17.920264Z", "commit": "1863", "message": "start adding support for Ewald and PME to openmm md integrator", "author": "nividic73@googlemail.com"}, {"date": "2013-03-22T12:45:44.380306Z", "commit": "1862", "message": "Started debugging on the perturbed dihedrals", "author": "nividic73"}, {"date": "2013-03-22T11:44:59.391776Z", "commit": "1861", "message": "Fixed bug with bonds and angles units related to the perturbation in  in the single topology method", "author": "nividic73"}, {"date": "2013-03-21T10:07:21.358197Z", "commit": "1860", "message": "I comment out part of single topology integrator to cath a bug", "author": "nividic73@googlemail.com"}, {"date": "2013-03-18T14:53:27.176979Z", "commit": "1859", "message": "Added support for single,double,mixed precision to openmm 5.0 in mdintegrator and LJ dipserion term as well", "author": "nividic73@googlemail.com"}, {"date": "2013-03-15T12:39:38.754569Z", "commit": "1858", "message": "Single topology method: debugging - code broken", "author": "nividic73@googlemail.com"}, {"date": "2013-03-12T15:17:39.424237Z", "commit": "1857", "message": "update some files after merging", "author": "nividic73@googlemail.com"}, {"date": "2013-03-12T12:02:47.771984Z", "commit": "1856", "message": "We think julien's and gaetano's versions have now been merged...\n\n", "author": "nividic73@googlemail.com"}, {"date": "2013-03-12T11:40:56.011307Z", "commit": "1855", "author": "nividic73@googlemail.com"}, {"date": "2013-03-12T11:40:13.361536Z", "commit": "1854", "message": "svn merge https://sire.googlecode.com/svn/python2/branches/users/julienmich/custom/Base/VariantProperty.pypp.cpp custom/Base/VariantProperty.pypp.cpp\n", "author": "nividic73@googlemail.com"}, {"date": "2013-03-12T11:39:46.055156Z", "commit": "1853", "author": "nividic73@googlemail.com"}, {"date": "2013-03-12T11:35:54.890630Z", "commit": "1852", "message": "attempt to merge python2 changes from julien's branch into gaetano's\n\n", "author": "nividic73@googlemail.com"}, {"date": "2013-03-12T11:17:45.999159Z", "commit": "1851", "message": "svn merge -r 1700:1849 https://sire.googlecode.com/svn/corelib/branches/users/julienmich .\n\nhad several tree conflicts to manually resolve\n\n\n", "author": "nividic73@googlemail.com"}, {"date": "2013-03-12T09:06:59.856332Z", "commit": "1850", "message": "Resolved conflict after merge", "author": "nividic73@googlemail.com"}, {"date": "2013-03-11T15:35:07.542938Z", "commit": "1849", "message": "bugfix to the bugfix...\n\n", "author": "julienmich@gmail.com"}, {"date": "2013-03-11T14:49:34.795725Z", "commit": "1848", "message": "single topoly method - normal dihedral and improper support added", "author": "nividic73@googlemail.com"}, {"date": "2013-03-11T14:17:40.389552Z", "commit": "1847", "message": "bugfixes to Xatomfunctions code to avoid duplicating internal degrees of freedom \n\nalso fixed a bug in the connectivity getDihedrals code that would otherwise create incorrectly a dihedral involving twice the same atom for short cyclic molecules such as cyclopropane\n\n", "author": "julienmich@gmail.com"}, {"date": "2013-03-08T14:08:45.743792Z", "commit": "1846", "message": "single topology update - added interactions for solute hard bonds and angles - code broken", "author": "nividic73@googlemail.com"}, {"date": "2013-03-07T13:37:49.434683Z", "commit": "1845", "message": "single topogy update - dihedrals and perturbed lists added to bond angle and dihedrals - code broken", "author": "nividic73@googlemail.com"}, {"date": "2013-03-06T13:34:24.631836Z", "commit": "1844", "message": "single topology update - code broken", "author": "nividic73@googlemail.com"}, {"date": "2013-03-05T15:44:44.310271Z", "commit": "1843", "message": "update SireCAS::product.cpp to handle the toOpenMMString() function", "author": "nividic73@googlemail.com"}, {"date": "2013-03-05T14:58:51.354257Z", "commit": "1842", "message": "update directory SireCAS and SireMove", "author": "nividic73@googlemail.com"}, {"date": "2013-03-04T20:05:43.344765Z", "commit": "1841", "message": "Fixes to perturbations code and internal move to enable ring sampling\n\n", "author": "julienmich@gmail.com"}, {"date": "2013-03-01T17:48:52.575359Z", "commit": "1840", "message": "Committing a fix for the phenol dihedral bug.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-03-01T17:47:52.714808Z", "commit": "1839", "message": "Python wrappers to accompany the last commit\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-03-01T17:47:19.440776Z", "commit": "1838", "message": "I've got the Titrator and TitrationMove working. It is not as clean as I would like, but it will let\nme test to see if this is a good idea... ;-)\n\nI've added an example script (test/SireMove/titrationmove.py)\n\nI've also fixed the inRing(dihedral) function to fix the phenol bug (C-C-O-H is not in a ring...!)\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-28T11:51:30.261977Z", "commit": "1837", "message": "Ported the fix for the linear angle bug to Julien's branch, and have added in the change\nto ConnectivityEditor needed to allow test/SireMol/linearmols.py to run.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-28T11:50:46.314851Z", "commit": "1836", "message": "Updated python wrappers for the next commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-28T11:35:32.437326Z", "commit": "1835", "message": "I've fixed a small bug that causes an exception to be raised on rare occasions when moving the angle\nof linear groups. I've also added a \"disconnectAll()\" function to Connectivity, added in a NullBondHunter \nclass so that empty Connectivity objects can be created, and added a test for moving linear molecules.\n\nI am also committed my work to date on the TitrationMove (most of this is stubbed and non-functional)\n\nCode compiles, links and works as expected.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-28T11:33:40.159673Z", "commit": "1834", "message": "Python wrappers needed for the next commit...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-27T15:51:19.050431Z", "commit": "1833", "message": "These are the python wrappers which accompany the new Connectivity code\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-27T15:50:37.771761Z", "commit": "1832", "message": "I've merged the changes needed to support ring moves, have tidied up the print out from\nException::toString() (to stop you having to scroll up all of the time!) and have also\nedited Flexibility to properly version the binary data stream for this object.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-27T12:37:10.072168Z", "commit": "1831", "message": "I've fixed a small bug in the findPaths routine that caused a second path to be skipped\nwhen the ring appeared in the middle of the chain (e.g. a proline in a chain should add\ntwo paths along the CA backbone of the protein - one around the proline ring and one\nalong the backbone - the bug skipped one of them out). This slows down the path\nhunting as the fix causes lots or reallocs of the \"done\" list of parsed atoms. \n\nI've tested this on a big protein and the paths I get all seem sensible ;-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-27T12:09:46.170954Z", "commit": "1830", "message": "I've filled in the stub functions and it is now possible to query whether two, three or four atoms are\npart of a ring. I've also added a \"findPaths\" function that finds all bonded pathways between two\natoms in a molecule (in the Connectivity object). See test/SireMol/ringmoves.py for an example that\nuses this function to print the paths between the ends of the moved bond, angle and dihedral.\n\nCode compiles, links and works as expected.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-27T12:07:29.895432Z", "commit": "1829", "message": "Updated python wrappers for the next commit of corelib...\n\n(this version is broken, as it needs the next commit of corelib)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-26T17:59:50.584482Z", "commit": "1828", "message": "Committing the python wrappers for the updated Connectivity class. Note that the current\nversion on the repository uses stubs for Connectivity::inRing(...), so it will produce\nerroneous results!\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-26T17:58:54.761244Z", "commit": "1827", "message": "I've updated the Connectivity class so that moves in rings are now permitted (removing the\nneed for a ring_error exception). I've also added in stubs for a inRing(..) function that\nallows users to detect rings without relying on ring_errors begin raised.\n\nI've added a test (test/SireMol/ringmoves.py) that test the ring moves and demonstrate the\nrange of motion possible using oseltamivir.\n\nI've also added in all of the files for the Sire tutorial I ran at Bristol and Edinburgh.\n\nCode compiles, runs and produces output as expected.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-26T11:06:38.889921Z", "commit": "1826", "message": "single topoly - toOpenMM method - code broken", "author": "nividic73@gmail.com"}, {"date": "2013-02-21T15:54:09.171921Z", "commit": "1825", "message": "single topoly update - code broken", "author": "nividic73@gmail.com"}, {"date": "2013-02-20T14:40:10.365757Z", "commit": "1824", "message": "Fresh commit of current python wrappers\n", "author": "julienmich@gmail.com"}, {"date": "2013-02-20T14:39:29.080770Z", "commit": "1823", "message": "Bugfix - improper potentials were not correctly set after parsing the pert file\n\n", "author": "julienmich@gmail.com"}, {"date": "2013-02-19T11:35:12.156075Z", "commit": "1822", "message": "Single topology update. Code Broken", "author": "nividic73@gmail.com"}, {"date": "2013-02-14T14:16:12.177719Z", "commit": "1821", "message": "Exposed QVector<MolNum> to Python\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-13T20:01:54.062511Z", "commit": "1820", "message": "updated internal move to have separate maxvar parameters for bonds, angles and dihedrals\n\n", "author": "julienmich@gmail.com"}, {"date": "2013-02-10T13:47:41.674663Z", "commit": "1819", "message": "Zebedde-only update.\n", "author": "bjolong@gmail.com"}, {"date": "2013-02-08T15:02:26.939515Z", "commit": "1818", "message": "I've updated the grid forcefield and have checked it with WSRC against the InterGroupCLJFF. There\nis almost perfect agreement (perfect for LJ, just ~0.05 kcal mol-1 in ~4000 kcal mol-1 total\nenergy for coulomb, osel in neura). The WSRC simulations using GridFF and InterGroupCLJFF also\ngive about the same behaviour and free energies.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-08T15:00:58.387692Z", "commit": "1817", "message": "Python wrappers for the next commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-07T16:53:15.559930Z", "commit": "1816", "message": "I've started the modification on aMD and single topology", "author": "nividic73@gmail.com"}, {"date": "2013-02-06T16:45:13.277781Z", "commit": "1815", "message": "I've restored the original amber.zmatrices from Julien, with the original move deltas. I think \nthat the GridFF bug I fixed in the last update caused the move delta problems I was seeing. I've\nalso added the CYM (deprotonated cysteine) to amber.zmatrices\n\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-06T16:14:35.199950Z", "commit": "1814", "message": "I've fixed a bug in the latest version of the GridFF forcefield that was causing it to not update\nthe LJ parameter matrix after being re-read from a binary data file. This caused the LJ energy\nto be incorrect. I've updated the test/SireMM/testgridff.py test script so that it simultaneously\ncalculates the \"correct\" and \"grid\" energies for loading, saving, moving and recalculating a \nsystem and have confirmed that the energies now agree to about <0.01 kcal mol-1 for a 0.5 A grid.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-06T14:27:04.964404Z", "commit": "1813", "message": "Free Energy Update - Pass back Gradient vector to Sire", "author": "nividic73@gmail.com"}, {"date": "2013-02-05T15:54:12.215138Z", "commit": "1812", "message": "I've updated Gaetano's branch to use a non-const Integrator class.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-05T15:53:45.679347Z", "commit": "1811", "message": "I've updated the python wrappers to allow a non-const Integrator class\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-05T15:30:48.354801Z", "commit": "1810", "message": "free energy update - Pass back to Sire gradient array", "author": "nividic73@gmail.com"}, {"date": "2013-02-05T14:35:06.245829Z", "commit": "1809", "message": "First commit of (incomplete) openmm amd integrator\n\n", "author": "julienmich@gmail.com"}, {"date": "2013-02-03T17:55:44.754631Z", "commit": "1808", "message": "I've changed the streaming of the grid forcefield so that it saves and restores the\ncomplete grid. This stops the grid forcefield expensively recalculating the grid all \nof the time, and also allows replicas in a replica exchange simulation to share the \nmemory requirements for each grid.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-03T16:14:16.566325Z", "commit": "1807", "message": "Updated python wrappers for the last commit\n\nCode is working\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-03T16:12:45.029670Z", "commit": "1806", "message": "I've fixed the bugs in IDAssigner and EnergyMonitor that were causing some exceptions\nto be thrown when updating my WSRC scripts. The problems were caused by the IDAssigner\nnot handling the case when no statistics had been collected.\n\nCode is working - need to commit updated python wrappers\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-01T13:08:00.874526Z", "commit": "1805", "message": "I've updated, compiled and tested Gaetano's python wrappers. Hopefully this fixes the\nopenmm clashing problem, allowing the wrappers to be generated automatically, rather\nthan maintained via manual fixes\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-01T12:40:25.573775Z", "commit": "1804", "message": "I've fixed the python wrapper generation bugs. Here are the updated wrappers for the devel branch.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-02-01T11:57:01.706479Z", "commit": "1803", "message": "Added a \"clone\" function to Vector3D so that it worked better with the python wrappers.\nAm currently fixing a lot of bugs in the python wrapper generation, so consider this version\nof the devel branch as temporarily broken. Should be fixed by later today.\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-01-30T23:27:55.057908Z", "commit": "1802", "message": "Added support for several integrators\n\n", "author": "julienmich@gmail.com"}, {"date": "2013-01-30T19:32:23.374254Z", "commit": "1801", "message": "Updated openmmdmdintegrator to enable simulation of non periodic systems\n\n", "author": "julienmich@gmail.com"}, {"date": "2013-01-28T00:15:53.302218Z", "commit": "1800", "message": "Added support for reaction field to the IntraSoftCLJ force field\n\n", "author": "julienmich@gmail.com"}, {"date": "2013-01-22T12:31:31.691387Z", "commit": "1799", "message": "free energy dual topology update", "author": "nividic73@gmail.com"}, {"date": "2013-01-17T10:06:23.529586Z", "commit": "1798", "message": "free energy update", "author": "nividic73@gmail.com"}, {"date": "2013-01-14T12:23:05.206254Z", "commit": "1797", "message": "I've fixed bugs in the GridFF forcefield and also updated the ZMatMove class. This is to restore\nthe ability for the code to calculate changes in energies of only parts of a molecule when they\nmove, rather than for the whole molecule.\n\nIMPORTANT - I have also play around a bit with the move deltas for the protein (amber.zmatricies).\nI've halved the dihedral and angle deltas, as I was seeing that the acceptance ratio for \nthe existing values for zmat moves was only about 10%, while this change raises the acceptance\nratio to 45%.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-01-11T16:40:06.097827Z", "commit": "1796", "message": "free enrgy update", "author": "nividic73@gmail.com"}, {"date": "2013-01-11T16:37:33.648283Z", "commit": "1795", "message": "Bugfix, the boolean variable isinitialised was not initialised correctly\n\n", "author": "julienmich@gmail.com"}, {"date": "2013-01-10T16:41:02.247598Z", "commit": "1794", "message": "Added a custom folder to python2 that contains custom python wrappers, for the rare cases where the automatically generated wrappers are incorrect\n\n", "author": "julienmich@gmail.com"}, {"date": "2013-01-10T16:39:45.084577Z", "commit": "1793", "message": "Updated the amber parser to be compatible with amber12 topologies\n\n", "author": "julienmich@gmail.com"}, {"date": "2013-01-09T16:51:47.054394Z", "commit": "1792", "message": "free energy update", "author": "nividic73@gmail.com"}, {"date": "2013-01-09T15:51:03.816750Z", "commit": "1791", "message": "Fixed an annoying old bug in AtomSelection that meant that sometimes it incorrectly stated\nthat atoms from all CutGroups had been selected when this was patently not the case\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-01-09T10:59:46.409971Z", "commit": "1790", "message": "I've fixed the next bug found by Hannes. The problem was I had forgotten to rename dist2 as r2...!\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-01-09T10:17:23.594005Z", "commit": "1789", "message": "I've committed a fix for Hannes's compile error is SSE is not available\n\n", "author": "chryswoods@gmail.com"}, {"date": "2013-01-08T14:30:57.550390Z", "commit": "1788", "message": "free energy update", "author": "nividic73@gmail.com"}, {"date": "2013-01-08T13:44:36.170056Z", "commit": "1787", "message": "free_energy optimisation stage", "author": "nividic73@gmail.com"}, {"date": "2013-01-08T11:37:17.524523Z", "commit": "1786", "message": "Forgot to comment out a print statement\n", "author": "julienmich@gmail.com"}, {"date": "2013-01-08T11:34:06.999705Z", "commit": "1785", "message": "Modified code so that energytables can be compued using an inter2b2g3d forcefield. Also cleanup a bit openmmmdintegrator. Commented out for now a debug statment in forcefields. \nMoved the patch/patches ff code to an unused subfolder as the python wrappers do not compile for these objects on my systems\n\n", "author": "julienmich@gmail.com"}, {"date": "2012-12-21T11:59:35.180078Z", "commit": "1784", "message": "Added fixed atom support to the grid forcefield to remove fixed atoms from the main system\nand thus to speed up internal updates in the code\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-12-18T16:36:33.799324Z", "commit": "1783", "message": "Fixed a small bug that prevented ZMatrix moves from being performed on molecules\nthat had been extracted from larger molecules.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-12-13T00:25:30.979532Z", "commit": "1782", "message": "Modified openmmmdintegrator so specific GPU devices can be specified at initialisation\n\n", "author": "julienmich@gmail.com"}, {"date": "2012-12-07T13:20:55.145672Z", "commit": "1781", "message": "Added reaction field support to compute energies and forces using MolForceTable and MolEnergyTable\n\n", "author": "julienmich@gmail.com"}, {"date": "2012-12-07T11:01:19.373781Z", "commit": "1780", "message": "Added the demos directory as the default for file browsing in the Options GUI, \nbut this is also settable from the job_classes.xml.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-12-06T17:24:08.242453Z", "commit": "1779", "message": "Changed lots of little things that make the GUI easier to understand and use.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-12-03T12:59:37.772269Z", "commit": "1778", "message": "Changed the names of the zeolite demo files, more in keeping with names \nin the options object.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-12-03T12:55:00.431799Z", "commit": "1777", "message": "Changed the zebedde directory as well.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-12-03T12:30:12.616988Z", "commit": "1776", "message": "Moved the demo directories to give them slightly more human readable \nnames.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-12-03T12:25:00.676816Z", "commit": "1775", "message": "Changed the pictures to be all PNGs.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-11-29T09:40:53.730990Z", "commit": "1774", "message": "Free energy calculation update", "author": "nividic73@gmail.com"}, {"date": "2012-11-23T13:40:27.135466Z", "commit": "1773", "message": "Fix potential energy oscillations using reaction field", "author": "nividic73@gmail.com"}, {"date": "2012-11-23T11:46:56.848937Z", "commit": "1772", "message": "Changes made for the Windows build. To ensure nothing is broken, these \nsources were also used for the Linux distribution build.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-11-22T11:52:49.234314Z", "commit": "1771", "message": "Found a problem on Windows, strtok_r again unfortunately.\ncode should work now.\n", "author": "bjolong@gmail.com"}, {"date": "2012-11-21T17:19:18.053865Z", "commit": "1770", "message": "revert to the previous relase because of a new bug", "author": "nividic73@gmail.com"}, {"date": "2012-11-20T17:37:40.232356Z", "commit": "1769", "message": "Free energy calculation improved - Fixed Energy Potential bug. Code broken", "author": "nividic73@gmail.com"}, {"date": "2012-11-14T11:48:54.433450Z", "commit": "1768", "message": "DCD writer update", "author": "nividic73@gmail.com"}, {"date": "2012-11-13T17:48:06.325109Z", "commit": "1767", "message": "Fixed a bug in MoleculeData that meant that the molecule number was not updated correctly\nwhen new molecules were loaded. This meant that the code that created unique molecule numbers\nwould sometimes create a number that matched a molecule loaded from a stream file.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-11-13T15:25:09.306555Z", "commit": "1766", "message": "I've fixed GridFF which had an inconsistent LJ and coulomb cutoff... I've also checked that \nthe energies when using fixed atoms and group 1 molecules are the same, and that they are\nthe same as an equivalent InterGroupCLJFF (see test/SireMM/testgridff2.py)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-11-09T19:09:22.744034Z", "commit": "1765", "message": "Committing the python wrappers for the last update\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-11-09T19:09:03.673738Z", "commit": "1764", "message": "I've added the ability to have anonymous fixed atoms added to a GridFF forcefield. This\nallows the energy of atoms to be included that are not added to the System, thereby\nspeeding up system updates as most of the molecules can be removed.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-11-09T16:50:55.196938Z", "commit": "1763", "message": "Committing the python wrappers that are associated with the last commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-11-09T16:49:35.506603Z", "commit": "1762", "message": "I've added an \"extract()\" function that allows part of a molecule to be extracted into \nits own, sub-molecule. This allows a subset, e.g. set of residues, or a protein to\nbe copied into a smaller protein. This should speed up calculations that only involve\nmoving small parts of a system, as now the part of the protein that moves can be extracted,\nand so updates to that part of the protein will not involve large memory copies or updates.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-11-09T14:22:33.278218Z", "commit": "1761", "message": "update dcd writer", "author": "nividic73@gmail.com"}, {"date": "2012-11-09T09:41:44.074563Z", "commit": "1760", "message": "The code for buffering coordinates seems to work, but testing is needed. \n\nImprovements to consider:\n\n- it would be better to clear the buffered properties before saving a restart to avoid making large restart files. This could make new python scripts buggy too. At the moment \nclearing the buffered molecule properties corrupt the restart.\n\n- The maxinum number of frames that can be buffered per openMM iteration is currently hardcoded. No checks are done that the memory requirements would be reasonable. \n\n- The python code to output multiple frames in a dcd file in one call could be optimised to avoid looping over all molecules multiple times\n\n", "author": "julienmich@gmail.com"}, {"date": "2012-11-08T19:41:20.999265Z", "commit": "1759", "message": "The new openMM MD code is partially working. Need to finish buffering coordinates efficiently. \n\n", "author": "julienmich@gmail.com"}, {"date": "2012-11-08T09:27:53.456068Z", "commit": "1758", "message": "Working on a faster openmmmd move by initialising an openmm system once\n\n", "author": "julienmich@gmail.com"}, {"date": "2012-11-07T17:33:54.934308Z", "commit": "1757", "message": "DCD writer new version. Code broken", "author": "nividic73@gmail.com"}, {"date": "2012-11-07T17:13:45.961813Z", "commit": "1756", "message": "Updated the freenrg workpacket to fix some bugs\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-11-07T16:58:18.189121Z", "commit": "1755", "message": "Adding in the demos for each of the workpackets\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-11-07T16:56:30.866358Z", "commit": "1754", "message": "Updated the free energy workpacket\n", "author": "chryswoods@gmail.com"}, {"date": "2012-11-07T16:52:45.183126Z", "commit": "1753", "message": "Changed the class choosing page to have very definite Create and Cancel buttons.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-11-07T16:46:30.572654Z", "commit": "1752", "message": "Added highlighting and selection to the job class screen.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-11-07T16:35:15.071860Z", "commit": "1751", "message": "I've added in the free energy job class\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-11-07T15:54:40.143699Z", "commit": "1750", "message": "Oops. Fixed my silly typos.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-11-07T15:52:06.085702Z", "commit": "1749", "message": "Fixed partial/full username matching failure.\ncode is working?\n", "author": "bjolong@gmail.com"}, {"date": "2012-11-06T17:15:18.892784Z", "commit": "1748", "message": "Fixing bugs, added the push-and-forget mechanism, as well as fixing some stupid bugs in \nthe mouse event handler. Also fixed daft UUID forgetfulness in the main program.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-11-05T14:45:56.301136Z", "commit": "1747", "message": "Fixed the infinity of clicking bug.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-11-05T13:46:52.441374Z", "commit": "1746", "message": "Fixed the issue with refresh, it was just that the refresh happened before the job \nclass was chosen, so the image did not appear.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-11-05T12:37:07.634288Z", "commit": "1745", "message": "Fixed the chord/pie drawing, but full referesh is not being called at the right times.\ncode is working-ish\n", "author": "bjolong@gmail.com"}, {"date": "2012-11-05T12:24:57.583632Z", "commit": "1744", "message": "Fixed the pictures and rewrote the work packet widget system, again. Added a download \nprogress bar.\ncode seems to be working\n", "author": "bjolong@gmail.com"}, {"date": "2012-11-02T17:26:35.791203Z", "commit": "1743", "message": "Made jobs have names and be connected to little circles. Job preparation should be \nresumable from any stage now. Still have to make download progress bars and job-specific\nbackgrounds and add colour but I'm sure this is okay for now.\ncode is working I think\n", "author": "bjolong@gmail.com"}, {"date": "2012-11-02T11:20:33.584825Z", "commit": "1742", "message": "Adding virtual sites support for 4 site water model\n\n", "author": "julienmich@gmail.com"}, {"date": "2012-11-02T11:07:31.704018Z", "commit": "1741", "message": "It seems the Z-ordering problem was solved with a QGraphicsProxyWidget.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-11-02T10:53:50.815731Z", "commit": "1740", "message": "This should have allowed cluster specification. Can't test it though as servers are \ndown.\ncode is untested\n", "author": "bjolong@gmail.com"}, {"date": "2012-11-01T19:10:32.463327Z", "commit": "1739", "message": "Added Bluecrystal Phase 2 back again. Also the xml is much better integrated now, as \nadding clusters to the GUI now is just a matter of editing the xml. Have also added a \nreturn button to the Emerald page, abstracted the cluster adding mechanism and made a \ncombo box of possible gateways as we discussed. These seem to work. Small bug, the page \nrendering code gets the combo box Z-ordering wrong.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-11-01T16:51:42.294739Z", "commit": "1738", "message": "Added change that allows the user to return from the job screen by clicking \"Back\"\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-10-31T18:30:43.756644Z", "commit": "1737", "message": "Started to add subclassed bits to generate a canvas for painting the new interface onto\ncode is nascent\n", "author": "bjolong@gmail.com"}, {"date": "2012-10-30T16:43:03.998413Z", "commit": "1736", "message": "Updated go.sh from the Amber workpacket to use bsub more effectively.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-10-27T12:29:01.460542Z", "commit": "1735", "message": "Fixed issues with directory structure, but for some reason amber now hangs on Emerald.\ncode is working?\n", "author": "bjolong@gmail.com"}, {"date": "2012-10-27T11:21:46.343569Z", "commit": "1734", "message": "Started cleaning up, this is BROKEN!\nI've found that the keys problem isn't actually fixed. It's just that one has two minutes to log in \nand then you need another broker key.\ncode is broken\n", "author": "bjolong@gmail.com"}, {"date": "2012-10-24T15:36:58.244348Z", "commit": "1733", "message": "free energy update", "author": "nividic73@gmail.com"}, {"date": "2012-10-23T17:15:50.576926Z", "commit": "1732", "message": "I'm committing the python wrappers that include the atomistic cutoff code\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-10-23T17:15:18.265008Z", "commit": "1731", "message": "I'm committing the updated CLJ forcefields with atomistic cutoffs\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-10-23T15:38:38.015259Z", "commit": "1730", "message": "Fixes options objects.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-10-23T14:39:32.286711Z", "commit": "1729", "message": "The slightly broken Save and Load buttons have been added.\ncode is broken?\n", "author": "bjolong@gmail.com"}, {"date": "2012-10-22T15:20:32.037240Z", "commit": "1728", "message": "Added text descriptions and some pictures.\ncode is working?\n", "author": "bjolong@gmail.com"}, {"date": "2012-10-22T11:08:18.708141Z", "commit": "1727", "message": "Commit\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-10-22T10:17:12.101367Z", "commit": "1726", "message": "Fixed option.h and NativeDialog Qt bug.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-10-20T09:16:32.286319Z", "commit": "1725", "message": "ions testing with the new free energy", "author": "nividic73@gmail.com"}, {"date": "2012-10-19T17:07:14.806674Z", "commit": "1724", "message": "Renamed the coordinate files to match the xml file\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-10-19T17:03:45.648924Z", "commit": "1723", "message": "I've finished writing the code to generate the zebedde input file from the user options.\nAs far as I can tell, it is all ready to go :-)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-10-19T16:32:15.876475Z", "commit": "1722", "message": "Commiting changes while it works\ncode is working-ish.\n", "author": "bjolong@gmail.com"}, {"date": "2012-10-19T15:55:06.477654Z", "commit": "1721", "message": "I've made some changes to allow me to test the options, and also to make the default files\nan optional addition for the zebedde config\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-10-19T15:27:10.570894Z", "commit": "1720", "message": "I've updated the zebedde picture and have added a test application so that I can view\nXML files without needing to log onto the broker\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-10-19T15:21:35.799356Z", "commit": "1719", "message": "I've finished writing the first pass of the zebedde XML file. This seems to capture all of the\noptions that are set in the zebedde input file that we were passed.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-10-19T11:25:31.216401Z", "commit": "1718", "message": "Added the executable.\n\n", "author": "bjolong@gmail.com"}, {"date": "2012-10-19T11:20:35.607701Z", "commit": "1717", "message": "Renamed do_zebedde.sh to go.sh \n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-10-19T11:12:36.780860Z", "commit": "1716", "message": "I've added in the zebedde job class and made the changes to include it in the GUI.\nThis doesn't currently respect any options, and just runs the demo calculation \nthat was provided.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-10-18T10:49:21.157376Z", "commit": "1715", "message": "Added the files actual\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-10-17T11:29:25.069917Z", "commit": "1714", "message": "The fixed version of the GUI code with the Emerald cluster choice.\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-10-17T10:36:37.618550Z", "commit": "1713", "message": "little update to the Soft core potential", "author": "nividic73@gmail.com"}, {"date": "2012-10-15T11:05:54.003246Z", "commit": "1712", "message": "I've added an atomistic cutoff to the CLJ and softcore CLJ forcefields. This is tested\nin test/SireMM/testcutoff.py, which shows why using an atomistic cutoff is such a bad\nidea... (but it is worth including, so that such comparisons can be made, or if other\nlong range correction schemes are applied on top of an atomistic cutoff)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-10-15T11:04:41.233866Z", "commit": "1711", "message": "Committing the python wrappers for the addition of the atomistic cutoff\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-10-12T09:50:50.159759Z", "commit": "1710", "message": "fixed potential energy function", "author": "nividic73@gmail.com"}, {"date": "2012-10-11T16:32:10.480479Z", "commit": "1709", "message": "I'm committing the updated run_md.py that should pay attention to the options set in the GUI\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-10-11T11:26:22.676121Z", "commit": "1708", "message": "Changes to CMakeLists to make the install easier. Also the directory business that I have NOT \nTESTED AT ALL.\ncode is broken?\n", "author": "bjolong@gmail.com"}, {"date": "2012-10-09T11:37:44.623363Z", "commit": "1707", "message": "Removed include to obsolete header file\n", "author": "julienmich@gmail.com"}, {"date": "2012-10-09T11:17:41.264241Z", "commit": "1706", "message": "Commit of updated wrappers, code compiles\n", "author": "julienmich@gmail.com"}, {"date": "2012-10-09T11:17:04.239969Z", "commit": "1705", "message": "Removed incomplete code in velocityverlet\n", "author": "julienmich@gmail.com"}, {"date": "2012-10-09T10:58:24.438906Z", "commit": "1704", "message": "Commit of some wrappers not currently on svn \n", "author": "julienmich@gmail.com"}, {"date": "2012-10-09T10:53:54.003834Z", "commit": "1703", "message": "wrapper weirdness...\n", "author": "julienmich@gmail.com"}, {"date": "2012-10-09T10:03:08.395283Z", "commit": "1702", "message": "Committing wrappers after merge gaetano's code\n\n", "author": "julienmich@gmail.com"}, {"date": "2012-10-09T09:56:45.203466Z", "commit": "1701", "message": "Added missing svn file, commented out include to QtElapsedTimer and changes to CMakeList\n", "author": "julienmich@gmail.com"}, {"date": "2012-10-08T18:34:34.349033Z", "commit": "1700", "message": "svn merge -r 1603:1698 https://sire.googlecode.com/svn/corelib/branches/users/nividic .\n\nAlso added a few modified rbworkspace/integrator files for force calculations\n\n", "author": "julienmich@gmail.com"}, {"date": "2012-09-28T17:33:22.573858Z", "commit": "1699", "message": "Committing the final files used to create the Sire 1.0 release candidate\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-28T12:40:45.787029Z", "commit": "1698", "message": "Fix Soft core potential in OpenMM to match the Sire one", "author": "nividic73@gmail.com"}, {"date": "2012-09-26T15:44:03.762274Z", "commit": "1697", "message": "Removed the, now unnecessary, share directory\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-26T15:42:52.724739Z", "commit": "1696", "message": "Removed a failed test that was hiding...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-26T15:40:06.118638Z", "commit": "1695", "message": "I've removed the unnecessary SireSim library (now in Conspire/Acquire) and have gone through\nand made sure that *every* test script in the test directory works, or has been removed.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-26T15:01:01.857589Z", "commit": "1694", "message": "Fixed things for Mac OS\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-09-26T12:36:07.119239Z", "commit": "1693", "message": "Forgot to add the config.h.in file\ncode is working?\n", "author": "bjolong@gmail.com"}, {"date": "2012-09-26T10:57:13.907433Z", "commit": "1692", "message": "Removing these libraries from the python wrappers as well\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-26T10:55:29.465771Z", "commit": "1691", "message": "Removed unnecessary libraries\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-26T10:53:05.755003Z", "commit": "1690", "message": "Cleaning up the trunk by removing all files that don't need to be distributed in a release\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-26T10:46:31.361574Z", "commit": "1689", "message": "Copied python2/branches/devel to python2/trunk\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-26T10:45:33.406152Z", "commit": "1688", "message": "Doing the same thing to the python wrappers...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-26T10:45:00.123100Z", "commit": "1687", "message": "I've copied copied branches/devel to trunk \n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-26T10:44:07.816452Z", "commit": "1686", "message": "First stage of preparing a release of Sire - updating the corelib trunk...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-25T16:57:45.698723Z", "commit": "1685", "message": "Added proper directory for job classes\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-09-25T16:35:03.440376Z", "commit": "1684", "message": "Updating for the job classes page and misc. things\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-09-19T18:01:49.680155Z", "commit": "1683", "message": "Demoable version, with bug fixes\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-09-17T17:40:02.252480Z", "commit": "1682", "message": "Changes bringing the GUI up-to-date with progress bar capabilities\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-09-14T16:19:55.205519Z", "commit": "1681", "message": "I've committed the python wrappers for GridFF to this branch\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-14T16:16:54.236048Z", "commit": "1680", "message": "I'm merging in the changes to the GridFF forcefield into this branch (support for reaction field,\nshifted potential and simple atomistic cutoff)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-14T16:14:10.470998Z", "commit": "1679", "message": "Fixed the testgridff.py test case...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-14T16:11:56.992624Z", "commit": "1678", "message": "Committing the python wrappers to go with the new GridFF\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-14T16:07:49.524234Z", "commit": "1677", "message": "I've updated GridFF so that it supports an atom-based cutoff, reaction field cutoff and the \nforce-shifted cutoff. These all need to be tested...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-14T11:07:04.680690Z", "commit": "1676", "message": "I've merged in the updates to the softcore forcefields from the devel branch, so that\nnow there is support for the softcore reaction field and force shifted potentials. I've\nalso added the test of the softcore forcefields\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-14T11:01:29.135698Z", "commit": "1675", "message": "I've added a quick test of the soft core forcefields and have also finished adding the soft version\nof the reaction field forcefield to InterSoftCLJFF and InterGroupSoftCLJFF\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-13T10:38:00.873944Z", "commit": "1674", "message": "I've merged in the update to InterCLJPotential that applies an atom-based cutoff to the LJ\nterms when the force-shifted or reaction field cutoffs are used.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-13T10:35:58.034894Z", "commit": "1673", "message": "I've updated the InterCLJPotential so that it also uses an atom-based cutoff for the LJ terms\nwhen the force-shifted or reaction-field potentials are used.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-13T10:27:51.818097Z", "commit": "1672", "message": "Merged in the clean-up of IntraCLJPotential, together with the move to atom-based cutoffs\nfor the LJ terms\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-13T10:26:27.093533Z", "commit": "1671", "message": "I've cleaned up the IntraCLJPotential code and have changed the reaction field and force shifted\ncutoffs to also apply an atom-based cutoff to the LJ terms\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-13T09:35:55.080800Z", "commit": "1670", "message": "Committed the changes to IntraCLJPotential that ignore the 1-4 terms when applying the \nforce-shifted or reaction field potentials\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-13T09:31:23.041656Z", "commit": "1669", "message": "I've modified the intramolecular CLJ forcefield so that the reaction field is not\nused for 1-4 interactions (any pair terms with a scaling factor that is not equal\nto one). Testing shows that this gives the same energies as OpenMM, however further\ntesting on a protein system shows weird behaviour that I must now examine...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-12T18:47:49.005234Z", "commit": "1668", "message": "Python does not like 'next' (syntax error), wants 'continue'\ncode is working\n", "author": "bjolong@gmail.com"}, {"date": "2012-09-12T18:36:32.509140Z", "commit": "1667", "message": "Lots of changes, almost working\ncode is broken\n", "author": "bjolong@gmail.com"}, {"date": "2012-09-12T15:54:37.778736Z", "commit": "1666", "message": "Added the testcutoff.py testcase to this branch and also added in support for reaction field\nin the intramolecular CLJ forcefields\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-12T15:51:07.194473Z", "commit": "1665", "message": "Fixed another small bug in the reaction field intramolecular forcefields\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-12T15:43:31.971266Z", "commit": "1664", "message": "Fixed some small bugs in the intramolecular reaction field terms\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-12T15:31:12.239134Z", "commit": "1663", "message": "I've updated CLJPotential so that the reaction field term can be applied to the \nintramolecular CLJ potential as well as the intermolecular CLJ potential\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-12T15:25:05.640314Z", "commit": "1662", "message": "Added the SSE version of the reaction field potential together with a quick test script\nthat compares the reaction field, group-based and force-shifted cutoffs for different\ncutoff lengths in a water box.\n\nCode seems to be working\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-12T13:15:58.351584Z", "commit": "1661", "message": "Small update to the Amber wrapper\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-12T09:59:01.637922Z", "commit": "1660", "message": "Committed the multithreaded version of sire_python\n\nCode seems to be working now\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-12T09:55:41.934478Z", "commit": "1659", "message": "Forgot to include beadidx.h in the list of header files to be installed... \n\nCode and python wrappers now seem to all compile and link on both mountain lion and linux\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-12T09:41:44.825351Z", "commit": "1658", "message": "I've had to rebuild the SireMol wrappers again after the merge command\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-12T09:40:54.290545Z", "commit": "1657", "message": "Fixed some problems with the merge of SireMol\n\nCode is still broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-11T16:41:32.924384Z", "commit": "1656", "message": "Regenerated all of the python wrappers after the merge (autogenerated on Mountain Lion - pazuzu)\n\nNot compiled or tested yet...\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-11T16:32:11.608712Z", "commit": "1655", "message": "A couple of small changes needed to get corelib compiled. Now sorting out the python wrappers...\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-11T16:08:31.728281Z", "commit": "1654", "message": "Merged the devel branch changes made since Gaetano's branch was created into Gaetano's branch.\n\nThis adds the Grid forcefields, fixes compile issues on Mountain Lion, adds the force shifted\nand reaction field cutoffs etc.\n\nThe code will need checking and testing to sort out any problems with conflicts.\n\nsvn command was:\n\nsvn merge -r 1546:1653 ../../devel .\n\nCode is uncompiled and untested\n\nCode is broken\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-11T15:56:53.683649Z", "commit": "1653", "message": "I've implemented the reaction field potential in the InterCLJPotential (InterCLJFF and InterGroupCLJFF).\nThis will be used to allow comparison with OpenMM, and also to let us test reaction field against\nother cutoff methods. The code compiles but has not been tested. It should not be used now.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-11T15:53:18.579076Z", "commit": "1652", "message": "Committing the python wrappers for the CLJ forcefields using the reacton field cutoff potential\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-10T15:44:05.104258Z", "commit": "1651", "message": "Committing the correct wrappers for OpenMMIntegrator, which failed to build correctly\nas I had forgotton to define SIRE_USE_OPENMM\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-10T14:35:30.264472Z", "commit": "1650", "message": "Added a dummy implementation of OpenMMIntegrator so that the python wrappers will compile\nwhen OpenMM is unavailable or disabled\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-10T14:34:59.901559Z", "commit": "1649", "message": "Fixed the CMake files and autogeneration so that they work when OpenMM is available or not\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-10T14:09:56.388093Z", "commit": "1648", "message": "Committing the associated python wrappers and python Cmake code - note that I had to regenerate\nthe Move wrappers on my laptop\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-10T14:09:13.593650Z", "commit": "1647", "message": "Refining the OpenMM CMake stuff so that it works on Chris's laptop\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-09-10T12:43:33.965306Z", "commit": "1646", "message": "Updated CMake files to support OpenMM\n\n", "author": "nividic73@gmail.com"}, {"date": "2012-09-08T12:13:56.632862Z", "commit": "1645", "message": "Added parts to monitor uploads and downloads\ncode is broken?\n", "author": "bjolong@gmail.com"}, {"date": "2012-09-07T14:51:09.105922Z", "commit": "1644", "message": "Missed a few unused parts in cleaning\ncode is broken?\n", "author": "bjolong@gmail.com"}, {"date": "2012-09-07T14:48:30.932468Z", "commit": "1643", "message": "Cleaned up old and unused code, much clearer now.\ncode is broken?\n", "author": "bjolong@gmail.com"}, {"date": "2012-09-06T11:29:27.741909Z", "commit": "1642", "message": "Added in cluster list and account manipulation\ncode is broken\n", "author": "bjolong@gmail.com"}, {"date": "2012-09-04T16:51:36.779071Z", "commit": "1641", "message": "Added lots of extra UI elements, but am yet to connect up most of them\ncode is not finished\n", "author": "bjolong@gmail.com"}, {"date": "2012-09-03T16:20:03.688035Z", "commit": "1640", "message": "Finished userpage with logins, continuing to next page to describe work stores\ncode is broken?\n", "author": "bjolong@gmail.com"}, {"date": "2012-08-30T15:04:35.594969Z", "commit": "1639", "message": "I've fixed a small bug in the GridFF forcefield that caused unnecessary computation or a\ncrash when one of the molecule groups was empty.\n\nCode compiles, links and appears to work\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-08-24T14:57:56.348093Z", "commit": "1638", "message": "Fixed a small bug in the SSE versions of the soft core CLJ potential that meant that the LJ\nenergy was incorrectly calculated. While this was a bug, it was not present in anyone's simulations\nas the softcore SSE code was disabled (probably because I gave up looking for this bug before!).\n\nCode appears to be working, and now I have tested that the softcore and normal shifted\nelectrostatics code gives the correct answers. It should be ok now to play with this,\nwith the normal caveat that this is very new code.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-08-24T11:13:48.272676Z", "commit": "1637", "message": "Changes needed to get this to compile on Ben's linux virtual machine... :-)\n\n", "author": "bjolong@gmail.com"}, {"date": "2012-08-23T16:38:42.410274Z", "commit": "1636", "message": "I've now added the force shifted coulomb potential to the soft core CLJ forcefields. Again, everything\ncompiles and seems to work, but please don't yet use this code as it needs thorough testing!\n\n(the code is only active if you turn on electrostatic shifting, which I know noone currently\nuses!)\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-08-23T14:52:51.254544Z", "commit": "1635", "message": "...spoke too soon - missed off a factor of 4!\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-08-23T14:51:53.678821Z", "commit": "1634", "message": "I've added the force shifting code to InterCLJPotential and IntraCLJPotential, and it seems to work \nquite well. I don't recommend others using this code yet though until it has been thoroughly \ndebugged - it is, in effect, a completely new coulomb energy calculation pipeline!\n\nCode compiles, links and runs\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-08-20T15:21:21.591078Z", "commit": "1633", "message": "I've made the shift-electrostatics part of CLJPotential use the force shifted electrostatics function\nused in GridFF. It seems to work for InterGroupCLJFF. Do not use electrostatic shifting in any\nother code until I have got it all working...\n\nCode compiles, links and runs.\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-08-20T14:37:45.701994Z", "commit": "1632", "message": "I've moved GridFF over to using the shifted force cutoff for the electrostatics. This provides a smooth\nchange in electrostatic energy as a function of cutoff\n\nCode compiles, links and runs and appears to be working\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-08-16T13:38:10.038980Z", "commit": "1631", "message": "Commit of the updated python wrappers that fix compilation on Mountain Lion. Sire compiles links and\nruns well on this system, and I now need to check that it still works on older macs and linux...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-08-16T13:37:11.705770Z", "commit": "1630", "message": "End of changes needed to get Sire to compile on Mountain Lion. Going to test that these\ndon't interfere with compilation on anything else...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-08-15T15:38:43.663630Z", "commit": "1629", "message": "Some changes to help the python wrappers to compile...\n\nAlso, this version works with Lion, so the changes for Mountain Lion don't appear to have affected compilation on Lion\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-08-15T13:55:24.374690Z", "commit": "1628", "message": "I've fixed a small bug in GridFF that meant that the grid was not recalculated when\nthe cutoff or buffer size was changed...\n\n", "author": "chryswoods"}, {"date": "2012-08-15T13:52:55.842025Z", "commit": "1627", "message": "I've had to make lots of small changes to the code so that it can compile using the compiler\nsupplied with OS X Mountain Lion. The compiler has become even more picky, particularly when\nit comes to order of definition of template classes during partial instantiation...\n\nCorelib code compiles and appears to work - now compiling the python wrappers and\nam going to test this on linux and OS X Lion...\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-08-10T16:14:17.158700Z", "commit": "1626", "message": "Fixed a bug which caused the GridFF forcefield to ignore the value of coul_cutoff\n\n", "author": "chryswoods"}, {"date": "2012-08-09T12:28:53.091046Z", "commit": "1625", "message": "Removed a warning message that was warning about somethign innocuous! \n\n", "author": "chryswoods"}, {"date": "2012-08-09T10:36:53.438364Z", "commit": "1624", "message": "Fixed a small bug in calculating the dimensions of the grid (forgot to subtract 1 when\ncalculating the maximum dimensions of the grid)\n", "author": "chryswoods"}, {"date": "2012-08-08T21:25:08.055912Z", "commit": "1623", "message": "Fixed a bug that caused an infinite loop is numerical imprecision caused\nthe molecule to be moved outside the reflection sphere.\n\n", "author": "chryswoods"}, {"date": "2012-08-08T18:04:03.486148Z", "commit": "1622", "message": "Fixed a bug that caused the grid to be recalculated when part of a molecule that was in group 2,\n(but not the part that was in group 2) was moved.\n\nCode is working\n\n", "author": "chryswoods"}, {"date": "2012-08-08T17:09:01.453296Z", "commit": "1621", "message": "I've fixed a bug that causes a crash when disconnected parts of a molecule are added\nto a CLJ forcefield.\n\n", "author": "chryswoods"}, {"date": "2012-08-08T11:55:36.076410Z", "commit": "1620", "message": "The python wrappers associated with the new GridFF\n\nCode is working\n\n", "author": "chryswoods"}, {"date": "2012-08-08T11:53:09.577325Z", "commit": "1619", "message": "I've added code so that if any molecule of group 0 moves out of the grid in GridFF, then \nthe grid is recalcualted. I've also added code to monitor the errors using the grid\nand short cutoff and to output them as a histogram. These show that the errors\nare acceptably small, using a 6 A LJ cutoff and a 0.25 A grid.\n\nCode is working\n\n", "author": "chryswoods"}, {"date": "2012-08-07T16:52:38.801811Z", "commit": "1618", "message": "I've optimised the grid code and now the GridFF looks like it is working really well and \nreally quickly :-)\n\nCode is working\n\n", "author": "chryswoods"}, {"date": "2012-08-07T10:53:41.658148Z", "commit": "1617", "message": "I've fixed the LJ bug in GridFF (which now works!) and have also fixed bugs in the reflection\nsphere moves in RigidBodyMC which were caused by numerical imprecision errors.\n\nCode is working\n\n", "author": "chryswoods"}, {"date": "2012-08-06T16:54:50.565587Z", "commit": "1616", "message": "I've now integrated delta support into GridFF, so that only the changed energies are \ncalculated. For some reason, this has stopped the calculation of LJ energies....\n\nCode compiles, links and runs, but GridFF gives the wrong output!\n\n", "author": "chryswoods"}, {"date": "2012-08-06T16:54:06.220706Z", "commit": "1615", "message": "Here are the updated python wrappers for GridFF\n\n", "author": "chryswoods"}, {"date": "2012-08-06T15:52:40.586946Z", "commit": "1614", "message": "I've further optimised the GridFF code and it is now about 20 times faster than the \nexplicit calculation, with very stable and small errors :-). See test/SireMM/testgridff.py\nif you want to try.\n\nCode is working\n\n", "author": "chryswoods"}, {"date": "2012-08-06T15:14:24.081163Z", "commit": "1613", "message": "The energy is now calculated correctly on the grid and is extremely close to the \nexact energy :-). I can now start optimising the code and getting it ready to\nbe used in the MC test.\n\n", "author": "chryswoods"}, {"date": "2012-08-03T16:47:09.964369Z", "commit": "1612", "message": "Here are the associated python wrappers for GridFF...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2012-08-03T16:45:39.706754Z", "commit": "1611", "message": "I've implemented about 80% of the GridFF forcefield, having written the code to calculate\nthe explicit coulomb and LJ energies, and also populating the grid with coulomb\npotentials.\n\nCode is broken (but compiles)\n\n", "author": "chryswoods"}, {"date": "2012-08-03T14:37:24.632105Z", "commit": "1610", "message": "Free energy calculation new hamiltonian", "author": "nividic73@gmail.com"}, {"date": "2012-08-03T11:12:32.558722Z", "commit": "1609", "message": "I've added in a GridFF which allows optimisation of the InterGroupCLJFF by calculating\nthe energy of group 1 on a grid that is generated from the fields of group 2. The code\nis not yet implemented - at the moment, this is just a derivation from InterGroupCLJFF,\nand I have just added in placeholders and the tests for this code.\n\n", "author": "chryswoods"}, {"date": "2012-08-01T14:45:37.309362Z", "commit": "1608", "message": "Committing the code that allows the EnergyMonitor to use a soft-core potential between\nthe molecules between the two groups.\n\n", "author": "chryswoods"}, {"date": "2012-08-01T14:45:06.400554Z", "commit": "1607", "message": "Committing the new EnergyMonitor wrappers that add the capability to have soft-core between\nthe two groups.\n\n", "author": "chryswoods"}, {"date": "2012-07-31T16:11:34.918220Z", "commit": "1606", "message": "I've fixed a nasty memory leak in PackedArray2D which caused memory to leak when moves\nwere made on part of a molecule (e.g. a residue in a protein). I've also cleaned up the\nway the memory is allocated in these moves, e.g. providing a quick escape for cases\nwhere only the atoms in a single cutgroup are moved.\n\n", "author": "chryswoods"}, {"date": "2012-07-30T10:08:52.482141Z", "commit": "1605", "message": "I've updated sire_python so that you can request a different number of threads at startup\n\n", "author": "chryswoods"}, {"date": "2012-07-30T10:07:16.198381Z", "commit": "1604", "message": "I've changed the way AtomSelection works to try to remove a memory leak\n\n", "author": "chryswoods"}, {"date": "2012-07-28T16:37:04.044203Z", "commit": "1603", "message": "Updated amber templates to deal with capping residues and fixed an error in CYX template\n\n", "author": "julienmich@gmail.com"}, {"date": "2012-07-27T21:52:58.351716Z", "commit": "1602", "message": "Finished (I think) updating the perturbations code\n\n", "author": "julienmich"}, {"date": "2012-07-27T18:07:47.825140Z", "commit": "1601", "message": "Fixed a similar compile error when GSL is in a weird place\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-07-27T18:06:14.684566Z", "commit": "1600", "message": "I've fixed compilation errors when the GSL directory is in a weird place\n\n", "author": "chryswoods@gmail.com"}, {"date": "2012-07-27T17:58:54.134648Z", "commit": "1599", "message": "I've fixed a small bug in MoleculeGroup that didn't record when a molecule with\nmultiple views was added to an empty group.\n\n", "author": "chryswoods"}, {"date": "2012-07-27T16:00:47.168456Z", "commit": "1598", "message": "Changing perturbations library code as changing the file format of the .pert file\n", "author": "julienmich@gmail.com"}, {"date": "2012-07-20T16:25:37.740621Z", "commit": "1597", "message": "Had to make a couple of changes to ensure that the code would compile on bluecrystalp2\n\nCode compiles and works\n\n", "author": "chryswoods"}, {"date": "2012-07-20T16:06:36.711494Z", "commit": "1596", "message": "Fixed bugs so that we can automate the running of absolute binding free energy calculations :-)\n\nCode is working \n\n", "author": "chryswoods"}, {"date": "2012-07-18T16:33:15.959211Z", "commit": "1595", "message": "Restrainst - Debugging", "author": "nividic73@gmail.com"}, {"date": "2012-07-18T11:35:14.874080Z", "commit": "1594", "message": "svn cp https://sire.googlecode.com/svn/python2/branches/users/julienmich -r 1411 https://sire.googlecode.com/svn/python2/tags/juliendemo-0712\n\n", "author": "julienmich@gmail.com"}, {"date": "2012-07-18T11:31:50.378257Z", "commit": "1593", "message": "svn cp https://sire.googlecode.com/svn/corelib/branches/users/julienmich -r 1411 https://sire.googlecode.com/svn/corelib/tags/juliendemo-0712\n\n", "author": "julienmich@gmail.com"}, {"date": "2012-07-10T12:06:59.382191Z", "commit": "1592", "message": "free-energy update", "author": "nividic73@gmail.com"}, {"date": "2012-07-10T12:06:09.573009Z", "commit": "1591", "message": "update", "author": "nividic73@gmail.com"}, {"date": "2012-07-06T21:26:53.115933Z", "commit": "1590", "message": "Committing the changes to RigidBodyMC that allow a reflection sphere to be\ndefined. Only molecules within the sphere will be moved, and any moves\nthat would take molecules out of the sphere are reflected back into the sphere,\nthereby keeping everything inside without violating detailed balance.\n\nCode compiles and links, but the reflection sphere code needs to be tested.\n\n", "author": "chryswoods"}, {"date": "2012-07-06T21:21:46.227679Z", "commit": "1589", "message": "Committing the fix to the VariantProperty wrappers so that it knows that it also\nderived from QVariant, and am also committing the wrappers for the new code\nin RigidBodyMC\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2012-07-06T16:58:22.016055Z", "commit": "1588", "message": "Commit of some wrappers that were not yet under version control\n", "author": "julienmich@gmail.com"}, {"date": "2012-07-06T16:38:16.999113Z", "commit": "1587", "message": "I've fixed the Amber code reader so that it can read topology files produced by Amber 12.\n\n", "author": "chryswoods"}, {"date": "2012-07-05T17:31:19.189368Z", "commit": "1586", "message": "The implementation of positional restraints in openmm seems to work. Now need to tidy things up and test larger solutes.\n\n", "author": "julienmich@gmail.com"}, {"date": "2012-07-05T16:37:44.744155Z", "commit": "1585", "message": "Fixed 1-4 interactions in Free Energy Calculation", "author": "nividic73@gmail.com"}, {"date": "2012-07-05T14:25:52.597063Z", "commit": "1584", "message": "Committing fixed versions of the dynamics scripts\n\n", "author": "chryswoods"}, {"date": "2012-07-04T17:25:01.267107Z", "commit": "1583", "message": "Code to setup position restraints in openMM. Incomplete.\n\n", "author": "julienmich@gmail.com"}, {"date": "2012-07-04T15:55:54.511176Z", "commit": "1582", "message": "Updated VariantProperty wrapper so that it knows that it inherits from QVariant as well as Property\n\n", "author": "chryswoods"}, {"date": "2012-07-04T15:35:52.831480Z", "commit": "1581", "message": "Commit of python wrappers\n", "author": "julienmich@gmail.com"}, {"date": "2012-06-28T16:04:10.975439Z", "commit": "1580", "message": "Fixed bug in free energy calculation", "author": "nividic73@gmail.com"}, {"date": "2012-06-26T14:54:29.732034Z", "commit": "1579", "message": "Added dcd support for free energy calculation. Debugging is still in progress", "author": "nividic73@gmail.com"}, {"date": "2012-06-22T16:11:59.661452Z", "commit": "1578", "message": "Made it easier to quickly change the broker...\n\n", "author": "chryswoods"}, {"date": "2012-06-22T15:35:45.424655Z", "commit": "1577", "message": "Fixed the crash when changing the mdin file and have added the images that\ncorretly display when the job is in progress\n\n", "author": "chryswoods"}, {"date": "2012-06-22T11:17:13.960474Z", "commit": "1576", "message": "Committing the version that sort of works for the demo\n", "author": "chryswoods"}, {"date": "2012-06-22T11:14:43.032507Z", "commit": "1575", "message": "wrapping coordinates fixed + COG translation", "author": "nividic73@gmail.com"}, {"date": "2012-06-21T13:51:00.306636Z", "commit": "1574", "message": "the wrapping has problems", "author": "nividic73@gmail.com"}, {"date": "2012-06-20T12:43:42.007601Z", "commit": "1573", "message": "wrapping coordinates but still problems to fix", "author": "nividic73@gmail.com"}, {"date": "2012-06-14T11:24:23.978140Z", "commit": "1572", "message": "I've added a special page for file values, which has a \"Browse\" button, have\nfixed options that are too long to fit on the line, and have got the pmemd workpacket\nworking.\n\n", "author": "chryswoods"}, {"date": "2012-06-13T17:38:11.462718Z", "commit": "1571", "message": "I've got nice fading between the config page and submit page now. It is looking good :-)\n\n", "author": "chryswoods"}, {"date": "2012-06-13T16:29:54.459599Z", "commit": "1570", "message": "I've got job submission and querying working, and am cleaning up the interface a little more.\n\n", "author": "chryswoods"}, {"date": "2012-06-12T18:37:26.443928Z", "commit": "1569", "message": "Fixed a bug in atomcutting.cpp that was causing incorrect creating of cutgroups for molecules with more than one residue. \nThere is a bug in openmmintegrator that causes the coordinates to be shifted upon copy back into sire arrays. I think this is because the code \ndoes not setup correctly monoatomic particles. \n\n", "author": "julienmich@gmail.com"}, {"date": "2012-06-08T13:02:56.534121Z", "commit": "1568", "message": "Fix bug - Free Energy Calculation. Debugging stage", "author": "nividic73@gmail.com"}, {"date": "2012-06-05T16:08:14.295792Z", "commit": "1567", "message": "Free energy calculation alchemical value extension range [0,2] - debugging and testing", "author": "nividic73@gmail.com"}, {"date": "2012-06-04T14:24:50.532315Z", "commit": "1566", "message": "Fixed bug in Free Energy Calculation - Debugging and Testing stage", "author": "nividic73@gmail.com"}, {"date": "2012-05-31T16:17:47.183474Z", "commit": "1565", "message": "I'm committing the multiple changes I've made to clean up the interface and \nget everything ready for submitting jobs.\n\n", "author": "chryswoods"}, {"date": "2012-05-29T13:13:29.294735Z", "commit": "1564", "message": "free energy calculation - debugging stage", "author": "nividic73@gmail.com"}, {"date": "2012-05-25T12:47:47.158622Z", "commit": "1563", "message": "Cleaning code - free energy calculation in progress", "author": "nividic73@gmail.com"}, {"date": "2012-05-18T13:31:47.557674Z", "commit": "1562", "message": "Free energy calculation . The code is still in testing and debugging stage", "author": "nividic73@gmail.com"}, {"date": "2012-05-14T16:36:11.072823Z", "commit": "1561", "message": "I've fixed bugs that caused the GUI to behave in an inconsistent manner. Adding and editing\noptions now works as expected, as does undo and redo. However, removing an option causes\na segfault.\n\n", "author": "chryswoods"}, {"date": "2012-05-14T16:13:33.801974Z", "commit": "1560", "message": "revert to a previous version", "author": "nividic73@gmail.com"}, {"date": "2012-05-14T15:25:59.618176Z", "commit": "1559", "message": "Rolled back to 1551", "author": "nividic73@gmail.com"}, {"date": "2012-05-14T10:59:25.146541Z", "commit": "1558", "message": "I've rewritten the AddPage widget, both cleaning up the code and fixing the crash when an option\nis added.\n\nNow I am tracking down the source of a bug in updating option values...\n\n\n", "author": "chryswoods"}, {"date": "2012-05-11T15:24:27.771661Z", "commit": "1557", "message": "This version is still broken. Fixe a little bug in the custom force field\n\n", "author": "nividic73@gmail.com"}, {"date": "2012-05-11T14:12:53.753616Z", "commit": "1556", "message": "OpenMM classes exposed using Python\n\n", "author": "nividic73@gmail.com"}, {"date": "2012-05-11T14:07:52.927061Z", "commit": "1555", "message": "This version is broken I'm tryng to add the soft core potential\n\n", "author": "nividic73@gmail.com"}, {"date": "2012-05-09T17:54:25.092502Z", "commit": "1554", "message": "Fixed a bug in openmmintegrator where the velocities where not correctly converted from OpenMM ( nanometer per picosecond ) to Sire  ( angstrom per AKMA time). \nWith no cutoff and a huge box (effectively no PBC), the kinetic and potential energies of Sire and OpenMM are identical. \n\n", "author": "julienmich@gmail.com"}, {"date": "2012-05-09T15:51:57.255099Z", "commit": "1553", "message": "Merged Gaetano's branch into mine. \n", "author": "julienmich@gmail.com"}, {"date": "2012-05-09T15:41:18.026865Z", "commit": "1552", "message": "decommented the line related to the exclusion  exclusion list\n", "author": "nividic73@gmail.com"}, {"date": "2012-05-08T15:26:01.907386Z", "commit": "1551", "message": "Files modified to add support to OpenMM\n\n", "author": "nividic73@gmail.com"}, {"date": "2012-05-08T15:23:05.006325Z", "commit": "1550", "message": "OpenMM integrator files\n\n", "author": "nividic73@gmail.com"}, {"date": "2012-05-04T10:24:43.421201Z", "commit": "1549", "message": "Confirming it works...\n", "author": "nividic73@gmail.com"}, {"date": "2012-05-04T10:24:07.565337Z", "commit": "1548", "message": "Testing Gaetano can commit (kind of important!)\n", "author": "nividic73@gmail.com"}, {"date": "2012-05-04T10:12:03.187949Z", "commit": "1547", "message": "Added a branch of python2 for Gaetano\n", "author": "chryswoods"}, {"date": "2012-05-04T10:11:45.866518Z", "commit": "1546", "message": "Added a branch of corelib for Gaetano\n", "author": "chryswoods"}, {"date": "2012-05-01T16:52:15.761049Z", "commit": "1545", "message": "I've made it a little prettier - I am happier\n\n", "author": "chryswoods"}, {"date": "2012-05-01T16:39:38.398170Z", "commit": "1544", "message": "I've got the GUI looking a little more pretty, but am still not happy..\n\n", "author": "chryswoods"}, {"date": "2012-04-30T16:52:26.462074Z", "commit": "1543", "message": "Yes, I can finally see the widgets. I had forgotten to make sure that the top page\nwas a QGraphicsItem child of the view, so, as it was not a child, it was not added\nto the graphics scene and drawn!\n\n", "author": "chryswoods"}, {"date": "2012-04-30T11:04:26.885442Z", "commit": "1542", "message": "I'm now custom-drawing most of the widgets so that they can be laid out correctly and look pretty.\nSo far, I've got nice custom buttons, and a rounded-bordered view, but the buttons are not\nappearing in the view for some unknown reason...\n\n\n", "author": "chryswoods"}, {"date": "2012-04-20T22:09:16.220468Z", "commit": "1541", "message": "Fixed a small bug where the button was not correctly repainting when the text changed\n\n", "author": "chryswoods"}, {"date": "2012-04-20T21:55:51.722619Z", "commit": "1540", "message": "I've fixed some of my layout problems by cleaning the code and replacing QWidget type widgets\nwith custom widgets based on QGraphicsWidget. Things seem to work, but the PageView is not\ndrawing its pages in the right place, which is messing things up a bit...\n\n", "author": "chryswoods"}, {"date": "2012-04-20T14:17:32.535160Z", "commit": "1539", "message": "I've managed to break things a little as I move all layout code into Page, and have\nPage manage setting the geometry of the main widget assigned to that page.\n\n", "author": "chryswoods"}, {"date": "2012-04-20T12:31:52.986541Z", "commit": "1538", "message": "I've fixed the bugs and now everything displays correctly and transitions are fast and smooth :-)\n\n", "author": "chryswoods"}, {"date": "2012-04-19T20:55:19.311404Z", "commit": "1537", "message": "I've finished refactoring the animation code so that it now sits in Page, rather than PageView.\nWhile doing this, I have also added in a Page parent-child hierarchy, so that pages can \ndisable animations, block or pause all of their children, grandchildren etc. I've also\nadded in clipping, which should clean up the animations.\n\nIt all compiles and links, but the config page doesn't show! It is too late in the evening\nto debug, so I will look at it tomorrow...\n\n", "author": "chryswoods"}, {"date": "2012-04-18T17:35:34.453906Z", "commit": "1536", "message": "I've got much of the GUI now functioning, with the add button and add page popping up (although\nit crashes when building the add page), and with animations mostly working. I'm trying to \nsort out the look of the widget and also the size policies. At the moment, the widgets just\nkeep growing as they increase in size for each page...\n\n", "author": "chryswoods"}, {"date": "2012-04-18T10:58:57.699590Z", "commit": "1535", "message": "I've moved PageView over to use the Animation framework, but there are a few bugs - particulary\nat the moment, the animation doesn't appear to start! Too much to fix before lunch...\n\n", "author": "chryswoods"}, {"date": "2012-04-17T17:09:05.745059Z", "commit": "1534", "message": "I've added an Animation class that holds and manages the QAbstractAnimation objects that\nare used to animate the GUI. This class manages the animation so that the PageView holders\ncan know what is being animated, and can manage user interaction around those animations.\n\n", "author": "chryswoods"}, {"date": "2012-04-16T17:37:26.825359Z", "commit": "1533", "message": "I've added text to the exception view, and have made the option view pop once the user\nhas finished editing, which provides some nice feedback.\n\n", "author": "chryswoods"}, {"date": "2012-04-16T17:24:53.492600Z", "commit": "1532", "message": "I've finished refactoring and am back adding functionality to the code. Editing of options\nis now working again, but there is not enough feedback to the user to show that the option\nhas been set. There are also several bugs, e.g. it is possible to confuse the user-interface\nduring animations!!!\n\n", "author": "chryswoods"}, {"date": "2012-04-16T15:34:53.611229Z", "commit": "1531", "message": "I've removed crufty files and have renamed the other files to fit in with the refactoring.\n\nCode is broken while I update all of the includes etc...\n\n", "author": "chryswoods"}, {"date": "2012-04-16T15:24:49.076179Z", "commit": "1530", "message": "Committing current progress of refactoring before renaming OptionsWidget to OptionsPage\nand OptionWidget to OptionPage\n\n", "author": "chryswoods"}, {"date": "2012-04-16T11:01:37.667176Z", "commit": "1529", "message": "Now that I've refactored to use PageWidget, I am now taking the code that is mixed in the \nold OptionsWidget and splitting it into PageView and ConfigView/ConfigDoc. PageView provides\na view of PageWidgets, with multiple tabs, while ConfigView will inherit from this, and\nConfigDoc will provide the remaining functionality of OptionsWidget to handle the \nediting of the Options object.\n\n", "author": "chryswoods"}, {"date": "2012-04-13T11:44:22.870368Z", "commit": "1528", "message": "I've got the push/pop framework and refactored classes working :-)\n\n", "author": "chryswoods"}, {"date": "2012-04-12T14:55:24.586461Z", "commit": "1527", "message": "I've refactored the page code so that I now have OptionsWidget and OptionWidget as pages\nto view and edit options. This is much cleaner than having the EditView classes,\nand makes the Option(s)Widget fit in with the PageWidget push/pop viewer hierarchy.\n\nCode is broken as refactoring is still in progress\n\n", "author": "chryswoods"}, {"date": "2012-04-11T13:42:04.414525Z", "commit": "1526", "message": "The AddWidget works correctly, and can be used to add multiple values to a multi-value option\n\nRemoving options still results in a crash\n\n", "author": "chryswoods"}, {"date": "2012-04-11T11:51:16.981261Z", "commit": "1525", "message": "Adding new options now works :-). But deleting them causes the GUI to crash :-(\n\nTime to go to lunch before I debug...\n\n", "author": "chryswoods"}, {"date": "2012-04-11T11:12:28.962821Z", "commit": "1524", "message": "I've added the AddWidget, and got the code that handles moving backwards and forwards along\nthe view history working.\n\n", "author": "chryswoods"}, {"date": "2012-03-15T08:51:15.711796Z", "commit": "1523", "message": "I've moved the controller widgets for OptionsWidget to MainBar, and have cleaned\nup the code in OptionsWidget to simplify the code for changing between views. \nThere is now a proper view stack, and nice animation between views. The MainBar\nonly appears when the widget is resized (annoying!) and it partially obscures\nthings. However, it is pretty cool :-)\n\n", "author": "chryswoods"}, {"date": "2012-03-15T05:41:03.927994Z", "commit": "1522", "message": "I've added in a view of an exception that is thrown, and made a nice animation for switching\nbetween widget views :-)\n\n", "author": "chryswoods"}, {"date": "2012-03-15T04:19:53.201539Z", "commit": "1521", "message": "I've got the undo/redo framework working again and now everything works via OptionsCommand\nobjects. I've also cleaned up the resizing and the layout :-)\n\n", "author": "chryswoods"}, {"date": "2012-03-14T10:51:14.421641Z", "commit": "1520", "message": "I've refactored the GUI code and cleaned up the class names, and switched everything\nover from QWidget to QGraphicsScene. There is still a lot to do to complete the \nrefactoring...\n\n", "author": "chryswoods"}, {"date": "2012-03-14T04:18:24.446289Z", "commit": "1519", "message": "Can now add and remove optional options. Now will switch things over to using QGraphicsView\nso that I can polish the interface.\n\n", "author": "chryswoods"}, {"date": "2012-03-13T14:06:47.118952Z", "commit": "1518", "message": "I've got the \"add option\" dialog box working, and have begun using QGraphicsView for \nlaying out widgets. I will switch everything over to using this view tomorrow, as it\nprovides a nice way of laying out and transforming the view :-)\n\n", "author": "chryswoods"}, {"date": "2012-03-13T12:48:57.953636Z", "commit": "1517", "message": "Simplfied the code for adding options so that it can be used to add extra options, as \nwell as optional options\n\n", "author": "chryswoods"}, {"date": "2012-03-13T04:50:16.886428Z", "commit": "1516", "message": "I've cleaned up the code regarding buttons and have added a stub to handle the request\nto add a new value to a set of options :-)\n\n", "author": "chryswoods"}, {"date": "2012-03-13T04:13:46.907454Z", "commit": "1515", "message": "I've fixed the bug and now options can be deleted as well as added :-)\n\n", "author": "chryswoods"}, {"date": "2012-03-13T03:20:34.766491Z", "commit": "1514", "message": "I've added the ability to add values to multi-value options. It works in the GUI, though\nthere are some rough edges ;-). Deleting a value causes an exception to be raised...\n\n", "author": "chryswoods"}, {"date": "2012-03-12T04:42:55.028800Z", "commit": "1513", "message": "I'm adding in support for the GUI to add and remove multi-value options...\n\n", "author": "chryswoods"}, {"date": "2012-03-11T09:32:34.252690Z", "commit": "1512", "message": "The view is now correctly updated when the options object is changed.\n\n", "author": "chryswoods"}, {"date": "2012-03-11T08:49:43.791402Z", "commit": "1511", "message": "I've switched the GUI view objects over to use string commands to update the Options\nobject.\n", "author": "chryswoods"}, {"date": "2012-03-10T10:17:00.550618Z", "commit": "1510", "message": "Working on the undo/redo framework...\n\n", "author": "chryswoods"}, {"date": "2012-03-10T08:10:23.462196Z", "commit": "1509", "message": "I am now able to set options via the GUI, and have validation so that incorrect\nvalues are caught and a warning given to the user.\n\n", "author": "chryswoods"}, {"date": "2012-03-10T07:26:09.871479Z", "commit": "1508", "message": "Got the code working that allows me to interact graphically with the Options classes...\n\n", "author": "chryswoods"}, {"date": "2012-03-09T10:04:46.721977Z", "commit": "1507", "message": "I've got a link between the graphics code and the Options XML code.\n\n", "author": "chryswoods"}, {"date": "2012-03-09T08:10:21.184317Z", "commit": "1506", "message": "Made space for the GUI code and fixed some bugs in the other CMakeLists.txt files.\n\n", "author": "chryswoods"}, {"date": "2012-03-06T08:53:04.915091Z", "commit": "1505", "message": "I've separated out the SireSim options library into a new library called \"Conspire\".\n\nIn this, I have put a cut-down version of Siren, so that Conspire can either compile\nas a standalone project, or it can link against the larger, standard Siren library.\n\nCode compiles, links and runs as expected, although many unit tests need to be\nwritten to make sure that the port from Sire to Siren is correct.\n\n", "author": "chryswoods"}, {"date": "2012-02-03T18:06:06.537432Z", "commit": "1504", "message": "I've filled in the IndexList class, which can hold a very flexible set of indicies.\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-02-03T18:05:01.566988Z", "commit": "1503", "message": "Python wrappers for the next commit...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2012-02-02T18:10:22.868928Z", "commit": "1502", "message": "I've been working on the IndexValue and IndexList classes. I've added a Range class that\nwill be used to store index ranges. This works, and is now wrapped up in python.\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-02-02T18:09:32.484457Z", "commit": "1501", "message": "Python wrappers for the next commit\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2012-02-01T18:03:22.121890Z", "commit": "1500", "message": "I've been debugging the code, have added in an example of what I want the LSRC simulation\nconfig file to look like (including how I want lists to be input, and ranges, e.g.\n1..10 would be 1 to 10, 20..(10)..100 would be 10 to 100, in steps of 10, \nwhile 1000..(1000)..-1 would be 1000 to the end of the list, in steps of 1000. All together,\nthese would be input as;\n\nlist = [ 1..10, 20..(10)..100, 1000..(1000)..-1 ]\n\nIn this update, I have also added some code to allow recognition of some numbers, and made\nthe unit recognition code more robust (e.g. if some units have spaces, e.g. kcal mol^-1).\n\nNow code like;\n\nl = LengthValue(\"5.5 thousand angstroms\")\n\nwill be parsed correctly ;-)\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-02-01T15:31:21.467786Z", "commit": "1499", "message": "I've added the TempValue class that handles temperature values in the option file.\n\nRemaining work now is to add in support for molecule IDs, index lists, molecule lists\nand string lists.\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-02-01T15:29:19.658584Z", "commit": "1498", "message": "Committing the python wrappers for the next commit...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2012-02-01T12:33:12.659583Z", "commit": "1497", "message": "I've written the general units class for reading dimensioned parameters. Each dimension now requires\njust a simple struct containing the scaling factors and supported units, and then the template\nDimensionValue class does the rest. I've filled in LengthValue, AreaValue and PressureValue.\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-02-01T12:30:50.476665Z", "commit": "1496", "message": "Python wrappers for the next commit...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2012-01-31T18:13:53.021142Z", "commit": "1495", "message": "I've added the LengthValue class so that the code can recognise and convert between\nmultiple different lengths. I plan to generalise this class to create the other\nunits classes (with the exception of TemperatureValue, which will need its own type!)\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-31T18:12:50.127372Z", "commit": "1494", "message": "Python wrappers for the next commit\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2012-01-31T17:01:33.137658Z", "commit": "1493", "message": "I've added in the \"EnumValue\" option that allows enumerated item to be included\nas one of the command file option types.\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-31T17:01:12.489182Z", "commit": "1492", "message": "Python wrappers needed for the next commit\n\nCode is broken - need the source code available from teh next commit\n\n", "author": "chryswoods"}, {"date": "2012-01-31T12:29:09.857168Z", "commit": "1491", "message": "I've finished the querying API for the Options classes. This should make it straightforward to \nwrite code that looks at what the user has supplied :-). It all seems to work well with\nthe options in proteinligandmc.xml\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-31T12:23:33.240128Z", "commit": "1490", "message": "Updated python wrappers to be used with the source file in the next commit...\n\nCode is broken, as these wrappers need the source files from the next commit\n\n", "author": "chryswoods"}, {"date": "2012-01-30T18:23:30.785942Z", "commit": "1489", "message": "Here are the python wrappers for the previous commit. They declare a function in option\nthat needs to be written, so there is a link error.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2012-01-30T18:22:46.014823Z", "commit": "1488", "message": "I've fleshed out the query interface for the options classes so that it is easier to\nfind all of the options that have been changed by the user, and it is easier to \niterate through the options level by level, e.g. options[\"solute\"][1][\"name\"] returns \"sb2\"\nif the first molecule is called \"sb2\".\n\nCode compiles, links and runs as expected.\n\n", "author": "chryswoods"}, {"date": "2012-01-30T12:34:46.514136Z", "commit": "1487", "message": "I've fixed some bugs and have fixed the crash when reading proteinligandmc.xml (using\nproteinligandmc.py). Now the XML file(s) can be read and converted back into xml\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-27T18:27:14.277317Z", "commit": "1486", "message": "Here are the updated python wrappers for the last commit :-)\n\nCode compiles, links and runs, with the same crash as mentioned in the last commit.\n\n", "author": "chryswoods"}, {"date": "2012-01-27T18:24:56.897176Z", "commit": "1485", "message": "I've got most of the XML parsing finished, and am now able to parse the protein_ligandmc.xml file\n(which itself includes lots of other XML files :-)).\n\nThere is a crash when writing the XML of some of the options. I think that it is an infinite loop\nwhen writing options which are mutually exclusive...\n\nCode compiles, links and runs, but with the above crash\n\n", "author": "chryswoods"}, {"date": "2012-01-27T12:12:07.979878Z", "commit": "1484", "message": "Here are the python wrappers from the last commit\n\nCode compiles, links and runs as expected.\n\n", "author": "chryswoods"}, {"date": "2012-01-27T12:11:44.600323Z", "commit": "1483", "message": "I've finished writing code that reads and write XML files of the simulation option structure :-)\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-26T18:11:35.667332Z", "commit": "1482", "message": "Here are the correct python wrappers for the last commit ;-)\n\nCode compiles, links and runs as expected.\n\n", "author": "chryswoods"}, {"date": "2012-01-26T18:11:06.415287Z", "commit": "1481", "message": "I've finished most of the options classes and have now written some Python tests (that seem to work :-)).\n\nI've also written the code to read most of the options layout from an XML file. It is all looking good :-)\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-26T12:45:06.293981Z", "commit": "1480", "message": "I've filled in all of the code for SireSim::Option and SireSim::Options. This code handles all\nof the logic for getting and setting options, and for reading and writing simple config files.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2012-01-25T17:48:13.071175Z", "commit": "1479", "message": "I've been working on the user interface to Sire. I have decided to use a series of XML files\nto describe the various options available to a simulation. These describe the options,\nwhich are represented in C++ as Option and Value objects. These can read and write themselves\nto simple text files, thereby providing a friendly, high-level consistent interface to the\nSire-derived programs. In addition, the XML files make it easy for other programs to read and\nwrite Sire config files, thereby easing the integration of Sire into other packages and\nGUIs.\n\nSee share/SireSim/proteinligandmc.xml for an idea of what the XML files will look like,\nthough bear in mind this is still a work in progress ;-)\n\nCode compiles, links and appears to work well. Python wrappers should not be auto-generated\nfor this version, as there are lots of missing functions and you will get link errors\nwhen you try to link the resulting wrappers.\n \n", "author": "chryswoods"}, {"date": "2012-01-19T17:25:15.474512Z", "commit": "1478", "message": "I've added in the parameters that I want to be controlled in a ProteinLigandMC simulation.\nThe parameters supplied should allow an easy interface to nearly everything that can be\nacheived using ProtoMS, e.g. standard MC, dual topology free energy calculations, \nabsolute binding calculations, soft-core etc. The underlying ProteinLigandMC simulation class\ncan also return the System and Moves constructed, so an advanced user could use this\nas a starting point for making more interesting types of simulation, and for beginning\ntheir exploration of Sire.\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-18T17:35:17.553221Z", "commit": "1477", "message": "Here are the python wrappers for the ProteinLigandMC and ProteinLigandMCParams classes...\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-18T17:34:48.622381Z", "commit": "1476", "message": "I've added the stubs for the ProteinLigandMC and ProteinLigandMCParams classes that\nwill provide the high-level helper classes used to run simple protein-ligand \nMonte Carlo simulations\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-18T15:55:21.056183Z", "commit": "1475", "message": "Adding in the python wrappers for the SireSim library.\n\nCode compiles, links and runs without problem\n\n", "author": "chryswoods"}, {"date": "2012-01-18T15:54:32.137578Z", "commit": "1474", "message": "I've added the \"SireSim\" library, which will provide high-level classes for the running \nof different types of simulation. This will make Sire easier to use as it will provide\nan easy interface to Sire that by-passes the complex Python setup.\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-17T15:32:51.597752Z", "commit": "1473", "message": "Committing the associated python wrappers with the last commit\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-17T15:32:27.825120Z", "commit": "1472", "message": "I've adapted EnergyMonitor so that it can use the molecules from a passed MoleculeView,\nor from an IDAssigner. I've also added an EnergyMonitor test script to debug and check\nthat the monitor is working :-)\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-16T16:22:03.230787Z", "commit": "1471", "message": "I've added in the python wrappers for the new IDAssigner class.\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-16T16:21:23.790358Z", "commit": "1470", "message": "I've added an \"IDAssigner\" class that can be used to find which molecules are close to \nidentity points, without actually updating those molecules. I will update EnergyMonitor\nto use the IDAssigner class, so that it can use the concept of identity points without\nneeding to apply the identity constraint.\n\nCode is working, compiles, and the idassigner.py test performs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-12T15:44:48.890794Z", "commit": "1469", "message": "Updated CMakelists to remove some files not currently under version control. Modified other objects to complete the implementation of energytable \n", "author": "julienmich@gmail.com"}, {"date": "2012-01-05T11:47:20.380609Z", "commit": "1468", "message": "Fixed a small compile bug on linux (gcc seems to get confused by the repeated typedef of\nPairMatrix<double>, leading to a lot of error output!)\n\nCode compiles, works and appears to run as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-05T11:35:09.168469Z", "commit": "1467", "message": "I've fixed a bug in EnergyMonitor that meant that it was not saving and restoring the averaged\nenergies correctly\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-04T12:30:00.323807Z", "commit": "1466", "message": "Fixed the broken EnergyMonitor test case!! :-)\n\n", "author": "chryswoods"}, {"date": "2012-01-04T12:29:36.446036Z", "commit": "1465", "message": "Here are the completed python wrappers for the working EnergyMonitor class :-)\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-04T12:26:25.446552Z", "commit": "1464", "message": "I've got the EnergyMonitor code working, and can now calculate and accumulate coulomb\nand LJ energies of molecule views :-)\n\nCode compiles, links and runs as expected.\n\n", "author": "chryswoods"}, {"date": "2012-01-03T15:31:25.892952Z", "commit": "1463", "message": "I've upgraded Py++ to version 1.0 on my macbook (lion), and have regenerated all of the\npython wrappers. I have also added the wrappers for EnergyMonitor.\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-03T15:29:42.997090Z", "commit": "1462", "message": "I've added in the start of the EnergyMonitor class that will be used to monitor\nligand-protein and ligand-water interactions during a binding simulation. I have\nalso fixed a bug in the compilation of the Py++ 1.0 python wrappers.\n\nCode compiles, links and runs as expected\n\n", "author": "chryswoods"}, {"date": "2012-01-03T10:54:09.770603Z", "commit": "1461", "message": "I'm committing the python wrappers that accompany the last devel branch of Sire.\n\nThe code compiles, links and runs without problems\n\n", "author": "chryswoods"}, {"date": "2012-01-03T10:53:30.763436Z", "commit": "1460", "message": "I'm committing the work performed to create the fast InterCLJFF forcefield. The forcefield is still\nbuggy, but is a bit faster than InterCLJFF. This work is likely to influence the design of the\nforcefields in Acqire (and future Sire), but it is unlikely that FastInterCLJFF will replace\nInterCLJFF in this version of Sire. You should not use FastInterCLJFF in your code.\n\nCode compiles, links and runs without problems\n\n", "author": "chryswoods"}, {"date": "2011-12-01T15:39:06.381511Z", "commit": "1459", "message": "I've added in a monitor so that the progress, speed, energy usage and health of a workpacket can\nbe recorded during computation, and am integrating this together with the WorkQueue so that \na WorkPacket can be processed in chunks.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-11-29T17:59:08.607595Z", "commit": "1458", "message": "A small amount of code to fix a big bug! I implemented the parallel version of TestPacket\nand came across a weird bug as the code crashed at the end of processing. It ended up\nbeing caused by TestPacket not properly returning the next object at the end of processing.\n\nThis has revealed that I have a problem in the design due to the WorkQueue not being\nable to detect when a WorkPacket has finished, or is still in need of processing. \nI think that the answer is that I need to say that the WorkQueue keeps running \na WorkPacket while a packet is being returned. I must then separate out the \nstatistics / health score associated with a job run from the actual run, so that it\ncan be returned separately to the queue.\n\nCode compiles, links and sirentest runs as expected.\n\n", "author": "chryswoods"}, {"date": "2011-11-28T09:40:23.599594Z", "commit": "1457", "message": "I've added some unit tests to TestReport so that I can demonstrate the concept during\nmy meeting with the SSI today\n\n", "author": "chryswoods"}, {"date": "2011-11-24T17:39:30.252970Z", "commit": "1456", "message": "I've got the whole code to compile and link, and can now successfully submit workpackets\nfor background computation :-)\n\nCode is working, and sirentest is behaving as expected\n\n", "author": "chryswoods"}, {"date": "2011-11-24T15:01:25.176141Z", "commit": "1455", "message": "Been working on the Promise so that it can handle partial results, and will \"reduce\"\nthings correctly :-)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-11-24T12:42:34.400530Z", "commit": "1454", "message": "I've added the code to allow multiple threads (sub-threads) to run as part of the same thread group,\nand have linked this to WorkQueue. I've written the code, using boost::function and boost::bind\nto allow arbitrary functions to be run, which is now linked to WorkQueue to allow the single-threaded\nor multi-threaded processing of WorkPackets (together with reporting of results). I've added in the \nconcepts of map/reduce to complement the concepts of work queue, workers on a shared workspace, and\nworkers sharing messages. This should allow most parallelisation schemes to be addressed using\nthe same, familiar API.\n\nI have also added the header files for the header-only libraries I use in boost into the Siren\ndirectory. This removes one dependency, which should aid porting and installation...\n\nCode is broken - have to go to lunch!\n\n", "author": "chryswoods"}, {"date": "2011-11-22T18:02:14.071975Z", "commit": "1453", "message": "I've made a lot of progress implementing the WorkQueue and supporting classes. The WorkQueue\nmanages virtual resources, while the actual WorkPackets are processed on real threads, which\nare moved between a paused and non-paused state as they are moved from being active to\ninactive (or background to foreground, blocked or not blocked etc.)\n\nCode is broken - need to go get some dinner :-)\n\n", "author": "chryswoods"}, {"date": "2011-11-22T12:02:03.924581Z", "commit": "1452", "message": "I'm filling in the code that schedules WorkPackets in the background thread.\n\nCode is broken (I've got to go to lunch!)\n\n", "author": "chryswoods"}, {"date": "2011-11-21T17:51:30.591375Z", "commit": "1451", "message": "Added amber parameters, modified forcefields to have a pure virtual energy() function. Create energytable (does not work yet)\n", "author": "julienmich@gmail.com"}, {"date": "2011-11-21T17:50:56.212323Z", "commit": "1450", "message": "I've switched Thread over to using boost::function and boost::bind so that I can\nstart up background threads to run arbitrary functions (with arguments ;-)). I've\nused this to start up the background thread that manages the WorkQueue.\n\nCode compiles, links and runs, and sirentest behaves as expected.\n\n", "author": "chryswoods"}, {"date": "2011-11-21T15:37:24.406909Z", "commit": "1449", "message": "I found a crash in for_ages that was caused by a Block pointer being set to null without\nupdating the global registry. To prevent these crashes in the future, I have rewritten\nthe block classes so that they hold a explicitly shared pointer to the block, so that\nfor_ages can hold a weak pointer to the block (the new BlockRef class). This has made\nthe code a little more bulletproof ;-)\n\nCode compiles, links and runs, and sirentest runs as expected.\n\n", "author": "chryswoods"}, {"date": "2011-11-18T18:48:04.332001Z", "commit": "1448", "message": "I think that I have fixed all of the visible problems with static data, deadlocks etc.\nthat I saw in sirentest. It now runs correctly on my macbook and seems pretty bulletproof.\nThere are still some issues, e.g. in WaitCondition it is possible that that signal\nto end for_ages could be sent just before the WaitCondition sleeps, such that it never\ngets the signal. I've \"fixed\" this by making sure that several signals are sent during\nprogram shutdown, but I think that for_ages::end() should be marked as being something\nthat should be sent multiple times, and should not be used for general thread control...\n(after all, for_ages should only come along infrequently...)\n\nCode compiles, links and sirentest performs as expected :-)\n\n\n", "author": "chryswoods"}, {"date": "2011-11-17T17:59:58.396255Z", "commit": "1447", "message": "I've got the background threads working and have done a lot of debugging of the code \n(the background threads started in TestPacket::test() all seem to work correctly).\n\nRan into a problem that the order of static deletion is killing the code at shutdown.\nI've added a Static class to handle the registration of static data, and will now have\nto go through the code and switch all global data over to using it...\n\nCode compiles, links and runs\nsirentest runs without errors except that it occasionally segfaults at exit...\n\n", "author": "chryswoods"}, {"date": "2011-11-16T16:59:35.449853Z", "commit": "1446", "message": "I've added in the actual threading code, filled in most of the functions of WorkQueue,\nWorkPacket, WorkSpace, Promise and WorkQueueItem and have written Thread and ThreadPool.\n\nThe code now all compiles and links, and I am beginning to test the threading code\nin TestPacket::test - at the moment, I am getting a crash when sirentest exits.\n\n", "author": "chryswoods"}, {"date": "2011-11-15T19:06:29.031625Z", "commit": "1445", "message": "I'm continuing to sketch out the relationships between;\n\nWorkQueue     - holds the queue of jobs, represented by\nWorkQueueItem - the actual jobs listed in the queue, scheduled by\nWorkScheduler - the virtual base class of schedulers that schedules jobs,\nWorkPacket    - the actual job to run\nPromise       - the handle to the job, and space for the result\nWorkSpace     - the way that parallel jobs, interactive jobs and co-located jobs\n                can communicate\n\nLots of thinking and design work today :-)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-11-15T12:58:05.558662Z", "commit": "1444", "message": "I've begun sketching out the classes needed to implement the WorkQueue. I have decided that\nusers should never handle threads directly, but should instead treat everythign like\na cluster queue\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-11-15T11:29:22.153726Z", "commit": "1443", "message": "I've realised that the Thread classes should not be publicly visible, and that users\nshould just interact with a WorkQueue. I am going to refactor this part of the code,\nbut will commit the old version just in case...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-11-14T12:51:58.493550Z", "commit": "1442", "message": "I've added in the Promise class (and support functions) so that the results of future calculations\ncan be handled. There is a close overlap between Promise and Thread, with PromiseData and ThreadData\nneeding to be aware of, and interact with each other.\n\nCode is broken (off to lunch!)\n\n", "author": "chryswoods"}, {"date": "2011-11-14T10:39:51.074059Z", "commit": "1441", "message": "I've added the code used to implement the SystemSemaphore (using a background thread to\nhandle the actual communication with the semaphore). This now needs me to finish the \nthreading code, so that the SysSemWorkPacket can be run...!\n\nCode is working :-)\n\n", "author": "chryswoods"}, {"date": "2011-11-04T17:09:44.995225Z", "commit": "1440", "message": "I've finished adapting all of the main block classes so that they can be\ninterupted safely by for_ages. I am now working on SystemSemaphore, which\nI am expanding to provided non-blocking acquire and tryAcquire, and also\nthe ability to acquire multiple resources in one go. This class is providing\nan interesting example of using WorkPacket and WorkSpace as I am setting it\nup to use a background thread that runs a WorkPacket, and communicate with\nthat thread via the WorkSpace\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-11-04T12:04:35.439959Z", "commit": "1439", "message": "I've filled in the missing functions and cleaned the API of Block a little to \nmake the names of the functions more obvious. Code now compiles and links. I need\nto add the break code to Mutex, ReadWriteLock, Semaphore and SystemSemaphore, then\nadd some tests :-)\n\nCode is working\n\n", "author": "chryswoods"}, {"date": "2011-11-04T10:37:38.496850Z", "commit": "1438", "message": "I've filled in broken code so that it now all compiles. I've added the interfaces to Block\nso that the block classes can tell for_ages when they are about to sleep, when they are\nwoken up, and to check if they should keep sleeping.\n\nCode compiles but does not link\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-11-03T17:31:51.230679Z", "commit": "1437", "message": "I've (finally!) finished working on for_ages and have moved all of the thread-blocking\nprimitives over to using Siren::Block as the virtual base class. Now to check each one\nso that they can be properly interupted when for_ages::end() is called...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-11-02T12:09:48.012164Z", "commit": "1436", "message": "Still working on for_ages... But it is coming together as I have realised that\nall blocking types (Semaphore, Mutex, Lock, WaitCondition) should be abstracted\ninto a Block base class.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-11-01T16:38:30.567243Z", "commit": "1435", "message": "I'm continuing to work on for_ages... Requires a lot of thought to make sure that\nthe threads will all work the right way...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-10-31T17:25:11.712438Z", "commit": "1434", "message": "I've continued to work on the threading classes and have changed for_ages and WaitCondition\nso that WaitCondition is more tightly integrated, e.g. it doesn't need to poll the for_ages\nstate every 5 seconds, and is now woken up when the end of for_ages is signalled. This should\nstop threads waking and sleeping all the time, which would hurt performance.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-10-31T12:02:23.446947Z", "commit": "1433", "message": "I'm working on the CPUThread and for_ages classes.\n\nCode is broken (I'm going to lunch!)\n\n", "author": "chryswoods"}, {"date": "2011-10-26T15:54:49.501260Z", "commit": "1432", "message": "I've filled in the WorkSpace class and am sorting out how inter-process communication\nwill work. I have decided to create the skeleton of the messaging scheme, so that \nthis can be extended in Acquire.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-10-26T13:03:56.507399Z", "commit": "1431", "message": "I've fixed a bug in StringList (incorrect comparison function) and have added in the missing\ncode in WorkPacket.\n\nCode compiles and works, with sirentest reporting everything is ok :-)\n\n", "author": "chryswoods"}, {"date": "2011-10-26T11:05:44.960153Z", "commit": "1430", "message": "I've continued to work on the WorkPacket class. It is filled in, and I am now in the\nprocess of cleaning up the testing infrastructure so that writing unit tests is \nas painless as possible (if it is ever painless...)\n\nCode is broken and I am off to lunch\n\n", "author": "chryswoods"}, {"date": "2011-10-26T09:45:09.444504Z", "commit": "1429", "message": "I'm now working on the Siren threading classes, and have decided to move WorkPacket\ninto Siren from Acquire. This is because I am going to unite the intra-process \nthreading model with the inter-process Acquire model, and use WorkPacket as a way\nof parallelising the code at all levels\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-10-24T12:12:56.361000Z", "commit": "1428", "message": "I've sorted out the unit testing infrastructure and reporting code. It is now easy to \nwrite class-level unit tests and get a full report of those tests. The report is held\nas a TestReport object, which can be queried, and also streamed / saved, thus simplifying\nthe process of writing the infrastructure that will support the automatic running and\nreporting of these tests.\n\nCode is working :-)\n\n", "author": "chryswoods"}, {"date": "2011-10-20T11:11:29.914774Z", "commit": "1427", "message": "I've been working on filling in the TestReport classes so that I can run unit tests\nand get the results ;-). In doing this, I've ported over the toString functions\nfrom Sire/Siren to this standalone Siren\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-10-19T15:53:39.672534Z", "commit": "1426", "message": "I've got the code compiling and working, with the sirentest executable now available to run\nautomatic unit tests of all of the classes :-)\n\nI've fixed bugs in the registration of classes (including a weird bug in which the \nQAtomicPointer that held the class registry was reset to zero between static initialisation\nand running the main function - weird! I worked around it by removing the thread-safe\ncode used for static initialisation).\n\nCode is finally working :-)\n\n", "author": "chryswoods"}, {"date": "2011-10-19T11:02:23.364742Z", "commit": "1425", "message": "I've added the editor classes and defined how the Interface system will work. I've filled\nin missing functionality and now everything compiles and links. The next step is to\nadd the \"sirentest\" executable so that I can start testing and debugging the code.\n\nCode compiles and links, but is unlikely to work\n\n", "author": "chryswoods"}, {"date": "2011-10-13T16:03:59.043787Z", "commit": "1424", "message": "I've made more progress with the design of the mutable classes and interfaces.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-10-13T11:09:22.173559Z", "commit": "1423", "message": "I'm sorting out the way of declaring interfaces to classes, and have added in String and\nStringList caches of the class names and interfaces to ensure speedy lookup\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-10-12T16:01:47.154974Z", "commit": "1422", "message": "I've added some time and date classes, and the backtrace code, so that I can have\nfully detailed and featured exception classes. Most of the code now compiles and \nlinks - it is very nearly there :-)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-10-12T11:31:25.260670Z", "commit": "1421", "message": "I've filled in all of StringList and the exception classes and am now looking towards\nthe threading classes.\n\nCode does not compile. Code is broken\n\n", "author": "chryswoods"}, {"date": "2011-10-07T16:55:39.282238Z", "commit": "1420", "message": "I've filled in Siren::ByteArray and have sorted out the type-safe copying and\ncomparison functions (so that object_a == object_b will always perform consistently,\neven if object_a inherits from object_b, e.g. \n(object_a == object_b) == (object_b == object_a) for all cases.\n\nCode compiles but there are link errors from missing functions\n \n", "author": "chryswoods"}, {"date": "2011-10-07T10:30:35.246922Z", "commit": "1419", "message": "I've finished implementing all of the functions of Siren::String. This now provides \na unicode, translatable string class, which follows the Siren::Object rules\n(const object), and which ensures that the program only stores one copy\nof each unique string, thus minimising memory usage / improving string\ncomparison times, and reducing the size of streamed data files.\n\nSiren::String compiles without error, but the rest of the code is broken :-(\n\n", "author": "chryswoods"}, {"date": "2011-10-06T15:37:39.027051Z", "commit": "1418", "message": "I've made progress filling in the functions of Siren::String. I have decided to \nuse atomic reference counting to ensure that only one copy of a string is held\nin memory at any one time. This will make creating and deleting strings a little\nslow, but will speed up string comparison, and significantly reduce memory\nusage for cases where strings are repeated (e.g. names of atoms)\n\n", "author": "chryswoods"}, {"date": "2011-10-06T10:57:43.183151Z", "commit": "1417", "message": "I've filled in sufficient code for everything to compile, although a lot of functions\nare missing, and a lot remains to be written.\n\nCode is broken - link errors because of missing functions\n\n", "author": "chryswoods"}, {"date": "2011-10-06T08:57:24.412923Z", "commit": "1416", "message": "Sorting out the \"detail\" directory....\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-10-06T08:40:45.602575Z", "commit": "1415", "message": "Finally got internet installed at home, so can commit the last weeks code. I have been working\nthrough Siren and copying across / rewriting the code necessary to make Siren into a\nstandalone library. I've added in a \"Number\" class, which represents generic numbers,\nand a \"String\" class, which is a wrapper around QString, to represent generic strings.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2011-09-29T16:17:57.720376Z", "commit": "1414", "message": "Making good progress porting across the Sire/Siren classes into Siren. I've simplified\nand consolidated the design considerably, and now have Siren::Object as the global\nbase class, and Siren::Obj as the general, weakly-typed reference class. I've\ndeliberately designed Siren so that novice and inexperienced C++ developers should\nfind it easy to understand and create Siren classes, and the burden of adding in\nboilerplate code has been removed to a couple of macros that are easy to include.\n\nCode does not compile or work, but it is getting there :-)\n\n", "author": "chryswoods"}, {"date": "2011-09-28T16:11:39.118683Z", "commit": "1413", "message": "Committing the initial source code developed during the software project. Siren\nhas been extracted from Sire and the dependencies on third party code (e.g. Qt4)\nare being reduced / removed. I am also taking the opportunity on simplifying\nthe design of Siren, and of implementing the type metadata system using\nmacros rather than complicated template functions (much simpler and more\nlight-weight).\n\nCode does not compile, link or work, this being a first commit and all... ;-)\n\n", "author": "chryswoods"}, {"date": "2011-09-28T16:07:11.276593Z", "commit": "1412", "message": "Created a new directory to hold the code that is being developed as part\nof the EPSRC-funded software development project. This is a sandpit\nin which the three stages of the Aspire and Acquire projects will\nbe developed, and in which the rewritten parts of Sire (e.g. Siren)\nwill be copied/extended.\n\n", "author": "chryswoods"}, {"date": "2011-06-04T00:59:33.065404Z", "commit": "1411", "message": "Commit of the wrappers. \n", "author": "julienmich@gmail.com"}, {"date": "2011-05-27T16:27:43.633945Z", "commit": "1410", "message": "Changed writing/reading of perturbations files to better deal with the potential of internal dofs. the python setup scripts have been updated accordingly. \n", "author": "julienmich@gmail.com"}, {"date": "2011-05-11T16:09:51.554965Z", "commit": "1409", "message": "There was a problem in InternalMoveSingle, synched_molgroup was never updated and thus InternalMoveSingle would \nfail to synchronize the correct perturbed solutes after for instance, two replicas were swapped.\n\n", "author": "julienmich@gmail.com"}, {"date": "2011-04-08T03:25:44.988127Z", "commit": "1408", "message": "Fixed a bug in InternalMoveSingle. Calling system.update() twice with different \nsets of  molecules before evaluating the energy skips evaluation of the IntraGroupCLJ force field\nenergies (and maybe others, tests so far done in the gas phase with a single molecule)\n\n", "author": "julienmich"}, {"date": "2011-04-07T20:01:43.523987Z", "commit": "1407", "message": "IntraSoftCLJ potential seems to work, yeahhh \n\n", "author": "julienmich"}, {"date": "2011-04-07T01:18:14.476177Z", "commit": "1406", "message": "Working on a IntraSoftCLJPotential and associated Intra and IntraGroup force fields. \n\nCode is broken.\n\n", "author": "julienmich"}, {"date": "2011-04-05T22:10:26.095969Z", "commit": "1405", "message": "Fixed a few bugs in the parsing of dihedral potentials. Code is flaky\n", "author": "julienmich"}, {"date": "2011-04-05T03:29:29.572247Z", "commit": "1404", "message": "Small mods to perturbations library to load initial and final amber atom types\n", "author": "julienmich"}, {"date": "2011-03-30T23:48:44.536716Z", "commit": "1403", "message": "Created a specialised internalmove class to synch the coordinates of the perturbed solutes. \nIt should eventually be possible to use internalmove and have a constraint to update the perturbed \nsolutes coordinates after the reference solute has moved\n", "author": "julienmich"}, {"date": "2011-03-25T16:50:59.822738Z", "commit": "1402", "message": "Support for impropers. Now debugging on various test cases\n", "author": "julienmich@gmail.com"}, {"date": "2011-03-25T01:02:38.578043Z", "commit": "1401", "message": "Can now perturb internals. Implementation needs to be improved and tested on many solutes.\n", "author": "julienmich"}, {"date": "2011-03-24T17:16:03.017589Z", "commit": "1400", "message": "Progressing with perturbationslibrary. Can now perturb charges and LJ terms. Started first version of the code to deal with internals \n", "author": "julienmich@gmail.com"}, {"date": "2011-03-24T05:22:09.690274Z", "commit": "1399", "message": "Fixed a compile bug caused by a missing header file\n\n", "author": "chryswoods"}, {"date": "2011-03-23T23:43:48.761307Z", "commit": "1398", "message": "More work on perturbations library. Stuck on a compilation error \n\nIn file included from /home/julien/software/devel/sire/corelib/src/libs/sireglobal.h:14,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireError/exception.h:39,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireError/version_error.h:32,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireStream/version_error.h:32,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireStream/datastream.h:38,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireBase/sharedpolypointer.hpp:32,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireBase/property.h:32,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireIO/iobase.h:35,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireIO/perturbationslibrary.h:32,\n                 from /home/julien/software/devel/sire/corelib/src/libs/SireIO/perturbationslibrary.cpp:32:\n/usr/include/qt4/QtCore/qmetatype.h: In static member function \u2018static int QMetaTypeId2<T>::qt_metatype_id() [with T = SireMol::AtomProperty<SireUnits::Dimension::PhysUnit<0, 0, 0, 1, 0, 0, 0> >]\u2019:\n/usr/include/qt4/QtCore/qmetatype.h:210:   instantiated from \u2018int qMetaTypeId(T*) [with T = SireMol::AtomProperty<SireUnits::Dimension::PhysUnit<0, 0, 0, 1, 0, 0, 0> >]\u2019\n/home/julien/software/devel/sire/corelib/src/libs/SireMol/atomproperty.hpp:368:   instantiated from \u2018static const char* SireMol::AtomProperty<T>::typeName() [with T = SireUnits::Dimension::PhysUnit<0, 0, 0, 1, 0, 0, 0>]\u2019\n/home/julien/software/devel/sire/corelib/src/libs/SireBase/property.h:516:   instantiated from \u2018const T& SireBase::Property::asA() const [with T = SireMol::AtomProperty<SireUnits::Dimension::PhysUnit<0, 0, 0, 1, 0, 0, 0> >]\u2019\n/home/julien/software/devel/sire/corelib/src/libs/SireMol/moleculeview.h:291:   instantiated from \u2018static void SireMol::MoleculeView::setProperty(SireMol::MoleculeData&, const QString&, const Index&, const T&) [with Index = SireMol::CGAtomIdx, PropType = SireMol::AtomProperty<SireUnits::Dimension::PhysUnit<0, 0, 0, 1, 0, 0, 0> >, T = SireUnits::Dimension::PhysUnit<0, 0, 0, 1, 0, 0, 0>]\u2019\n/home/julien/software/devel/sire/corelib/src/libs/SireMol/atom.h:245:   instantiated from \u2018void SireMol::Atom::setProperty(const QString&, const T&) [with T = SireUnits::Dimension::PhysUnit<0, 0, 0, 1, 0, 0, 0>]\u2019\n/home/julien/software/devel/sire/corelib/src/libs/SireMol/editor.hpp:186:   instantiated from \u2018Parent& SireMol::Editor<Parent, T>::setProperty(const SireBase::PropertyName&, const V&) [with V = SireUnits::Dimension::Charge, Parent = SireMol::AtomEditor, T = SireMol::Atom]\u2019\n/home/julien/software/devel/sire/corelib/src/libs/SireIO/perturbationslibrary.cpp:555:   instantiated from here\n/usr/include/qt4/QtCore/qmetatype.h:200: error: \u2018qt_metatype_id\u2019 is not a member of \u2018QMetaTypeId<SireMol::AtomProperty<SireUnits::Dimension::PhysUnit<0, 0, 0, 1, 0, 0, 0> > >\u2019\n\n\n", "author": "julienmich"}, {"date": "2011-03-23T12:09:45.489618Z", "commit": "1397", "message": "Code works again, but only parses charges & LJ parameters. Must add error checking. \n\n", "author": "julienmich"}, {"date": "2011-03-23T11:40:43.304812Z", "commit": "1396", "message": "More work on perturbations library. Code is broken\n\n", "author": "julienmich"}, {"date": "2011-03-23T00:00:39.326760Z", "commit": "1395", "message": "commit of recent wrappers\n", "author": "julienmich"}, {"date": "2011-03-22T23:56:23.146964Z", "commit": "1394", "message": "Initial work on a perturbations library class\n", "author": "julienmich"}, {"date": "2011-02-11T23:15:02.795547Z", "commit": "1393", "message": "Bugfix - the scale factor of the CHARMMSwitchingfunction was incorrectly evaluated, resulting \nin wrong energies \n\n", "author": "julienmich"}, {"date": "2011-02-10T20:02:46.173152Z", "commit": "1392", "message": "Implementing velocity rescaling in velocity verlet for NVT simulations. Code does not really work yet\n\n", "author": "julienmich@gmail.com"}, {"date": "2010-12-07T23:14:01.334542Z", "commit": "1391", "message": "Committing a bugfix in SireBase::Process that prevents a hang when the job\nis killed if the child processes don't die. Now, if the children don't die,\nthen a warning is printed to prompt the user to check their status.\n\n", "author": "chryswoods"}, {"date": "2010-12-01T12:45:02.663989Z", "commit": "1390", "message": "I've benchmarked the new fast forcefield code (just for total energy calculations). The\nnew code is about 50% to 500% faster :-). It gives the right answer for the infinite\ncartesian space, but is currently wrong for the periodic box. The trick to getting\nthe speed seems to have been putting the space.beyond() tests in the main loop over\npatches and CutGroups, and thus not calling the \"addEnergy\" function loads of times.\nAlso, using space.beyond(cutoff, cutgroup.aaBox(), patch.aaBox()) seems to make a \nbig affect. The next step now is to enhance SwitchingFunction so that it has both\na nearCutoff() and a farCutoff(), and to adapt space so that it has a \"before\" function\nas well as the \"beyond\" function (both of these are so that I can then use switchingfunction\nto implement a multi-resolution forcefield).\n\nCode all seems to work\n\n", "author": "chryswoods"}, {"date": "2010-11-29T22:52:28.862838Z", "commit": "1389", "message": "I've made a lot of progress with the fast CLJ forcefield. It is nearly ready for some\nsimple benchmarks (e.g test/speed/water_energy_speed.py), although I forgot that\nI have to implement the code that copies the parameters out of the beads...!\n\nCode compiles and links, and the non-fast forcefield code should work ok.\n\n", "author": "chryswoods"}, {"date": "2010-11-22T16:05:17.943489Z", "commit": "1388", "message": "Updated ZMatrix so that it automatically works out the correct order in which to build\natoms, so that dependent atoms are built after the atoms on which they depend.\n\ncorelib/devel code is broken\ncorelib/branches/users/julienmich code is working\n\n", "author": "chryswoods"}, {"date": "2010-11-22T08:55:25.185055Z", "commit": "1387", "message": "I've added back the BeadNum and AtomBeads classes, and added some more python wrappers\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-11-21T23:04:14.820523Z", "commit": "1386", "message": "I've filled in many of the new Bead and Beading classes, and now corelib\ncompiles and links without error. I am compiling the python wrappers now,\nalthough they are likely to have errors, and definitely won't link.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-11-21T17:58:05.844146Z", "commit": "1385", "message": "I've committed my progress to date with the beading classes. These allow the user\nto specify beads, which may be used for everything from coarse graining through\nrigid body dynamics to specifying how a cutoff should be applied in a forcefield.\n\nThis is a major addition to the code, and is also the model for how the \nCutGroup class will be removed (as Bead will eventually replace CutGroup).\n\nCode is broken (very broken!!!)\n\n", "author": "chryswoods"}, {"date": "2010-11-19T16:55:03.938389Z", "commit": "1384", "message": "Minor tweak to the amber parse so crd files can be read even if they contain velocities\n", "author": "julienmich"}, {"date": "2010-11-16T22:13:41.696923Z", "commit": "1383", "message": "BUGFIX: Fixed a critical bug in Sire that was causing incorrect energy evaluation.\n\nThe bug is very specific, and does not affect previously published simulations.\nThe bug is in InterGroup**FF, and causes the energy of the ith molecule in group\n0 and the energy of the ith molecule in group 1 to be neglected. As the majority\nof use cases for Sire involve 1 or 2 molecules in group0, and multiple molecules\nin group1, this means that only the energy between the group0 molecules and the \nfirst one or two molecules in group1 are skipped (and these molecules tend to \nbe on the edge of the solvent box, so outside of the cutoff of the molecules \nin group0).\n\nThis bug has been fixed, and it is recommended that you update your code if\nyou are using Sire.\n\n", "author": "chryswoods"}, {"date": "2010-11-14T21:42:49.479857Z", "commit": "1382", "message": "I've finished coding the Patch and Patches classes, and have finished and tested\nthe modifications to CoordGroupArray that allow CoordGroups to be added and\nremoved from the array. With these code changes, I can now divide beads between\npatches, repatch, and update the patching, all reasonably efficiently.\nThe next step is to integrate this with FastInterCLJFF, so that it then\nuses domain-decomposition and an efficient memory layout for the \ncoordinates and parameters. This should (hopefully!) significantly\nspeed up the evaluation of the non-bonded energies and forces,\nespecially on systems with interesting memory architectures.\n\n", "author": "chryswoods"}, {"date": "2010-11-12T17:46:05.859811Z", "commit": "1381", "message": "Changed the parsing of crd files in the amber module because it was sensitive to subtle \ndifferences in the way leap and sander write crd files (whether or not they leave trailing white spaces).\n\nUpdated amber.zmatrices to deal with HID, HIE\n\nUpdated ambersim.py to double check total energies at the end of the simulation\n\n", "author": "julienmich"}, {"date": "2010-11-08T21:07:30.905350Z", "commit": "1380", "message": "I've fixed a bug in the streaming of RigidBodyMC that stopped it from being saved, and\nthen read back in correctly. The error was that I had got the order of reading the\n\"GetPoint\" and \"Sampler\" classes the wrong way around...!\n\nI've fixed this on both the devel and users/julienmich branches, and now Julien's\nbind.py script works correctly.\n\nI'm also committing my continuing work on the patch class (for the fast forcefields)\n\n", "author": "chryswoods"}, {"date": "2010-11-05T16:19:22.332257Z", "commit": "1379", "message": "I've merged back the changes from the julienmich branch to devel - the two branches\nare now identical\n\n", "author": "chryswoods"}, {"date": "2010-11-05T15:58:26.043875Z", "commit": "1378", "message": "I've updated test/SireIO/ambersim.py so that it includes protein backbone moves\n\n", "author": "chryswoods"}, {"date": "2010-11-05T12:26:35.894889Z", "commit": "1377", "message": "I forgot to merge in these changes (the creation of the Sire/Config module!)\n\n", "author": "chryswoods"}, {"date": "2010-11-04T21:45:39.691164Z", "commit": "1376", "message": "I've copied back the devel branch (into which I merged Julien's branch) back to\nJulien's branch. This was achieved using the following commands;\n\ncd corelib/branches/users\nsvn rm julienmich\nsvn commit (last commit)\nsvn cp ../devel julienmich\n\ncd ../../../python2/branches/users\nsvn rm julienmich\nsvn commit (same as last commit)\nsvn cp ../devel julienmich\n\nSubversion seems to have done the right thing, and the code compiles and\nruns the examples without problems (e.g. amber.py and ambersim.py).\n\nNote - I am now moving over to using the PROTOMSDIR environmental\nvariable (protomsdir = os.getenv(\"PROTOMSDIR\")) - this will stop\nus conflicting over our chosen location of ProtoMS! :-)\n\nAlso note that I am working on ZMatrixMaker - I am going to rename\nit ZMatrixLibrary, and am rewriting the classes as I like your design,\nand am expanding it into a complete ZMatrix assignment framework.\nI'll merge it into the julienmich branch as soon as it is ready.\n\n", "author": "chryswoods"}, {"date": "2010-11-04T21:42:10.413183Z", "commit": "1375", "message": "I have to first remove the julienmich branches before I can copy back\nthe changes from the devel branch. I apologise if this causes any\ndifficulties - I couldn't see online any other better way of doing\nthis...\n\n", "author": "chryswoods"}, {"date": "2010-11-04T15:42:48.784622Z", "commit": "1374", "message": "I've updated a lot of Julien's new classes so that they merge better with the\nrest of the Sire code. I've updated test/SireIO/amber.py and test/SireIO/ambersim.py\nto use the modified APIs (I've changed the API a bit to make it more consistent).\n\nCode seems to work well :-)\n\n", "author": "chryswoods"}, {"date": "2010-11-03T13:18:17.787827Z", "commit": "1373", "message": "I've cleaned up some of the code and auto-generated the python wrappers. All of the\nmerged code now compiles and links - though I do not yet know if anything works...\n\n", "author": "chryswoods"}, {"date": "2010-11-03T11:23:25.925132Z", "commit": "1372", "message": "Initial commit of me merging Julien's branch into the devel branch, using the command;\n\nsvn merge -r 1309:1371 ../users/julienmich/ ./\n\n(also sorting out movermove.h and movermove.cpp that caused tree conflicts)\n\nCode is almost certainly broken!\n\n", "author": "chryswoods"}, {"date": "2010-11-02T21:23:06.133718Z", "commit": "1371", "message": "I've finished writing, wrapping and testing the Get*Point classes, and have also\nupdated RigidBodyMC to use these classes to find the center of rotation of the\nmolecules.\n\nI've updated the test/SireMove/bbmove.py test to perform ProtoMS-style backbone\nmoves correctly, and have added a peptide.pdb file that provides a short peptide\nchain for the backbone test.\n\n", "author": "chryswoods"}, {"date": "2010-11-02T14:21:57.998147Z", "commit": "1370", "message": "Cleaned up and documented the test scripts and added the parameter file \namber.zmatrices. \n\n", "author": "julienmich"}, {"date": "2010-11-01T22:12:03.717811Z", "commit": "1369", "message": "I've begun work on adding code to allow Sire to perform ProtoMS-style protein\nbackbone moves. These will be supported by modifying RigidBodyMC so that the\nuser can specify the center about which to rotate the atoms - see \ntest/SireMove/bbmove.py for how this enables the backbone moves.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-11-01T19:38:17.131566Z", "commit": "1368", "message": "Added a maximumvariables parameter to a flexibility template. Up to maximumvariables\ninternals will be changed by a call to MoverMove.move(). I have also written a sireflex.py \nscript which attempts to guess reasonable default delta values for sampled dofs. \n\nzmatmaker.py now proceeds from loading a top file to a MC simulation. The only missing part \nis backbone moves for the protein. \n\n", "author": "julienmich"}, {"date": "2010-10-30T19:59:51.543926Z", "commit": "1367", "message": "Create a flexibility property which can be applied to a molecule\nusing flexibilitymaker. Modified movermove so that it uses the \ninformation stored by flexibility to sample bonds, angle and \ndihedrals in a molecule. \n\n", "author": "julienmich"}, {"date": "2010-10-29T17:59:08.836918Z", "commit": "1366", "message": "The first version of zmatrixmaker does what it it supposed to. I can now move protein \nsidechains using ZMatMove(). \n\nStarted working on a similar flexibilitymaker object. There is \na lot of similarity between these two and perhaps they should be merged. \n\nAlso I have decided that property \"flexibility\" will also hold information about the rigid \nbody translations and rotations of the molecule, this will let me write templates for \nsolvent molecules as well.\n\n", "author": "julienmich"}, {"date": "2010-10-28T18:46:39.212321Z", "commit": "1365", "message": "Created a set of templates to describe the flexibility of protein residues. \nWrote code to read this into Sire. Must now write code to apply the templates\nto a protein.\n\n", "author": "julienmich"}, {"date": "2010-10-25T15:49:36.455862Z", "commit": "1364", "message": "The energies are now virtually identical to those produced by sander. For a test system of a protein-ligand\n complex embedded in a box (ca 22k atoms), with periodic boundaries turned off and no cutoff I get an energy \nof -47012.8 kcal/mol versus -47010.2 kcal/mol with Sander. Of the 2.6 kcal/mol of difference, 2.3 kcal/mol comes \nfrom the coulombic because sander and Sire have a different constant for one_over_fourpieps0 (332.052217 and 332.063709 \nkcal/mol respectively). The remaining difference is on the order of 1 ppm which is acceptable by my standards.\n\nI have also optimized the speed of loading a top file by vastly reducing the construction of unneeded Sire objects. \nLoading the 22k system is now ~5 times faster. \n\n", "author": "julienmich"}, {"date": "2010-10-22T22:09:22.797719Z", "commit": "1363", "message": "The amber parser works, but the dihedral energies are wrong (compared with the energies \nfor the same top file read by sander) and I am still chasing the bug.  \nAlso, realised the implementation has trouble reading top files that contains molecules without periodic boundaries. \n\n", "author": "julienmich"}, {"date": "2010-10-22T14:41:34.111223Z", "commit": "1362", "message": "Commit of the latest python wrappers\n", "author": "julienmich"}, {"date": "2010-10-21T23:01:56.665935Z", "commit": "1361", "message": "The amber parser now returns (almost) all the information necessary to compute the energy of the system. \nThere are some order N**2 operations which could be optimised so loading is faster. \nThe code is broken.\n\n", "author": "julienmich"}, {"date": "2010-10-20T23:38:19.103826Z", "commit": "1360", "message": "More work on the amber parser. Can now read atom coordinates, atom force field parameters, bonds, angles.\nNeeds more work to read dihedrals and impropers and excluded atoms.\n\n", "author": "julienmich"}, {"date": "2010-10-19T23:33:50.901004Z", "commit": "1359", "message": "More work on the amber parser\n", "author": "julienmich"}, {"date": "2010-10-16T22:52:59.629818Z", "commit": "1358", "message": "I've added a \"parameters\" directory to Julien's branch and have edited CMakeLists.txt\nso that the contents are installed into CMAKE_INSTALL_PREFIX/share. I've also add\na Sire/Config module that defines Sire installation variables\n\n", "author": "chryswoods"}, {"date": "2010-10-16T22:14:49.656220Z", "commit": "1357", "message": "I've filled in the code for FFParameters and FFParametersArray, with\nAtomicFFParameters and AtomicFFParametersArray. As part of this I have\nadded some functionality to PackedArray2D, fixed a few bugs and added\nmissing functions to this class, and have also added some python wrapped\ninstantiations of this class, together with a python test file\n\n", "author": "chryswoods"}, {"date": "2010-10-15T22:09:10.837625Z", "commit": "1356", "message": "Working on the amber parser. \n", "author": "julienmich"}, {"date": "2010-10-15T11:31:38.584853Z", "commit": "1355", "message": "I've finished the Patching classes (and BoxPatching) and have added a quick test script. \nNext step is to build patching into FastInterCLJFF...\n\nCode compiles, links and runs again :-)\n\n", "author": "chryswoods"}, {"date": "2010-10-06T07:57:32.188683Z", "commit": "1354", "message": "I'm in the process of filling in the code for the SireVol::Patching classes\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-10-05T20:18:39.964342Z", "commit": "1353", "message": "I've added the various classes that are needed to allow for the implementation\nof domain decomposition in Sire - these are just the header files, as I am \nsketching out the APIs and object relationships. The design is now becoming\nclear, with Sire's intermolecular forcefields now being designed around the\nidea of beads (which are arbitrary CutGroups), with a forcefield holding\nthe beads in groups (Patch objects) managed as a Patches object (or multiple\nPatches objects). These objects hold the beads in each patch, while\na SireVol::Patching describes the geometry of the patches. In addition,\nto remove the need for lots of template classes, I've added FFParameters\nand FFParametersArray as virtual classes (with AtomicFFParameters as the\nconcrete atomic version) so that Patch can hold the bead parameters for\nany forcefield via a virtual pointer. This is fast as the forcefield classes\ncan perform a static test at the start of the energy evaluation and then\ncan safely static_cast the pointers as it will be known that they will\nall be correct.\n\nCode is broken  (as the header files are being sketched)\n\n", "author": "chryswoods"}, {"date": "2010-10-01T16:08:58.664969Z", "commit": "1352", "message": "Committing the updated wrappers as well (forgot!)\n\n", "author": "chryswoods"}, {"date": "2010-10-01T16:07:33.986829Z", "commit": "1351", "message": "I've been thinking about how to introduce domain decomposition into Sire, and\nhave realised that the molecule and forcefield classes need rewriting. This\nwill be performed as part of the Siren rewrite (as detailed in TODO). I've\nalso made a few design decisions, in terms of limiting Sire (rather than\nletting it simulate *anything*, and have also added a document describing\nsome of the names of projects derived from Sire.\n\nRather than wait for the Siren rewrite, I have also begun adding a new\nfaster version of InterCLJFF, which will act as a sandpit/prototype of\nthe new Siren forcefield code.\n\n", "author": "chryswoods"}, {"date": "2010-08-26T19:54:13.848506Z", "commit": "1350", "message": "I've added the VersionID.. type code to the DofID reading function. This fixes\nthe magic_error exception\n\n", "author": "chryswoods"}, {"date": "2010-08-26T17:44:27.114674Z", "commit": "1349", "message": "Adding wrappers for DofID\n", "author": "julienmich"}, {"date": "2010-08-26T15:26:35.542187Z", "commit": "1348", "message": "Commit of the new python wrappers\n", "author": "julienmich"}, {"date": "2010-08-26T15:26:11.356604Z", "commit": "1347", "message": "Fixed a bug in the reading of MoverMove objects from a binary datastream\n", "author": "julienmich"}, {"date": "2010-08-24T22:31:24.378647Z", "commit": "1346", "message": "Increased the maximum number of alpha values for a softcore force field. I have done this so that I \ncould use different alpha parameters to soften serially the lennard jones and coulombic interactions of a solute\n", "author": "julienmich"}, {"date": "2010-08-23T14:33:52.576450Z", "commit": "1345", "message": "I've committed the version of the code used to perform the simulations in the\nWSRC paper (just submitted to J Chem Phys). This branch will be updated as\nnecessary to allow others to reproduce the simulations described in this\npaper.\n\n", "author": "chryswoods"}, {"date": "2010-08-23T00:11:33.273955Z", "commit": "1344", "message": "Looks like movermove is doing what I want on dimedone. \n\n", "author": "julienmich"}, {"date": "2010-08-22T20:59:19.794661Z", "commit": "1343", "message": "AngleDeltas were not working because I had forgotten to add the corresponding QHash to SireMove_containers.cpp...\n", "author": "julienmich"}, {"date": "2010-08-22T20:42:15.582377Z", "commit": "1342", "message": "Added angle_deltas to MoverMove. Code appears to work for bond_deltas but not angle_deltas.\n", "author": "julienmich"}, {"date": "2010-08-20T14:37:11.158516Z", "commit": "1341", "message": "Commit of test job of movermove dimedone with dofid objects\n", "author": "julienmich"}, {"date": "2010-08-19T22:05:41.105317Z", "commit": "1340", "message": "Commit of the latest wrappers\n", "author": "julienmich"}, {"date": "2010-08-19T21:50:57.582288Z", "commit": "1339", "message": "Now working on adding bond_deltas and angle_deltas to MoverMove. Created a DofID class \nto index the variable dofs of MoverMove. Code compiles but wrappers do not workx\n\n", "author": "julienmich"}, {"date": "2010-08-18T15:21:30.190576Z", "commit": "1338", "message": "I've changed the \"at\" function of ChunkedVector to remove bounds checking and\nhave switched the intermolecular forcefields over to using \nChunkedVector::at rather than ChunkedVector::operator[]. This has improved\nthe speed of the energy calculations by about 25-30% \n(see test/SireMove/bigbox.py).\n\nHowever, I am still performing a distance check between all pairs of \nmolecules, which means that I still have an O(n) cost in the \nenergy evaluation. This is painful, especially as this is evaluated\nvia a virtual function call (as it is Space dependent). I need\nto think of some way of creating patches and breaking the system\ndown into patches (to remove the O(n) scaling).\n\n", "author": "chryswoods"}, {"date": "2010-08-16T10:06:58.809757Z", "commit": "1337", "message": "I've fixed the bug in LJPotential that meant that recent versions of Sire \n(which have not been used for any production calculations) calculated the\nwrong LJ energy. It was a stupid error in LJFunction where I used\nsigma^6/r^6 = pow_3(sigma/r^2) rather than the correct pow_3(sigma^2/r^2)\n\n", "author": "chryswoods"}, {"date": "2010-08-13T14:20:38.322381Z", "commit": "1336", "message": "I've fixed a bug in RestraintFF that meant that it was not saving its \"space\"\nproperty correctly. This caused errors to be thrown as RestraintFF forcefields\nthen had different spaces to non-RestraintFF forcefields.\n\n", "author": "chryswoods"}, {"date": "2010-07-21T09:38:52.326376Z", "commit": "1335", "message": "I've added an example of how to create a simple harmonic restraint\nbetween an atom and a point\n\n", "author": "chryswoods"}, {"date": "2010-07-19T21:16:04.236983Z", "commit": "1334", "message": "I've fixed a bug in CovalentBondHunter whereby it never found any bonds\nbecause it used a too small covalent radius - it now uses the bond order\nradius. I've added an anchors example script to show how anchors are supposed\nto work.\n\nI am also trying now to speed up the code for large numbers of molecules,\nin particular getting rid of some unnecessary order-N bits of code which\nwere seriously destroying the performance of the code for large water\nboxes (hence the bigbox.py added example).\n\nWhile this version compiles and runs, I wouldn't trust it yet - I've\ndone too much to the core and need to run a lot of tests.\n\n", "author": "chryswoods"}, {"date": "2010-07-19T18:26:17.606434Z", "commit": "1333", "message": "Still working on movermove\n", "author": "julienmich"}, {"date": "2010-06-21T19:48:08.696110Z", "commit": "1332", "message": "Removing the debug comments...\n", "author": "chryswoods"}, {"date": "2010-06-21T19:43:47.874394Z", "commit": "1331", "message": "I've added the code to allow the QM/MM potential to be used to polarise\nthe polarisable MM model\n\n", "author": "chryswoods"}, {"date": "2010-06-21T10:48:07.244867Z", "commit": "1330", "message": "I've added a convergence limit to the PolariseCharges constraint so that the\npolarisation iterations can exit once the charges have sufficiently stabilised.\n\n", "author": "chryswoods"}, {"date": "2010-06-21T09:12:49.328332Z", "commit": "1329", "message": "I've fixed a bug in MoleculeGroup that meant that it incorrectly threw an exception\nwhen molecules or another molecule group were added.\n\n", "author": "chryswoods"}, {"date": "2010-06-18T12:55:38.552582Z", "commit": "1328", "message": "I've added a function that lets you get the protoms command file used\nfor parameterisation\n\n", "author": "chryswoods"}, {"date": "2010-06-16T15:54:23.972368Z", "commit": "1327", "message": "I've added the code to calculate potentials on QM lattice charges and\nhave worked out how to map these back to the MM atoms in the QM/MM calculation.\nI've just now got to write the last piece of this code that finishes \nthe mapping...\n\n", "author": "chryswoods"}, {"date": "2010-06-15T12:52:08.629228Z", "commit": "1326", "message": "I think that I've got the Molpro potential code working - I am running some\ntests where I calculate the potential around a water molecule.\n\nI'm also committing this breakfast's work on moving the LJ calculation into\none set of functions - I've done this for a few of the LJPotential functions,\nbut there are still loads to go.\n\n", "author": "chryswoods"}, {"date": "2010-06-14T20:35:01.959794Z", "commit": "1325", "message": "I've updated the python wrappers for Siren and am also committing my work on testing\nthe force calculation. At the moment, the LJPotential-based forcefields are giving\nthe wrong forces, and also apparently the wrong energies.\n\n", "author": "chryswoods"}, {"date": "2010-06-14T15:46:41.994915Z", "commit": "1324", "message": "I've updated the version of Siren in devel to match the latest version\nfrom branches/users/chryswoods. The merge command was;\n\nsvn merge -r 1110:1323 ../users/chryswoods/src/libs/Siren src/libs/Siren\n\nThis is so that the fixes to Siren so that it compiles with Qt 4.2 would\nwork, and also so that the latest version of Siren is available in \ndevel in preparation for me to backport the new SireCluster to devel.\n\nThe corelib code all compiles and runs, but this code needs to have\nthe updated python Siren wrappers.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-06-12T23:21:32.601701Z", "commit": "1323", "message": "I've added the \"Within\" class that lets me select atoms based on their\ndistance from points or other atoms, e.g.\n\ncox2 = PDB().readMolecule(\"test/io/cox2.pdb\")\n\natoms = cox2.selectAll( Within(5*angstrom, AtomName(\"ca\")) )\n\nor\n\natoms = cox2.selectAll( Within(3*angstrom, Vector(23,6,10)) )\n\nCool :-)\n\n", "author": "chryswoods"}, {"date": "2010-06-12T19:14:00.554179Z", "commit": "1322", "message": "I've updated the selection code so that selecting atoms etc. can use information\nfrom the molecule via passed PropertyMaps. I've moved all of the selection\ncode into MoleculeView and Editor, so that it is consistent across all\nof the different views (which makes things easier to learn).\n\nI've also added ResWithAtoms, CGsWithAtoms, ChainsWithRes etc.\nso that residues etc. can be selected that contain atoms, \ne.g. to select all residues that contain \"CA\" atoms, you \nwould do;\n\nSelector<Residue> residues = mol.select( AtomName(\"CA\").residues() );\n\nor, in Python you can write;\n\nfor residue in mol.select( AtomName(\"CA\").residues() ):\n    do something with residue\n\nCode should be working - the python wrappers are compiling now\n(obviously, they are pretty much all being recompiled.... yawn!)\n\n", "author": "chryswoods"}, {"date": "2010-06-12T11:31:03.139993Z", "commit": "1321", "message": "I've got the multi-bead rigid body code working and have added an example\n(a 2-bead ethane molecule - test/SireMove/intra_rbdynamics.cpp).\n\nThere was an issue with the last version - I've fixed it now.\n\nCode is all working again\n\n", "author": "chryswoods"}, {"date": "2010-06-12T09:53:01.221529Z", "commit": "1320", "message": "I've added an AtomBeading property, and BeadNum class, so that it is possible\nto arbitrarily assign atoms to beads. I've added support for this in the \nRBWorkspace, so hopefully, I will soon be able to test if multi-bead molecules\nwork :-)\n\nPython wrappers are compiling now, but they should all work.\n\n", "author": "chryswoods"}, {"date": "2010-06-11T23:38:22.216259Z", "commit": "1319", "message": "I've fixed RBWorkspace - I had broken it by calculating the moments of inertia\nusing the bead mass rather than using the atomic masses. It now all works.\nTomorrow I will test the multi-bead molecule code :-)\n\n", "author": "chryswoods"}, {"date": "2010-06-11T22:45:08.592894Z", "commit": "1318", "message": "Continuing to work to fix rbworkspace...\n\n", "author": "chryswoods"}, {"date": "2010-06-11T22:35:09.987360Z", "commit": "1317", "message": "I've updated RBWorkspace to support multi-bead molecules. It all compiles, links and works,\nalthough the resulting dynamics is broken (just like it was broken before I finally\ndebugged and fixed the single-bead simulations). I just now need to work out how\nI broke it, so I can then fix it again...!\n\n", "author": "chryswoods"}, {"date": "2010-06-11T17:00:47.192922Z", "commit": "1316", "message": "I've fixed a bug in NMatrix (multiplication by a scalar was just plain wrong) and\nalso fixed a bug in PolariseCharges (the off-diagonal terms of X^T X should have\nbeen multiplied by 1/alpha).\n\nI'm also committing my continuing work on beading up the rigid body dynamics\nworkspace.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-06-07T21:04:01.781455Z", "commit": "1315", "message": "I've fixed a bug in restraintff.cpp that meant that in rare circumstances \nuser supplied values for the restraints weren't being properly updated.\n\nI'm also committing the beginning of my work to allow a molecule to contain\nmultiple beads.\n\n", "author": "chryswoods"}, {"date": "2010-06-05T22:49:22.651571Z", "commit": "1314", "message": "I've debugged the bond, angle and dihedral force calculations. They now seem to\nwork (see test/SireMove/intra_dynamics.py) although numerical error means\nthat bond lengths to hydrogens change during integration (growing in one\ndirection, then shrinking in the other, until the molecule eventually blows\nup)\n\n", "author": "chryswoods"}, {"date": "2010-06-04T16:55:07.322300Z", "commit": "1313", "message": "Fixed a bug in movermove, done tests to check that the results are correct on toy systems. \nTests on more complex molecules are now needed to optimize movermove for efficiency.\n\n", "author": "julienmich"}, {"date": "2010-06-03T19:20:00.416085Z", "commit": "1312", "message": "Fixed a compile error in the python wrappers \n\n", "author": "chryswoods"}, {"date": "2010-06-03T15:29:41.382678Z", "commit": "1311", "message": "I've removed these files that are no longer needed as these classes are no longer\nexposed to python\n\n", "author": "chryswoods"}, {"date": "2010-06-03T15:16:58.348407Z", "commit": "1310", "message": "I am compiling the updated Python wrappers that accompany the merged version\nof the devel branch into the users/julienmich branch\n\n", "author": "chryswoods"}, {"date": "2010-06-03T14:43:51.074657Z", "commit": "1309", "message": "I've merged the corelib/branches/devel branch into corelib/branches/users/julienmich using\n\nsvn merge -r 1270:1308\n\nThis updates this branch so that it is equivalent to revision 1308 of the devel branch.\n\nI've also fixed a couple of small compile bugs in src/libs/SireMove/movermove.cpp\n\n", "author": "chryswoods"}, {"date": "2010-06-03T14:05:06.439573Z", "commit": "1308", "message": "I've implemented all of the stub code so that everything cmopiles and \nlinks again properly, and I'm also committing the updated python wrappers.\n\nSire should be working again :-)\n\n", "author": "chryswoods"}, {"date": "2010-06-03T11:48:18.475039Z", "commit": "1307", "message": "By using Shark (excellent Apple profiling tool) I found that the slowdown was\nnot because of the monitors, but because of the constraints. There were two problems;\n\n(1) Updating a constant in forcefields caused reindexing the all forcefields\n    (this has now been fixed)\n\n(2) Checking whether an atom point would be changed, and then changing that\n    atom point caused several molecule copies (these have been fixed)\n\nMaking these changes reduced the time for 10 000 moves from 5.5 seconds to\n3.1 seconds. The time without monitors or constraints is 2.5 seconds, so there\nis still some way to go, but at least it is an improvement.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-06-03T10:50:28.076529Z", "commit": "1306", "message": "I've fixed the second bug found by Julien - this was caused by the operator== code\nfor the GeometryComponent classes incorrectly saying they were equal. This was because\nof a silly typo, e.g.\n\nbool DistanceComponent::operator==(const DistanceComponent &other) const\n{\n    return this != &other or ...;\n}\n\nshould be\n\n    return this == &other or ...;\n\nI've scanned the code to see if I made this error anywhere else, and fortunately\nI hadn't. I've fixed this bug in all of the GeometryComponent classes and now\nthe script works. It is interesting to note however that the time to run\n10000 moves of test/SireSystem/testmonitors.py increase from 4.5 to 5.5 seconds\nwhen I add the third monitor. I will performance debug this now...\n\nNote that the code is still broken because of the work in progress for the\nQM forcefields.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-06-03T07:52:08.155189Z", "commit": "1305", "message": "I've added Julien's triatomic monitor test script that reveals a performance bug\nin RecordValues. I've fixed this by changing the QVector<double> (which holds all\nof the recorded values in a single array, so is very expensive to copy when it gets\nbig) with a SireBase::ChunkedVector<double>, which holds the data as a series of\nQVectors, so is doesn't copy everything. This now means that running 1 M moves\nin test/SireSystem/testmonitors.py takes only 10 times longer than running\n100 k moves (46 seconds versus 4.6 seconds).\n\nI'm also committing my progress of adding field and potential support to \nthe QM forcefields - this code is still work in progress\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-06-01T15:50:00.317725Z", "commit": "1304", "message": "I'm committing the afternoon's work on adding force, field and potential support to the\nQM forcefields so that Ewa can run QM dynamics, and Katie can run QM/MM_{polarised}\ncalculations...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-06-01T04:31:17.034236Z", "commit": "1303", "message": "Trying to get movermove to work on bonds (code is broken)\n", "author": "julienmich"}, {"date": "2010-05-31T23:31:50.527368Z", "commit": "1302", "message": "Finished the API for getBonds, getAngles, getDihedrals. Appears to work for ethane, but \nmore tests are needed and should involve mono,di,tri-atomic molecules and ring structures\n", "author": "julienmich"}, {"date": "2010-05-31T22:54:26.677973Z", "commit": "1301", "message": "I've got the rigid body MD code working now - the water example (rigidbodymd.py)\nconserves energy and produces a reasonable trajectory, as does the ion\nexample. Cool :-)\n\n", "author": "chryswoods"}, {"date": "2010-05-31T22:26:11.551175Z", "commit": "1300", "message": "I've now got the ions example working (test/SireMove/rbdynamics.py), and have\nadded code to print out the principal axes of the molecules being moved\n\n", "author": "chryswoods"}, {"date": "2010-05-31T16:25:25.203831Z", "commit": "1299", "message": "I'm still getting there - I've worked out that part of the problem was that when\nthere was a zero eigenvalue that the principal axes could come out as\na mirror (left-hand) form - I've added code to detect this and correct\nthe axes to a right-hand form. This hasn't fixed the waters though...\n\n", "author": "chryswoods"}, {"date": "2010-05-31T13:11:42.599040Z", "commit": "1298", "message": "I'm nearly there with the rigid body dynamics integrator - I've fixed a bug in the cross\nproduct calculation and have worked out that the error now is that sometimes there\nis a problem with the torque calculation and that the negative of the torque is needed.\nThis implies that I have either a problem with my axis set for the internal frame\nof some molecules, or I am doing something to screw up the torque calculation...\n\n", "author": "chryswoods"}, {"date": "2010-05-31T12:01:09.673594Z", "commit": "1297", "message": "I've fixed a bug in the matrix multiplication code that was the cause of rotations\naround the y axis leading to scaling.\n\nI've also now got the rigid body integrator working such that a set torque\nresults in the molecules spinning up correctly (see test/SireMove/rbdynamics.py\nand test/SireMove/rigidbodymd.py with the torque set in \nsrc/libs/SireMove/rbworkspace.cpp). This also now all works with quaternions\nfor rotations (which produce the same result as when I originally\nimplemented it using matricies)\n\n", "author": "chryswoods"}, {"date": "2010-05-31T02:56:18.238214Z", "commit": "1296", "message": "Merged devel changes to bond/angle/dihedralid.cpp(h) using for each file\nsvn merge -r 1292:HEAD https://sire.googlecode.com/svn/corelib/branches/devel/src/libs/SireMol/dihedralid.h\n", "author": "julienmich"}, {"date": "2010-05-30T11:11:43.266120Z", "commit": "1295", "message": "I've added \".mirror()\" functions to the BondID, AngleID and DihedralID classes so\nthat it is easy to get the reverse bond, angle and dihedral IDs. This lets you\neasily build a unique set of bonds etc. if you know that BondID(atom0,atom1) is\nthe same as BondID(atom1,atom0), e.g.\n\nQSet<BondID> bonds;\n\nforeach (BondID bond, list_of_bonds)\n{\n    if ( not (bonds.contains(bond) or bonds.contains(bond.mirror())) )\n    {\n        bonds.insert(bond);\n    }\n}\n\n\n", "author": "chryswoods"}, {"date": "2010-05-30T10:42:31.856695Z", "commit": "1294", "message": "I've finally worked out how to convert SireError::invalid_index exceptions\ninto Python StopIteration exceptions. This means that the for x in y: iterations\nin python now work, e.g.\n\n--------------------------\nfrom Sire.IO import *\n\nwater = PDB().readMolecule(\"test/io/water.pdb\")\n\nfor atom in water.atoms():\n    print atom, atom.property(\"coordinates\")\n\n-------------------------\n\nThis also works for all of the sub-seletions, e.g. to calculate the\ncenter of mass of the \"CA\" atoms in a protein, type\n\n-------------------------\nfrom Sire.IO import *\nfrom Sire.Mol import *\nfrom Sire.Maths import *\nfrom Sire.ID import *\n\nprotein = PDB().readMolecule(\"test/io/cox2.pdb\")\n\nmass = 0\ncom = Vector(0)\n\nfor atom in protein.atoms( AtomName(\"CA\", CaseInsensitive) ):\n    com += atom.property(\"coordinates\") * atom.property(\"element\").mass().value()\n    mass += atom.property(\"element\").mass().value()\n\nprint \"Center of mass = %s\" % (com / mass)\n\n-------------------------\n\nCool :-)\n\n", "author": "chryswoods"}, {"date": "2010-05-30T05:17:37.098143Z", "commit": "1293", "message": "Committing the wrappers which appear messed up for now\n", "author": "julienmich"}, {"date": "2010-05-30T05:15:54.227735Z", "commit": "1292", "message": "Working on getBonds(), getAngles() in connectivity and also the movermove class. Not yet working. \n\n", "author": "julienmich"}, {"date": "2010-05-29T18:37:19.982441Z", "commit": "1291", "message": "I've fixed a bug in the PolariseCharges constraint in that it was not passing\non the specified energy component to the System. I've tested it an now\nthe values look sensible, although more detailed debugging is required.\n\n", "author": "chryswoods"}, {"date": "2010-05-29T17:59:25.240031Z", "commit": "1290", "message": "Forgot to add the wrappers for the SingleComponent class...!\n\n", "author": "chryswoods"}, {"date": "2010-05-29T17:30:20.432765Z", "commit": "1289", "message": "I've added the MonitorProperty class, which is now working (and wrapped) and have\nalso added the code to calculate the self-polarisation energy from the \nPolariseCharges constraint (the energy is calculated by an accompanying \nforcefield that uses the energies that are placed into the self_polnrg property\nby the PolariseCharges constraint itself - this stops me from having to \ndouble-calculate the polarisation, and is a trick I may adopt for the\nQM charge calculators to stop me from having to double-perform the \nQM calculations)\n\nCode all appears to compile and work. I am currently debugging the\nnew self polarisation code...\n\n", "author": "chryswoods"}, {"date": "2010-05-28T15:06:31.292243Z", "commit": "1288", "message": "I've fixed a bug in PolariseCharges that meant that it was never satisfied,\nand (from last night) I continued to debug the rigid body code,\nand (finally!) I've added the beginning of my work on the MonitorProperty\nclass to monitor system, forcefield or molecule properties during a simulation.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-05-26T23:05:26.980209Z", "commit": "1287", "message": "I've added another test of the rigid body dynamics code and have been trying to \nsort out the integrator - the code isn't right - the integration for water\nis not stable at all, and looks wrong. The rbdynamics.py script is tests\nsome ions and ion pairs, and this looks better, but there is still a lot to do...\n\n", "author": "chryswoods"}, {"date": "2010-05-25T21:09:42.327893Z", "commit": "1286", "message": "I've committed more work on the rigid body integrator, and also a fix for the\npython2 wrapper autogeneration error caused by an undeclared uint32_t in \nmaths.h\n\n", "author": "chryswoods"}, {"date": "2010-05-24T22:18:59.098479Z", "commit": "1285", "message": "I've switched the orientation and integration over to use quaterions. This has stabilised\nthe structures, although they all start with one hydrogen in a slightly wrong place.\nDespite this, the rest of it looks ok, so the next step is to calculate the kinetic\nenergy so I can monitor energy conservation, and to then debug this hydrogen position...\n\n", "author": "chryswoods"}, {"date": "2010-05-24T21:55:14.787564Z", "commit": "1284", "message": "I've added the rotational integration code - this appears to work (to an extent).\nNumerical inprecision destroys the rotation matrix after several iterations,\nalthough before then, the motion of the water looks realistic.\n\n", "author": "chryswoods"}, {"date": "2010-05-24T21:31:23.825747Z", "commit": "1283", "message": "I've written the code that integrates the positions of the rigid body beads.\nThis appears to work (the dynamics of the rigid waters looks correct, although\nI still need to check that the total energy is being conserved). \n\nThe next job is to integrate the orientations...\n\n", "author": "chryswoods"}, {"date": "2010-05-23T20:52:00.701555Z", "commit": "1282", "message": "I've added some public domain code to quickly calculate the eigenvectors and \neigenvalues of the 3x3 matrix class without resorting to BLAS (which may\nnot be available). I've also continued working on filling in the code\nof the rigid body dynamics workspace - I've calculated the center of\nmass, principle moments of inertia and the coordinates of the atoms\nin the center of mass / inertia tensor frame.\n\n", "author": "chryswoods"}, {"date": "2010-05-23T15:34:55.452915Z", "commit": "1281", "message": "I've begun work on the rigid body integrator. I am writing a rigid body integrator\nthat can be used to move solvent molecules, and also for hybrid rigid body monte carlo.\n\nThe rigid body integrator is tested in test/SireMove/rigidbodymd.py, although\nat the moment it doesn't work as the code is just a stub.\n\n", "author": "chryswoods"}, {"date": "2010-05-23T12:30:08.105089Z", "commit": "1280", "message": "I've debugged the hybrid MC move and have added a hybrid MC equilivalent\nof the dynamics example (e.g. test/SireMove/hybridmc.py is the equivalent\nsimulation to test/SireMove/dynamics.py)\n\n", "author": "chryswoods"}, {"date": "2010-05-22T21:42:48.941701Z", "commit": "1279", "message": "I've cleaned up the API for the MolecularDynamics class and have written\nand wrapped a Hybrid Monte Carlo (HybridMC) class (and added some \ndocuments I wrote when I was a postdoc at Southampton about \nhybrid MC and random number generation). It all compiles and links.\nI've designed it so that different hybrid MC algorithms can be \nachieved by changing the HMC velocity generator.\n\n", "author": "chryswoods"}, {"date": "2010-05-22T12:52:44.486779Z", "commit": "1278", "message": "I've fixed a few small bugs in the calculation of forces.\n\n", "author": "chryswoods"}, {"date": "2010-05-22T12:39:45.486222Z", "commit": "1277", "message": "I've got the dynamics code working!!! :-)\n\ntest/SireMove/dynamics.py runs 10 ps of dynamics of a cube of salt (5x5x5). The\nenergy is conserved, the dynamics looks good, and things are great!\n\nIn being able to do dynamics, Sire has taken a big step beyond just being\na better version of ProtoMS. The API for dynamics is quite cool too, \nas it cleanly separates the dynamics integrator from the MoleculeDynamics\nmove class, and classes that are used to manage the system. The only down-side\nis that the updates to the system could end up being very slow...\n\n", "author": "chryswoods"}, {"date": "2010-05-22T11:13:02.301325Z", "commit": "1276", "message": "I've got the dynamics code running - the code now all compiles and links without errors.\nThe script test/SireMove/dynamics.py runs dynamics on a 6x6x6 box of neon. The \nintegration at the moment is wrong, as the trajectory is rubbish and the total\nenergy is not conserved... Time for some debugging.\n\n", "author": "chryswoods"}, {"date": "2010-05-21T23:17:48.153357Z", "commit": "1275", "message": "I've filled in all of the code for the dynamics classes, and have generated\nthe python wrappers. All of the corelib code compiles, while I am still\nwaiting for the python wrappers to compile... They may work ;-)\n\nCode is broken (probably)\n\n", "author": "chryswoods"}, {"date": "2010-05-21T14:05:19.086261Z", "commit": "1274", "message": "I've made more progress with the dynamics code while I've been waiting for the \nMPI code to compile on HLRB (Itanium). The MPI code now works on the Itanium system,\nwith mpirun -np 4 sire_python test/SireCluster/testcluster.py working as expected :-)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-05-21T07:57:31.747008Z", "commit": "1273", "message": "Continuing to make progress with the integrator classes - but must now\nrun to catch my bus\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-05-21T07:40:23.961333Z", "commit": "1272", "message": "I've gone back to working on the integrator classes so that I can run dynamics calculations.\nI've updated the APIs of the Move classes so that they can take PropertyMap maps in \ntheir constructors. This simplifies the usage of these classes if lots of non-standard\nproperties are required\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-05-20T23:40:16.900276Z", "commit": "1271", "message": "Test commit of the movermove class (implementation incomplete)\n", "author": "julienmich"}, {"date": "2010-05-20T09:59:02.994793Z", "commit": "1270", "message": "I've created a branch for Julien in corelib and python2. This branch is copied from the\ncurrent (working!) \"devel\" branch.\n\nBeing based on \"devel\", this branch does not include the new rewrite of Sire\nto switch over to Siren (as this is occuring in the \"chryswoods\" branch).\n\nAt some point, a whole lot of merging will need to take place :-)\n\n", "author": "chryswoods"}, {"date": "2010-05-20T09:27:47.954488Z", "commit": "1269", "message": "I've fixed critical bugs in the new IdentityConstraint, SpaceWrapper and QMChargeConstraint\ncode, which all involved them not updating the system in certain circumstances.\n\nI've also updated sire_python to use the MPI C bindings rather than the C++ bindings.\n\nIn addition, I've now successfully compiled this code (including wrappers) on\nItanium2. Sire is becoming really portable :-)\n\n", "author": "chryswoods"}, {"date": "2010-05-17T10:56:37.676357Z", "commit": "1268", "message": "I've ported SireCluster/mpi to the C MPI API. I've found that the C++ MPI API is not widely\nsupported, and has caused me difficulties, so I've replaced the C++ calls with their\nC equivalents. Tests on my laptop show that it is working.\n\n", "author": "chryswoods"}, {"date": "2010-05-17T07:54:26.425916Z", "commit": "1267", "message": "I'm now finishing up the dynamics code - this commit updates the dynamics\ntest by running a simulations of a box of neon.\n\n", "author": "chryswoods"}, {"date": "2010-05-16T13:42:50.883199Z", "commit": "1266", "message": "I forgot to fix TrajectoryMonitor that also uses QTemporaryFile - this commit\nincludes this fix.\n\n", "author": "chryswoods"}, {"date": "2010-05-16T13:01:36.270172Z", "commit": "1265", "message": "I've fixed a small bug in the saving of the temporary filename\n\n", "author": "chryswoods"}, {"date": "2010-05-16T12:28:36.649005Z", "commit": "1264", "message": "I've added a workaround for QTemporaryFile losing the filename when it is closed.\n\n", "author": "chryswoods"}, {"date": "2010-05-16T11:24:10.354502Z", "commit": "1263", "message": "I've fixed a small bug in the constraints that meant that the code incorrectly thought\nthat the constraints weren't satisfied.\n\n", "author": "chryswoods"}, {"date": "2010-05-15T16:18:35.822340Z", "commit": "1262", "message": "I've played around with improving the generation of the API documentation\n\n", "author": "chryswoods"}, {"date": "2010-05-14T19:47:24.157618Z", "commit": "1261", "message": "I've exposed the MolID operator functions in System, thus allowing you to write;\n\nmol = system[ MolName(\"ethane\") ]\n\n", "author": "chryswoods"}, {"date": "2010-05-14T19:25:50.276364Z", "commit": "1260", "message": "I've fixed another SSE compile bug, now in PeriodicBox, and I have also fixed\nthe lookup-by-name bug in MoleculeGroup.\n\n", "author": "chryswoods"}, {"date": "2010-05-14T15:46:37.061532Z", "commit": "1259", "message": "I've fixed the compile bug if SSE is not enabled that Julien spotted\n\n", "author": "chryswoods"}, {"date": "2010-05-14T14:28:07.062593Z", "commit": "1258", "message": "I've fixed bugs in the code (weight, rather than 1 - weight was used by Mover), have\nadded a cap to the Cube output, have changed the energy in Cube to kcal mol-1 rather\nthan hartree, have added a charge accumulator in PolariseCharges, have added \nAngleComponent and DihedralComponent constraints (which will need to be renamed\nas they clash with SireMM::DihedralComponent and SireMM::AngleComponent) and\nhave added convenience .measure() functions to Evaluator\n\n", "author": "chryswoods"}, {"date": "2010-05-13T14:57:56.440886Z", "commit": "1257", "message": "I've got most of the PolariseCharges constraint working, and the changes in \ncharge look reasonable...\n\n", "author": "chryswoods"}, {"date": "2010-05-11T22:01:52.617461Z", "commit": "1256", "message": "I've made more progress on the polarise charges constraint\n\n", "author": "chryswoods"}, {"date": "2010-05-11T12:44:26.760896Z", "commit": "1255", "message": "I'm making progress with the PolariseCharges constraint, and have also fixed\na bug in SimStore and TrajectoryMonitor that caused small systems or PDB\nfiles to be corrupted or lost (as their data was not correctly flushed to disk)\n\n", "author": "chryswoods"}, {"date": "2010-05-10T22:02:08.910810Z", "commit": "1254", "message": "I've provided stubs for the PolariseCharges class, and have worked out roughly\nwhat should be written...\n\n", "author": "chryswoods"}, {"date": "2010-05-10T14:37:08.288645Z", "commit": "1253", "message": "I've fixed small bugs in rational and ComponentConstraint\n\n", "author": "chryswoods"}, {"date": "2010-05-10T12:55:08.308152Z", "commit": "1252", "message": "I've added the python wrappers for the Cube class\n\n", "author": "chryswoods"}, {"date": "2010-05-10T12:49:48.648360Z", "commit": "1251", "message": "I've fixed the bug that was causing all of the constraints to be continually\nre-evaluated - I was incrementing the version after calling collectStatistics()\n\n", "author": "chryswoods"}, {"date": "2010-05-07T15:03:37.902431Z", "commit": "1250", "message": "I've written a gaussian cube writer so that I can visualise the potential grids.\n\n", "author": "chryswoods"}, {"date": "2010-05-05T14:28:26.590435Z", "commit": "1249", "message": "I've fixed a small bug with IdentityConstraint where it was not properly applying\nthe constraint from the direct apply constraint function.\n\n", "author": "chryswoods"}, {"date": "2010-05-05T14:03:08.263397Z", "commit": "1248", "message": "I've fixed a small bug in ForceFields and have been debugging some problems\nI've been experiencing with the identity constraint.\n\n", "author": "chryswoods"}, {"date": "2010-05-05T11:37:25.304553Z", "commit": "1247", "message": "I think that I've fixed a bug in SireCAS where it was not properly recognising\nwhen an expression was zero. This was what caused my remainder code in ForceFields\nto exit with errors about remainders that were not dimensionally correct.\n\n", "author": "chryswoods"}, {"date": "2010-05-04T11:52:11.925728Z", "commit": "1246", "message": "I've got Sire and the python wrappers to now all compile, link and install. Time to debug and test.\n\n", "author": "chryswoods"}, {"date": "2010-05-03T14:53:00.076055Z", "commit": "1245", "message": "I've got sire all compiling again with the new field and potential code. I've created\nthe python wrappers and am now seeing if they compile...\n\nCode is broken (probably)\n\n", "author": "chryswoods"}, {"date": "2010-04-30T15:54:32.569261Z", "commit": "1244", "message": "I've made good progress integrating the field and potential code into the forcefields.\nI've now just got to finish updating all of the potentials to fill in the necessary\ncode (InterCLJPotential is complete)\n\n", "author": "chryswoods"}, {"date": "2010-04-28T14:27:43.893407Z", "commit": "1243", "message": "I've added a hierarchy of Probe classes as I am working on adding fields and \npotentials to the forcefield classes. The API is now set, I've just got\nto fill in all of the code... (and there is a lot)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-04-23T16:43:57.737881Z", "commit": "1242", "message": "I've written PotentialTable, GridPotentialTable and MolPotentialTable, and have \ngot these to compile (and have produced the python wrappers). Now to get these\nall linked and tested, then to add the code to the forcefields to actually\ncalculate these quantities...!\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-04-23T11:53:17.150846Z", "commit": "1241", "message": "I've finished FieldTable and have got it compiled and wrapped in Python. Now I can\ncopy this over to make PotentialTable...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-04-22T14:37:26.610625Z", "commit": "1240", "message": "I've filled in the code for MolFieldTable and GridFieldTable - I'll tackle FieldTable\nafter coffee...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-04-22T07:55:17.421694Z", "commit": "1239", "message": "I'm continuing work fleshing out the APIs of FieldTable and ForceTable, and filling in the\nnecessary functions.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-04-21T15:45:33.291142Z", "commit": "1238", "message": "I'm continuing work on the polarisable MM forcefield - for this I need to be able to get the\npotential and field from the forcefields - for this I am writing the FieldTable and PotentialTable\nclasses (which are like ForceTable) - and for these I have written the Grid hierarchy of \nclasses (which provide 3D grids). The grid classes are finished, compile, link, wrap in \npython and have been tested - now its back to the FieldTable and PotentialTable classes...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-04-16T12:14:03.459115Z", "commit": "1237", "message": "I've finished writing the bulk of the WHAM code and have wrapped it in Python (as part of the \nSoiree module). Everything compiles and links, but it now needs to be tested...\n\n", "author": "chryswoods"}, {"date": "2010-04-15T15:57:14.326059Z", "commit": "1236", "message": "I've moved WHAM to the new Soiree module. Soiree was always going to be the name\nof the post-simulation (early evening) analysis module, which will contain all of\nthose analysis tools that will help investigate a simulation after it has finished\nrunning.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-04-15T15:37:08.842190Z", "commit": "1235", "message": "I'm continuing to make progress with the WHAM code, however have noticed that as it \ndepends on Symbol, it can't be in SireMaths (as SireCAS depends on SireMaths).\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-04-13T10:46:17.430151Z", "commit": "1234", "message": "I'm working on writing a solver for the WHAM equations...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-04-12T15:45:50.367896Z", "commit": "1233", "message": "I've been testing and debugging the new delta / constraint code. It appears to now be working.\nThe following script has a series of connected, interesting constraints;\n\n(1) 2 charge constraints that calculate the AM1BCC charges for the subtrate\n    every time it changes conformation\n\n(2) Property constraint that sets a restraint in RestraintFF to match the value\n    of R0\n\n(3) Component constraint that calculates R from the current substrate geometry\n\n(4) Component constraint that calculates lambda from the current value of R\n\nTogether these constraints allow an umbrella potential to be set (using R0),\nwhich will force the substrate to explore different geometries along R, and\nto have different values of R change lambda so that the LJ parameters\nand AM1BCC charges can be mapped from reactant to product.\n\nCool :-)\n\nfrom Sire.IO import *\nfrom Sire.Squire import *\nfrom Sire.Mol import *\nfrom Sire.Vol import *\nfrom Sire.System import *\nfrom Sire.MM import *\nfrom Sire.FF import *\nfrom Sire.Maths import *\nfrom Sire.Move import *\nfrom Sire.Base import *\nfrom Sire.CAS import *\nfrom Sire.Qt import *\n\nimport os\n\nprotoms_dir = \"%s/Work/ProtoMS\" % os.getenv(\"HOME\")\n\namber_params = [ \"%s/parameter/amber99.ff\" % protoms_dir,\n                 \"%s/parameter/gaff.ff\" % protoms_dir,\n                 \"%s/parameter/solvents.ff\" % protoms_dir ]\n\nreactant_params = \"reactant_substrate.template\"\nproduct_params = \"product_substrate.template\"\n\nreactant_name = \"chorismate\"\nproduct_name = \"prephenate\"\n\npdbfile = \"free_022_0030.pdb\"\nxscfile = \"free_022_0030.xsc\"\n\nmols = PDB().read(pdbfile)\n\nsubstrate = mols.moleculeAt(0).molecule()\n\nwaters = mols\nwaters.remove(substrate.number())\n\ndef getProtoMS(params):\n    protoms = ProtoMS(\"%s/protoms2\" % protoms_dir)\n\n    for param in amber_params:\n        protoms.addParameterFile(param)\n\n    if params:\n        protoms.addParameterFile(params)\n\n    return protoms\n\nreactant = substrate.edit().renumber().rename(reactant_name).commit()\nproduct = substrate.edit().renumber().rename(product_name).commit()\n\nprint reactant\nprint product\n\nprotoms = getProtoMS(reactant_params)\n\nprint \"Parameterising the reactant...\"\nreactant = protoms.parameterise(reactant, ProtoMS.SOLUTE)\n\nprint \"Parameterising the product...\"\nprotoms = getProtoMS(product_params)\nproduct = protoms.parameterise(product, ProtoMS.SOLUTE)\n\nprint reactant\nprint product\n\nsubstrate = reactant.edit() \\\n                    .setProperty(\"reactant_charge\", reactant.property(\"charge\")) \\\n                    .setProperty(\"reactant_LJ\", reactant.property(\"LJ\")) \\\n                    .setProperty(\"product_charge\", product.property(\"charge\")) \\\n                    .setProperty(\"product_LJ\", product.property(\"LJ\")) \\\n                    .setProperty(\"reactant_z-matrix\", reactant.property(\"z-matrix\")) \\\n                    .setProperty(\"product_z-matrix\", product.property(\"z-matrix\")) \\\n                    .setProperty(\"reactant_connectivity\", reactant.property(\"connectivity\")) \\\n                    .setProperty(\"product_connectivity\", product.property(\"connectivity\")) \\\n                    .commit()\n\nrestraintff = RestraintFF(\"RestraintFF\")\n\nlam = Symbol(\"lambda\")\nk = 2000.0\nstart = -1.8\nend = 1.8\nr01 = DoubleDistanceRestraint.r01()\nr23 = DoubleDistanceRestraint.r23()\n\nr0 = Symbol(\"r0\")\n\nC = substrate.atom(AtomName(\"C\"))\nO3 = substrate.atom(AtomName(\"O3\"))\nC3 = substrate.atom(AtomName(\"C3\"))\nC9 = substrate.atom(AtomName(\"C9\"))\n\nrestraint = DoubleDistanceRestraint(C, O3, C3, C9, k * ( r01 - r23 - r0 )**2 ) \n\nrestraintff.add( restraint )\n\nrestraintff.setValue(r0, -1.8)\n\nprint restraint\nprint restraintff\nprint restraintff.energy()\n\nmopac = Mopac()\nmopac.setTotalCharge(-2)\n\nqmff = QMFF(\"QMFF\")\nqmff.setQuantumProgram(mopac)\nqmff.add(substrate)\n\nsubstrate = MoleculeGroup(\"substrate\", substrate)\n\nsystem = System()\nsystem.setConstant(r0, -1.8)\nsystem.add(substrate)\nsystem.add(qmff)\nsystem.add(restraintff)\n\nsystem.add( PropertyConstraint( \"r0\", FFName(\"RestraintFF\"), r0 ) )\n\nr = Symbol(\"r\")\n\nsystem.setConstant(r, -1.8)\n\nsystem.add( ComponentConstraint( lam, Max( 0.0, Min( 1.0, (r + 1.8) / 3.6 ) ) ) )\n\nr01 = DoubleDistanceComponent.r01()\nr23 = DoubleDistanceComponent.r23()\n\nsystem.add( DoubleDistanceComponent( r, C, O3, C3, C9, r01 - r23 ) )\n\nam1bcc = AM1BCC()\nam1bcc.setTotalCharge(-2)\n\nsystem.add( QMChargeConstraint(substrate, am1bcc, {\"connectivity\" : \"reactant_connectivity\",\n                                                   \"charge\" : \"reactant_charge\"}) )\n\nsystem.add( QMChargeConstraint(substrate, am1bcc, {\"connectivity\" : \"product_connectivity\",\n                                                   \"charge\" : \"product_charge\"}) )\n\nprint \"Apply constraints\"\nsystem.applyConstraints()\n\nprint \"Energies...\"\nprint system.energy()\nprint system.energies()\nprint system.constants()\n\nmol = system[MGIdx(0)][MolIdx(0)].molecule()\nprint mol.evaluate().charge( {\"charge\" : \"reactant_charge\" } ), mol.property(\"reactant_charge\")\nprint mol.evaluate().charge( {\"charge\" : \"product_charge\" } ), mol.property(\"product_charge\")\n\nreactant_move = ZMatMove(substrate)\nreactant_move.setZMatrixProperty( \"reactant_z-matrix\" )\n\nproduct_move = ZMatMove(substrate)\nproduct_move.setZMatrixProperty( \"product_z-matrix\" )\n\nprint \"Moves...\"\n\nfor r in range(-180, 181, 20):\n    system.setConstant( r0, 0.01*r)\n\n    # get lambda for this value of r\n    lam = (r + 180.0) / 360.0\n\n    # use lambda to weight the choice of z-matrix\n    moves = WeightedMoves()\n    moves.add( reactant_move, 1 - lam )\n    moves.add( product_move, lam )\n\n    for i in range(0,5):\n        print \"Perform moves...\"\n        system = moves.move(system, 5, True)\n        print \"DONE!\"\n        print 0.01*r, i, system.energy(), moves\n        print system.energies()\n        print system.constants()\n\n        mol = system[MGIdx(0)][MolIdx(0)].molecule()\n        print mol.property(\"reactant_charge\")\n        print mol.property(\"product_charge\")\n\n    PDB().write(system.molecules(), \"test%004d.pdb\" % (r+180))\n\n\n", "author": "chryswoods"}, {"date": "2010-04-12T11:14:51.539349Z", "commit": "1232", "message": "I've finished porting all of the code to the new constraint / delta system. All code and all python\nwrappers now compile and link. Now it all needs to be tested...\n\n", "author": "chryswoods"}, {"date": "2010-04-08T10:45:11.441397Z", "commit": "1231", "message": "I'm continuing to make progress integrating the new delta code into the constraints. I've finished\nthe property and component constraints and have begun work on the molecule constraints\n(I've got SpaceWrapper and PerturbationConstraint to compile - still need to do IdentityConstraint\nand ChargeConstraint, before then going on to what triggered all of this - GeometryComponent\nand DistanceComponent)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-03-24T08:56:10.461982Z", "commit": "1230", "message": "I've finished (finally!) writing PropertyConstraint and am now making good progress\non ComponentConstraint. PropertyConstraint was a lot more complicated than it\noriginally appeared, with lots of corner cases!\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-03-23T22:47:10.858125Z", "commit": "1229", "message": "I am continuing to update the constraint code so that it uses deltas. It is quite complicated...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-03-20T18:03:59.381021Z", "commit": "1228", "message": "I think that I've finished the Delta class - I've fully tested it in \ntest/SireSystem/testdelta.py\n\nI've had to modify the design a little to account for deltas that don't\nchange anything, e.g. Delta( lambda, 0.0, 0.0 ) - I can't just ignore\nthese as these are necessary to allow changes to be reversed, e.g.\n\nDelta( lambda, 0.0, 1.0 ) + Delta( lambda, 0.0, 0.0 )\n\nshould equal\n\nDelta( lambda, 0.0, 0.0 )\n\nmeaning that lambda won't change. This has slightly complicated\nthe involves() and isEmpty() functions, as\n\nDelta( lambda, 0.0, 0.0 ).isEmpty() should be true, but\nDelta( lambda, 0.0, 0.0 ).isNull() should be false, and\nDelta( lambda, 0.0, 0.0 ).involves(lambda) should be false\n(as lambda isn't changing)\n\nCode compiles and appears to work - next step is changing\nthe constraint code (and system change code) so that it \nuses Delta... \n\n", "author": "chryswoods"}, {"date": "2010-03-19T16:58:10.752424Z", "commit": "1227", "message": "I'm making good progress with the delta class - I'm working on the code used to merge\ntwo deltas together. I've worked out how this should work;\n\nthe pre-delta parts (old) should agree completely in the two deltas to merge,\nas they should both be from the same start\n\nthe post-delta parts come from the right hand delta, e.g. delta0 + delta1 would\nresult in a delta that contains the versions in delta1 if there are any\nshared parts\n\nCode compiles and links, though the delta code is unfinished\n\n", "author": "chryswoods"}, {"date": "2010-03-18T22:38:03.205503Z", "commit": "1226", "message": "I'm continuing to work on the Delta class. The new constraint system will use mutable \nconstraints that will take a single delta, apply constraints to create a larger,\nmerged delta, and then this single delta will be applied to the system in one\ngo. This will allow easier detection of circular constraints, and will also\nmean that the system is modified just once, rather than nconstraints times.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-03-18T13:35:26.333959Z", "commit": "1225", "message": "The dependencies between molecules, components and properties in the system constraints are\nnow getting a little complicated (particular in my umbrella sampling simulation). To solve\nthis, I am slightly rewriting the constraints so that they work using Delta objects\n(which record what changes). This will allow constraint dependencies to be generated\non the fly, and will also simplify and optimise the actual calculation of the constraints\n(as now they will know what has changed)\n\nI'm in the process of writing the Delta class... interupted by the graduate talks\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-03-17T10:37:34.190272Z", "commit": "1224", "message": "I've fixed the bugs with SireCluster - the MPI code now all works, and test/SireCluster/remotenode.py\ncorrectly runs WorkTest on the remote node, with full encryption of the WorkPackets, and a single-threaded\nMPI 1 backend :-)\n\n", "author": "chryswoods"}, {"date": "2010-03-16T23:03:13.654258Z", "commit": "1223", "message": "I've got NetFrontend and NetBackend working - test/SireCluster/remotenode.py demonstrates\nthe running of a WorkPacket by sending SireCluster::network::Message objects (which are\nserialised, compressed, encrypted and signed transparently to the user of the API).\n\nThere is a small bug caused by me losing the UID of the host somewhere - this has\ntriggered a security exception in a high-level part of the code that can't work\nout why the host UID is wrong...\n\n", "author": "chryswoods"}, {"date": "2010-03-16T11:21:18.821768Z", "commit": "1222", "message": "I've fixed compile problems on Linux - this version seems to work as well as the version on Mac\n(SireSec also now works properly on Linux - this means that MPI messages are now automatically\nsigned and encrypted)\n\n", "author": "chryswoods"}, {"date": "2010-03-16T08:55:36.584567Z", "commit": "1221", "message": "I've added the code to allow Replies to be sent to messages, and have used this to write the\nNetFrontend class. The reply code tries to minimise memory use by posting replies into \npigeon holes, and having the code wait until a reply is posted into a pigeon hole.\nThis is better than the old design of creating placeholders for replies and then\npolling those.\n\nCode is untested as I have to run for the bus\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-03-15T21:33:17.889210Z", "commit": "1220", "message": "I've added and fixed code to add geometry components which can be monitored and used to\ndrive components in a system.\n\nI've also added more code to the new SireCluster design, which now allows resource reservation\nrequests to be made, and responded to (with backends for those resources now added to \na NetBackends registry object)\n\n", "author": "chryswoods"}, {"date": "2010-03-11T23:21:00.638470Z", "commit": "1219", "message": "I've added a GeometryComponent set of classes to the devel branch - these allow system components\nto be set that follow the geometry of the system, e.g. distances between atoms. This allows\nthese components to then be monitored (via existing component monitor classes), or used\nto feed into constraints (e.g. used to control lambda, which is used to control the potential).\n\nI'm adding this to allow me to perform umbrella sampling (need geometry monitoring) where\nthe forcefield changes to match the value of the (geometric) reaction coordinate.\n\nCode compiles and links, but needs testing.\n\n", "author": "chryswoods"}, {"date": "2010-03-05T23:37:48.585527Z", "commit": "1218", "message": "I'm continuing to build and debug SireCluster...\n\n", "author": "chryswoods"}, {"date": "2010-03-05T17:50:25.931146Z", "commit": "1217", "message": "I've reorganised SireCluster to move non-public classes into MPI, resources or network.\nThe cryptlib errors have been fixed and resources deleted correctly before \nSireSec_end is called. I've also cleaned up initialisation to ensure that the\ncluster has started cleanly before scripts are run.\n\n", "author": "chryswoods"}, {"date": "2010-03-05T15:09:51.043044Z", "commit": "1216", "message": "I'm now working to create the NetFrontend and NetBackend that will allow high level Node objects\nto control remote resources\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-03-01T23:26:39.073323Z", "commit": "1215", "message": "I've added acknowledgement of message sends and receives, so that it is possible for the \ncode to wait until a message has definitely been sent, and also wait until a message\nhas definitely been received (signalled by the recipient sending back an \nacknowledgement message)\n\nThis seems to work for shutdown, although I have some annoying cryptlib problems\nas it intercepts SIGCHLD, which I think is causing problems with OpenMPI\n(as I don't intercept SIGCHLD...)\n\n", "author": "chryswoods"}, {"date": "2010-02-28T17:38:03.159603Z", "commit": "1214", "message": "I've made a lot of progress with SireCluster, and have now successfully got\nsigned, compressed and encrypted messages being sent between processes using\nMPI.\n\n", "author": "chryswoods"}, {"date": "2010-02-26T23:37:26.666381Z", "commit": "1213", "message": "I'm debugging the initialisation of SireCluster - things are currently weird...\n\n", "author": "chryswoods"}, {"date": "2010-02-26T18:39:05.352003Z", "commit": "1212", "message": "I've been working on SireCluster, having designed most of the network message transmission\nlayer (which integrates encryption using SireSec), and abstracting away the actual\nnetwork protocol (so all MPI is now restricted to just mpi/mpicluster.cpp). I've also\nsorted out how to run all MPI from a single thread, so that it should work with\nolder MPI imlpementations (which are not thread safe, which don't have C++ bindings\nand which are missing newer functions).\n\n", "author": "chryswoods"}, {"date": "2010-02-23T15:23:24.205528Z", "commit": "1211", "message": "I've fixed some of the python wrappers to remove troublesome include files ;-)\n\n", "author": "chryswoods"}, {"date": "2010-02-23T15:18:09.911629Z", "commit": "1210", "message": "I've fixed a range of small compile and configure errors for Sire on Linux using an old Qt (4.2.1) \nand an old version of boost\n\n", "author": "chryswoods"}, {"date": "2010-02-23T15:08:35.502211Z", "commit": "1209", "message": "I've fixed the compile of cryptlib with SireSec on linux caused by the lack of -fPIC in the\ncompile options of cryptlib (as I am linking the static cryptlib library into the \ndynamic SireSec library)\n\n", "author": "chryswoods"}, {"date": "2010-02-22T21:22:31.400504Z", "commit": "1208", "message": "I've written and tested the SignedPubPriLock class, which compresses, encrypts and then signs\nthe data (or verifies, decrypts and uncompresses the data). This is tested in \ntest/SireSec/testsignkeys.py\n\n", "author": "chryswoods"}, {"date": "2010-02-22T08:47:32.555124Z", "commit": "1207", "message": "I've written the function used to process data through three consecutive envelopes. It compiles\nand links, but I have yet to test it...\n\n", "author": "chryswoods"}, {"date": "2010-02-21T17:24:24.505329Z", "commit": "1206", "message": "I've fixed SignatureLock so that it now works (it can sign and verify using PublicKey and PrivateKey).\n\nI've also updated Lock so that it can encrypt/sign and decrypt/verify files.\n\nThe next (last step!) is to tie this together to create a full signing lock which \ncompresses, encrypts and then signs data. This will be used in SireCluster to allow\nall messages to be compressed, encrypted and signed. This will prevent eavesdropping,\nand will allow each node to verify the owner of a workpacket and the integrity of that\nworkpacket.\n\n", "author": "chryswoods"}, {"date": "2010-02-18T18:08:01.110199Z", "commit": "1205", "message": "I've added a lock that can sign and verify the data (SignatureLock). I'll change\nthe API so that it is more less like a lock and more than a signing device\n\n", "author": "chryswoods"}, {"date": "2010-02-17T16:54:46.310665Z", "commit": "1204", "message": "I've moved the private key data so that it is not held directly in the private\nkey object, and have fully implemented the thread-locality (and have filled\nin the full API)\n\n", "author": "chryswoods"}, {"date": "2010-02-17T14:14:19.499033Z", "commit": "1203", "message": "I've got the code working that seperates the storage of public keys from private keys,\nand that can print the public key (and stream it). This is all demonstrated / tested\nin test/SireSec/testkeys.py\n\n", "author": "chryswoods"}, {"date": "2010-02-15T18:11:33.173302Z", "commit": "1202", "message": "I've updated the enveloping code so that the data is compressed, then encrypted automatically\n(with the output from the encryption envelope piped straight into the input of the\nencryption envelope - and of course vice-versa for decrypting and decompressing).\n\nThe next step is to pipe compression -> encryption -> signing so that I have\nsigned, encrypted and compressed messages.\n\n", "author": "chryswoods"}, {"date": "2010-02-13T14:26:43.125042Z", "commit": "1201", "message": "I've got the basics of public/private key cryptography working, and am able to generate \nthe public and private keys, and correctly encrypt and decrypt data (e.g. set\ntest/SireSec/testkeys.py)\n\n", "author": "chryswoods"}, {"date": "2010-02-12T23:43:56.442561Z", "commit": "1200", "message": "I'm in the process of writing the public/private key classes.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-02-12T22:11:06.401209Z", "commit": "1199", "message": "I've got the password-based encryption code working - test/SireSec/testcrypt.py now\nshows basic password-based encryption of some strings\n\n", "author": "chryswoods"}, {"date": "2010-02-12T17:31:13.325614Z", "commit": "1198", "message": "I've made progress with the design of SireSec, the module that provides an easy\ninterface to the cryptographic routines provided by cryptlib. SireSec will be\nused by SireCluster as a means of securing messages and authenticating users\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-02-09T23:11:46.167529Z", "commit": "1197", "message": "I've moved the MPI code that handles messages into a SireCluster::network namespace,\nso that I can have a general messaging layer that sits on top of MPI (and eventually\nalso TCP, shared memory, silo/login etc.). Also, I've decided to build security\nand encryption directly into the message layer, so have added SireSec, which\nwill provide a thin layer around the cryptlib security library. This has been\nadded directly into Sire, built using cmake.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-02-06T18:34:41.663690Z", "commit": "1196", "message": "I've further debugged SireCluster and have got the code working for reserving multiple resources.\nThe threadnode.py test creates a 50 thread job, running WorkTest in each of thoses threads.\n\n", "author": "chryswoods"}, {"date": "2010-02-05T22:05:55.176318Z", "commit": "1195", "message": "I've debugged SireCluster and running multiple jobs at once now seems to work without\nerror. The next step is to integrate this with the MPI code so that I can debug\nMPI-run workpackets.\n\n", "author": "chryswoods"}, {"date": "2010-02-05T16:56:13.157783Z", "commit": "1194", "message": "I've been debugging SireCluster (using test/SireCluster/threadnode.py). I've fixed a lot of bugs,\nbut it now segfaults when the workpacket has finished...\n\n", "author": "chryswoods"}, {"date": "2010-02-04T22:33:21.535902Z", "commit": "1193", "message": "In celebration of Sire's fifth birthday tomorrow, I'm committing the dump of the original subversion\nrepository used to develop Sire, and a copy of all of the original subversion commit comments.\n\nThe code has come a long way in five years!\n\nThe dump file is bzipped, and can be loaded using the commands;\n\nbunzip2 orig_sire_repository.dump.bz2\nsvnadmin create orig_sire_repository\nsvnadmin load orig_sire_repository < orig_sire_repository.dump\n\nsvn co file:///path/to/orig_sire_repository orig_sire\n\nThis repository contains the development of Sire from the first line of code\n(when Sire was known as ProtoMS3, and was just going to be a re-write of \nProtoMS2 in C++, on 5 Feb 2005), to the version that was first committed into the\ngoogle code repository (version 831 in the original repository, version\n2 for the google repository, code from 25 July 2006, committed to google\non 7 August 2006).\n\nProtoMS3 was renamed to Sire when I moved to Wales, in July 2005, so the\nname is not yet 5 years old. However, tomorrow is the code's official\nbirthday :-)\n\nPut together, across the two repositories, there have been now over\n2020 source code commits, thus averaging 400 per year. Admittedly though,\n831 of those commits were in the 18 months... Since then, I've only managed\nabout 300 commits a year...!\n\n", "author": "chryswoods"}, {"date": "2010-02-04T22:12:17.734478Z", "commit": "1192", "message": "I've updated sire_python to work with Siren and the new SireCluster. Surprisingly, it worked\nfirst time ;-)\n\n", "author": "chryswoods"}, {"date": "2010-02-03T22:44:28.559772Z", "commit": "1191", "message": "I'm debugging the new SireCluster routines. I've also seen that typedef super is much cleaner\nthan my (admittedly over-engineered) super() functions, so I've switched the code.\n\nCode compiles, links, but doesn't work properly.\n\n", "author": "chryswoods"}, {"date": "2010-02-03T14:09:41.898478Z", "commit": "1190", "message": "I've fixed bugs in the restraint code - now it is possible to run simulations using\ndouble distance restraints that are controlled using lambda (i.e. I can run enzyme\nreaction simulations using umbrella sampling!)\n\n", "author": "chryswoods"}, {"date": "2010-02-02T22:46:24.388611Z", "commit": "1189", "message": "I've filled in the missing functions of SireCluster and have got it linked. I've also\nsorted out the Python wrappers and am now in the process or testing them all.\n\nCode compiles, links and runs, though Sire.Cluster does not work as I would hope...\n\n", "author": "chryswoods"}, {"date": "2010-02-02T16:48:57.240056Z", "commit": "1188", "message": "Continuing to port the new SireCluster code. Everything compiles (with MPI disabled), but\nthere are now link errors from missing functions.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-02-01T13:16:44.967525Z", "commit": "1187", "message": "I've fixed a small bug in the implementation of the perturbation constraint.\n\n", "author": "chryswoods"}, {"date": "2010-01-31T22:55:36.744241Z", "commit": "1186", "message": "I'm continuing to make progress with the re-written SireCluster. I've added a Thread\nclass to Siren to provide a wrapper around QThread that automatically handles\nthread registration, naming and uses /dev/urandom to seed qRand (necessary\nfor truly unique QUuids!)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-01-29T17:47:05.544021Z", "commit": "1185", "message": "I've fully implemented Node, Nodes, Promise, Promises and the code necessary to automatically\nsubsume the local thread if it is idle waiting for a job to complete (so thus removing\nthe need for the 'borrowThisThread' hack!)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-01-29T12:01:45.331991Z", "commit": "1184", "message": "I'm making progress implementing the new design for SireCluster\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-01-28T20:50:27.943018Z", "commit": "1183", "message": "I'm finalising the design of SireCluster. Node and Nodes are now handles for WorkQueue objects.\nA WorkQueue provides the job scheduler that is used to schedule WorkPacket jobs on the \nvarious Backend resources that are communicated to via the Frontend objects.\n\ne.g. Promise result = Node.submit(workpacket);\n\n     Node::submit(workpacket) -> WorkQueue::submit(workpacket)\n\n     WorkQueue has a collection of DormatFrontends, that represent\n     free resources. WorkQueue schedules the WorkPacket to one\n     of these resources, in doing so activating the DormantFrontend\n     creating the ActiveFrontend.\n\n     The WorkPacket is passed to ActiveFrontend, which is used to\n     communicate the WorkPacket to ActiveBackend, which is the handle\n     for the backend resource that actually processes and runs the job.\n\n     (phew!)\n\nFrom the users point of view, they now just create a load of workpackets, \nand then do;\n\npromises = nodes.submit(workpackets)\n\npromises.wait()\n\nfor promise in promises:\n    result = promise.result() # raises exception if result is error\n\n    ... do stuff with the result\n    \n\nThe only final part of the design to clean up is how to control whether or\nnot one WorkPacket can resubmit itself - e.g. providing dependencies\nbetween workpackets so that replica exchange moves can be made\nwithout going back to the user.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-01-27T21:46:43.681853Z", "commit": "1182", "message": "I've added a test_mpi.cpp source file that should help new users debug problems with\ntheir MPI setup, and easily discover if their MPI installation can support Sire.\n\n", "author": "chryswoods"}, {"date": "2010-01-27T16:16:43.612456Z", "commit": "1181", "message": "**MERGE**\n\nI've merged in the latest changes on the devel branch into users/chryswoods via the command;\n\nsvn merge -r 1147:1180 ../../devel/\n\nWith this merge I am also committing some of the work I've done on Cluster.\n\n", "author": "chryswoods"}, {"date": "2010-01-27T12:35:41.067959Z", "commit": "1180", "message": "**IMPORTANT BUGFIX**\n\nI've found a bug in the updating of LJ parameters that can affect the validity\nof single topology simulations. This has not affected any production simulations\nrun so far (as far as I am aware - to test run test/SireMove/test_for_leaks.py\non your .s3 restart file, and it will print errors if you are affected by \nthis bug). I've fixed the offending code. I strongly encourage you to update\nto this version if you are planning to run single topology simulations.\n\n", "author": "chryswoods"}, {"date": "2010-01-26T13:16:10.113053Z", "commit": "1179", "message": "I've updated the CMakeLists files so that the Fortran/C++ interface detection works in \ncmake 2.8. I've made sure that the new code still works with cmake 2.6\n\n", "author": "chryswoods"}, {"date": "2010-01-25T16:58:55.422400Z", "commit": "1178", "message": "I've started work on Cluster, which required that I write a Semaphore class.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-01-24T14:50:55.310257Z", "commit": "1177", "message": "I've finished writing the new ResourceManager class. This replaces the code that performed\nsimilar functionality in MPICluster, though is more flexible and better able to cope\nwith different types of backends (e.g. thread or GPU backends) which can appear and\ndisappear dynamically during the lifetime of the program.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-01-24T12:41:29.375262Z", "commit": "1176", "message": "I've moved all of the ported code over to use Mutex and WaitCondition, so that it can be interupted\nby ending for-ages.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-01-22T16:36:15.390099Z", "commit": "1175", "message": "I've fixed a few small bugs that stopped the workpacket scheduler from maximising usage\nof a cluster when more than one workpack is run at the same time\n\n", "author": "chryswoods"}, {"date": "2010-01-21T12:14:37.872506Z", "commit": "1174", "message": "I've added code to the Molpro interface that catches cases where Molpro hangs. In these cases\nMolpro is killed and restarted (up to a maximum number of retries). This is to catch a molpro\nhang that I am experiencing on AIX.\n\n", "author": "chryswoods"}, {"date": "2010-01-20T19:17:14.515869Z", "commit": "1173", "message": "I've added Mutex and WaitCondition and will move Siren over to using these classes.\nThis will help ensure that Siren-based code can be interupted by signalling the \nend of for-ages.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-01-20T15:16:05.380747Z", "commit": "1172", "message": "I've added a user@hostname header to the output of Sire so that I can ensure\nthat the AIX job script is creating one Sire process per LPAR (node)\n\n", "author": "chryswoods"}, {"date": "2010-01-20T12:01:47.505933Z", "commit": "1171", "message": "I've removed debugging messages from SireStream and have added timing messages to Molpro.\n\nThis code works without problem (so far) on AIX, although only in 64bit - in 32bit zlib\nstill hangs for the larger jobs.\n\n", "author": "chryswoods"}, {"date": "2010-01-20T08:51:49.088767Z", "commit": "1170", "message": "I've added the functions to register/deregister QThread-based threads with for-ages\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-01-19T20:49:26.390464Z", "commit": "1169", "message": "I've added code that allows me to implement \"for-ages\" - see my blog post\n<http://siremol.org/node/50>\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-01-12T21:02:28.366039Z", "commit": "1168", "message": "I've got backend to compile now and am working out how to update Cluster and ReservationManager.\nI think that ReservationManager should become an accessible class, as this should be the\nclass that manages Backend objects in a process. Cluster is then a class that can run\non any process that scans all processes, queries ReservationManager for available resources,\ncompiles them, and then gets the frontends to those resources (if requested).\n\nSo ReservationManager should be renamed something like ResourceManager, and it manages\nBackends, with one ResourceManager per process, while Cluster manages frontends,\nwith one Cluster per active process\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-01-12T16:44:13.663166Z", "commit": "1167", "message": "Fixing the streaming of QMComponent worked - this alerts me to the possibility of some very\nsubtle bugs caused by the compiler skipping non-declared QDataStream prototypes. Fortunately\nI don't do this with the new version of Sire, as Siren uses virtual functions (phew!)\n\nI've added extra command line options to molpro so that it writes to stdout and doesn't\nwrite any xml\n\n", "author": "chryswoods"}, {"date": "2010-01-12T15:26:15.882017Z", "commit": "1166", "message": "I've fixed a small bug in that the prototype for serialising a QMComponent was not\nvisible, hence why HPCx may have skipped directly to FFComponent\n\n", "author": "chryswoods"}, {"date": "2010-01-12T15:14:09.795961Z", "commit": "1165", "message": "Ok - I've discovered that qUncompress for the large file fails only after MPI has been\ninitialised on HPCx. Curious.\n\nI've also seen that I still get the error with corruption of FFComponent, even on the \nnon-MPI version of Sire on HPCx, so I have added a bit of code to find out which\nFFComponent hasn't been written\n\n", "author": "chryswoods"}, {"date": "2010-01-12T10:50:51.057247Z", "commit": "1164", "message": "I've edited streamdata so that I can further debug the hang when using qUncompress. When I use it\nin a simple example it works fine, so I think that something is making it fail in Sire.\n\n", "author": "chryswoods"}, {"date": "2010-01-11T14:02:26.044316Z", "commit": "1163", "message": "I tracked down the hang to qUncompress - for some reason the call to qUncompress was hanging\non AIX when the QByteArray was large. I disabled compression and will see how that \naffects things...\n\n", "author": "chryswoods"}, {"date": "2010-01-11T12:58:36.639444Z", "commit": "1162", "message": "I've backported a bugfix for managing the memory of a CoordGroup from branches/users/chryswoods\nand have also added some code to debug the streaming of files. The problem on HPCx is definitely\nwhile loading the restart file\n\n", "author": "chryswoods"}, {"date": "2010-01-11T11:51:02.834708Z", "commit": "1161", "message": "I've added more code to help debug the deadlock in HPCx - it looks like it is something to do\nwith loading a large restart file...\n\n", "author": "chryswoods"}, {"date": "2010-01-11T10:27:11.561742Z", "commit": "1160", "message": "Committing code that will help me debug the deadlock on hpcx\n\n", "author": "chryswoods"}, {"date": "2010-01-11T08:48:17.157787Z", "commit": "1159", "message": "I've got Frontend to compile - now working on Backend...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-01-10T22:20:31.375079Z", "commit": "1158", "message": "I'm making progress porting SireCluster to Siren. I've cleaned up the classes used for\ncommunication. I now have;\n\nBackend - this provides a compute unit that can process WorkPackets\n\nDormantBackend - this handle holds a Backend that is not yet assigned to a cluster\nActiveBackend - this handle holds a Backend that is assigned to a cluster, and \n                is thus connected to by a Frontend (so it is part of a Nodes cluster)\n\nFrontend - this provides a frontend to a compute unit - it provides the means by \n           which you can communicate with a Backend\n\nDormantFrontend - this handle holds a frontend that is not yet in use, i.e. an\n                  idle node in the cluster\nActiveFrontend - this handle holds a frontend in active use, i.e. a Node which is\n                 being used by the user and is held by a Node object.\n\nThus, Nodes holds a collection of DormantFrontend objects. When Nodes is asked to\nprovide a Node, it activates one of the DormantFrontend objects and passes the\nresulting ActiveFrontend to a Node object, which is returned to the user.\n\nThe user uses the Node object to submit the workpacket and wait on the promise.\nThe active frontend in the Node communicates the workpacket to the ActiveBackend\n(which may be on a different process or computer), and the active backend then\npasses the workpacket to the actual Backend object that runs the job. ActiveBackend,\nDormantBackend, ActiveFrontend, DormantFrontend, Node and Nodes are all \nconcrete, non-virtual classes. All of the flexibility is provided by Frontend\nand Backend, with Frontend providing the different routes by which frontends\ncan connect to backends (e.g. MPIFrontend, SocketFrontend etc.) and backends\nproviding the different compute resources (e.g. LocalBackend, ThreadBackend,\nGPGPUBackend?)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-01-09T21:51:50.056411Z", "commit": "1157", "message": "I've started work porting SireCluster over to Siren - in the process I am going to clean\nup the interfaces in SireCluster a little\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-01-09T17:27:36.273633Z", "commit": "1156", "message": "I've debugged SireVol and have got its unit tests working (they all pass, such that they are)\n\n", "author": "chryswoods"}, {"date": "2010-01-09T14:25:14.463517Z", "commit": "1155", "message": "I've fixed the memory bug in CoordGroup and have also added guards so that the unit test code\ncan be disabled (to reduce executable size if desired). I've also fixed some problems with\nthe registration of class type in Class so that now they are all held in a central\nhash rather than left within the memory of each library.\n\n", "author": "chryswoods"}, {"date": "2010-01-08T22:33:47.285423Z", "commit": "1154", "message": "I've finished porting SireVol to Siren, and have got the python wrappers working. sirentest\nhas found that CoordGroup crashes when it is deleted, and I cannot work out why...\n\nIt may be because the sizes of the objects have changed, but none of the asserts\nare triggered... Weird\n\n", "author": "chryswoods"}, {"date": "2010-01-08T17:15:06.994326Z", "commit": "1153", "message": "I've added the python wrappers to the repository for the devel/chryswoods branch\n\n", "author": "chryswoods"}, {"date": "2010-01-08T14:45:28.526025Z", "commit": "1152", "message": "Actually, I've decided to commit all of the generated python wrappers. The repository has\nmore space now, and, to be honest, these wrappers aren't changing as much as they\nused to. By adding the wrappers I stop the casual user from having to generate them, which\nmakes everyone's lives much easier!\n\n", "author": "chryswoods"}, {"date": "2010-01-08T14:04:44.111078Z", "commit": "1151", "message": "I've decided to add the Qt python wrappers directly to the repository as they are a pain\nin the neck to autogenerate!\n\n", "author": "chryswoods"}, {"date": "2010-01-07T22:17:04.608676Z", "commit": "1150", "message": "I've added the ability to run individual tests in sirentest, have fixed some bugs and added more\ntests to SireCAS, and have begun porting SireVol to Siren (nearly all done - just the implementation\nin coordgroup.cpp to complete)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-01-07T13:57:07.078969Z", "commit": "1149", "message": "I've also merged in python2/branches/devel into python2/branches/users/chryswoods, using the command\n\ncd python2/branches/users/chryswoods\nsvn merge -r 1111:1147 ../../devel/\n\n", "author": "chryswoods"}, {"date": "2010-01-07T13:53:30.563276Z", "commit": "1148", "message": "I've forward-ported the changes in branches/devel to branches/users/chryswoods, as these changes\nwere mainly in parts of Sire that have yet to be ported to Siren.\n\nThe svn merge command was\n\ncd branches/users/chryswoods\nsvn merge -r 1111:1147 ../../devel/\n\n", "author": "chryswoods"}, {"date": "2010-01-05T20:32:38.302142Z", "commit": "1147", "message": "I've fixed a bug in the mover that meant that angles were set incorrectly, and have also \nadded code to write \"CONECT\" lines to PDB files based on the connectivity property\n\n", "author": "chryswoods"}, {"date": "2010-01-04T16:23:49.124096Z", "commit": "1146", "message": "Forgot to remove some debugging statements...\n\n", "author": "chryswoods"}, {"date": "2010-01-04T16:02:37.737332Z", "commit": "1145", "message": "I think that I have finished the perturbations now (and constraints) - the code appears to work\nand gives identical energies for ethane methanol as ProtoMS (except for the LJ energy of intermediate\nlambda values as I use a slightly different algorithm for the perturbation - but it is right to \nwithin a couple of d.p.)\n\nNow I can load this on the cluster and test it!\n\n", "author": "chryswoods"}, {"date": "2010-01-04T12:09:20.277452Z", "commit": "1144", "message": "I've nearly sorted out the code to implement internal parameter perturbations. The code is \nhighly flexible, allowing complete user control of how the internal energy expression\nis perturbed using the mapping function :-)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2010-01-03T16:30:44.061648Z", "commit": "1143", "message": "Ok - it wasn't ready to test on the cluster - there were several bugs, and also, after \ndetailed comparison with ProtoMS, I've realised that I haven't added the code to \nperturb the intramolecular parameters. I've now added the code to parse the \nbond/angle/dihedral/ub parameter perturbations, and now need to write the code\nto implement them...\n\n", "author": "chryswoods"}, {"date": "2010-01-03T14:02:24.378393Z", "commit": "1142", "message": "I've fixed some bugs that were stopping the ethane to methanol example from working.\nI am now going to try and run this on the cluster to see if the predicted free energy\nis correct.\n\n", "author": "chryswoods"}, {"date": "2010-01-02T17:51:04.988446Z", "commit": "1141", "message": "I've worked on getting the ethane to methanol single topology perturbation code working.\n\n", "author": "chryswoods"}, {"date": "2010-01-02T12:08:26.728272Z", "commit": "1140", "message": "I've sorted out the ProtoMS reader so that it adds dummy atoms to solutes (so that \nperturbations work for small molecules). I am also setting up a single topology\nexample ethane to methanol free energy calculation (based on the ProtoMS\ntutorial)\n\n", "author": "chryswoods"}, {"date": "2010-01-01T15:27:54.375671Z", "commit": "1139", "message": "I've finished implementing the perturbation constraint, and have written a quick\ntest (test/SireSystem/perturbationconstraint.py) which seems to show that it works.\n\n", "author": "chryswoods"}, {"date": "2009-12-24T16:15:18.206127Z", "commit": "1138", "message": "I am making progress coding the perturbation constraint - I think that I've sorted out the \ncode that applies the constraint correctly if anything changes (and ignores things\nthat don't change).\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-12-24T13:06:31.861641Z", "commit": "1137", "message": "I've updated the perturbations so that they can return their children, can be recreated\n(to change the expressions) and they can indicate the properties and symbols they require,\nand whether or not they would change a molecule. This is all necessary so that I can\nnow go on and write the perturbation constraint class.\n\n", "author": "chryswoods"}, {"date": "2009-12-23T21:55:23.753829Z", "commit": "1136", "message": "I've fixed the problems with the perturbation (in doing so I've fixed bugs in mover.cpp\nthat prevented it from working, and values.cpp that prevented it from printing\nout the values!) - it all seems to work - the perturbation in test/io/sb2.ff\nworks correctly, moving the atoms and also changing the charge and LJ parameters\ncorrectly - see test/SireMol/perturbation.py\n\n\n", "author": "chryswoods"}, {"date": "2009-12-23T17:31:26.968217Z", "commit": "1135", "message": "I've written the code to allow geometry perturbations and have got most of the code working\nthat reads perturbations using ProtoMS. The only problem now is that the perturbations\nI want to use will cause ring errors or involve disconnected bonds...\n\n\n", "author": "chryswoods"}, {"date": "2009-12-18T14:14:41.909850Z", "commit": "1134", "message": "I am adding code that will allow me to apply perturbations to properties in molecules,\nand to add constraints that can use those perturbations. I've also modified RigidBodyMC\nand ZMatMove so that molecules can be tied together. This is all so that I can \nimplement single topology style perturbations so that I can calculate relative\nbinding free energies and reaction activation free energies using traditional\ntechniques.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-12-14T10:39:59.662098Z", "commit": "1133", "message": "Here are the updates that allow the ported CAS code to be wrapped in python\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-12-14T10:39:25.600085Z", "commit": "1132", "message": "I've finished porting SireCAS, though there are a few segfaults while using it. It needs debugging!\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-12-11T22:23:16.064285Z", "commit": "1131", "message": "I've nearly finished porting SireCAS to Siren - just Sum and Product to go...\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2009-12-11T16:53:09.617683Z", "commit": "1130", "message": "I'm making a lot of progress with porting SireCAS to Siren. The fit between the two is really\ngood, and this is making SireCAS much more robust and readable.\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2009-12-11T13:22:23.790324Z", "commit": "1129", "message": "I've fixed the reading of dummy atoms in ProtoMS output\n\n", "author": "chryswoods"}, {"date": "2009-12-08T16:54:49.040131Z", "commit": "1128", "message": "I've fixed the automatic conversion of ObjRef and ObjPtr to PyObject, so that\nclone_const_reference and automatic conversion of ObjPtr derived types works.\nPython wrappers for SireMaths and SireBase seem to compile and work well.\n\nCode is still quite broken\n\n", "author": "chryswoods"}, {"date": "2009-12-07T08:56:16.840951Z", "commit": "1127", "message": "I'm now working on getting the new SireBase and SireMaths python wrappers working...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-12-06T20:05:08.339870Z", "commit": "1126", "message": "SireBase and SireMaths now both compile and link and the tests (those that have been written)\nrun via sirentest.\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2009-12-06T16:48:12.445147Z", "commit": "1125", "message": "I've nearly finished porting SireBase over to Siren. I've just got to \nfinish Properties, CombineProperties and LinkToProperty.\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2009-12-06T14:13:31.239462Z", "commit": "1124", "message": "I'm making good progress working through porting SireBase to Siren. I've decided that container\ntypes will not inherit from Siren::Object or Siren::Primitive (as this is not really necessary,\nand I am not inheriting the Qt containers...)\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2009-12-05T22:14:32.656868Z", "commit": "1123", "message": "I've finished porting SireMaths to Siren and have made a start porting SireBase...\n\nCode is all broken\n\n", "author": "chryswoods"}, {"date": "2009-12-04T23:11:05.079823Z", "commit": "1122", "message": "I'm making progress porting SireMaths over to use Siren...\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2009-12-02T19:18:37.379290Z", "commit": "1121", "message": "Sire (and Siren) now compile and work on HPCx, with parallel jobs working without problem.\nThe only difficulty now is that there are QBuffer memory errors which are causing problems\nwriting and reading restart files. When I had these before they were caused by a \nnon-thread-safe malloc which was brought in by the MPI libraries...\n\nI've also merged into branches/users/chryswoods the changes that I've made \nto branches devel via;\n\nsvn merge https://sire.googlecode.com/svn/corelib/branches/devel -r 1110:1120\nsvn merge https://sire.googlecode.com/svn/python2/branches/devel -r 1110:1120\n\nbranches/devel works fine (on mac, linux 32/64 and AIX)\nbranches/users/chryswoods is VERY broken\n\n", "author": "chryswoods"}, {"date": "2009-12-02T13:44:06.231803Z", "commit": "1120", "message": "I've fixed compile bugs for Siren on HPCx (which required me renaming the 'copy' function to 'clone'\nand the protected 'clone' function to 'ptr_clone'). I've also added a try/catch block to \nSireCluster::Backend so that uncaught exceptions won't crash the process (and will\nbe correctly returned to the caller)\n\n", "author": "chryswoods"}, {"date": "2009-12-02T11:41:17.865429Z", "commit": "1119", "message": "I've moved SireCluster over to not use Barrier or Broadcast at all, as it seems that all\nof the MPI blocking functions consume 100% CPU while they are waiting for a message. This\nis not acceptable for Sire, as this has several threads waiting for messages, and these\nthreads must not take time away from the compute threads. I have thus replaced it all\nwith MPI::Probe followed by MPI::Recv, with sleeps between empty probes. This\nbrings down the CPU usage to 0.1-0.2%, and is quite responsive (although there\nis a linearly scaling cost of setting up a cluster due to lag caused by the\nsleep statements...)\n\n", "author": "chryswoods"}, {"date": "2009-12-01T13:41:30.496710Z", "commit": "1118", "message": "I've fixed a deadlock with the new MPI libraries on blucrystalp2 - for some reason it didn't\nlike the MPI::Barriers that I was placing everywhere, so I have removed them all.\n\nI've also fixed compilation of Siren on linux (it was a little broken).\n\nbranches/devel code works.\n\n", "author": "chryswoods"}, {"date": "2009-12-01T08:51:57.737894Z", "commit": "1117", "message": "I've ported SireMaths/accumulator.h/.cpp across to Siren. This file contains a hierarchy of\nclasses that really demonstrate how Siren is to be used in Sire, e.g.\n\nclass Accumulator : public Extends<Accumulator,Object>,\n                    public Interfaces<Accumulator,Mutable>\n\n\nclass Average : public Implements<Average,Accumulator>\n\nclass AverageAndStddev : public Implements<AverageAndStddev,Average>\n\nCode is really broken\n\n", "author": "chryswoods"}, {"date": "2009-11-29T18:49:57.112642Z", "commit": "1116", "message": "I'm making good progress porting SireMaths to Siren...\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2009-11-27T23:42:20.446596Z", "commit": "1115", "message": "Here are the updates necessary for the ID python wrappers...\n\n", "author": "chryswoods"}, {"date": "2009-11-27T23:41:31.338357Z", "commit": "1114", "message": "I've ported SireID (together with the python wrappers - committing next..!)\n\nSire is still really broken\n\n", "author": "chryswoods"}, {"date": "2009-11-27T22:23:32.621612Z", "commit": "1113", "message": "...and here are the fixed python wrappers for Siren and Units (and Qt). Note also that\nI have got rid of Helpers/SirePython2 as much of this code is no longer required\n(the Class object in Siren deals with object registration and creation) and\ncommon code has been moved into Siren. I've also removed Stream and Error\nas they are no longer required.\n\n", "author": "chryswoods"}, {"date": "2009-11-27T22:18:30.751479Z", "commit": "1112", "message": "I've ported over SireUnits - one down, lots to go...\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2009-11-27T14:38:55.882451Z", "commit": "1111", "message": "OK  - this is the start of a very broken set of versions of Sire. I am now starting the \nmigration of the code over to Siren. I assumed I could do this piecemeal, but I can't,\nso this will all break now.\n\nIf you want a non-broken version, please use trunk or branches/devel, which are both\ncopies of the last version of Sire (and branches/devel will continue to be developed while\nI am running production on HPCx)\n\nAlso - MAJOR - I am dumping the previous version of the binary streaming format. The\nSiren streaming format is too different to support what I had before, and given the\nlow number of current users, it is too expensive to try to port it. Thus any binary\nfiles produced by previous versions of Sire now will not work with any versions\nof Sire from now on. This is a pain, but the benefit is that the new streaming\nformat has XML, better versioning, and allows easy extension to different formats\nwithout having to change the objects (you just create a new polymorphic streaming\nobject)\n\nFinally, I am taking the opportunity of removing SireError and SireStream\n(as these are replaced by Siren) and of removing the dependency of GSL.\nI have nothing against GSL, but since I pull BLAS in myself, I want\nto remove the GSL dependency as it compliates the portability of the\nbuild scripts if different BLAS libraries are used for GSL and for SireMaths...\n\nCode is very, very, very broken...!\n \n", "author": "chryswoods"}, {"date": "2009-11-26T20:59:50.826367Z", "commit": "1110", "message": "I've copied branches/users/chryswoods into trunk and branches/devel, and *promise* to \nmerge from branches/users/chryswoods more often... ;-)\n\n", "author": "chryswoods"}, {"date": "2009-11-26T20:54:07.934192Z", "commit": "1109", "message": "Before porting Sire to Siren, I'd better update 'trunk' and 'devel' so that they have the best,\nlatest version of Sire (also, I really do need to work more in branches/devel and get into\nthe habit of updating trunk...)\n\n", "author": "chryswoods"}, {"date": "2009-11-26T00:05:09.279963Z", "commit": "1108", "message": "I've updated the metatype system so that it works fully for Primitive and Handle types.\nNow Number and String work (and .getClass() works for them too!)\n\nThe only test failures from sirentest are Logger, DataStream and XMLStream, who all\ncomplain that I haven't yet written unit tests for them!\n\n", "author": "chryswoods"}, {"date": "2009-11-24T23:26:27.967493Z", "commit": "1107", "message": "I've finished getting the sirentest unit test program working. This shows that \nI need to integrate the primitive types into Class (as these cause crash errors\nwhen they are created - this also kills XMLStream) - these crashes are caught\nproperly by sirentest (as they kill only sirentest_backend, which is restarted\nautomatically). The only real failure is MD5Sum, which gives the wrong digest!\n\n", "author": "chryswoods"}, {"date": "2009-11-24T20:43:43.501121Z", "commit": "1106", "message": "I've got the sirentest server and client happily talking to one another now (continually\nsending messages to each other in welsh until they are killed).\n\n", "author": "chryswoods"}, {"date": "2009-11-24T17:39:11.675539Z", "commit": "1105", "message": "I've fixed a small bug in XMLStream - have sorted out Mopac on HPCx (so mopacsim.s3 contains\na QM mopac simulation that works on AIX) and have also begun work on 'sirentest' that\nwill automatically run all of the Siren class unit tests. 'sirentest' is a little over-engineered\n(it is a front-end with re-spawning backend, communicating using a custom QByteArray based\nmessage queue over a shared-memory connection) - this is because this will let me play\nwith and learn how to build this kind of respawing peer-peer type application, as this is\nthe model that I will use for the Inspire plugin.\n\n", "author": "chryswoods"}, {"date": "2009-11-22T20:24:52.540617Z", "commit": "1104", "message": "I've got the XML streaming class almost working - the file test/Siren/xmlstream.py demonstrates\nit - it saves a few objects, but has problems loading them back up again....\n\nThe XML streamer also allows streaming of binary data using a base64 encoding :-)\n\nThe format of the xml file is very, very similar to idea/xml_format.\n\n", "author": "chryswoods"}, {"date": "2009-11-21T17:38:02.254006Z", "commit": "1103", "message": "I am making progress writing the XMLStream class...\n\nSiren is broken\n\n", "author": "chryswoods"}, {"date": "2009-11-20T23:25:14.015357Z", "commit": "1102", "message": "I've got Siren compiled and linked, and have got (most) of the python wrappers working.\nThe code works, to an extent, but there are quite a few problems and bugs\n(e.g. in streaming, and in the logger). The whole .getClass() hierarchy\nworks really well :-)\n\nCode is no longer broken - it compiles, links and Siren now needs debugging\n\n", "author": "chryswoods"}, {"date": "2009-11-20T10:14:44.097599Z", "commit": "1101", "message": "I've filled in most of the missing functions in Siren - I just need to finish off DataStream and Tester.\nOnce they are complete, I should be able to link and then test Siren (using both the python \ninterface and the new unit testing framework)\n\nSiren is broken (but less broken!)\n\n", "author": "chryswoods"}, {"date": "2009-11-19T23:39:16.236877Z", "commit": "1100", "message": "I've fixed the streaming bug on AIX - I had forgot the prototype for SireCAS::Constant, so the\nExBase streaming functions were called directly in place of the SireCAS::Constant \nstreaming functions. Good thing I used magic numbers to check the stream... :-)\n\nI've also added more to Siren and have pretty much sorted out the API of the\nnew streaming interface, and the format of the XML file.\n\nSiren is very broken\n\n", "author": "chryswoods"}, {"date": "2009-11-18T19:04:33.249717Z", "commit": "1099", "message": "I've written a good chunk of the polymorphic streaming system. It is all very broken,\nbut it is at last coming together.\n\nSiren is very broken\n\n", "author": "chryswoods"}, {"date": "2009-11-17T16:50:35.093253Z", "commit": "1098", "message": "I've expanded the capabilities of the 'sire' program (the restart file runner) and have\nhard coded in MPI compile options for hpcx (together with a flag to disable MPI if\nit is found). This all seems to work :-)\n\nHowever, I've found that hpcx cannot deserialise restart files that contain\nSireCAS::Expression objects - this needs to be debugged. It does correctly\nserialise simulations that don't involve expressions, which can then\nbe ready correctly back on my mac.\n\n", "author": "chryswoods"}, {"date": "2009-11-17T11:08:40.724659Z", "commit": "1097", "message": "I've added a hacked, automatic configuration of MPI on HPCx (AIX/xlC), and am committing last\nnights work on Siren (where I am rethinking how I will manage streaming)\n\nSire works but Siren is very broken\n\n", "author": "chryswoods"}, {"date": "2009-11-16T12:26:03.110908Z", "commit": "1096", "message": "I've added compilation options and code so that I can completely disable the use of Fortran\ncode in Sire. This is necessary as I am getting too many weird link errors on AIX\nwhen I am trying to link in BLAS with xlC/xlf\n\n(Disabled Siren with this version)\n\nCode compiles, links and runs\n\n", "author": "chryswoods"}, {"date": "2009-11-15T20:05:21.178217Z", "commit": "1095", "message": "I've filled in the code for String and Number\n\nSiren compiles but doesn't link\n\n", "author": "chryswoods"}, {"date": "2009-11-15T17:55:07.885605Z", "commit": "1094", "message": "I've begun to flesh out the Primitive hierarchy of classes. This will complete\nthe triumvirate on which Siren is based;\n\nPrimitive  - simple, small, non-virtual classes\nObject     - non-shared, mostly immutable, virtual classes\nHandle     - shared, mostly mutable, virtual handles to shared resources\n\nSiren compiles but doesn't link\n\n", "author": "chryswoods"}, {"date": "2009-11-15T16:14:28.981892Z", "commit": "1093", "message": "I've created the Handle hierarchy of classes which are used to provide the equivalent\nof Object for shared data types. Handle provides handles with which to handle shared\ndata - it automatically contains functions to lock access to the data. This is necessary\nas Object is for non-shared data (it is copy-on-write, with the most classes being\nimmutable, requiring extension with Interfaces<Mutable> to become mutable).\n\nSiren compiles but does not link.\n\n", "author": "chryswoods"}, {"date": "2009-11-14T21:24:24.947766Z", "commit": "1092", "message": "I've finished the basics of Siren - all the code compiles, but there are lots of unresolved symbols.\n\nSiren is very broken\n\n", "author": "chryswoods"}, {"date": "2009-11-14T12:27:12.144595Z", "commit": "1091", "message": "I'm making more progress with Siren. I've removed Shared as Siren::Object must *never* be\nshared - use Handle for shared objects.\n\nSiren is very broken\n\n", "author": "chryswoods"}, {"date": "2009-11-13T23:43:02.177516Z", "commit": "1090", "message": "I've factored out the ObjPtr and ObjRef classes from Object to minimise the \ndependencies in object.h\n\nSiren is very broken\n\n", "author": "chryswoods"}, {"date": "2009-11-13T21:48:07.129634Z", "commit": "1089", "message": "I've filled in nearly all classes and functions in Siren::Object, and Siren/object.cpp now compiles.\n\nSiren is still very broken!\n\n", "author": "chryswoods"}, {"date": "2009-11-13T10:13:27.568024Z", "commit": "1088", "message": "I'm committing my work to date to abstract the various Sire object systems into\na single consistent (Java-like) hierarchy, called Siren. Once this is finished\nI will refactor the code so that everything is rooted on Siren::Object. This\nwill clean the code, and will make it much easier to work with scripting,\nstreaming and metatypes.\n\nSiren code is very broken - disable it if you want to compile the rest of Sire\n\n", "author": "chryswoods"}, {"date": "2009-11-09T16:53:15.632832Z", "commit": "1087", "message": "I've added error handling to the sire job runner - this will now stop trying to \nrun a workpacket that has failed more than five times in a row, and will quit\nthe entire program if there are no non-failed workpackets.\n\n", "author": "chryswoods"}, {"date": "2009-11-09T15:50:46.617751Z", "commit": "1086", "message": "I've filled out the \"sire\" restart running executable, supplying full command line options\nand sorting out how it prints to the screen. I've also built in the ability to repeat\nwork packets (so we can run lots of chunks of simulations) and have added a timer so\nthat it knows how long it has remaining, so it won't start chunks that it can't finish.\n\n", "author": "chryswoods"}, {"date": "2009-11-04T23:43:28.794428Z", "commit": "1085", "message": "I've removed RestartPacket as SimPacket and SupraSimPacket already perform this task. I've\nfinished a basic implementation in src/apps/sire that runs the restart files that are passed\nas arguments, and that automatically splits the work over all available nodes (so first\none node is taken for the job, and that node is then able to reserve other nodes)\n\n", "author": "chryswoods"}, {"date": "2009-11-03T16:47:20.325665Z", "commit": "1084", "message": "I've started changin the 'Sire' executable so that it can work as an MPI task farm processing\nand running simulations that appear in my restart.s3 binary restart files. This will allow me\nto run simulations without having to use the python interface (so the python can be used\nonly for setting up and processing the simulations, rather than running, so that we can\nhave Sire running on compute nodes without running python scripts)\n\n", "author": "chryswoods"}, {"date": "2009-10-20T15:53:31.874137Z", "commit": "1083", "message": "Worked around a compiler error (caused by a compiler bug) in xlC\n\n(see <http://www-01.ibm.com/support/docview.wss?uid=swg1LI74462>)\n\n", "author": "chryswoods"}, {"date": "2009-10-19T15:38:44.949412Z", "commit": "1082", "message": "I've fixed an edge-case bug in the identity constraint, have fixed compile bugs in the    \nBLAS interace on HPCx and have added a scaling factor to the charges calculated using \nAM1BCC\n\n", "author": "chryswoods"}, {"date": "2009-10-16T20:00:56.173835Z", "commit": "1081", "message": "I've fixed(ish) the infinite loop problem with the linear solver - it isn't really an infinite \nloop - rather it was that finding the best solution when there are more molecules than points\nis a very slow problem (as the non-points added have extremely low costs).\n\n", "author": "chryswoods"}, {"date": "2009-10-12T15:56:09.247995Z", "commit": "1080", "message": "I've debugged the MPI messages a little more and have found the source of the problem\nwhereby sometimes MPI would quit with a barrier error - this was because a quit\nmessage would cause the message queues to exit and lose the final quit message\nfrom the master.\n\nI've also found that the 100% cpu problem of compute processes only affects\nOS X and is caused by mpich2 chewing up CPU when waiting on a barrier or \non a broadcast (see techdocs/testmpibarrier.cpp which exhibits this problem).\n\nI will try mpich2 1.2 to see if the new version fixes this problem...\n\n", "author": "chryswoods"}, {"date": "2009-10-12T07:55:25.011508Z", "commit": "1079", "message": "I've written some code to test the combined GTOs integral generator.\n\n", "author": "chryswoods"}, {"date": "2009-10-09T12:42:33.465277Z", "commit": "1078", "message": "I've got a charge constraint simulation working (test/Squire/chargeconstraint.py). The\nresults look sensible. I've also added \"toString\" functions to the molecule property\nclasses, so that they can be printed more easily.\n\n", "author": "chryswoods"}, {"date": "2009-10-08T13:56:39.725977Z", "commit": "1077", "message": "I've had to update Property to fix the dynamic library bug for the Property.isA<T>() \nfunction (as this was stopping the charge constraints from working). I've also\nadded shell pair sets that simplify the calculation of batches of integrals.\n\n", "author": "chryswoods"}, {"date": "2009-10-06T10:31:13.051511Z", "commit": "1076", "message": "I've finished (and tested - see test/Squire/am1bcc.py) the AM1BCC charge generator.\n\nIt seems to correctly calculate AM1-BCC charges using antechamber, and includes a z-matrix\ntype test so that charges only need to be recalculated when the conformation of the \nmolecule changes (so preventing recalculation if the molecule is just translated\nor rotated)\n\nI've also fixed a small bug in the zmatrix code, whereby a null zmatrix is returned\nif one is constructed from a basic zmatrix with a complete molecule. This bug\ndoes not affect any current or previous users.\n\n", "author": "chryswoods"}, {"date": "2009-10-05T20:47:02.343478Z", "commit": "1075", "message": "I've added extra costs to the identity constraint that should order molecules\nwhich have equivalent costs to the same points - this should ensure that \nthere is a unique assignment of molecules, even if some points are coincident.\n\nCreating this change appears to have fixed Katie's constraint error problems\nwhen she was using even numbers of QM waters.\n\n", "author": "chryswoods"}, {"date": "2009-10-02T18:00:51.851533Z", "commit": "1074", "message": "I've fixed a bug in the periodic box code that meant that the minimum distance between two\nmolecules was not calculated correctly if the second molecule had an odd number of atoms\nand SSE was used.\n\nI've also nearly finished adding the AM1BCC charge generator.\n\n", "author": "chryswoods"}, {"date": "2009-09-29T21:14:44.149991Z", "commit": "1073", "message": "I've added a charge constraint class, which allows the charges to be changed during\na simulation (using the same interface as the MoleculeConstraint classes). This will \nallow for AM1BCC charges to be calculated dynamically as a molecule moves. I've \nwritten out the skeleton of the AM1BCC class, but this currently only returns\nzero charges.\n\nI've also added a kludgy fix that makes AtomProperty<T>::array() work correctly.\nThe problem was that these classes are exposed as typedefs, and Typedef::array()\nfailed in the python wrappers with an lvalue error, saying that \nAtomProperty<T>::array( Typedef ) was not a valid argument. The kludge \nsolution was to explicitly call these functions when Sire.Mol is loaded,\nwhich seems to tell boost::python that Typedef and AtomProperty<T> are \nindeed the same same class.\n\n", "author": "chryswoods"}, {"date": "2009-09-27T15:01:34.586244Z", "commit": "1072", "message": "I've sorted out the mopac interface - it can now successfully drive mopac to calculate\nenergies and partial charges.\n\n", "author": "chryswoods"}, {"date": "2009-09-25T23:39:36.415896Z", "commit": "1071", "message": "I am in the process of adding a mopac interface so that I can calculate\nAM1 and PM3 energies (and then charges)\n\n", "author": "chryswoods"}, {"date": "2009-09-24T14:02:11.393490Z", "commit": "1070", "message": "I've added (and tested) an Abs function so that I can use the softening function\nto just soften the middle of a perturbation (e.g. alpha = 1 for lambda=0 and lambda=1,\nbut alpha equals 0.2 for lambda=0.5)\n\n", "author": "chryswoods"}, {"date": "2009-09-24T11:20:07.651435Z", "commit": "1069", "message": "I've made it easier to obtain the lambda trajectory from a replica exchange simulation\n\n", "author": "chryswoods"}, {"date": "2009-09-24T10:13:43.045956Z", "commit": "1068", "message": "I've debugged the replica exchange moves and they now seem to be working properly.\n\nI've added an analytically solvable example - a replica exchange simulation\nof a set of harmonic oscillators (test/SireMove/reti_oscillator.py)\n\n", "author": "chryswoods"}, {"date": "2009-09-18T13:55:07.338184Z", "commit": "1067", "message": "I've written the MolInserter classes, so now I have the two basic manipulators that will\nallow me to write Gibbs Ensemble moves and Grand Canonical moves :-)\n\nCode compiles, but is untested, so lets assume...\n\nCode is broken\n\n..!\n\n", "author": "chryswoods"}, {"date": "2009-09-17T22:27:49.834459Z", "commit": "1066", "message": "I've been working on the code to allow adding and deleting of molecules from a move\n(via MolInserter and MolDeleter classes). This has necessitated changing MoleculeGroups\nderived classes so that they signal when a molecule is removed, and to add extra\nfunctionality to the space classes. I've also added an MGIDsAndMaps class that\nsimplifies the specification and storage of groups of molecule groups, together\nwith the property maps that should be used with those groups of groups.\n\nCode all compiles and links, though this is surprising as it is still\nwork in progress. Code is broken\n\n", "author": "chryswoods"}, {"date": "2009-09-15T12:41:14.458288Z", "commit": "1065", "message": "Ok - now the code definitely works - the volume changes as I would expect, and the \nvolume moves on Katie's system are now being accepted.\n\n", "author": "chryswoods"}, {"date": "2009-09-15T11:26:27.741976Z", "commit": "1064", "message": "I think that I've fixed a silly bug in the volume move code, whereby I forgot that the\ncenters of neighbouring boxes would move when the box size was changed. This lead to \nsolvent molecules on the edge of the box being moved into vacuum as the box was scaled.\n\n", "author": "chryswoods"}, {"date": "2009-09-15T07:56:31.847357Z", "commit": "1063", "message": "I've fixed a compile bug with the gcc-LLVM compiler (Sire compiles with it now - and LLVM is much\nfaster to compile and produces much smaller libraries/executables!). I've also fixed a MPI broadcast\nbug on the mac, although I still think something is wrong as the idle compute nodes are\nburning CPU.\n\nI've also written SS_GTOs, which is used to hold and process pairs of S_GTO orbitals\n\n", "author": "chryswoods"}, {"date": "2009-09-11T15:44:09.158170Z", "commit": "1062", "message": "I've fixed the volume move bug (AGAIN!) - I had not fixed it in the biased\nvolume move test - this was very annoying and showed poor QA on my part.\n\n", "author": "chryswoods"}, {"date": "2009-09-10T19:51:27.832739Z", "commit": "1061", "message": "I've found (and fixed) a serious bug in VolumeChanger - ScaleVolumeFromCenter was scaling the \nmolecules, but it was not updating the space in the system. This was leading to the \nsolvent being pulled away from the solute if volume moves were used. This means\nthat all simulations run using the VolumeChanger are broken... :-(\n\nI've also disabled SSE in SoftCLJPotential as this was leading to NaN for some reason...\n\n", "author": "chryswoods"}, {"date": "2009-09-09T10:58:55.001663Z", "commit": "1060", "message": "I've fixed a bug in the application of component and property constraints that meant that\nthe code wasn't detecting when the constraints hadn't changed. This now allows the \nsoft-core absolute binding script to work.\n\n", "author": "chryswoods"}, {"date": "2009-09-07T22:01:17.879855Z", "commit": "1059", "message": "I've made a lot of progress with the contracted GTO class - this holds a list\nof primitives as a single OrbitalShell - the contraction coefficients are \nmerged into the GTOs.\n\n", "author": "chryswoods"}, {"date": "2009-09-07T15:16:37.646540Z", "commit": "1058", "message": "I've fixed bugs that were stopping the absolute binding script from working - this\nis now running - we'll see how it goes.\n\n", "author": "chryswoods"}, {"date": "2009-09-07T07:31:28.712578Z", "commit": "1057", "message": "I've fixed (pp|pp) and all the integrals now look correct (for the tests I ran)\n\n", "author": "chryswoods"}, {"date": "2009-09-06T21:08:53.730349Z", "commit": "1056", "message": "I've fixed a few bugs in the calculation of (pp|pp) - now (xx|xx)(pp|pp) works, \nand most of (xx,yy)(pp|pp) works, but (yyyx) and (yxyx) don't...\n\n", "author": "chryswoods"}, {"date": "2009-09-03T15:41:55.288212Z", "commit": "1055", "message": "I've got most of the absolute binding script working now, and have updated\nWeightedMoves so that is can cope with using a combined space property\n(as I need different spaces for the bound and free legs)\n\n", "author": "chryswoods"}, {"date": "2009-09-03T11:42:45.938474Z", "commit": "1054", "message": "I'm working on the absolute binding free energy code, and in so doing have fixed\nbugs in the output of ProtoMS parameterisation errors, lack of implicit conversion\nof QString and Property to PropertyName, and have added code to IdentityConstraint\nto allow it to perform one-off constraints.\n\n", "author": "chryswoods"}, {"date": "2009-09-03T07:55:55.042592Z", "commit": "1053", "message": "I've fixed my misunderstanding of the symmetry of some of the electron repulsion\nintegrals, and have created functions that allow them to be used with pre-allocated\nmemory (thus allowing lots of integral evaluations to be performed without a \nsingle malloc or free). The psps and pppp integrals are currently broken.\n\n", "author": "chryswoods"}, {"date": "2009-09-02T15:27:10.447610Z", "commit": "1052", "message": "I've had to add many of the BLAS and LAPACK function for cases where these are not\navailable locally. These are all BSD licensed files, placed in 'ThirdParty' so\nas to ease installation of the code.\n\n", "author": "chryswoods"}, {"date": "2009-09-02T14:45:13.056340Z", "commit": "1051", "message": "I've moved the BLAS, LAPACK and LINPACK code into ThirdParty, and have also\ncreated a thin wrapper library that handles cases when any of the BLAS or\nLA/LINPACK libraries are not available.\n\n", "author": "chryswoods"}, {"date": "2009-09-02T13:03:51.240578Z", "commit": "1050", "message": "I've fixed the compile options that were preventing compilation on Linux \n\n", "author": "chryswoods"}, {"date": "2009-09-02T07:45:12.480402Z", "commit": "1049", "message": "I've fixed part of (pp|pp) - I'd missed out a huge chunk of the equation!\n\n", "author": "chryswoods"}, {"date": "2009-09-01T21:25:27.301184Z", "commit": "1048", "message": "I've written the code to compute (pp|pp) - it is nearly there, though the resulting\nintegrals aren't correct!\n\n", "author": "chryswoods"}, {"date": "2009-09-01T17:42:09.215969Z", "commit": "1047", "message": "The (ss|ss), (ps|ss), (pp|ss), (ps|ps) and (pp|ps) electron repulsion \nintegrals now all appear to be working (as well as the ss, pp and ps\noverlap, nuclear and kinetic integrals)\n\nThis shows that multiplying out using mathematica works. I can generate\nall 27 (pp|ps) integrals in one function, using one gamma function, one\nexponential, and a load of multiplies and adds.\n\n", "author": "chryswoods"}, {"date": "2009-09-01T14:22:46.003582Z", "commit": "1046", "message": "I've used mathematica to expand out the Obara-Saika recursion schemes and am\nusing these to code up the various orbital integrals (see techdocs/obara_saika.nb)\n\nThis works well, as I can re-use all the Boys functions, which are themselves \ncalculated recursively (so there is only one gamma and one exp per shell pair-shell-pair\ninteraction)\n\n", "author": "chryswoods"}, {"date": "2009-08-31T12:20:43.099633Z", "commit": "1045", "message": "I've added a TrigArray2D class that provides a square symmetric version of Array2D,\nand I have also changed the API for Array2D (and made TrigArray2D) so that it\nbetter matches that of NMatrix (and TrigMatrix)\n\n", "author": "chryswoods"}, {"date": "2009-08-30T21:26:59.946292Z", "commit": "1044", "message": "I've got some of the electron integrals involving P-orbitals working - some of them\nare a little wrong though...\n\n", "author": "chryswoods"}, {"date": "2009-08-30T16:39:57.912559Z", "commit": "1043", "message": "I've started work on a Tinker file reader (which will need work on SireDB as I need\nto parameterise the files as they are loaded).\n\nI've also got the following integrals working correctly;\n\n(p||s), (p||p), (p|nabla|s), (p|nabla|p), (p|C|s) and (p|C|p)\n\nI just now need the four index integrals involving p orbitals, and also the\ncontracted forms of all of the above.\n\n", "author": "chryswoods"}, {"date": "2009-08-24T11:01:51.916823Z", "commit": "1042", "message": "The HF code now works with contracted orbitals (it gets the STO-3G HF energy of HeH+ right!)\n\n", "author": "chryswoods"}, {"date": "2009-08-21T21:06:31.417191Z", "commit": "1041", "message": "I've added a class that holds a triangular matrix. This saves space as it only needs\nto save ~1/2 of the values (as it uses a packed format)\n\n", "author": "chryswoods"}, {"date": "2009-08-21T12:53:05.702350Z", "commit": "1040", "message": "The szabo + ostlund HF code now works again (using the combined shell pair integrals)\n\n", "author": "chryswoods"}, {"date": "2009-08-19T20:33:13.112061Z", "commit": "1039", "message": "I've fixed a bug in linearap.cpp that meant that the linear assignment problem was\nrarely incorrectly solved.\n\nI've added a 4D matrix class and have extended the API of the 2D matrix class\nto include reflecting the data about diagonals and lines.\n\nI've updated linearp to use the NMatrix class rather than Array2D<double>\n\nI've begun to sort out the code in Squire for the orbitals, and am \nsketching out a design.\n\nI've updated the generation of the python wrappers so that functions with\nunknown return policies are automatically not wrapped.\n\nCode is broken\n\n\n", "author": "chryswoods"}, {"date": "2009-08-14T19:10:56.770656Z", "commit": "1038", "message": "The SCF program is now working! (with the NMatrix and NVector classes with BLAS/LAPACK/LINPACK\nin SireMaths). It gets the same energy as the Szabo and Ostlund example for \nHeH+ in the STO-1G basis set (next step is to add contracted S-orbitals).\n\n", "author": "chryswoods"}, {"date": "2009-08-14T11:44:38.746779Z", "commit": "1037", "message": "I'm working on moving the BLAS and LAPACK code into SireMaths, and am working on \na general N*M 2-dimensional matrix and N 1-dimensional Vector class to \nsimplify use of BLAS and LAPACK (NMatrix and NVector)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-08-13T21:37:28.583787Z", "commit": "1036", "message": "I've got a 2-electron (HeH+) HF STO-1G SCF calculation *nearly* working (I get the \nright converged density matrix, but some silly bug means I am getting the wrong\nelectronic energy - HOW?!?. I think there is some confusion in the code\nas my Array2D class uses C++ row ordering, while I am using Fortran BLAS and\nLAPACK, which uses column ordering...\n\n", "author": "chryswoods"}, {"date": "2009-08-13T15:53:58.909049Z", "commit": "1035", "message": "I've fixed a silly error that prevented compilation of squire_blas and squire_lapack\n\n", "author": "chryswoods"}, {"date": "2009-08-13T15:26:55.177588Z", "commit": "1034", "message": "I've fixed a compile error for squire blas and lapack if they are not available, and have\nalso fixed a really nasty bug in moleculegroup caused by me checking a const_iterator\nagainst QHash::end rather than QHash::constEnd (which caused a copy of the hash, leading\nto accepting the iterator as valid - as const_iterator != QHash::end, which lead to \ndereferencing invalid memory.\n\n", "author": "chryswoods"}, {"date": "2009-08-13T10:56:51.142704Z", "commit": "1033", "message": "I've fixed a bug in the identity constraint code, played a little more with the HF code, \nand have added QList<MonitorName> to the list of exposed python classes.\n\n", "author": "chryswoods"}, {"date": "2009-08-11T11:10:29.402231Z", "commit": "1032", "message": "I've added a heavily documented example of a script that runs a Monte Carlo\nsimulation on a water box. This is the start of my documentation efforts so that\nI can release Sire to interested people.\n\n", "author": "chryswoods"}, {"date": "2009-08-10T23:05:19.113265Z", "commit": "1031", "message": "I've got my toy HF program working now for one-electron systems (and you can build the \nHamiltonian via python ;-)\n\n", "author": "chryswoods"}, {"date": "2009-08-07T22:20:38.646660Z", "commit": "1030", "message": "I've been playing around with a simple HF program - added to Sire are the beginnings of the\nfunctions necessary to provide a complete implementation.\n\n", "author": "chryswoods"}, {"date": "2009-08-05T15:51:07.851274Z", "commit": "1029", "message": "I've updated the Constraints class to work with MoleculeConstraint objects, and have\nalso updated System so that it applies the molecule constraints every time a molecule\nchanges. This seems to all compile, but it now needs testing.\n\n", "author": "chryswoods"}, {"date": "2009-08-04T15:53:47.729035Z", "commit": "1028", "message": "I've fixed a small bug whereby the constraint wasn't updated if the \nversion number of the system changed...! :-)\n\n", "author": "chryswoods"}, {"date": "2009-08-04T15:36:41.670716Z", "commit": "1027", "message": "I've improved the efficiency of the identity constraint (by removing an unnecessary matrix\ntranspose operation) and have also improved the behaviour of the constraint to repeated\nupdates from the same System, and to changing the underlying algorithm.\n\n", "author": "chryswoods"}, {"date": "2009-08-04T14:59:43.214510Z", "commit": "1026", "message": "I've finished writing the identity constraints (which necessitated adding a CloseMols class). The\nconstraint in tests (in test/SireSystem/identityconstraint.py) seems to successfully work\nout how the molecules should change to maintain their identities - it works quite quickly, taking\njust a millisecond or two on my laptop.\n\n", "author": "chryswoods"}, {"date": "2009-07-17T15:37:46.464696Z", "commit": "1025", "message": "I've simplified the implementation of the IdentityConstraint by using a polymorphic\nhidden class to provide different implementations depending on the ratio\nof the number of points to the number of molecules. This should ensure maximum\nefficiency for most used cases (e.g. single point, few points and all points)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-07-16T15:41:09.217368Z", "commit": "1024", "message": "I've implemented a better brute force algorithm to solve the linear assignment problem\n(the fast code works really well) - it is amazing how slow brute force is (order N!) compared\nto the N3/N4 solution.\n\n", "author": "chryswoods"}, {"date": "2009-07-16T14:09:57.497920Z", "commit": "1023", "message": "I've python wrapped (and extended) Array2D and have added code to solve the linear assignment problem\n(which I need for the IdentityConstraint) - there's a test of the linear assignment code\nin test/SireMaths/linearap.py\n\n", "author": "chryswoods"}, {"date": "2009-07-14T16:58:05.171635Z", "commit": "1022", "message": "I've just about sorted out the molecule constraints, and have added a class that\nconstrains molecules to lie in a box (by wrapping them from one side to another).\n\nI've also pencilled in more of the IdentityConstraint\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-07-07T22:24:47.001710Z", "commit": "1021", "message": "I've optimised the code a little (moved some performance-critical functions back inline) and have\nalso added the PBS job scripts I use to run on bluecrystal into the examples directory\n\n", "author": "chryswoods"}, {"date": "2009-07-06T13:19:11.961234Z", "commit": "1020", "message": "Ok - the PIE compile flags didn't work on Linux (lead to lots of unresolved symbol link\nerrors), and I also had to clean up the python export symbol link commands\non AIX as cmake was writing into the current source directory rather than\nthe binary directory\n\n", "author": "chryswoods"}, {"date": "2009-07-06T11:27:27.026986Z", "commit": "1019", "message": "I've changed the link and compile flags so that gcc will produces position independent executables\n(if available). I've also added link flags to the python modules to ensure that only the\ninit_PyModule() function symbol is exported (so that strip -x has the best chance of reducing\nthe library size)\n\n", "author": "chryswoods"}, {"date": "2009-07-03T22:31:03.004418Z", "commit": "1018", "message": "I've added uninstall targets to corelib and python2 and have also fixed the install/strip\ntarget so that it uses strip -x (so libraries can be stripped, but still have\nexternal symbols so can be loaded as python modules)\n\n", "author": "chryswoods"}, {"date": "2009-07-03T15:56:24.469884Z", "commit": "1017", "message": "I've removed shared_ptr from the static initialisation as this seems to cause a problem\non AIX. I've also fixed some other problems encountered while I am creating AIX python wrappers...\n\n", "author": "chryswoods"}, {"date": "2009-07-02T21:04:38.980275Z", "commit": "1016", "message": "I've fixed some compile bugs in the python wrappers caused by corelib files.\n\n", "author": "chryswoods"}, {"date": "2009-07-02T20:52:36.667427Z", "commit": "1015", "message": "I've fixed some of the Qt headers to allow compilation using Qt 4.2.1 on linux\n\n", "author": "chryswoods"}, {"date": "2009-07-02T15:56:22.098626Z", "commit": "1014", "message": "Compilation problems of the python wrappers on AIX have meant that I have had to\n move all .clone() functions out-of-line...\n\nThat was a lot of work!\n\n", "author": "chryswoods"}, {"date": "2009-07-02T10:38:34.434306Z", "commit": "1013", "message": "I've created new QString<=>Python string and unicode converters, which seems to work\nquite well (they work by converting from QString => UTF-8 => PyUnicode => PyString,\nor PyString => PyUnicode => UTF-8 => QString)\n\n", "author": "chryswoods"}, {"date": "2009-07-01T18:06:30.990735Z", "commit": "1012", "message": "I've finished creating the wrappers for the Qt classes. I still need to add a __str__ \nfunction for QString though...\n\n", "author": "chryswoods"}, {"date": "2009-07-01T14:23:53.298952Z", "commit": "1011", "message": "I am in the process of regenerating the Qt wrappers - the aim is to fix the wrappers\nagainst version 4.2.1 of Qt, and to set it so that the wrappers can be generated\nby anyone as the normal part of creating the python wrappers for Sire, with the\nsame wrappers generated regardless of the version of Qt installed.\n\n", "author": "chryswoods"}, {"date": "2009-06-30T18:35:51.214705Z", "commit": "1010", "message": "I've removed some static variables as these were causing crashes when using python\nwrappers on AIX - I've switched over to using Q_GLOBAL_STATIC \n\n", "author": "chryswoods"}, {"date": "2009-06-30T14:43:13.572007Z", "commit": "1009", "message": "I've added a fix to the wrapper generator to work around what looks like a compiler bug in xlC in AIX.\n\nHere's a description of the problem;\n\n####\n#### Override the free_function functions so that we fix a compile bug using xlC on AIX\n#### Overloaded function signatures output by Py++ look like this;\n####\n####  typedef void (*my_function_type)( args );\n####  def( \"my_function\", my_function_type( &my_function ) );\n####\n####  This breaks when there are multiple overload of \"my_function\" as the xlC compiler\n####  fails with \"The call does not match any parameter list for \"bp::def\"\" errors\n####\n####  The solution is for Py++ to create a variable of type my_function_type and pass this to def, e.g.\n####\n####  typedef void (*my_function_type)( args );\n####  my_function_type my_function_value( &my_function );\n####\n####  def( \"my_function\", my_function_value );\n####\n####  This compiles property using xlC. The below code changes free_function_t and\n####  mem_function_t to create the xlC compatible code, rather than the original Py++ code\n####\n\nThe code (in AutoGenerate/create_wrappers.py) generates the wrappers without any \napparent problems, and the wrappers seem to compile (although I still need to\ntest them on AIX - Units compiles ok)\n\n", "author": "chryswoods"}, {"date": "2009-06-26T21:52:37.305200Z", "commit": "1008", "message": "I've finished writing VolumeChanger and VolumeMove, which both compile and link. I've\ncreated the python wrappers, which are now all compiling.\n\n", "author": "chryswoods"}, {"date": "2009-06-26T15:58:05.466311Z", "commit": "1007", "message": "I'm making good progress with the volume changer class, and have made the point classes\na little more general\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-06-26T14:04:24.049939Z", "commit": "1006", "message": "I'm working on the new VolumeMove class (and have added a VolumeChanger set of functions to allow\nuser-control of how molecules move to a new volume), and in the process I've realised that\nPoint should be in SireFF rather than SireMM (as it does not use any SireMM classes and\nis generally useful elsewhere)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-06-25T18:32:47.718436Z", "commit": "1005", "message": "I've just added a test for the combined and aliased properties (test/SireSystem/testsysproperties.py)\nwhich has exposed a few bugs (now fixed) and which now seems to work well :-)\n\n", "author": "chryswoods"}, {"date": "2009-06-25T15:57:24.379990Z", "commit": "1004", "message": "I've been caught out by a subtle bug - abs(value) returned the integer absolute\nvalues, while I needed to use std::abs(value) so that I could get the \ndouble precision absolute value. This has now fixed the energy, which is\nnow calculated correctly.\n\n", "author": "chryswoods"}, {"date": "2009-06-25T15:43:45.010821Z", "commit": "1003", "message": "I forgot - I needed to commit this to allow the python wrappers for Mol to be generated\n\n", "author": "chryswoods"}, {"date": "2009-06-25T15:39:33.586546Z", "commit": "1002", "message": "I've got all of the code to compile using the new space system (and property alias/combination system),\nand while the python wrappers also work, the energies are wrong in the test cases.\n\nTime for some debugging...\n\n", "author": "chryswoods"}, {"date": "2009-06-24T22:27:47.690996Z", "commit": "1001", "message": "I've worked out how to have multiple spaces within the same system, and still make it all\nwork with the replicas. The solution is not to hack replicas etc., but to fix ForceFields::property\nso that it can handle aliases (links) to properties, and so that it can hold combinations\nof properties. I have added a range of classes to achieve this (e.g. LinkToProperty and\nCombinedProperties, with CombinedSpace and CombineSpaces) and am in the process of \nintegrating this into ForceFields. I'll then need to revert back most of my hacks to\nMove, Moves and Replica...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-06-24T12:33:52.420821Z", "commit": "1000", "message": "Commit 1000! I've fixed the problem of overlapping atoms in RestraintFF and have also\nswitched Molecules so that it derives from SireBase::Property, and so that it \nhas a toString() function.\n\n", "author": "chryswoods"}, {"date": "2009-06-24T11:57:23.654292Z", "commit": "999", "message": "I've finished writing and wrapping the RestraintFF forcefield. This should also work\nas the solvent cap forcefield as well :-)\n\n", "author": "chryswoods"}, {"date": "2009-06-23T21:01:53.942070Z", "commit": "998", "message": "I'm making good progress with the restraint forcefield, having now finally worked out how\nit fits in with the existing forcefields, and how events like adding and removing molecules\nare handled (and I've also sorted out partial updates, so all restraints aren't recalculated\nwhen only a few have changed)\n\n", "author": "chryswoods"}, {"date": "2009-06-23T14:47:27.278343Z", "commit": "997", "message": "Fixed a small link problem\n\n", "author": "chryswoods"}, {"date": "2009-06-23T14:40:42.864947Z", "commit": "996", "message": "I've updated the restraint classes so that they can use user-supplied symbols, and also \nso that they can be differentiated with respect to those symbols (thereby allowing\nlambda dynamics simulations using restraints, as now we can calculate the force on\nlambda caused by the restraint)\n\n", "author": "chryswoods"}, {"date": "2009-06-22T16:18:12.811230Z", "commit": "995", "message": "I've fixed some compile problems caused by the last update to the python SireCAS code...\n\n", "author": "chryswoods"}, {"date": "2009-06-22T15:45:59.098368Z", "commit": "994", "message": "I've added (and wrapped) an AngleRestraint and a DihedralRestraint class. I need to write \na new class in SireCAS that lets me calculate differences between angles though, as at\nthe moment these both calculate absolute difference without angle wrapping.\n\n", "author": "chryswoods"}, {"date": "2009-06-22T12:59:53.388911Z", "commit": "993", "message": "I've written and wrapped the DoubleDistance and TripleDistance restraints\n\n", "author": "chryswoods"}, {"date": "2009-06-19T22:02:56.906120Z", "commit": "992", "message": "I've got the new restraint class working (as well as the Point classes), and it is all now\nwrapped in python (which also works).\n\nAlso, the code now finally all compiles again on my macbook (though I've still got\nto test it on the other platforms)\n\n", "author": "chryswoods"}, {"date": "2009-06-17T19:08:46.364872Z", "commit": "991", "message": "I'm making good progress with the restraints classes. I've separated the code to \ncalculate the restraint from the code to get the points the restraint acts between.\nI've achieved this by creating a Point (and PointRef) class hierarchy that lets\nme operate using Point objects, rather than operating directly with molecules.\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2009-06-17T12:43:44.923224Z", "commit": "990", "message": "More fixes to help build the python wrappers. They still don't all build though...\n\n", "author": "chryswoods"}, {"date": "2009-06-17T12:17:05.770051Z", "commit": "989", "message": "I've added some code to fix the problems building python wrappers on bigblue\n\n", "author": "chryswoods"}, {"date": "2009-06-17T10:20:27.446375Z", "commit": "988", "message": "I've fixed the compiler detection conditions so that they work with older versions of cmake\n\n", "author": "chryswoods"}, {"date": "2009-06-15T14:14:11.471324Z", "commit": "987", "message": "I've updated the cmake files so that more information is saved from the main Sire compile,\nwhich is then made available to the python2 Sire compile. This should make it easier to\nport the python wrappers to different compilers.\n\n", "author": "chryswoods"}, {"date": "2009-06-11T15:54:11.812088Z", "commit": "986", "message": "I'm now back to making progress with the generic restraints.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-06-11T15:21:09.385264Z", "commit": "985", "message": "I've got the CAS python wrappers working and have debugged and tested the \nconditional classes. They appear to do what I want them to do :-)\n\n", "author": "chryswoods"}, {"date": "2009-06-11T14:55:25.509311Z", "commit": "984", "message": "I've fixed a compile bug in CAS, and have also removed the custom FindBoost file as\nthe new cmake one performs better\n\n", "author": "chryswoods"}, {"date": "2009-06-11T14:30:28.158349Z", "commit": "983", "message": "I've removed the custom FindBoost file I've been using to find boost libraries, as\n it doesn't work on AIX and doesn't work now on big blue.\n\n", "author": "chryswoods"}, {"date": "2009-06-11T14:02:55.099257Z", "commit": "982", "message": "I've finished writing all of the SireCAS conditional classes - now they need python\nwrapping and testing!\n\nI've also committed this mornings RenderViewCommand, which is the beginning of separating\nout the Spier::Command classes from RenderView\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-06-11T13:06:20.369755Z", "commit": "981", "message": "I've fixed a compile problem using gcc 4.4 (I needed to include <cstring> in quickcopy.hpp \nso that std::memcpy was defined) and I have also fixed the sse code in countflops so \nthat flop counting can be compiled using the intel compiler.\n\n", "author": "chryswoods"}, {"date": "2009-06-10T22:01:34.492813Z", "commit": "980", "message": "I've finished the Spier::Command class, and am in the process of writing the CameraCommand\nclasses (RotateCamera and TranslateCamera)\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2009-06-10T15:53:24.295070Z", "commit": "979", "message": "I've been adding code to handle generic restraints (and am now in the process of updating\nSireCAS to support conditionals so I can have positional restrain implement the half harmonic\nsolvent cap potential). I'm also committing the half-written code from a couple of nights back\nwhere I am adding a command framework to Spier, which will provide the undo and timeline \nframework.\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2009-06-08T22:34:51.911642Z", "commit": "978", "message": "I've added an event monitor class and am now able to process events occuring within\nthe RenderView. I've also added a visual cue when the render view gets focus\n(and set the focus policy so that I don't get the mouse wheel scrolling stuck\non the view if the mouse happens to fall over it)\n\n", "author": "chryswoods"}, {"date": "2009-06-08T20:57:06.334053Z", "commit": "977", "message": "I've successfully got a sphere rendered in sire_browser...\n\n\n", "author": "chryswoods"}, {"date": "2009-06-08T15:30:55.981606Z", "commit": "976", "message": "The new code in AtomicVelocityWorkspace now compiles correctly, after I changed Editor to \nset properties from a passed PropertyName rather than a QString\n\n", "author": "chryswoods"}, {"date": "2009-06-06T23:21:37.206350Z", "commit": "975", "message": "I've further cleaned up the classes used to render the scene and have properly added\nthe code to cache rendered images and rendered selection images.\n\n", "author": "chryswoods"}, {"date": "2009-06-06T16:30:05.301607Z", "commit": "974", "message": "I've got Spier working again, and have added a GlobalSharedPointer to make it easy to ensure\nthat there is only a single copy of an object. I've made most of the Spier classes\ninto streamable properties and have added the code to save rendering to a QImage so \nthat it can be restored if rendering the scene takes too long.\n\n", "author": "chryswoods"}, {"date": "2009-06-04T16:57:57.952211Z", "commit": "973", "message": "I meant qstrict, not qstring  (too much Qt...)\n\n", "author": "chryswoods"}, {"date": "2009-06-04T16:55:58.458260Z", "commit": "972", "message": "I've added optimisation flags for xlC as it is a little slow at the moment...\n\n", "author": "chryswoods"}, {"date": "2009-06-04T16:45:44.772100Z", "commit": "971", "message": "I've fixed a configure error if webkit is available but OpenGL isn't \n\n  - also, the code now fully compiles and works on powerpc/xlC and intel/icpc\n\n (just core code - not the python wrappers yet)\n\n", "author": "chryswoods"}, {"date": "2009-06-04T15:50:43.910174Z", "commit": "970", "message": "I've fixed the include directories for sire_browser and Spier so that they work\nif the include files are in different directories.\n\n", "author": "chryswoods"}, {"date": "2009-06-04T15:21:17.746265Z", "commit": "969", "message": "I've fixed a compile bug using xlC\n\n", "author": "chryswoods"}, {"date": "2009-06-04T11:54:39.775665Z", "commit": "968", "message": "I've fixed another couple of SSE bugs...\n\n", "author": "chryswoods"}, {"date": "2009-06-04T11:45:27.772692Z", "commit": "967", "message": "I've fixed another couple of SSE compile bugs with the intel compiler.\n\n", "author": "chryswoods"}, {"date": "2009-06-04T11:20:27.571896Z", "commit": "966", "message": "I've fixed an sse compile bug using the intel compiler\n\n", "author": "chryswoods"}, {"date": "2009-06-04T11:10:04.449053Z", "commit": "965", "message": "I've fixed an energy bug caused by the spaces SSE code loading up the distances the\nwrong way around in the SSE vector (uses _mm_set_pd when I needed _mm_setr_pd).\n\nI've also added nearly all of the out-of-line typeName classes now\n\n", "author": "chryswoods"}, {"date": "2009-06-03T19:14:02.912108Z", "commit": "964", "message": "I've updated the SSE code in the other potentials to be compatible with the Intel C++\ncompiler, and have also moved typeName() out of line for most of the other classes.\n\n", "author": "chryswoods"}, {"date": "2009-06-03T15:54:06.354085Z", "commit": "963", "message": "I've cleaned up the options for the intel compiler\n\n", "author": "chryswoods"}, {"date": "2009-06-03T15:51:08.912075Z", "commit": "962", "message": "I've made some changes to support SSE using the intel compiler, and to remove some warnings\nwhen compiling with the intel compiler\n\n", "author": "chryswoods"}, {"date": "2009-06-03T14:37:59.730794Z", "commit": "961", "message": "I've updated the location in which templates are instantiated to remove some\nwarnings from xlC - most of SireMol has now compiled using xlC (although it is\ntaking an inordinately long time!)\n\n", "author": "chryswoods"}, {"date": "2009-06-03T14:32:16.336400Z", "commit": "960", "message": "I've updated the CMakeLists.txt file to make it easier to set options for different compilers.\n\n", "author": "chryswoods"}, {"date": "2009-06-03T12:43:15.545334Z", "commit": "959", "message": "I've fixed some more xlC warnings, and have removed the ill-placed \"using\" declarations\nfrom Connectivity and ConnectivityEditor\n\n", "author": "chryswoods"}, {"date": "2009-06-03T12:13:26.692037Z", "commit": "958", "message": "I've fixed missing qHash functions for MonitorIdentifier and SysIdentifier, and have fixed a \nfew warnings for xlC when compiling atomidentifier.cpp\n\n", "author": "chryswoods"}, {"date": "2009-06-03T11:35:16.002448Z", "commit": "957", "message": "I think that I have now cleanly solved the qHash problem with g++ by moving all \nof the qHash functions into the same namespace as the object being hashed.\n\n", "author": "chryswoods"}, {"date": "2009-06-03T10:54:01.244130Z", "commit": "956", "message": "I've found that I can get g++ to find the qHash function by making sure that it is in the same\nnamespace as the object being hashed (see build/test_compiler/test_qhash_lookup)\n\n", "author": "chryswoods"}, {"date": "2009-06-03T10:22:25.296518Z", "commit": "955", "message": "I've run into the problem of g++ not finding the qHash function again as I had to remove the\ntemplate<class T>uint qHash(const T &obj) overload as this didn't work with xlC (it triggered the \nbug that xlC could not then distinguish between qHash(const T*) and qHash(const T&)). I'm\ntrying a workaround now, but this has broken the code with g++\n\n", "author": "chryswoods"}, {"date": "2009-06-02T15:26:40.685447Z", "commit": "954", "message": "I also had to fix the (admittedly stupid!) use of using directives in IDAndSet and IDOrSet\n\n", "author": "chryswoods"}, {"date": "2009-06-02T15:21:22.315413Z", "commit": "953", "message": "Fixing problems caused by using a template constructor class in the specialisation\nof IDAndSet<MolID> and IDOrSet<MolID>\n\n", "author": "chryswoods"}, {"date": "2009-06-02T15:11:02.806379Z", "commit": "952", "message": "I've updated SireMol to use non-inline typeName functions\n\n", "author": "chryswoods"}, {"date": "2009-06-02T13:38:53.434851Z", "commit": "951", "message": "I've removed all inline functions from SireCAS::Complex (moving them into complex.cpp) in \nan attempt to work around an internal compiler error in xlC\n\n", "author": "chryswoods"}, {"date": "2009-06-02T11:23:33.244920Z", "commit": "950", "message": "More updates to fix compilation using xlC...\n\n", "author": "chryswoods"}, {"date": "2009-06-02T10:54:52.732812Z", "commit": "949", "message": "I've fixed some dodgy operator overloading in Quaternion (which is a *very* old class)\n\n", "author": "chryswoods"}, {"date": "2009-06-02T10:45:31.486255Z", "commit": "948", "message": "Needed to declare friend functions for xlC...\n\n", "author": "chryswoods"}, {"date": "2009-06-02T10:41:17.676003Z", "commit": "947", "message": "More fixes for xlC...\n\n", "author": "chryswoods"}, {"date": "2009-06-02T10:30:55.080825Z", "commit": "946", "message": "I've updated SireMaths to make it compatible with xlC\n\n", "author": "chryswoods"}, {"date": "2009-06-02T10:02:37.791125Z", "commit": "945", "message": "I've made some more changes that should help compilation using xlC\n\n", "author": "chryswoods"}, {"date": "2009-06-01T15:45:00.150995Z", "commit": "944", "message": "I've moved typeName into the source files for SireBase. The code appears to be compiling\nand working (so far) on AIX.\n\n", "author": "chryswoods"}, {"date": "2009-06-01T15:35:33.691297Z", "commit": "943", "message": "Commit to make compatible with HPCx", "author": "chryswoods"}, {"date": "2009-06-01T14:01:46.953762Z", "commit": "942", "message": "I've moved ::typeName() in SireError and SireStream...\n\n", "author": "chryswoods"}, {"date": "2009-06-01T13:41:54.481158Z", "commit": "941", "message": "I'm adding in the openGL mesh classes, and am about to settle in to an afternoon of\nmoving T::typeName() inline functions from the header file to the source file\n(so that the code will compile with xlC... - currently I am triggering the\nerror listed in <http://issues.apache.org/jira/browse/STDCXX-301> using inline\ndefinitions of qMetaTypeId<T>())\n\n", "author": "chryswoods"}, {"date": "2009-06-01T13:38:15.027392Z", "commit": "940", "message": "Commit to make compatible with HPCx", "author": "chryswoods"}, {"date": "2009-06-01T12:14:12.368368Z", "commit": "939", "message": "Commit to make compatible with HPCx", "author": "chryswoods"}, {"date": "2009-05-31T22:00:41.481822Z", "commit": "938", "message": "I've made progress updating and integrating the old GLCanvas class...\n\n", "author": "chryswoods"}, {"date": "2009-05-31T17:24:09.203099Z", "commit": "937", "message": "I'm moving across the Spier classes that I will be re-using in the plugin...\n\n", "author": "chryswoods"}, {"date": "2009-05-31T16:36:03.461483Z", "commit": "936", "message": "I'm playing with a web-browser plugin that can be used to view information about a molecule.\nThis will re-use a lot of code from the old Spier application (and indeed will become\nwhat spier was intended to be).\n\n", "author": "chryswoods"}, {"date": "2009-05-30T22:10:11.315385Z", "commit": "935", "message": "I'm making good progress with the second generation molecular dynamics code. I've\nadapted AtomProperty, CoordGroupArray and MolForceTable so that I can easily\nextract arrays of values for any atom selection, so that then the integrator can\njust deal with raw arrays. This significantly simplifies the integrator code.\n\n", "author": "chryswoods"}, {"date": "2009-05-28T14:38:25.403484Z", "commit": "934", "message": "I've fixed the printing out of units (so now angstrom-1 is printed, rather than L^-1). I've\nalso fixed a bug whereby the temperature of rigid body MC moves was ignored, and where\ntemperatures could not be set using 25*celsius\n\n", "author": "chryswoods"}, {"date": "2009-05-27T09:42:41.543643Z", "commit": "933", "message": "I've added a \"sire_ipython\" executable so that I can run ipython on systems that don't\nhave libgomp linked to the python library.\n\n", "author": "chryswoods"}, {"date": "2009-05-27T07:38:58.153456Z", "commit": "932", "message": "I've added code to calculate the total charge of parts of the molecule.\n\n", "author": "chryswoods"}, {"date": "2009-05-26T08:49:16.911478Z", "commit": "931", "message": "I forgot that I needed to also commit the special_code.py so that the python wrappers\nfor AtomVelocities and AtomForces will work...\n\n", "author": "chryswoods"}, {"date": "2009-05-26T08:31:06.422565Z", "commit": "930", "message": "I've added classes to hold atomic velocities and forces, so that they can be returned\nby the integrator if they need to be saved, and also so that they can be used as properties\nby the velocity generator classes.\n\n", "author": "chryswoods"}, {"date": "2009-05-21T21:43:55.379629Z", "commit": "929", "message": "I've switched MoleculeView over to be derived from Property, so now finally I can\nnest molecule views within one another (and fix some performance bugs and annoyances\nas missing API functions). It is all compiling now, and it looks like it\nis working...\n\n", "author": "chryswoods"}, {"date": "2009-05-19T21:33:00.672547Z", "commit": "928", "message": "I've fixed memory problems when running a replica simulation - TrajectoryMonitor was\nholding an unnecessary copy of the molecule group, and Replica was holding a whole\nother swapped replica, when it only needed to hold a SimStore - these two things\nmeant that sire_python was taking too much memory when running the protein simulation.\n\nNow, I can run the neuraminidase protein with 8 replicas in about 300-400MB, so can\nrun two mpi jobs comfortably on my laptop (and additional replicas don't cost\nany more memory as they are packed to disk!)\n\nI think that I have (finally!) solved the protein memory problems. The next issue\nmay be that it just takes too long to serialise and deserialise the system, \nalthough running 8 replicas on 2 processors took 5 minutes, so it is not a showstopper.\n\n", "author": "chryswoods"}, {"date": "2009-05-19T12:46:30.387443Z", "commit": "927", "message": "I've fixed a bug in the reading of a RepExSubMove from a binary stream\n\n", "author": "chryswoods"}, {"date": "2009-05-19T12:15:50.547952Z", "commit": "926", "message": "I've added the number of moves to the Move and Moves object, have added the ability to set\na random number generator differently for each replica and have got the velocity generators\nto compile.\n\n", "author": "chryswoods"}, {"date": "2009-05-19T07:56:58.847345Z", "commit": "925", "message": "I am filling in the velocity generator classes...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-05-18T21:00:55.314116Z", "commit": "924", "message": "The new replica exchange script is nearly ready - it works and the output is\nvery clear. I should however also add something to print out the move\nacceptance data.\n\n", "author": "chryswoods"}, {"date": "2009-05-18T15:55:58.923782Z", "commit": "923", "message": "I am making good progress sorting out the new replica exchange simulation script\n\n", "author": "chryswoods"}, {"date": "2009-05-18T10:19:47.483991Z", "commit": "922", "message": "I'm continuing to work on the molecular dynamics subsystem...\n\n", "author": "chryswoods"}, {"date": "2009-05-16T17:08:38.589094Z", "commit": "921", "message": "I've worked out how the MD move and associated integrators work, and am making \ngood progress writing the velocity verlet integrator\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-05-15T23:20:09.537578Z", "commit": "920", "message": "I've added (and python wrapped) a MonitorComponents class, which is a more general\nversion of MonitorComponent, and can monitor multiple components of a System, \nand copes with components that appear and disappear\n\n", "author": "chryswoods"}, {"date": "2009-05-15T21:25:58.007345Z", "commit": "919", "message": "I've added the ability to clear selected monitors - this allows MonitorMonitor to work.\n\nCode compiles, links and python wrappers work\n\n", "author": "chryswoods"}, {"date": "2009-05-15T15:54:23.572139Z", "commit": "918", "message": "I've added a MonitorMonitor class that will me copy monitors from Systems to SupraSystems\n\nI've also compiled the code on Linux, and it compiles and links without error.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-05-15T14:25:37.859067Z", "commit": "917", "message": "I've got the python wrappers for all of the Replica/Supra classes working, compiled and \nlinked, and I have also updated the save/load functions of SireStream so that multiple\nobjects can be saved and loaded from binary files or binary data (so we can now\nsave the moves together with the system). This is still preserving the ability to \nread old files that have only one object :-)\n\nCode is working again, although new replica classes are not tested\n\n", "author": "chryswoods"}, {"date": "2009-05-14T22:16:27.433693Z", "commit": "916", "message": "I've finished writing the code that has moved RepExMove to the new SupraSystem framework.\nIt is now possible to run a replica exchange simulation where the master node *never*\nneeds to unpack the replicas (and no node needs to have more than 2 replicas in memory\nat any one time) - and the replica test is distributed across all of the nodes,\nso we've lost the bottleneck for lots of replicas.\n\nThe code is much cleaner than the original version - it just needs testing now...\n\n(and wrapping in python - and legacy binary files need to be handled as well...)\n\nCode compiles and links, but python wrappers need testing, as does the code\n\n", "author": "chryswoods"}, {"date": "2009-05-14T15:54:44.733877Z", "commit": "915", "message": "I've ported RepExReplica and RepExReplicas to the new SupraSystem framework, and am in \nthe process of porting across RepExMove.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-05-13T22:44:33.007091Z", "commit": "914", "message": "I've written the Replica class, which fully compiles (but needs testing). I've built\ninto this class the ability to defer commands while the subsystem is packed, until\nimmediately after it is unpacked. This will allow the replicas class to set ensemble\nparameters and swap systems without constantly unpacking and repacking the replicas.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-05-13T13:12:52.687917Z", "commit": "913", "message": "I've moved the Replicas and RepExReplicas classes into a deprecated directory. This is the \nstart of me allowing Sire to still load old save files using these classes...\n\n", "author": "chryswoods"}, {"date": "2009-05-12T22:36:43.231101Z", "commit": "912", "message": "I've finished coding the SupraSim and SupraSubSim classes. Everything compiles and links,\nas do the python wrappers. Next I must integrate Replicas/RepExReplicas and RepExMove\nwith the new framework, and then test everything.\n\n", "author": "chryswoods"}, {"date": "2009-05-12T20:40:48.613705Z", "commit": "911", "message": "I've filled in SupraSystem, SupraSimPacket, SupraSubSystem and SupraSubSystemPacket. Just\nSupraSim and SupraSubSim left now... (and then integrating Replicas/RepExReplicas and \nRepExMove into the new framework)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-05-12T15:54:22.394095Z", "commit": "910", "message": "I've made progress, filling in the code for SupraSubSystem and much of SupraSystem\n\n", "author": "chryswoods"}, {"date": "2009-05-11T20:37:20.346458Z", "commit": "909", "message": "I've filled in the code for SupraMove, SupraMoves, SupraSubMove and SupraSubMoves (and their\nNull and Same equivalents)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-05-11T19:11:03.533799Z", "commit": "908", "message": "I've specced out all of SupraSystem header files - now to start filling in the functions...\n\n", "author": "chryswoods"}, {"date": "2009-05-11T15:50:30.986414Z", "commit": "907", "message": "I'm formalising the code used to run supra-simulations, and am in the process of\nwriting and speccing out all of the classes necessary to do this \n(all in SireMove/supra*.h and SireMove/supra*.cpp)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-05-11T10:59:15.483689Z", "commit": "906", "message": "I've written an trajectory monitor class that can be used to follow the coordinates of selected\nmolecules throughout a simulation. This is part of solving the problem of continually unpacking\nand repacking a replica, as now the node can write the PDB file, without it needing to be\nwritten by the master\n\n", "author": "chryswoods"}, {"date": "2009-05-09T16:23:51.911129Z", "commit": "905", "message": "I've added a memory monitoring function to MemInfo that uses a background thread to \ntake measurements of memory usage at user-defined intervals.\n\n", "author": "chryswoods"}, {"date": "2009-05-09T15:32:18.002090Z", "commit": "904", "message": "I've improved the packing behaviour of SimStore, and given it a memory so that\npack will restore the last packed state from the last unpack. I've also improved\nSimPacket so that it's packing and unpacking of SireStore objects is now more\nlogical.\n\n", "author": "chryswoods"}, {"date": "2009-05-08T15:53:46.939926Z", "commit": "903", "message": "I've updated the openmp test to disable openmp on a mac\n\n", "author": "chryswoods"}, {"date": "2009-05-08T15:52:51.585953Z", "commit": "902", "message": "I've fixed the template virtual function call problems on my mac, have investigated the fact\nthat openmp+pthreads doesn't work on the mac, and have verified that the code now works\nproperly on linux\n\n", "author": "chryswoods"}, {"date": "2009-05-07T15:37:22.895454Z", "commit": "901", "message": "I've filled in missing functions in the new MD classes, and have made sure that their\nwrappers can now compile.\n\n", "author": "chryswoods"}, {"date": "2009-05-07T15:36:11.130304Z", "commit": "900", "message": "I've fixed a bug in CMakeLists.txt that meant that openmp support was not being compiled into the wrappers.\n\n", "author": "chryswoods"}, {"date": "2009-05-07T15:10:29.046633Z", "commit": "899", "message": "I've had to make some changes to the Qt wrappers to make them compile with Qt 4.2. I've also had to add an explicit\ninclude <Python> to the object registrars to fix a compile error on linux.\n\n", "author": "chryswoods"}, {"date": "2009-05-07T14:07:39.121856Z", "commit": "898", "message": "I've fixed more compile problems and have also updated the cmake script for the python\nwrappers so that openmp can be explicitly disabled for them as well.\n\n", "author": "chryswoods"}, {"date": "2009-05-07T13:30:11.398452Z", "commit": "897", "message": "I've fixed the remaining compilation problems on linux x86-64 using Qt 4.2\n\n", "author": "chryswoods"}, {"date": "2009-05-07T12:53:28.309132Z", "commit": "896", "message": "I've fixed another compile bug for older Qt (4.2) and have added gcc compiler options to \nexplicitly disable OpenMP if this is specified by ccmake\n\n", "author": "chryswoods"}, {"date": "2009-05-07T12:47:01.346365Z", "commit": "895", "message": "I've fixed a compile error for older versions of Qt (Qt 4.2)\n\n", "author": "chryswoods"}, {"date": "2009-05-07T12:31:05.674364Z", "commit": "894", "message": "I've fixed a few symbol hiding compile bugs...\n\n", "author": "chryswoods"}, {"date": "2009-05-06T19:01:40.555924Z", "commit": "893", "message": "I've begun work on the molecular dynamics move (together with interchangable integrators)\nand have written some code to get the memory usage of the program (as I think that\nfragmentation is causing a memory leak on OS X)\n\nDynamics code is broken (but the rest is fine)\n\n", "author": "chryswoods"}, {"date": "2009-05-04T13:09:37.169403Z", "commit": "892", "message": "I've extended pack to disk support to the Replicas class.\n\n", "author": "chryswoods"}, {"date": "2009-04-30T15:47:28.060313Z", "commit": "891", "message": "I've added \"packToDisk\" support for SimStore, so that replicas can be temporarily packed to disk, \nrather than to RAM. This should help for simulations using a large number of large replicas.\n\n", "author": "chryswoods"}, {"date": "2009-04-29T07:39:18.596611Z", "commit": "890", "message": "I've added shared streaming support to CoordGroupArray, PackedArray2D and have also fixed \nshared streaming for the other classes. It all seems to work, and can still successfully\nread the old share stream formats. I have bumped up the shared stream format to version 2.\n\n", "author": "chryswoods"}, {"date": "2009-04-23T14:56:18.905661Z", "commit": "889", "message": "I'm making progress with the new SharedDataStream format and code\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-04-20T15:53:34.879030Z", "commit": "888", "message": "I'm working on adding shared streaming support for more shared containers, and I have made the\ncode that runs Molpro commands more robust.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-03-12T11:04:53.333199Z", "commit": "887", "message": "Added explicit check to find pthread library in SireDB cmake file.\n\n", "author": "chryswoods"}, {"date": "2009-03-11T20:13:34.874882Z", "commit": "886", "message": "I've finished speeding up the calculation - now Sire is running at about 30 moves per second\nfor the periodic box neuraminidase system (as opposed to 3 moves per second last week!), and\nI've doubled the speed of the moves of a water box (1000 moves in 2.5s rather than 5.5s).\n\nThis is now only about 2-3 times slower than ProtoMS, which is not too bad. And I still\nhave some tricks to use :-)\n\n", "author": "chryswoods"}, {"date": "2009-03-11T18:18:47.988693Z", "commit": "885", "message": "The ChunkedHash works, and really does speed up the code. Now I am tracking down a bottleneck(bug)\nwhere the protein solvent energy takes 700ms as the whole protein solvent energy is calculated,\nrather than just the energy of a single moving residue.\n\n", "author": "chryswoods"}, {"date": "2009-03-11T15:43:31.412527Z", "commit": "884", "message": "I've tracked down a major performance loss when copying the Molecules class (which happens A LOT!).\n\nThe QHash does need to be chunked up, which I have now done (added ChunkedHash class).\n\nThis needs testing and performance measured.\n\n", "author": "chryswoods"}, {"date": "2009-03-09T15:54:11.684873Z", "commit": "883", "message": "I've checked and ChunkedVector is now working, and does seem to have improved the speed with\nwhich the forcefields are updated.\n\n", "author": "chryswoods"}, {"date": "2009-03-08T21:16:14.817379Z", "commit": "882", "message": "I've merged ChunkedVector into all of the forcefields - I am getting an assert failure when I \ntry to run Sire though. On the plus side, merging ChunkedVector in was surprisingly\neasy (famous last words... - it will probably be horribly slow!)\n\n", "author": "chryswoods"}, {"date": "2009-03-08T16:14:43.952318Z", "commit": "881", "message": "I've got ChunkedVector mostly working (tested in python) - now lets try using it\nin the forcefields...\n\n", "author": "chryswoods"}, {"date": "2009-03-07T22:09:53.938052Z", "commit": "880", "message": "I've begun work on a ChunkedVector class that stores an array of objects in an array of\narrays. This means that changing just one object will not result in a copy of the entire\narray, but will just involve copying the chunk of the array that changes. This should speed\nup Monte Carlo moves on large systems, as at the moment, each move involves copying \nall of the molecules, which can get slow when there are 16 thousand water molecules...\n\nI will also have to write a ChunkedHash, as the 'Molecules' class uses a QHash at \nthe moment, which is also inefficient for 16 thousand waters...\n\n", "author": "chryswoods"}, {"date": "2009-03-07T16:57:09.542610Z", "commit": "879", "message": "I've sorted out SimPacket so that it can pack the system using non-const pack and unpack functions\n(so that the user has to explicitly pack and unpack, thereby removing the stupid continual\npack and unpack within the script)\n\n", "author": "chryswoods"}, {"date": "2009-02-25T11:01:16.916671Z", "commit": "878", "message": "I've updated PrefSampler so that it uses a SireCAS::Expression for the preferential sampling\nbiasing function. This allows for the use of completely arbitrary preferential sampling\nexpressions to be specified from the Python script.\n\n", "author": "chryswoods"}, {"date": "2009-02-24T13:13:30.986349Z", "commit": "877", "message": "I've written a \"Process\" class that abstracts away the details and error catching of\nrunning an external process and have changed Molpro and ProtoMS to use this\nnew class. Hopefully, this will fix the problems I have been experiencing\nwith occasional Molpro jobs freezing Sire.\n\n", "author": "chryswoods"}, {"date": "2009-02-18T21:41:34.289164Z", "commit": "876", "message": "I've removed the unnecessary locks from simstore.cpp and I've fixed an insidious bug in \nLJParameterDB that meant that under certain circumstances, the *WRONG* LJ parameters\nwere returned, which lead in some cases to wrong energies.\n\n", "author": "chryswoods"}, {"date": "2009-02-17T23:29:47.991300Z", "commit": "875", "message": "Small change to fix the setting of environmental variables in a molpro job - this allows\nme to set the number of openmp threads in the python script.\n\n", "author": "chryswoods"}, {"date": "2009-02-17T20:33:45.796320Z", "commit": "874", "message": "I've realised that these files aren't being auto-generated anymore as SireDB is not exposed...\n\n", "author": "chryswoods"}, {"date": "2009-02-15T15:03:52.865067Z", "commit": "873", "message": "I've added support to make AtomProperties compatible with a different molecule (so it \ncan become possible to move atom properties between molecules)\n\n", "author": "chryswoods"}, {"date": "2009-02-13T16:44:16.283317Z", "commit": "872", "message": "I've moved the makeCompatibleWith function to _pvt_makeCompatibleWith so that the function\noverloading in the python wrappers works (as, at the moment, I am not seeing the function\nwith the default AtomMatcher)\n\n", "author": "chryswoods"}, {"date": "2009-02-13T16:12:25.247501Z", "commit": "871", "message": "I've added some atom matching classes that allow for atoms in one molecule to \nbe matched to atoms in another molecule\n\n", "author": "chryswoods"}, {"date": "2009-02-13T13:00:24.748456Z", "commit": "870", "message": "I am in the process of adding support to allow an AtomProperty to be modified so that it \nbecomes compatible with a different molecule. \n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-02-13T11:43:40.102661Z", "commit": "869", "message": "I've disabled the automatic packing of a SimStore (and indeed all packing of a SimStore)\nas this was severly slowing down the simulation (as it was being continually packed,\nthen unpacked)\n\n", "author": "chryswoods"}, {"date": "2009-02-02T17:00:26.604391Z", "commit": "868", "message": "I've worked out why backtrace wasn't working on my mac - it was because I was compiling using\n-fomit-frame-pointer, which breaks backtrace on mac (but not on linux, interestingly).\n\nI've debugged the code and it can now run a simulation using packed replicas. However, packing\nand unpacking occurs far too often, takes too long and is actually a little annoying.\n\nIn terms of speed, test/SireMove/simulation.py shows that 1000 moves takes 4 seconds (3.9 direct,\n4.2 when submitted via a Node). test/speed/water_energy_speed.py takes 475ms for each of the tests.\n\nSo the main code hasn't slowed down - it is just the handling of large systems that seems\nvery slow (e.g. it takes about 0.5 seconds per move for a 16800 water box - which is almost\ncertainly due to the penalty of copying the waters for each move...). This size box also\ntakes up too much memory (800MB for four replicas, with a 38MB save file, despite the PDB\nfile only taking 4.5MB).\n\n", "author": "chryswoods"}, {"date": "2009-02-02T14:52:50.009334Z", "commit": "867", "message": "I've added a WindowComponent constraint class that will be able to use to support FEP using\ndifferent window widths\n\n", "author": "chryswoods"}, {"date": "2009-02-02T12:18:52.265112Z", "commit": "866", "message": "I've fixed the deadlock bug in the packing of SimStore - I'd forgot to initialise a Recursive\nmutex in the SimStore copy constructor\n\n", "author": "chryswoods"}, {"date": "2009-01-25T14:50:24.014826Z", "commit": "865", "message": "Initial tests indicate that the multi-alpha SoftCLJ forcefield is now working (now that\nI've fixed a load of bugs). Packing of the replicas seems a little slow, and currently\ndeadlocks when it is streamed to a binary datafile...\n\n", "author": "chryswoods"}, {"date": "2009-01-24T12:52:27.142975Z", "commit": "864", "message": "I've integrated the new SimStore class into Replica and SimPacket, and have updated RepExMove\nso that it is aware of the packing (essentially it now transfers data around to minimise packing\nand unpacking operations). This all compiles and links (including the python wrappers), but\nnow needs to be tested.\n\n", "author": "chryswoods"}, {"date": "2009-01-23T13:04:26.654045Z", "commit": "863", "message": "I've added a SimStore class that will be used to hold the System and Moves used in a simulation\nin an easily packable and unpackable form.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-01-22T23:02:52.020174Z", "commit": "862", "message": "I'm still working out how to keep a packed version of the replicas to stop wasting memory...\n\n", "author": "chryswoods"}, {"date": "2009-01-22T21:54:01.867624Z", "commit": "861", "message": "I've fully implemented multiple alpha values in SoftCLJPotential (though it needs to be tested).\nI'm in the process of also allowing Replicas to be packed into compressed binary arrays,\nthereby saving memory (as my replica exchange simulations with 10 protein-ligand replicas\nwere quite memory hungry...)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2009-01-21T16:49:18.069138Z", "commit": "860", "message": "I've written the code in SoftCLJPotential to calculate the energy of multiple alpha values\nsimultaneously.\n\nCode is still broken\n\n", "author": "chryswoods"}, {"date": "2009-01-21T12:08:46.384288Z", "commit": "859", "message": "I'm making progress adding support for multiple alpha values within a single SoftCLJPotential.\nThe aim is to allow a single SoftCLJPotential to calculate multiple alpha values at once,\nthereby removing the need for lots of duplicated forcefields for different values of\nalpha (for the same molecules). Duplicating forcefields is slow and very memory hungry\nfor large protein systems.\n\n", "author": "chryswoods"}, {"date": "2009-01-09T11:34:40.877652Z", "commit": "858", "message": "I've added (null) support for lattice charges to the NullQM QMProgram\n\n", "author": "chryswoods"}, {"date": "2009-01-05T14:08:06.923310Z", "commit": "857", "message": "I've changed the soft-core potential to use the Zacharias and McCammon form used by Julien\nin ProtoMS. I've compared energies against ProtoMS and get the same energies (to several d.p.)\nfor a pair of neuraminidase ligands in a periodic box of water.\n\n", "author": "chryswoods"}, {"date": "2008-12-23T15:48:31.863102Z", "commit": "856", "message": "I've optimised the ZMatrixCoords code so that ZMatMove moves are now 10 times faster than before. \n\nThe moves conserve energy (as seen in test/SireIO/cox2.py). Things are looking good :-)\n\n", "author": "chryswoods"}, {"date": "2008-12-23T13:58:53.636159Z", "commit": "855", "message": "I've fixed a bug in PackedArray2D whereby extract was resulting in an assertation failure.\n\nThis was because I was using '1' to index the first array, rather than '0' - silly fortran\nindexing bug...!\n\n", "author": "chryswoods"}, {"date": "2008-12-22T14:32:27.807929Z", "commit": "854", "message": "I've fixed a bug in the MM forcefields in which the energies of molecules with odd numbers of \natoms was not calculated correctly when SSE was enabled. I've also made CountFlops a cmake\nconfigurable option.\n\nSire now gives the same energy as ProtoMS for neuraminidase and ligand in a large box\nof water (inter- and intra- energies!), and what's more - it does so in a comparable\ntime - both take 16 s, even though Sire is calculating a more exact energy. When ProtoMS\nis calculating the same energy, using sire_compatibility_mode, it takes 39 s)\n\n", "author": "chryswoods"}, {"date": "2008-12-22T11:40:41.892976Z", "commit": "853", "message": "I've worked on ZMatrix and ZMatMove so that they can work with only part of a molecule (so that\nresidue moves in a protein don't require that the entire protein z-matrix is recalculated!).\n\nI've also optimised the ProtoMS parameteriser, and have improved the efficiency from it\ntaking 180s to parameterise neuraminidase to taking just 27s. This is still too slow, but I \nthink that I'll need to write a custom parameteriser to actually speed this up...\n\n", "author": "chryswoods"}, {"date": "2008-12-21T16:23:54.124025Z", "commit": "852", "message": "I've added implicit conversion from QString and double to VariantProperty in the python wrappers.\n\n", "author": "chryswoods"}, {"date": "2008-12-20T17:06:44.030659Z", "commit": "851", "message": "I've fixed a few bugs:\n\nMoleculeGroup::add(MoleculeGroup) was just broken, and has been fixed\n\nProtoMS reader has been fixed to read in more data from ProtoMS, so that I can now\nget almost exact agreement in the energy. The energy for a DANA (neuraminidase) inhibitor\nin a box of TIP4P is -19237.729 kcal mol-1 in ProtoMS (calculated in 0.8s), while\nit is -19237.730131 kcal mol-1 in Sire (calculated in 0.3s).\n\nThis is close enough agreement, given two completely different languages, different\norder of forming the sum etc.\n\n", "author": "chryswoods"}, {"date": "2008-12-19T21:24:29.877277Z", "commit": "850", "message": "I've fixed a few bugs in the use of duplicated forcefields for numerical energy gradients.\n\n", "author": "chryswoods"}, {"date": "2008-12-19T14:48:03.603218Z", "commit": "849", "message": "I also needed to add implicit conversion from double to SireCAS expression\n\n", "author": "chryswoods"}, {"date": "2008-12-19T14:16:51.344739Z", "commit": "848", "message": "I've added a \".clone()\" function to all python wrapped classes, have added a Min and Max function\nto SireCAS, and have fixed some of the problems caused when you rename a forcefield (now the groups\nare automatically renumbered, and the index of the groups and molecules is reconstructed)\n\n", "author": "chryswoods"}, {"date": "2008-12-18T20:32:05.333040Z", "commit": "847", "message": "I've got the PropertyConstraint working now - alpha seems to be correctly being set\nas a function of lambda\n\n", "author": "chryswoods"}, {"date": "2008-12-18T19:49:25.355133Z", "commit": "846", "message": "I've added Constraint and Constraints classes to allow constraints to be added to the\nsystem (e.g. to constrain the value of alpha to map to the value of lambda).\n\nI'm still debugging the code...\n\n", "author": "chryswoods"}, {"date": "2008-12-17T17:58:55.068082Z", "commit": "845", "message": "I've added a soft-core coulomb and LJ forcefield, as a way of improving the convergence\nof dual-topology simulations. It seems to work - though I do now need to find a way\nto tie the value of alpha to the value of lambda...\n\n", "author": "chryswoods"}, {"date": "2008-12-16T15:20:37.242872Z", "commit": "844", "message": "I've fixed a small bug in the streaming of ZMatMove - it wasn't streaming the move data from \nMonteCarlo.\n\n", "author": "chryswoods"}, {"date": "2008-12-16T13:49:39.015046Z", "commit": "843", "message": "I've fixed a couple of bugs that prevented me from running a dual topology simulation to\ncalculate the relative hydration free energy of ethane and methanol.\n\n", "author": "chryswoods"}, {"date": "2008-12-16T11:52:55.890299Z", "commit": "842", "message": "I've fixed the efficiency problems with the synchronised rigid body moves and have also\ntested that they work correctly (see test/SireMove/syncmove.py)\n\n", "author": "chryswoods"}, {"date": "2008-12-15T11:42:38.188129Z", "commit": "841", "message": "I've written the code to allow synchronisation of the translation and rotation\nof molecules in RigidBodyMC move.\n\n", "author": "chryswoods"}, {"date": "2008-12-15T08:48:27.615906Z", "commit": "840", "message": "I'm starting the code that will allow molecules to be translated and rotated together\n(this is necessary for dual topology free energy calculations)\n\n", "author": "chryswoods"}, {"date": "2008-12-14T19:36:28.069376Z", "commit": "839", "message": "I've fixed a couple of bugs in internalparameters.cpp that were causing the dihedral energies to\nbe different to ProtoMS. Now the bond, angle and dihedral energies agree (to within a decimal place\nor two), the coulomb energy is very close, but the LJ energy is a little out...\n\n", "author": "chryswoods"}, {"date": "2008-12-14T11:41:57.966940Z", "commit": "838", "message": "I've added the code to all the parameterisation of protein non-bonded terms from ProtoMS. This seems\nto work, but now that I can compare all of the energies, the energies from Sire are slightly out\ncompared to ProtoMS. I'll need to debug this using a smaller protein.\n\n", "author": "chryswoods"}, {"date": "2008-12-11T22:57:44.265188Z", "commit": "837", "message": "I've updated the Molpro interface so that it is possible to set the amount of memory that \nis needed by molpro during the QM calculation\n\n", "author": "chryswoods"}, {"date": "2008-12-11T09:00:04.071451Z", "commit": "836", "message": "I've fixed a bug in the reading of binary data that contains shared boost::shared_ptr objects - I \nwasn't detaching the pointer from shared storage when I was reading it, causing missing ID\nproblems in SharedDataStream.\n\n", "author": "chryswoods"}, {"date": "2008-12-09T23:29:47.396307Z", "commit": "835", "message": "I've fixed a crash caused when SharedDataStream is used to stream a null QSharedDataPointer or\nSireBase::SharedDataPointer.\n\n", "author": "chryswoods"}, {"date": "2008-12-09T22:13:54.884978Z", "commit": "834", "message": "I've added even more error detection to the ProtoMS reader (can you tell that I am debugging\na simulation of bluecrystal?)\n\n", "author": "chryswoods"}, {"date": "2008-12-09T21:53:58.814366Z", "commit": "833", "message": "I've added error detection code to the ProtoMS reader so that errors are detected\nand turned into C++ exceptions.\n\n", "author": "chryswoods"}, {"date": "2008-12-09T21:17:25.614814Z", "commit": "832", "message": "I've updated the name of temporary directories so that they don't use capitals,\nand so that the name of the user is first.\n\n", "author": "chryswoods"}, {"date": "2008-12-09T20:52:42.101956Z", "commit": "831", "message": "I've got most of the protein internal parameters read, and have also added the ability to \nstop the temporary directories from being deleted (as this is really annoying when I am\ntrying to debug a problem!)\n\n", "author": "chryswoods"}, {"date": "2008-12-06T12:18:39.275468Z", "commit": "830", "message": "I've finished writing the ProtoMS reader for solute and solvent molecules, and have confirmed\nthat I get the same energies as ProtoMS for a solvated ethane molecule (simulation of which is\nin test/SireIO/protoms.py) and for a indole molecule (in SireIO/test/indole.py).\n\nThe code isn't too slow either, running at about 2000 moves per second for gas-phase\nethane, 1000 moves per second for solvated ethane, solute moves only, and about\n300 moves per second for solvated ethane as in test/SireIO/protoms.py\n\n", "author": "chryswoods"}, {"date": "2008-12-04T17:37:37.962126Z", "commit": "829", "message": "I've reproduced the ProtoMS harmonic oscillator test and have verified that Sire does get the\naverage energy of the harmonic oscillator correct to two decimal places after one million\nmoves (and just about gets the third - it should be 0.2962 - Sire fluctuates from\n0.295 to 0.297, which is similar to the fluctuations observed in ProtoMS).\n\nIn doing this I've also fixed a bug that prevented multi-CutGroup molecules from having\ntheir change in energy calculated correctly.\n\n", "author": "chryswoods"}, {"date": "2008-12-04T15:29:06.897187Z", "commit": "828", "message": "I've added the z-matrix based Monte Carlo move class. Finally(!) I am able to perform\ncomplete Monte Carlo simulations.\n\n", "author": "chryswoods"}, {"date": "2008-12-03T10:58:53.878950Z", "commit": "827", "message": "Ok - it was a silly bug - I had forgotten to copy the new cartesian coordinates back to the old.\nNow that I've fixed this, it all looks like it is working (e.g. test/SireMove/protoms.py rotates\na dihedral and angle in ethane successfully)\n\n", "author": "chryswoods"}, {"date": "2008-12-03T08:53:29.775241Z", "commit": "826", "message": "I'm now testing the z-matrix classes, which do appear to have been loaded correctly by \nthe ProtoMS reader, but which also don't appear to build the cartesian coordinates\ncorrectly (.toCartesian() doesn't build new coordinates, from what I can tell...)\n\n", "author": "chryswoods"}, {"date": "2008-12-02T22:13:09.187392Z", "commit": "825", "message": "I've finished writing the z-matrix class, and have updated the ProtoMS reader so that it\nreads in the z-matrix together with the move deltas. It seems to load the ethane z-matrix\ncorrectly (in test/SireIO/protoms.py), but I still need to test this fully.\n\n", "author": "chryswoods"}, {"date": "2008-12-02T08:55:29.653999Z", "commit": "824", "message": "I'm continuing with my progress writing the z-matrix classes...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-12-01T08:53:47.689370Z", "commit": "823", "message": "I'm filling in the remaining functions in zmatrix.cpp...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-11-30T17:42:56.741843Z", "commit": "822", "message": "I've added a ZMatrix class so that I can perform z-matrix based moves (in addition to the \nnon-z-matrix based moves that were already implemented in Sire - this will allow\neasy comparison of Sire with ProtoMS, as ProtoMS uses z-matricies.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-11-29T17:53:05.735150Z", "commit": "821", "message": "I've fixed a small compile bug on 64bit systems (I was improperly casting a pointer to an int)\n\n", "author": "chryswoods"}, {"date": "2008-11-29T17:35:49.492553Z", "commit": "820", "message": "I've added the ability to match names using case sensitive or case insensitive matching, \ne.g.\n\noxygen = tip4p.atom( AtomName(\"O00\", SireID.CaseSensitive) )\n\nor\n\noxygen = tip4p.atom( AtomName(\"o00\", SireID.CaseInsensitive) )\n\n", "author": "chryswoods"}, {"date": "2008-11-27T08:51:00.715767Z", "commit": "819", "message": "I'm in the process of adding some code to SireIO that will allow ProtoMS to be used\nto automatically parameterise molecules (this is the first step to parameterising\nmolecules within Sire - this is just a bit quicker, especially as I don't want\nto be manually parameterising proteins...!)\n\n\n", "author": "chryswoods"}, {"date": "2008-11-26T08:26:12.090521Z", "commit": "818", "message": "I'm adding in some code that lets Sire use ProtoMS to parameterise molecules (as parameterising\na protein by hand is just too painful!)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-11-25T20:49:38.986861Z", "commit": "817", "message": "I've fixed a deadlock that I experienced on an extreme test (running 30 scripts in parallel\non a 100 MPI process job on my laptop). It was just a small bug, but it caused me to look\nat lots of the code, and I think I've fixed some other scheduling bugs as well.\n\nThe following command line shows you what is possible;\n\nmpirun -n 100 sire_python test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py test/SireCluster/testcluster.py\n\nThis runs 30 copies of test/SireCluster/testcluster.py in parallel over 100 nodes (each\nscript tries to grab up to 50 nodes each - so there is a little fighting ;-)\n\nThis works without deadlocking or any other problems.\n\nThe only issue I now think I have is that I get some weird Qt errors when I try\nto get each test cluster script asking for 100 nodes each \n(QEventDispatcherUNIXPrivate(): Unable to create thread pipe: Too many open files)\n\nThis error is just printed - it doesn't stop the script working, so perhaps it \ncan be ignored...?  (of course it can't - at least not in the long term!)\n\n", "author": "chryswoods"}, {"date": "2008-11-25T08:50:40.001386Z", "commit": "816", "message": "I've made a few small changes to SireCluster - nodes can now autodelete themselves,\nso that they are returned to the cluster once they've finished working, and\nalso it is possible to grow a Nodes object by pulling more nodes from the \nCluster.\n\n", "author": "chryswoods"}, {"date": "2008-11-24T08:46:39.062817Z", "commit": "815", "message": "I've added the ability to run multiple python scripts within the same instance of sire_python.\nThis allows sire_python to act as a python task farm, and makes it able to run multiple python\nscripts on multiple nodes via MPI.\n\n", "author": "chryswoods"}, {"date": "2008-11-23T20:45:57.875463Z", "commit": "814", "message": "I've added some resilience to the code by allowing the replica exchange moves to resubmit\naborted or failed replicas, and to restart stopped replicas. As I do need to detect when\nthe user wants to kill the job, I've also added a signal handler to sire_python so that\nCTRL-C and kill now work immediately.\n\nThe MPI RETI code seems to be working well. :-)\n\n", "author": "chryswoods"}, {"date": "2008-11-23T14:30:13.203289Z", "commit": "813", "message": "I've got multi-processor RETI working! I added a SimPacket class, which provides a WorkPacket\nthat can be used to run a simulation, and then updated Simulation so that it is a thin\nwrapper around Promise. I then updated RepExMove to use the new Simulation class, and it\nall appears to work (I'm running a multi-processor QM/MM RETI simulation on water on\nmy laptop now, and it seems to be running without problems - also the script\ntest/SireMove/retimoves.py runs without problems on my laptop).\n\nI've also now removed all reference to SireMPI, as SireCluster replaces it.\n\n", "author": "chryswoods"}, {"date": "2008-11-21T22:47:35.089803Z", "commit": "812", "message": "I've fixed a bug in the compilation of sire_python, but aside from that, it works on \nbluecrystal! So the MPI works on Linux and Mac! Phew...!\n\nAll that is left now is to integrate SireCluster into SireMove and to then get rid\nof the old SireMPI module.\n\n", "author": "chryswoods"}, {"date": "2008-11-21T22:07:58.946471Z", "commit": "811", "message": "I've finished writing the point-to-point communicator and the MPIFrontend, and now I can\nrun WorkPackets on remote nodes!!! It all seems to work - even a stress test where I ran\nten jobs in parallel using a 25 process cluster (on my laptop) worked without problem, e.g.\n\nmpirun -n 25 sire_python test/SireCluster/testcluster.py\n\nWhat's more, my laptop was over 85% idle during this test, so the communication \nprocessor requirements are low. Now to test this on bluecrystal...\n\n", "author": "chryswoods"}, {"date": "2008-11-21T17:48:43.253824Z", "commit": "810", "message": "I'm making progress with the MPI point-to-point communicator - it looks like it is being \ncreated correctly - I am now just deadlocking after it has been created\n(try mpirun -n 3 sire_python test/SireCluster/testcluster.py)\n\n", "author": "chryswoods"}, {"date": "2008-11-21T10:51:18.639239Z", "commit": "809", "message": "I've debugged the code I added at the last commit and it is now all working correctly\n(although the actual reservations are stubbed, so all it is doing is saying that\nno backends are available).\n\n", "author": "chryswoods"}, {"date": "2008-11-20T21:17:18.261950Z", "commit": "808", "message": "I've added most of the code that negotiates the starting of MPI point-to-point communications\nbetween MPI processes. It doesn't yet work, and is not yet complete, but the communications\nflow is now in place.\n\n", "author": "chryswoods"}, {"date": "2008-11-20T08:49:52.804186Z", "commit": "807", "message": "I'm now implementing the MPI point-to-point communication code.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-11-19T20:04:30.152822Z", "commit": "806", "message": "I've got Python working as part of a WorkPacket (though it keeps resubmitting...?) and I \nhave added the ability for a thread to temporarily lend itself to a Nodes scheduler\n(thereby allowing a python thread running on a node to lend itself to a Nodes\nobject to let it do some work)\n\n", "author": "chryswoods"}, {"date": "2008-11-19T08:41:04.918835Z", "commit": "805", "message": "I've added a PythonPacket class that lets me run multiple python jobs in different threads\n(as WorkPacket objects). This will allow the SireCluster scheduling algorithm to be used\nto schedule the running of multiple python jobs within a single MPI cluster (e.g. I now\nhave a task farm!)\n\n", "author": "chryswoods"}, {"date": "2008-11-17T12:59:13.009781Z", "commit": "804", "message": "I've added ErrorPacket and AbortPacket so that a Backend can signal an error or abort\nwithout having to send back the entire job.\n\n", "author": "chryswoods"}, {"date": "2008-11-15T22:11:31.628077Z", "commit": "803", "message": "I'm in the process of writing the Promise class (which is how we'll get results back \nfrom the Node).\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-11-15T17:05:24.020035Z", "commit": "802", "message": "I've got the basics of the nodes working now. I'm now going to test it on bluecrystal...\n\n", "author": "chryswoods"}, {"date": "2008-11-15T12:54:20.827622Z", "commit": "801", "message": "I've fixed a problem with the generation and compilation of the python wrappers\n(exception classes in *_registrars.cpp couldn't be compiled - as I don't expose\nthe error classes, I've removed them)\n\n", "author": "chryswoods"}, {"date": "2008-11-15T12:01:48.155778Z", "commit": "800", "message": "I've added the wrapper for QList<Node> so that multiple nodes can be returned to Python.\n\n", "author": "chryswoods"}, {"date": "2008-11-15T11:57:30.037082Z", "commit": "799", "message": "I've written and wrapped the Node and Nodes class, that allow for scheduling of \nthe available backends.\n\n", "author": "chryswoods"}, {"date": "2008-11-15T00:38:24.600437Z", "commit": "798", "message": "I'm working on adding the Node and Nodes classes, so that there is a user-visible\nconvenient API for the frontend-backend classes.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-11-14T18:34:31.751247Z", "commit": "797", "message": "I can confirm that MPI works superbly on OS X and on Linux (my laptop and bluecrystal)\nusing mpich2  (which on my laptop was configured using \n\n./configure --prefix=/Users/chris/local/ --enable-sharedlibs=osx-gcc\n\n - so nothing special is needed!)\n\nI've run the job using 100 processes, with all of the slaves asking the master\nto return to them the list of the UIDs of the nodes.\n\nCool!\n\n", "author": "chryswoods"}, {"date": "2008-11-14T18:03:05.007114Z", "commit": "796", "message": "I've got the MPI code working, now that I've turned on MPI::Init_thread(MPI_THREAD_MULTIPLE).\n\nIt also seems to now be pretty robust (I started 100 MPI processes on my laptop and they\nall worked well). However, without MPI_THREAD_MULTIPLE the whole lot comes crashing\ndown, so I've added a strict check for MPI_THREAD_MULTIPLE support that kills the \nprogram if it is not available.\n\n", "author": "chryswoods"}, {"date": "2008-11-14T01:58:44.387698Z", "commit": "795", "message": "I've got the backend of the inter-process communication working now, and sire_python is able\nto see how messages are exchanged between processes. There's an occasional deadlock at shutdown,\nbut it looks like it is working.\n\nI've also added seeding of qrand as otherwise QUuid was producing identical UIDs on different\nMPI processes (which was quite annoying!). The fix is to call QUuid first so that it sets\nits initial seed, then call qsrand to seed it ourselves, and then subsequent calls to\nQUuid will then produce truly unique IDs (well, within the constraints of a pseudo-random\nnumber generator).\n\n \n", "author": "chryswoods"}, {"date": "2008-11-13T16:56:06.672290Z", "commit": "794", "message": "I'm making a lot of progress now with the rationalised version of SireCluster (renamed version\nof SireMPI - which will be retired). I've sorted out the broadcast issues now, and have\ngot sending and receiving occuring in separate threads using separate communicators, and also\nreceiving the message is now separate to processing the message (overlapped computation and\ncommunication).\n\nCode is broken (of course!)\n\n", "author": "chryswoods"}, {"date": "2008-11-13T08:55:26.531474Z", "commit": "793", "message": "I'm making good progress - the design is now very clean, with all of the MPI code now\nhidden away in SireCluster/mpi\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-11-13T00:12:06.330369Z", "commit": "792", "message": "I forgot - I also have to commit in the changes I've made to the python wrappers as well.\n\n", "author": "chryswoods"}, {"date": "2008-11-13T00:11:08.005282Z", "commit": "791", "message": "I've made a lot of progress - having written Backend, Frontend, WorkPacket and Cluster, and having\nalso got them compiling and wrapped and tested in python.\n\n", "author": "chryswoods"}, {"date": "2008-11-12T16:48:15.651965Z", "commit": "790", "message": "I've written the generic 'Backend' class - the design seems pretty clear, so hopefully I should\nfinish writing it by tomorrow morning... (he says!)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-11-12T15:56:03.076546Z", "commit": "789", "message": "I've added in the files for a SireCluster library, which will contain the abstracted\n(non MPI) parts of SireMPI. I've just put the files in - now I have to write them!\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-11-12T15:37:04.399877Z", "commit": "788", "message": "I've realised that part of the cause of the deadlock in SireMPI was because I was not \ndistinguishing between local nodes and remote nodes, and I was sending an MPI message\nfrom one node to itself. While this works (the message is received) the code then\nblocks as the send is not acknowledged. I've also realised that MPIFrontend and\nMPIBackend are really nice classes that abstract the MPI code away, and that the\nsolution is to add LocalFrontend and LocalBackend classes. This requires a little\nrefactoring, which I am about to undertake...\n\n", "author": "chryswoods"}, {"date": "2008-11-12T08:56:44.436197Z", "commit": "787", "message": "I'm now in the process of debugging SireMPI - so far it is deadlocking at startup!\n\n", "author": "chryswoods"}, {"date": "2008-11-11T23:39:42.971912Z", "commit": "786", "message": "I've finished rewriting SireMPI and it now all compiles and links, and all of the python wrappers\ncompile and link. I've now got to test whether or not it works... ;-)\n\n\n", "author": "chryswoods"}, {"date": "2008-11-11T08:57:36.573045Z", "commit": "785", "message": "I'm continuing to rationalise and clean the SireMPI code.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-11-10T23:38:30.675411Z", "commit": "784", "message": "I'm cleaning up the SireMPI code so that all communication occurs in discrete communicators,\nwith all calls protected using mutexes. This should make it easier to debug deadlocks.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-11-10T08:26:05.307501Z", "commit": "783", "message": "I'm in the process of debugging a deadlock in SireMPI - I've fixed one bug - I didn't set\nthe semaphore in MPINodes to have the same value as the number of available nodes.\n\n", "author": "chryswoods"}, {"date": "2008-11-07T16:18:22.485309Z", "commit": "782", "message": "I've fixed the wrapping bug in PeriodicBox and have debugged RDFMonitor to ensure that it does\nactually produce the correct RDF!\n\n", "author": "chryswoods"}, {"date": "2008-11-07T11:16:10.337183Z", "commit": "781", "message": "I've fixed a bug in the Monte Carlo volume test - I was using positive beta when I should\nhave been using negative beta!!!\n\n", "author": "chryswoods"}, {"date": "2008-11-05T10:38:23.130076Z", "commit": "780", "message": "I've fixed a bug in the format of the PDB output line that caused a crash on bluecrystal, I have\nchecked that the MTSMC test is correct, and I have also fixed a memory leak in CoordGroup (I increased\nthe reference count when I allocated the memory, which was a mistake!)\n\nThe RETI simulation is now definitely working.\n\nAlso, the malloc problems were caused by the malloc that was part of OpenMPI - I've switched over\nto using mpich2 on bluecrystal and I am now not seeing any problems\n\n(I know that it was the OpenMPI malloc as a backtrace showed the crash occuring in the malloc provided\nby OpenMPI - switching to mpich2 has also appeared to get rid of the QBuffer memory allocation problems\nas well)\n\n", "author": "chryswoods"}, {"date": "2008-11-04T12:45:16.491662Z", "commit": "779", "message": "I've made PDB reserve some space in QByteArray as I am getting a segfault when writing out the PDB\nfile of the molecules on bluecrystal due to another QBuffer memory allocation error.\n\n", "author": "chryswoods"}, {"date": "2008-11-04T11:59:29.349537Z", "commit": "778", "message": "I've added a RepExMove::nMoves() function so that I can see how many supra-ensemble replica exchange\nmoves have been attempted (thus I can work out which iteration I am on in my script).\n\nMy new RETI script appears to be working - I now need to run it enough to check that it\ngives the same free energies as the previous version of Sire\n\n", "author": "chryswoods"}, {"date": "2008-11-04T11:15:21.156917Z", "commit": "777", "message": "I've fixed two bugs;\n\n(1) While clone_const_reference was being automatically applied to normal member functions,\n    it wasn't for operators. I've updated create_wrappers.py so that it uses clone_const_reference\n    automatically for operator[] and operator() (if the return type has a .clone() function)\n\n(2) MTSMC was not updating the system statistics at the end of each move! I've fixed this.\n\n", "author": "chryswoods"}, {"date": "2008-11-04T08:32:01.860069Z", "commit": "776", "message": "I've added 'value' functions to the ID types so that I can get the raw value of the ID in\nPython (at the moment, I can't get the raw string of a name - e.g. I can only get\n'SysName(\"sim\")'.\n\n\n", "author": "chryswoods"}, {"date": "2008-11-03T15:35:54.659062Z", "commit": "775", "message": "I've forced the streaming save/load functions to reserve some space in which to write the\ndata as on bluecrystal I am seeing occasional QBuffer memory allocation errors, which I think\nmay be caused by QBuffer not being able to reallocate memory while saving the new replicas.\n\n", "author": "chryswoods"}, {"date": "2008-11-02T15:59:01.472126Z", "commit": "774", "message": "I think that I've got the QM/MM RETI simulation working now. The last problem was that\nthere was no comparison operator in RigidBodyMC move so that solvent moves were not being\nadded correctly.\n\n", "author": "chryswoods"}, {"date": "2008-11-02T14:16:39.937787Z", "commit": "773", "message": "I've fixed the bug that was causing rigidbodymc.py to be wrong. Now the two MC simulations\nagree completely :-)\n\nThe problem was in inter2b2gff.hpp, where I passed a 'false' value as an argument\nto mols.change(...) when I should have passed a 'true'...\n\nCode is now working\n\n", "author": "chryswoods"}, {"date": "2008-11-02T12:46:42.278068Z", "commit": "772", "message": "I'm still debugging the wrong MC energy problem...\n\n", "author": "chryswoods"}, {"date": "2008-11-02T11:04:11.719756Z", "commit": "771", "message": "I am debugging the Monte Carlo moves. In test/SireMove/rigidbodymc.py I have two MC simulations;\nOne has the box of water using a single InterCLJFF forcefield, while the other has the\nsame box split over two InterCLJFF forcefields and a InterGroupCLJFF forcefield. Both\nsystems have the same energy (hence the forcefields are working), but the MC trajectories\nare different, because the combination of forcefields does not appear to be updating \ncorrectly.\n\nIn looking at this I've changed the code so that I can print out the SwitchingFunction,\nand also so that I can set the random number generator used by a collection of moves\n(hence now, for the first time, I have completely deterministic and repeatable MC \nsimulations - the first ten steps of the water box should have energies;\n\nInitial energy = -16364.5 M L^2 T-2 Q-1\nEnergy = -16363.6 M L^2 T-2 Q-1\nEnergy = -16363.2 M L^2 T-2 Q-1\nEnergy = -16363 M L^2 T-2 Q-1\nEnergy = -16363 M L^2 T-2 Q-1\nEnergy = -16361.8 M L^2 T-2 Q-1\nEnergy = -16362.4 M L^2 T-2 Q-1\nEnergy = -16362.4 M L^2 T-2 Q-1\nEnergy = -16362.3 M L^2 T-2 Q-1\nEnergy = -16362.4 M L^2 T-2 Q-1\nEnergy = -16362.3 M L^2 T-2 Q-1\nFinal energy = -16362.3 M L^2 T-2 Q-1\nnAccepted() == 8, nRejected() == 2  (80.000000 %)\n\n\n", "author": "chryswoods"}, {"date": "2008-11-01T23:44:42.672403Z", "commit": "770", "message": "I've changed the streaming of RanGenerator so that it is shared when it is saved and loaded.\nThis ensures that one shared RanGenerator isn't turned into lots of identical copies\n(all then serving the same sequence of random numbers!)\n\nThe code is working (on Linux and OS X - on Linux the symbol hiding is working as well, although\nit doesn't appear to reduce the wrapper size much - _Mol.so is 70 MB!)\n\n", "author": "chryswoods"}, {"date": "2008-11-01T21:34:24.565811Z", "commit": "769", "message": "I've fixed a typo in IDOrSet (it was printing \"A and B\" rather than \"A or B\") and I have\nadded operator& and operator| to the ID types in the hope that these will get exported\ncorrectly to python (as operator&& and operator|| don't - it is also nice that all\nversions of +, and, && and & do the same thing, and *, or, || and |)\n\nCode seems to be working\n\n", "author": "chryswoods"}, {"date": "2008-11-01T16:03:41.440947Z", "commit": "768", "message": "Really fixed the compilation problem...!\n\n", "author": "chryswoods"}, {"date": "2008-11-01T16:02:38.668644Z", "commit": "767", "message": "Fixed another compilation bug...\n\n", "author": "chryswoods"}, {"date": "2008-11-01T15:48:06.480113Z", "commit": "766", "message": "I've fixed a few problems that were preventing compilation of the python wrappers.\n\n", "author": "chryswoods"}, {"date": "2008-11-01T15:27:27.150238Z", "commit": "765", "message": "I think that I've finished updating all of the ID types now - we'll just have to see if they\nall compile (and all of the python wrappers work - compilation takes forever!)\n\nCode is possible broken\n\n", "author": "chryswoods"}, {"date": "2008-11-01T12:24:36.051467Z", "commit": "764", "message": "I've nearly finished updating all of the ID types.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-11-01T10:33:22.936643Z", "commit": "763", "message": "Adding idandset.hpp\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-11-01T10:32:58.585760Z", "commit": "762", "message": "Renaming idset.hpp to idorset.hpp\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-11-01T10:31:36.867422Z", "commit": "761", "message": "I'm now taking the fixed ID classes and propogating them to the rest of the code...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-11-01T09:09:25.633110Z", "commit": "760", "message": "I've moved all of the inline functions from the SireMol ID classes into the .cpp files, as\nI was getting a weird link error on Linux with symbol hiding (AMD64) (relocation R_X86_64_PC32\nfor the inline MGNum::hash() symbol, which was solved by moving that function out of line).\n\nDespite that, on my mac the RETI simulation appears to be working :-)\n\n", "author": "chryswoods"}, {"date": "2008-10-31T22:48:42.494069Z", "commit": "759", "message": "I've finished updating the ID classes in SireMol (and have even added the IDSet class so\nthat I can now perform \"or\" matching as well as \"and\" matching, e.g.\nMolIdx(0) and (AtomName(\"H01\") and AtomName(\"H02\")) to match the two hydrogens\nin the first water molecule in a box).\n\nSire compiles, links and runs, and I am now in the process of recompiling the \npython wrappers.\n\n", "author": "chryswoods"}, {"date": "2008-10-31T08:55:06.120777Z", "commit": "758", "message": "I've finished adding all of the streaming functions to the SireMol classes. I've still got the\nother modules to do though... (though SireMol contains by far the most ID types).\n\nI've also realised that I should change the IDNumList classes into IdentifierList classes,\nso that I can implement 'or' matching (in addition to the 'and' matching that I can \nalready do).\n\nCode is probably broken!\n\n", "author": "chryswoods"}, {"date": "2008-10-30T22:03:07.348066Z", "commit": "757", "message": "I'm continuing to add the streaming functions for the identifier classes - there are rather\na lot to write...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-30T16:55:56.653475Z", "commit": "756", "message": "I've just seen that there's actually quite a lot of work to do to load and save the various\nidentifiers used in SireMol... (and beyond). I've made a start, but I can see that this will\ntake a long night or two of coding to finish...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-30T14:57:16.051936Z", "commit": "755", "message": "I'm now very nearly ready to run some water QM/MM free energy calculations. I've removed\nthe debugging statements, fixed the crash and am about to go. The only problem now\nis that I've hit a SireError::incomplete_code as I haven't written the code to save and load\nthe AtomIdentifiers  (or indeed any of the identifiers)\n\n", "author": "chryswoods"}, {"date": "2008-10-30T13:29:25.271140Z", "commit": "754", "message": "I've finished writing the PrefSampler preferential sampling class and it appears to be working.\nI have also updated the API of MoleculeGroup a bit so that I can query the molecule and view\nindicies without having to copy the molecules. This has allowed PrefSampler to update the \nweights without requiring any molecule copies (which can be a little expensive, en-masse!)\n\n", "author": "chryswoods"}, {"date": "2008-10-30T08:53:30.673565Z", "commit": "753", "message": "I am making progress implementing the PrefSampler preferential sampling class.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-29T20:00:14.179173Z", "commit": "752", "message": "I'm working on writing the new preferential sampling class. When writing the new RETI\nscript I realised that I hadn't got around to writing this sampler!\n(partially because of the old difficulty of sampling different views of the same\nmolecule, something that the ViewsOfMol class now solves)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-29T15:38:45.649177Z", "commit": "751", "message": "Removed a broken assertation in VolumeMove (note to self - don't assert on a comparison of\nfloating point numbers!!!!)\n\n", "author": "chryswoods"}, {"date": "2008-10-29T15:09:49.116423Z", "commit": "750", "message": "I've added a 'clearStatistics()' function to Move, Moves, SystemMonitor, SystemMonitors,\nReplica and Replicas so that it is now easy to clear the statistics of a running\nsimulation (e.g. to reset the statistics between replica exchange moves)\n\n", "author": "chryswoods"}, {"date": "2008-10-29T14:09:33.074780Z", "commit": "749", "message": "I've fixed more bugs, added a toString() to the Move classes, and am at a point now\nwhere the RepExReplicas save and load apparently correctly, and the simulation\nis almost ready to run...\n\n", "author": "chryswoods"}, {"date": "2008-10-29T13:36:05.714407Z", "commit": "748", "message": "I've fixed a bug in ViewsOfMol where an assertation failed when a view was removed\n(this was caused by a typo - if (views.isEmpty() == 0) which should be \nif (views.isEmpty() - annoying!)\n\nI've also updated the API of System and MoleculeGroup to make them easier to use.\n\n", "author": "chryswoods"}, {"date": "2008-10-29T11:24:45.697433Z", "commit": "747", "message": "I've found the cause of the missing components bug - the problem was that I was not \nproperly serialising the Values class - I was saving the SymbolID numbers when I should\nhave been saving the System names (as the IDs can change, but the names stay the same)\n\n", "author": "chryswoods"}, {"date": "2008-10-29T11:03:52.406485Z", "commit": "746", "message": "I've fixed the first bug - it was caused by not copying the tmp RepExReplica object that\nwas being loaded into the permanent RepExReplica object (in the QDataStream >> operator)\n\nNow the problem is that I have lost the energy component symbols...\n\n", "author": "chryswoods"}, {"date": "2008-10-29T08:57:19.504402Z", "commit": "745", "message": "I've added a toString() function to the FileHeader class, and am debugging the problem that a\nReplicas object is not being properly loaded back up from a datastream (all of the systems\nare null)\n\n", "author": "chryswoods"}, {"date": "2008-10-28T23:09:10.848170Z", "commit": "744", "message": "I've made more progress writing a RETI simulation script (not committed to Sire), and\nin the process of doing so I have fixed a few bugs and cleaned up the API.\n\nI also updated the physical constants in the last update so that they match the latest\nvalues obtained from the NIST website.\n\n", "author": "chryswoods"}, {"date": "2008-10-28T16:53:34.478958Z", "commit": "743", "message": "I've been fixing bugs and cleaning up the API as I've been writing the new RETI script.\n\n", "author": "chryswoods"}, {"date": "2008-10-28T08:37:31.467369Z", "commit": "742", "message": "I've fixed a bug in AtomIdentifier in that it wasn't calling the correct virtual\nfunctions to select atoms from Molecules, MoleculeGroup and MoleculeGroups objects.\n\n", "author": "chryswoods"}, {"date": "2008-10-27T22:40:21.400796Z", "commit": "741", "message": "Forgot a function in ViewsOfMol...\n\nThe Python wrappers for SireMol now compile and work correctly.\n\n", "author": "chryswoods"}, {"date": "2008-10-27T22:23:25.010198Z", "commit": "740", "message": "I've finished writing SpecifyMol and now all of Sire compiles. I'm now compiling the python\nwrappers (to see if they can!) so that I can test MolAtomID.\n\n", "author": "chryswoods"}, {"date": "2008-10-27T16:56:42.695043Z", "commit": "739", "message": "I've added a MolAtomID class, that has necessitated adding MolMolID and SpecifyMol...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-26T22:29:12.666948Z", "commit": "738", "message": "I've fixed RDFMonitor so that it takes the system space into account when it calculates\nthe interatomic distances. I've also optimised the distance calculations, so that they\nare now at least twenty times faster than before (generating a complete O-O and O-H RDF\non my water box takes just a second, compared to around twenty seconds before - and that\nwas without periodic boundaries). - see test/SireSystem/rdf.py\n\n\n", "author": "chryswoods"}, {"date": "2008-10-26T19:28:31.379744Z", "commit": "737", "message": "I've finished the RDFMonitor class and written a test for it (test/SireSystem/rdf.py) - it\nappears now to do exactly what I want (though it is a little inefficient - this stems\nfrom the atom selection code being very slow!)\n\n", "author": "chryswoods"}, {"date": "2008-10-26T16:52:04.554519Z", "commit": "736", "message": "I've implemented most of the RDF monitor. The only thing missing is the part that actually\nscans the system for atoms and calculates the interatomic distances!\n\n", "author": "chryswoods"}, {"date": "2008-10-26T12:43:00.682565Z", "commit": "735", "message": "I've extended the Histogram class so that it can be derived into template specialised\nclasses (so that I can have a histogram of Lengths, or Energies). This will lead\nto better type safety when using the histogram's public API.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-25T17:14:48.601085Z", "commit": "734", "message": "I've added an RDF class that will be used to collect and calculate an RDF. This is based\non top of the HistogramRange and Histogram classes.\n\n", "author": "chryswoods"}, {"date": "2008-10-24T22:45:33.860488Z", "commit": "733", "message": "I've added a Histogram class (with helpers) so that I can begin implementing the RDF\nclass. I've added my own histogram as I want to have a nice API, and couldn't\nfind any existing APIs that I liked.\n\n", "author": "chryswoods"}, {"date": "2008-10-24T15:42:25.622347Z", "commit": "732", "message": "I've seen one Molpro crash, so I've applied a fix where the output file is read a second\ntime if the output line is not found (thereby giving a chance to write the file fully to\ndisc if this is a buffer problem), and I've also added a change to API to allow\nmultiple attempts to get the QM energy (with a default of 5 attempts).\n\nSo far, I've run hundreds of QM jobs now without error (or indeed, so far, without\nany retries either).\n\n", "author": "chryswoods"}, {"date": "2008-10-24T13:53:18.962481Z", "commit": "731", "message": "I've rewritten the Molpro controller to use std::system and to read and write files. The modifications\nseem to work - the test/Squire/molproff.py script runs 100 Molpro jobs in succession without any\ncrashes. I think one of my problems may have been that I used QFile.readAll(), which perhaps\nwasn't returning the entire file, which was what I assumed.\n\nI've also fixed a bug in Move, where the space and coordinates property names weren't being\ncopied, and in PropPtr, which used operator= to do comparison (instead of operator==) (!!!)\n\n", "author": "chryswoods"}, {"date": "2008-10-24T10:20:48.170948Z", "commit": "730", "message": "I've changed the molpro interface over to use std::system, and so that it writes out the input\nfile to disc, writes the output to disc, then reads output from disc. This is to try and remove\nthe weird errors I had when Sire thought that molpro had finished when it patently hadn't. Also,\nI hope that this will allow Sire to work with OpenMPI (which deadlocked with QProcess)\n\n", "author": "chryswoods"}, {"date": "2008-10-24T08:14:26.855984Z", "commit": "729", "message": "I've fixed the problem with PeriodicBox - I'd got the boxes the wrong way around when I was changing\nthe positions of the molecules. It all looks ok now.\n\n", "author": "chryswoods"}, {"date": "2008-10-23T15:20:35.565069Z", "commit": "728", "message": "I've got the PDB writer working, but this has shown me that the volume changes are not\nworking (test/SireVol/changevolume.py produces some weird output - all of the waters\nget pushed up into the corners of the box - this will need fixing)\n\n\n", "author": "chryswoods"}, {"date": "2008-10-23T09:47:41.267810Z", "commit": "727", "message": "I've written quite a lot of the PDB writer now - it can now write most of what it can read\n(the reader can read a *lot* from a PDB file!)\n\nThe code is now compiling, but it needs testing.\n\nCode may be broken\n\n", "author": "chryswoods"}, {"date": "2008-10-23T07:55:51.687860Z", "commit": "726", "message": "During testing of the volume move classes I've realised that I haven't written the new PDB writer!\nI am no writing the PDB writer...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-22T18:53:39.455060Z", "commit": "725", "message": "I've now written (and wrapped) the VolumeMove class. It needs testing, but I think that I am\nnow back where I was last year, in terms of functionality - I should now be able to run\nNPT MTSMC QM/MM Monte Carlo free energy simulations again!\n\n", "author": "chryswoods"}, {"date": "2008-10-22T11:11:38.732465Z", "commit": "724", "message": "I've updated the volume and move classes so that moves work by mapping from the current space\ninto an infinite cartesian space - then they perform the move in the infinite space - then\nthey map back to the original space before updating the molecule in the system.\n\nThis now needs to be tested.\n\n", "author": "chryswoods"}, {"date": "2008-10-22T07:54:18.788562Z", "commit": "723", "message": "I've finished changing the property access functions in System and ForceFields so that it is\nnow possible to cleanly get and set properties using these interfaces. This will make the \nvolume move class easier to write! (and also the space mapping functions of the other\nmoves, which are necessary to map the molecules back into the box after every move)\n\n\n", "author": "chryswoods"}, {"date": "2008-10-21T19:49:53.405966Z", "commit": "722", "message": "I've added a FreeEnergyAverage class to simplify the accumulation of free energy averages,\nand I am now working on sorting out the property system to get the system space so I can\nperform volume moves. I'm rewriting the ForceFields properties() type functions so that\nthey return just the property, validating that it is the same in all forcefields. This way,\nI can set and retrieve the space property from the System interface and know that the\nspace is the same in all forcefields (which it kind of has to be, otherwise mapping the\nmolecule from one side of the box to the other could really screw up the forcefield if\nit had a different space!)\n\nI will probably want to rewrite this at a future date as this is not totally satisfactory\n(it is not as flexible as I'd like), but for now, with deadline looming, it is the\nbest course of action.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-21T12:52:34.457368Z", "commit": "721", "message": "I've now written and tested the new accumulator classes (and have wrapped them\nin Python - well Py++ wrapped them - Py++ is excellent!)\n\n", "author": "chryswoods"}, {"date": "2008-10-21T09:51:22.839214Z", "commit": "720", "message": "I've written the code to calculate an average (it seems like a lot of code for such a simple\noperation - oh well ;-)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-21T07:53:50.629626Z", "commit": "719", "message": "I am now writing the classes that will allow for the monitoring of system components\n(e.g. to accumulate the average energy difference which can then be converted into\na relative free energy)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-20T21:26:48.396151Z", "commit": "718", "message": "I've adapted the code so that it swaps systems between replicas, but leaves the system \nmonitors behind (this was achieved by updating the API of System to give\ndirect access to the SystemMonitors, ForceFields and MoleculeGroups objects\nthat make up the system).\n\nI've also updated the SystemMonitors API a little to make it more usable\n(in particular, I can now finally query the frequency of a monitor!)\n\n", "author": "chryswoods"}, {"date": "2008-10-20T20:44:47.715365Z", "commit": "717", "message": "The replica exchange code and test appears to be working correctly (see test/SireMove/retimoves.py).\n\nThe python interface is quite nice, though at the moment the MPI code deadlocks before it\nsubmits any jobs.\n\nI have run into two design problems though;\n\n(1) What should be swapped between replicas? I can't just swap the System() objects, as\n    this would also swap the system monitors, which should remain at the same replica level\n    (as things like the free energy average need to be collected at a fixed lambda value).\n\n    The replica exchange move is a *coordinate* swap move - molecular coordinates are\n    swapped. This is what I have now implemented. However, there are certain coordinates\n    that may be constrained with lambda, so a straight coordinate swap is also not\n    suitable (also - things like the system box needs to move with the coordinates\n    as well - this could get messy!)\n\n(2) There isn't any way yet to record the history of the replicas. Again, this comes\n    back to what exactly is being swapped, and how that is tagged.\n\nI think, having just thought about it, that it may be best to swap the systems after \nall, and to swap the monitors back. \n\nThe history problem can then be solved by making the user name each system. This provides\nan ID that the user can track as and when they want (as they can plot the different \nlambda values of a particular system ID).\n\n", "author": "chryswoods"}, {"date": "2008-10-20T15:56:49.397594Z", "commit": "716", "message": "I've written the generic replica exchange test - needs to be compiled and tested\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-20T11:36:40.279792Z", "commit": "715", "message": "I've fixed the deadlock - it was caused because the global mutex wasn't recursive, so when\none global object was created that needed another global object, it tried to lock the \nmutex twice in the same thread, and so deadlocked. I've changed the global mutex to\nmake it recursive.\n\n(also, the previous version of Sire is currently compiling on my linux desktop, so\nit looks like the large changes in Property were portable).\n\n", "author": "chryswoods"}, {"date": "2008-10-20T11:02:21.438541Z", "commit": "714", "message": "I've added warnings to the create_wrappers.py script that tell the user if they\nhaven't set the necessary environmental variables to find the Qt, boost and GSL\nheader files.\n\n", "author": "chryswoods"}, {"date": "2008-10-18T00:45:11.115846Z", "commit": "713", "message": "Some fixes were necessary, but now all of the python wrappers compile and the code appears\nto be working. Some simple playing with Ensemble in ipython shows that it is doing what\nI expect. There is an infinite loop bug though when trying to create some RepExReplicas.\n\n", "author": "chryswoods"}, {"date": "2008-10-17T23:47:05.001336Z", "commit": "712", "message": "I've finished propogating the changes in Property throughout the rest of the code, and it\nall compiles and seems to work (the 'sire' application runs and returns the right energy).\n\nOk, so I'll admit that this change took longer than I thought (I thought it would be \nabout an hour or so to do, but it was more involved than I thought as it involved\nrenaming lots of important classes, e.g. MoleculeGroup, ForceField etc.).\n\nCode seems to be working, but the Python wrappers need to be regenerated and tested\n\n", "author": "chryswoods"}, {"date": "2008-10-17T17:17:24.295254Z", "commit": "711", "message": "While writing the ReplicaRunner class I noticed that the syntax and use of the Property\nclasses wasn't quite right. I've refactored the Property classes so that Property is now\nthe base class, and PropPtr<T> is now the pointer. This makes it a lot more logical, and\nsolves my many naming problems (e.g. there are no more SpaceBase objects, and I've got\nrid of MolGroup and MolGroups, so that I can have MoleculeGroup and MoleculeGroups)\n\nI'm propogating the changes up through the rest of the code.\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2008-10-17T12:07:49.451648Z", "commit": "710", "message": "I've updated RepExReplica and RepExReplicas to use the ensemble class - this has made things\nmuch cleaner and easier. I still need to work out how I will get, and what I mean by the \nsimulation space (given every forcefield can have a different space...)\n\nNow need to fill in ReplicaRunner so I can compile, link and test everything.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-16T16:30:27.773293Z", "commit": "709", "message": "I've added an Ensemble class that allows me to describe the ensemble that would be generated\nby a Move (e.g. NVE, NPT etc.). I've also now updated Move so that it will return and use\nthe ensemble when setting parameters (e.g. an NVT move won't let you set the pressure).\n\nThis is all so that the replica exchange moves will know which test to perform when they\ncompare a pair of replicas.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-16T08:37:48.362798Z", "commit": "708", "message": "I'm working on the interface that allows the thermodynamic parameters of moves (e.g. temperature,\npressure) to be set and queried (e.g. move.isConstantTemperature(), move.temperature() etc.)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-15T23:36:13.873233Z", "commit": "707", "message": "I've implemented most of the new replica exchange design. There is now a clear separation between\nthe replica data (in Replica, Replicas, RepExReplica and RepExReplicas), the code to perform sampling \nof the replicas (in ReplicaRunner, BasicRepRunner, MPIRepRunner), and the code to actually perform\nthe replica exchange moves (will be in RepExMove)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-14T15:47:34.999818Z", "commit": "706", "message": "I've written most of the replica exchange code...\n\nHowever, I've realised that the design is not right - the information about the move is in the wrong\nplace and this is not extendable to generic replica exchange moves over temperature, pressure etc.\n\nI've worked out a new design, which will replace pretty much everything that I have just written.\n\nC'est la vie\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-07T15:48:14.111617Z", "commit": "705", "message": "I'm now adding the code that will let me run replica exchange simulations from\nwithin Sire (rather than having to do it all using messy python+ssh scripts!)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-10-06T15:58:44.306808Z", "commit": "704", "message": "I've finished the MTSMC class, but have run into difficulties with molpro crashing, or\nthe MPI deadlocking etc.\n\nComputers can be annoying.\n\n", "author": "chryswoods"}, {"date": "2008-10-06T07:49:48.272464Z", "commit": "703", "message": "I've written most of the new MTSMC multiple timestep Monte Carlo move class. It is is classes\nsuch as this that the power of Sire is evident (it is so clear what is happening, which is\nmore than can be said for the MTSMC implementation in ProtoMS)\n\n", "author": "chryswoods"}, {"date": "2008-10-05T16:33:53.278318Z", "commit": "702", "message": "I've got QM/MM working on a remote node on my Mac!!!!!\n\nThere are now no lockups, QMutex errors or weird events - it just does what I expect.\n\nI have also confirmed that binary files written using 64bit linux are readable by\n32bit Mac.\n\nI have also confirmed that I get a deadlock using OpenMPI on Linux 32bit and Linux 64bit,\nso I have switched to mpich2, which doesn't deadlock.\n\nI've fixed a bug in QMFF and QMMMFF whereby the FF wasn't been set as dirty,\nso the energy wasn't being recalculated. Now QM and QM/MM simulations appear to\nwork properly.\n\nThe only problem now is the reappearance of the old template casting problem - \nAtomProperties<Element> created in Squire is not seen as the same as\nAtomProperties<Element> created in SireMol. I've turned off symbol hiding,\nbut this doesn't seem to have fixed the problem. AtomProperties<Element> is\nfully instantiated in libSireMol, so something weird is occuring. This problem\nwill probably cause me the biggest difficulty with portability and testing...\n\n", "author": "chryswoods"}, {"date": "2008-10-05T16:26:29.382988Z", "commit": "701", "message": "I've changed create_wrappers.py so that it gets the paths to the Qt, boost and GSL header\nfiles from environmental variables\n\n", "author": "chryswoods"}, {"date": "2008-10-05T15:01:25.402698Z", "commit": "700", "message": "I've added configure tests to see if lseek64 is available, and if not, then a stub function\nis used (thereby removing the symbol unavailable dlopen errors when using mpich2).\n\nI have also fixed the QMutex errors on exit by switching over to using Q_GLOBAL_STATIC \nand making sure that the functions check whether or not the static objects\nstill exist. The cause of the error was NodeDeleter, which was running a background\nthread that was checking a global static mutex. I've moved this global static\nmutex so that it is a local mutex in a global NodeDeleter object, and have added\na QThread::wait() in the destructor so the mutex won't be deleted until the \nbackground NodeDeleter thread has exited (and thus stoped using the mutex).\n\n", "author": "chryswoods"}, {"date": "2008-10-05T11:29:36.219746Z", "commit": "699", "message": "The code now compiles and runs on Fedora 9 (64 bit, compiled with gcc 4.3). I needed to make a few\nmodifications to fix some compile bugs.\n\nI've also switched mpinode to use Q_GLOBAL_STATIC for the QMutex pointers, in an attempt to \nfix the QMutex errors on shutdown. I can't test it though, as I deadlock on linux, and \nhave lseek64 symbol errors on my mac again!\n\n", "author": "chryswoods"}, {"date": "2008-10-03T16:08:40.463927Z", "commit": "698", "message": "Sire compiles and runs on Linux (though while an MPI job works, it deadlocks when the results\nare returned). Linux doens't have the lseek64 problem.\n\n", "author": "chryswoods"}, {"date": "2008-10-03T15:19:47.073243Z", "commit": "697", "message": "Had to do Mol as well!\n\nAll of the modules compile and link, though when running it crashes with an error because\nSireMPI can't find the symbol lseek64\n\n", "author": "chryswoods"}, {"date": "2008-10-03T15:12:33.362672Z", "commit": "696", "message": "I've fixed a couple of missing link libraries for the Qt and Units modules.\n\n", "author": "chryswoods"}, {"date": "2008-10-03T14:46:27.429959Z", "commit": "695", "message": "I've updated the build system to enhance portability - and have *finally* written a FindSire.cmake\n(that uses the cmake EXPORT to write the files, so it should hopefully be portable). Sire builds \nand links, and the python wrappers are now busy building...\n\n", "author": "chryswoods"}, {"date": "2008-10-03T07:55:58.223628Z", "commit": "694", "message": "I've had to move the MPI library finder into the main CMakeLists file as it is needed by \nthe MPI module too. I need to write a FindSire that gets all of its dependent libraries\nautomatically.\n\n", "author": "chryswoods"}, {"date": "2008-10-02T22:57:30.916221Z", "commit": "693", "message": "I've updated FindPython and copied the new FindBoost so that the python wrappers compile and link\non Linux. Now to test that they still work on my Mac.\n\n", "author": "chryswoods"}, {"date": "2008-10-02T15:54:22.427689Z", "commit": "692", "message": "I've updated FindPython.cmake to hopefully make it work better on Linux\n\n", "author": "chryswoods"}, {"date": "2008-10-02T07:54:44.171503Z", "commit": "691", "message": "I've tried the code using mpich2 (version 1.0.7 - mpich2-1.0.7) and that doesn't lock up when a process\nexits. The only requirement now is that <mpi.h> is included before anything else. I've made this change\nand now Molpro is run correctly on a remote process. The simulation doesn't appear to make any moves\nthough, so I will need to investigate that...\n \n", "author": "chryswoods"}, {"date": "2008-10-01T20:42:33.775664Z", "commit": "690", "message": "I've found that the combination of QThread, MPI and QProcess leads to a lock-up - this is \nbecause QProcess is not told that the sub-process has finished, so QProcess::waitForFinished()\nblocks forever. I've written a test that confirms this (techdocs/testthreadprocess.cpp),\nwhich shows that you get lock up if MPI::Recv is called in a background thread, while\nanother thread runs the QProcess. (it also locks up if MPI::Probe or Iprobe are used).\n\nI'll need to look deeper to find the exact cause of the problem.\n\nI am using Mac OS X 10.5.5, gcc 4.2.1 (apple 5564), Qt 4.4.0 and OpenMPI 1.2.3\n\n", "author": "chryswoods"}, {"date": "2008-10-01T15:34:10.453335Z", "commit": "689", "message": "I've written the code to merge CoordGroupArrays and CoordGroupArrayArrays into a single CoordGroup\nand now the QM/MM energies are being calculated correctly. I've also timed the different parts\nof the calculation for a single QM TIP4P in a box of TIP4P (periodic boundaries, 15 A cutoff,\nHF vdz basis) and the results show that writing the command file from scratch, then parsing the \noutput takes a negligable time compared to the actual runtime of molpro (see below). You can\ngenerate this by running \"python test/Squire/molproff.py\"\n\nLoading and parameterising the molecules...\n... took 569 ms\nWriting the command file took 1 ms \nTo start process took 4 ms \nTo finish writing command file took 4 ms \nTo close write channel took 4 ms \nTo finish molpro took 595 ms \nTo read all output took 596 ms \nParsing output took 0 ms \n-47707.5 M L^2 T-2\nGenerating lattice charges took 2 ms \nWriting the command file took 18 ms \nTo start process took 3 ms \nTo finish writing command file took 4 ms \nTo close write channel took 4 ms \nTo finish molpro took 1908 ms \nTo read all output took 1909 ms \nParsing output took 0 ms \n-47729.8 M L^2 T-2\n-22.2902 M L^2 T-2\n\n", "author": "chryswoods"}, {"date": "2008-10-01T07:52:02.630178Z", "commit": "688", "message": "I've written most of the code now to add lattice point charges to the QM command file.\nI've just got to finish writing the code to allow merging of CoordGroupArrays and \nCoordGroupArrayArrays back into a single CoordGroup.\n\n", "author": "chryswoods"}, {"date": "2008-09-30T21:35:56.931976Z", "commit": "687", "message": "I've nearly finished writing the code to allow QM/MM using Molpro in Sire (the new version\nof Sire - QM/MM using the old version was done over a year ago). This is now much more\nflexible than the old version, and more easily extendable to support other QM programs.\n\nThe code works, but the lattice point function is just a stub, so it is still just QM.\n\n", "author": "chryswoods"}, {"date": "2008-09-30T12:54:33.262701Z", "commit": "686", "message": "I've allowed the user to change the temporary directory of Molpro by letting them\nset the TMPDIR environmental variable for the Molpro process.\n\n", "author": "chryswoods"}, {"date": "2008-09-30T12:48:06.225843Z", "commit": "685", "message": "I've fixed the TempDir class (it now removes the files correctly) and I have added this class to\nMolpro so that its output is now completely hidden.\n\n", "author": "chryswoods"}, {"date": "2008-09-30T07:55:04.390130Z", "commit": "684", "message": "I've added a TempDir class so that I can hide away output files that are created by the QM programs.\nIt works (a little), but TempDir is not being correctly removed.\n\n", "author": "chryswoods"}, {"date": "2008-09-29T15:50:05.213413Z", "commit": "683", "message": "I've got the QMFF working - test/Squire/molproff.py shows a working QMFF that uses Molpro to \ncalculate the energy of a single water. This is all wrapped up in Python as well :-)\n\n", "author": "chryswoods"}, {"date": "2008-09-27T21:51:43.647982Z", "commit": "682", "message": "I am now fleshing out the 'Molpro' QM program handle. Using QM program handles is much easier\nthan writing a new QM forcefield for each different program (and version!). It works\nas QM energies take so long the virtual function call is insignificant (maybe I could do\nthe same thing with the MM energies?)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-09-27T15:59:07.580599Z", "commit": "681", "message": "I've updated create_all_wrappers.py to add the new modules\n\n", "author": "chryswoods"}, {"date": "2008-09-27T15:55:00.541849Z", "commit": "680", "message": "I've put most of QMFF and QMMMFF together now, and they seem to compile. I've decided to separate\nthe mechanics of running the QM program out into the QMProgram hierarchy of classes (so that\nQMFF and QMMMFF can then work with lots of different QM programs / program versions). I have\njust scoped out the names of these classes, and will try to write more of them after dinner!\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-09-26T22:09:34.191878Z", "commit": "679", "message": "I've written the Coulomb and LJ potential classes, and created all of the variants of the \nforcefields (InterCoulombFF, IntraLJFF, InterGroupLJFF etc.). Aren't templates wonderful!\n\nI am now compiling the python wrappers so that I can compile them (well I am really going\nto bed - I will test it tomorrow morning)\n\n", "author": "chryswoods"}, {"date": "2008-09-26T15:51:02.609451Z", "commit": "678", "message": "I'm now working on sorting out the QM forcefields so that I can run QM/MM simulations again. These\nshould now be straightforward to write, as they are just extensions of the core forcefield\nclasses. I have written a QMPotential, which will be used for QM only calculations. I am now\nin the process of writing CoulombPotential and LJPotential which will be used for the QM/MM\ninteraction (these are based heavily on CLJPotential - and will also be turned into forcefields\nonce they are ready - e.g. InterCoulombFF, IntraLJFF, InterGroupLJFF etc.)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-09-26T09:55:38.519478Z", "commit": "677", "message": "I've fixed the problem of incorrect energies on the remote node. It was caused by CLJParameter using\nan ID number to identify LJ parameters (via a global LJParameter database). These ID numbers\nwere not portable between nodes, so I have changed the streaming functions for CLJParameter to\nstream the actual LJParameter, rather than the LJParameter ID.\n\nNow I've done that, the remote node looks like it is calculating the right energy and performing the\nsimulation correctly. I still however have problems with invalid QMutex errors when the program\nexits.\n\n", "author": "chryswoods"}, {"date": "2008-09-25T22:14:15.626109Z", "commit": "676", "message": "Ok, I've done this for both mutexes in mpinode.cpp, and it hasn't got rid of the mutex lock error...\n\nOh well, time for bed.\n\n", "author": "chryswoods"}, {"date": "2008-09-25T22:06:09.644585Z", "commit": "675", "message": "I've moved all MPI communication in SireMPI into a private communicator (so it won't interfere\nwith other libraries), and I have also solved the QMutex problem by using a pointer\nto a QMutex (as it was, I think, caused by a static mutex being used by a destructor of a static\nobject, after the static mutex had already been destroyed - changing the static mutex so that\nit is a pointer means that it is now not destroyed, but does raise the problem of locking\nthe creation of the mutex...\n\n", "author": "chryswoods"}, {"date": "2008-09-25T15:57:17.952706Z", "commit": "674", "message": "I am continuing to debug the MPI implementation. I have also added a sire_python executable\nthat provides an MPI-aware python interpreter.\n\nSo far, a simulation will run on the master node (communicated via MPI), but, while it will\nrun on a remote node, the energies are rubbish! Also, I am getting some QMutex errors reported\nonce the node has been returned to the cluster.\n\n", "author": "chryswoods"}, {"date": "2008-09-24T10:06:39.253536Z", "commit": "673", "message": "I've fixed the move of ThirdParty code and have also removed unused extra code (SqliteDriver,\nTest and UnitTest - I will be using CTest for unit testing)\n\n", "author": "chryswoods"}, {"date": "2008-09-24T07:53:54.050753Z", "commit": "672", "message": "I've fixed the streaming problems with RanGenerator (I had missed the last integer from the \ngenerator state), and I have also moved the third party code out of a separate library and\ninto the library that uses that code.\n\nThe MPI simulation is still crashing (now at PropertyMap::operator[](const QString&)) and\nit also deadlocks occaisonally at mpipromise.wait()\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2008-09-23T07:53:14.295831Z", "commit": "671", "message": "I've finished writing MPISim, and now SireMove fully compiles and links. Now for Python wrapping \nand testing :-)\n\n\n", "author": "chryswoods"}, {"date": "2008-09-22T15:56:12.631012Z", "commit": "670", "message": "I've done most of the work of integrating the SireMPI code into SireMove. MPISimWorker really\nsimplifies LocalSim and ThreadSim as well (so much so that I think the name of this class\nis wrong!)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-09-22T07:54:18.731179Z", "commit": "669", "message": "I've written most of the MPISimWorker class. I need to run and catch my bus now! \n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-09-21T14:43:18.450983Z", "commit": "668", "message": "I've got SireMPI to compile and link. I now need to connect it to SireMove (by updating MPISim and \nMPISimWorker) and then it can be tested.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-09-20T14:35:45.538398Z", "commit": "667", "message": "I've nearly finished the rewrite of SireMPI - the new code is much cleaner and more logically\narranged.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-09-19T10:41:26.882461Z", "commit": "666", "message": "I am in the process of splitting out the MPI code that is not specific to SireMove so that\nit can be used by other modules (if necessary). In the process I have also upgraded the \nCMake files so that they work with cmake 2.6 (and have bumped up the minimum requirement\nto cmake 2.6)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-09-18T12:23:59.257037Z", "commit": "665", "message": "I'm trying to get the MPI backend to actually run a simulation - so far I am just getting deadlocks\nand segfaults... The code is filled with debug statements...\n\n\n", "author": "chryswoods"}, {"date": "2008-09-17T12:37:01.013587Z", "commit": "664", "message": "Fixing some compile errors on Linux...\n\n", "author": "chryswoods"}, {"date": "2008-09-15T22:57:09.343825Z", "commit": "663", "message": "I've added a little more system information to the file header. This will allow me to debug\nproblems caused by different compilers or operating systems (although, hopefully the files\nwill be highly portable!)\n\n", "author": "chryswoods"}, {"date": "2008-09-15T19:46:23.050789Z", "commit": "662", "message": "I've finished adding the header data. The file header now contains lots of metadata\nthat should help manage the provedance of sire files.\n\n", "author": "chryswoods"}, {"date": "2008-09-15T17:57:48.325179Z", "commit": "661", "message": "I've nearly finished updating the header data, but must now make some dinner!\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2008-09-15T17:12:47.146473Z", "commit": "660", "message": "I'm adding some more data to the file header...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-09-15T11:59:43.876600Z", "commit": "659", "message": "I've got full save and load to a binary file format now, with version data for all of the libraries,\nand also header data saying which libraries are needed to load a file. This is used by the python\nwrappers to import the necessary modules before the file is loaded (thereby allowing scripts\nlike test/SireStream/testload.py that loads an entire system in only three lines).\n\n", "author": "chryswoods"}, {"date": "2008-09-14T23:38:01.920423Z", "commit": "658", "message": "I've (finally) added proper shared object support to SharedDataStream, so that shared objects\nare only streamed once, and then referenced. This cuts the data requirement for the water\nbox from 9 MB to 4 MB.\n\nI have also now added data compression, and set up adding a header to the object data file format.\nThis has further reduced the space needed for the water box to 420 kB.\n\n", "author": "chryswoods"}, {"date": "2008-09-12T15:05:18.126587Z", "commit": "657", "message": "I've got streaming of the System working! test/SireStream/teststreaming.py shows that a system\ncan be streamed to binary data, then re-read, returning the same energies and energy components.\n\nGreat :-)\n\n", "author": "chryswoods"}, {"date": "2008-09-11T13:41:39.164352Z", "commit": "656", "message": "I've now got the object registration scheme and binary load/save code implemented for all of\nthe modules of Sire. I've tested a lot, and most work. There is a problem loading System\nfrom its binary data (e.g. test/SireStream/teststreaming.py). I will investigate further.\n\n", "author": "chryswoods"}, {"date": "2008-09-11T07:50:24.308702Z", "commit": "655", "message": "I've now got the object registrars working for SireCAS.\n\n", "author": "chryswoods"}, {"date": "2008-09-11T07:49:56.393551Z", "commit": "654", "message": "I've now got the object registrars working for SireCAS.\n\n", "author": "chryswoods"}, {"date": "2008-09-10T21:01:26.702921Z", "commit": "653", "message": "I've done some of the support work necessary to allow the python conversion from void code to work.\nStill a little more to do...\n\nCode is probably broken!\n\n", "author": "chryswoods"}, {"date": "2008-09-10T21:00:07.578898Z", "commit": "652", "message": "I've worked out how to allow void pointers to be converted to python objects (I have built\na type registry built on top of QMetaType). This now allows my objects to be easily saved\nand restored to binary blobs without any user involvement (the user doesn't have to \nguess the type of the data - they just load it!)\n\n", "author": "chryswoods"}, {"date": "2008-09-09T15:51:20.316310Z", "commit": "651", "message": "I'm adding some code that will let me better test the streaming functions. However, this code\nis itself broken...\n\n", "author": "chryswoods"}, {"date": "2008-09-08T15:44:22.664558Z", "commit": "650", "message": "I've fixed the infinite recursion bug when streaming a system, and streaming now completes without\nerror. However, the MPI job hangs before extracting the data. I am now writing some tests of the \nstreaming and extraction functions.\n\n", "author": "chryswoods"}, {"date": "2008-09-07T16:29:25.771278Z", "commit": "649", "message": "I've cleaned up the MPI code enough that is now all compiles and links. The test/SireMove/simulation.py\nscript works, but the MPI code still needs testing.\n\n", "author": "chryswoods"}, {"date": "2008-09-06T15:02:52.116445Z", "commit": "648", "message": "I've updated all of the exceptions so that they can be packed into a binary QByteArray.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-09-05T15:57:06.937946Z", "commit": "647", "message": "I've got the packing of exceptions to binary data arrays working, and the test of it works too!\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-09-03T20:26:08.864719Z", "commit": "646", "message": "I think that I've worked out how errors will be propagated from worker nodes to the master node and\nfrom worker threads to the master thread.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2008-09-03T15:51:45.906059Z", "commit": "645", "message": "Making progress implementing the MPI functionality\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2008-09-03T07:51:27.086772Z", "commit": "644", "message": "I'm making good progress sorting out how the MPI communication will work.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-08-08T21:07:24.713235Z", "commit": "643", "message": "I'm filling in the classes that I need for the MPI runs to work...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-08-08T17:05:32.092936Z", "commit": "642", "message": "I've added the framework to allow identification and manipulation of remote nodes that \nare accessed via MPI. This is the first step to allowing the simulation to be run\non these remote nodes.\n\n", "author": "chryswoods"}, {"date": "2008-08-07T10:39:21.295384Z", "commit": "641", "message": "I've turned off OpenMP and now the background simulation seems to be working\n(see test/SireMove/simulation.py)\n\n", "author": "chryswoods"}, {"date": "2008-08-07T09:16:07.875379Z", "commit": "640", "message": "I forgot to commit changes I had previously made to the python wrappers...\n\n", "author": "chryswoods"}, {"date": "2008-08-06T15:59:15.722347Z", "commit": "639", "message": "I've found the cause of the crash - the openMP on the Mac can't cope if OMP_PARALLEL starts in a\nbackground thread. The problem is that the gomp_thread() function returns 0 as it has not\nbeen properly initialised. It works correctly on linux though, so for the moment I will\njust disable openMP on mac.\n\n", "author": "chryswoods"}, {"date": "2008-08-06T14:24:09.367290Z", "commit": "638", "message": "I've just upgraded to XCode 3.1, which includes gcc 4.2, and I found that RTTI stopped working\n(even though my RTTI test code said that it was still working...)\n\nSomething is going wrong with symbol hiding, so I have turned symbol hiding off and the RTTI\nproblems have gone away (symbol hiding has to be turned off for BOTH the core library\nand for the python bindings)\n\n", "author": "chryswoods"}, {"date": "2008-08-01T16:02:19.858051Z", "commit": "637", "message": "Debugging my broken threaded code...\n\n", "author": "chryswoods"}, {"date": "2008-08-01T13:20:39.446876Z", "commit": "636", "message": "The SimController and Simulation classes appear to be working. Now to write a ThreadSim so that I can \nrun in the background...\n\n", "author": "chryswoods"}, {"date": "2008-07-31T16:52:32.334717Z", "commit": "635", "message": "I think I've worked out how I will allow threaded control of a running simulation. I've written\na SimController class and have implemented it with the SameMoves class in moves.cpp. Now I just\nneed to write a ThreadSimulation to go with it...\n\n", "author": "chryswoods"}, {"date": "2008-07-28T14:04:19.119799Z", "commit": "634", "message": "I've written a simulation class that provides a handle for a running simulation. This will be used\nto transparently hide the details of simulations that are running in background threads, or running\non remote nodes via MPI.\n\n", "author": "chryswoods"}, {"date": "2008-07-18T07:55:16.431191Z", "commit": "633", "message": "I've finished writing SystemMonitors and have integrated it with System.\n\n", "author": "chryswoods"}, {"date": "2008-07-17T07:55:12.251275Z", "commit": "632", "message": "I'm now working on SystemMonitors and have added some ID classes to identify individual\nsystem monitors.\n\n", "author": "chryswoods"}, {"date": "2008-07-16T07:52:11.465744Z", "commit": "631", "message": "I've written the base classes of SystemMonitor and have also wrapped up QList<Move>\n\n\n", "author": "chryswoods"}, {"date": "2008-07-15T07:53:53.933814Z", "commit": "630", "message": "I've written and wrapped the WeightedMoves class.\n\n", "author": "chryswoods"}, {"date": "2008-07-14T07:52:35.741487Z", "commit": "629", "message": "I've written the 'Moves' classes... (not compiled though as I have to go and catch my bus!)\n\n", "author": "chryswoods"}, {"date": "2008-07-11T21:55:38.168789Z", "commit": "628", "message": "Small bug in RigidBodyMC - I wasn't recalculating the old energy properly!\n\nNow the acceptance ratio is better (near 50%) and it is a little faster (3.2 - 3.5s for 1000 moves)\n\n", "author": "chryswoods"}, {"date": "2008-07-11T21:38:33.233830Z", "commit": "627", "message": "I've wrapped up parts of SireMove and have got RigidBodyMC working (see test/SireMove/rigidbodymc.py)\n\nSire takes about 4.5s to do 1000 moves, which is over twice as long as ProtoMS (which takes 2.0s)\n\nAt least it is able to make some moves now :-)\n\n", "author": "chryswoods"}, {"date": "2008-07-11T16:40:19.449269Z", "commit": "626", "message": "I've added Python wrapping for SireSystem...\n\n", "author": "chryswoods"}, {"date": "2008-07-11T16:39:34.292862Z", "commit": "625", "message": "I've moved Move and Moves into SireMove and am in the progress of updating the SireMove classes\nto fit with the new design. In particular, I am adapting Sampler so that it operates\non a MoleculeGroup that it contains. This makes things much easier and removes the dependency\nof Sampler on System.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-07-11T15:04:12.686285Z", "commit": "624", "message": "I've now finished writing the System class. Now I just need the move classes and I can finally\nget back to running some simulations...\n\n", "author": "chryswoods"}, {"date": "2008-07-10T16:59:43.863163Z", "commit": "623", "message": "I'm now working on the SireSystem module.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-07-09T20:39:28.909893Z", "commit": "622", "message": "Commit didn't add the latest current-speed...\n\n", "author": "chryswoods"}, {"date": "2008-07-09T20:37:37.502985Z", "commit": "621", "message": "I've updated CountFlops so that counting flops now adds a negligable amount to the runtime\n(as it uses thread-local storage so does not require any atomic operations or blocking).\n\nAn added bonus is that I can now count and report flops individually from each thread.\n\nThe new current speed of test/speed/water_energy_speed.py are in ideas/current_speed, and\nthe top speed is 845.1 MFLOPS.\n\n", "author": "chryswoods"}, {"date": "2008-07-09T15:48:03.430928Z", "commit": "620", "message": "It looks like the forcefield energy expressions are now working (see test/SireFF/forcefields.py)\n\nI'm nearly ready to run a simulation!\n\n", "author": "chryswoods"}, {"date": "2008-07-09T14:09:31.924219Z", "commit": "619", "message": "I've integrated clone_const_reference so that all functions that need it now use it automatically :-)\n\nIt all appears to work as well\n\n", "author": "chryswoods"}, {"date": "2008-07-09T07:53:35.638369Z", "commit": "618", "message": "I've fixed some bugs with FFMolGroup and have also added a clone_const_reference return policy\nso that const references to base classes in python are now cloned, so that the correct derived\ntype is returned to python.\n\n", "author": "chryswoods"}, {"date": "2008-07-08T11:29:23.170100Z", "commit": "617", "message": "I've filled in the missing code of ForceFields and it all now compiles and links...\n\nI've also allowed the FFComponent derived classes to be fully exposed to Python.\n\n", "author": "chryswoods"}, {"date": "2008-07-08T07:50:42.007070Z", "commit": "616", "message": "I've added the code to build the index for the forcefield expressions.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-07-07T15:40:06.071405Z", "commit": "615", "message": "I am working on the code that allows the use of complex forcefield expressions.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-07-05T14:00:37.805688Z", "commit": "614", "message": "I've cleaned up the code so that now powers are expanded correctly. The code all compiles, is wrapped\nand links.\n\n", "author": "chryswoods"}, {"date": "2008-07-03T14:22:10.717795Z", "commit": "613", "message": "I am fixing problems with the python wrapping of FFID...\n\n", "author": "chryswoods"}, {"date": "2008-07-03T13:57:07.144808Z", "commit": "612", "message": "I've added code to allow a SireCAS expression to be expanded in terms of a powers of a symbol.\nIt's not perfect, but it does (most of) the job. Certainly enough for what I need in ForceFields...\n\n", "author": "chryswoods"}, {"date": "2008-07-03T07:52:02.997296Z", "commit": "611", "message": "I'm continuing to work on ForceFields. As part of this I am now having to write code that\nallows SireCAS expression to be factorised (so that I can extract the scale and power\nfor the symbols in an energy expression)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-07-02T15:52:41.823464Z", "commit": "610", "message": "I am working on adding in the ForceFields class, which holds and manages collections of forcefields.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-07-01T11:07:33.674045Z", "commit": "609", "message": "I've tested making intramolecular moves with the intra-forcefield, and it all appears to be working\nwell. The forcefield is very fast, calculating the intramolecular energy of a box of 1690 waters in\njust 6 ms. (this compares to 200-400ms to calculate the intermolecular energy)\n\n\n", "author": "chryswoods"}, {"date": "2008-06-30T13:05:33.114424Z", "commit": "608", "message": "Angle energies also appear to work!\n\n(see test/SireMM/internalff.py)\n\n", "author": "chryswoods"}, {"date": "2008-06-30T12:22:02.307817Z", "commit": "607", "message": "I've fixed some bugs so that now I can calculate intramolecular bond energies!\n\n(see test/SireMM/internalff.h)\n\n", "author": "chryswoods"}, {"date": "2008-06-30T10:29:21.097794Z", "commit": "606", "message": "I have exposed the operators and free functions of SireCAS (and other modules)\n\n", "author": "chryswoods"}, {"date": "2008-06-27T07:45:52.535820Z", "commit": "605", "message": "I've written some bond hunter classes that can automatically derive the connectivity of a molecule,\nand I have used these classes to test the Connectivity class (and fixing some bugs in the process).\n\n\n", "author": "chryswoods"}, {"date": "2008-06-21T20:39:27.118514Z", "commit": "604", "message": "I've been testing the change in energy code in InterCLJFF, and it seems to work. I fixed a bug, and \nnow a move of a molecule then back results in the same energy.\n\nI've also timed 500 moves (see the 'sire' app), and Sire currently runs at about the same speed\nas ProtoMS 2.1 (500 moves per second).\n\nSire is a bit faster though when the timing code is switched off, though it is currently doing\nless work than ProtoMS.\n\n", "author": "chryswoods"}, {"date": "2008-06-20T23:11:56.031714Z", "commit": "603", "message": "I've just tested the code without the timing functions, and I get good scaling over two\nprocessors, and run at 447.5 MFLOPs on one core (energy calculated in 0.440 s) and\n841.5 MFLOPS on two cores (energy calculated in 0.234 s). This is quite a bit better\nthan ProtoMS, which does the energy in 0.850 s - and doesn't even perform the same\nnumber of flops!\n\n", "author": "chryswoods"}, {"date": "2008-06-20T22:34:27.835118Z", "commit": "602", "message": "I used shark (provided as part of the developer tools on the mac) to perform a time profile\nof sire, and found that I lost a lot of time doing;\n\nmol0.isEmpty() or mol1.isEmpty()\n\nThis is because mol?.isEmpty() was calling mol.nCutGroups() == 0, which was calling\n(partialmolecule).selection(), which was creating a copy of an AtomSelection! Removing this\ncall and replacing it with a direct count of the CoordGroupArray has significantly sped up\nSire. Isn't profiling great!\n\nSee ideas/current-speed for the full details, but now on two cores, Sire is running\nat over 1/2 a GFLOP!\n\n", "author": "chryswoods"}, {"date": "2008-06-20T12:29:41.257642Z", "commit": "601", "message": "I've added some more SSE code to the CLJPotential and have simplified the core loop\n(I don't think that I gain much by skipping dummy atoms - and the timings seem to agree)\n\n\n", "author": "chryswoods"}, {"date": "2008-06-20T11:13:22.720897Z", "commit": "600", "message": "I've written a benchmark script to test the speed of Sire versus the maximum realisable speed\nof the processor. Sire doesn't do too badly - but there is room for improvement.\n\nI've also updated the compiler flags so that code optimised for the processor that is used\nto compile Sire is produced.\n\n", "author": "chryswoods"}, {"date": "2008-06-19T21:53:39.095495Z", "commit": "599", "message": "I've added some code that lets me estimate the minimum FLOP speed for the code.\n\nSo far my core 2 is at around a sustained 200 MFLOPs, which is only about 10-15% of its peak \ncapacity...\n\n", "author": "chryswoods"}, {"date": "2008-06-19T14:19:51.021006Z", "commit": "598", "message": "I've now validated that ProtoMS and Sire give the same energies (if ProtoMS is set into\nSIRE_COMPATIBILITY_MODE, where solvent molecules use their set centers, and solvent\ncutoffs are calculated using closest atom distances instead of center distances)\n\n", "author": "chryswoods"}, {"date": "2008-06-19T07:52:56.021757Z", "commit": "597", "message": "I've fixed a small bug with PeriodicBox - the test use less than / greater than when it should\nhave been less than or equals and greater than or equals. This was the cause of the slight difference\nin energy using a periodic box and no cutoffs. Now Sire agrees with ProtoMS (when the same definition\nof the solvent center is used).\n\n", "author": "chryswoods"}, {"date": "2008-06-18T21:12:40.121375Z", "commit": "596", "message": "I am still comparing against ProtoMS. I've optimised the spaces (Cartesian and PeriodicBox) to use\nSSE which makes them both comfortably faster than ProtoMS for the same calculation :-)\n\nHowever, while I get agreement in energy for Cartesian with no cutoff, I get different energies\nto ProtoMS using PeriodicBox or using a cutoff. There are some reasons (see techdocs/differences_to_protoms)\nbut I am still concerned...\n\n", "author": "chryswoods"}, {"date": "2008-06-18T21:10:16.916342Z", "commit": "595", "message": "Added code to expose the mathematical constants...\n\n", "author": "chryswoods"}, {"date": "2008-06-16T19:58:17.924881Z", "commit": "594", "message": "I've fixed a bug in Inter2B3DFF where the AABoxes of the molecules weren't being updated properly. This\nhas let me use the array of AABoxes directly in the energy calculation, which speeds it up quite\na bit!\n\n", "author": "chryswoods"}, {"date": "2008-06-15T14:35:02.320660Z", "commit": "593", "message": "Here are the wrappers needed to run the water box speed test. This includes automatic\nconversion of PackedArray2D to a python list of lists.\n\n", "author": "chryswoods"}, {"date": "2008-06-15T14:33:59.922878Z", "commit": "592", "message": "I've wrapped up enough that the water speed test works!\n\ntest/speed/water_energy_speed.py now calculates the energy of a box of water.\n\n", "author": "chryswoods"}, {"date": "2008-06-14T11:29:16.458463Z", "commit": "591", "message": "I've moved Spier so that it is in its own top-level directory. I want to make sure that\nI separate the development of the core libraries from the development of any applications\n(or wrappers)\n\n", "author": "chryswoods"}, {"date": "2008-06-14T11:23:44.851741Z", "commit": "590", "message": "Cleaning up the directory...\n\n", "author": "chryswoods"}, {"date": "2008-06-14T11:20:41.143958Z", "commit": "589", "message": "I've updated the code to allow python wrapping of SireMM\n\n", "author": "chryswoods"}, {"date": "2008-06-14T11:19:29.099146Z", "commit": "588", "message": "I've added Python wrapping of SireMM\n\n", "author": "chryswoods"}, {"date": "2008-06-13T17:50:58.099029Z", "commit": "587", "message": "I've wrapped up the molecule view ID classes and they seem to work. I can write code like this;\n\natoms = p38.selectAll( ResName(\"ala\").atoms() )\n\nfor atom in p38.atoms( ResName(\"ala\") + AtomName(\"ca\") ):\n    print atom.name(), atom.residue().name(), atom.residue().number()\n\nca = p38.atom( (ResName(\"ala\") + AtomName(\"ca\"))[3] )\n\nCool! :-)\n\n", "author": "chryswoods"}, {"date": "2008-06-13T17:34:30.924957Z", "commit": "586", "message": "I've finished up the molecule view ID classes so that they (and their addition operators) can\nall be exposed to Python. The Python wrappers are compiling now - I'll have to wait until they're\ndone before I can see if they have worked!\n\n\n", "author": "chryswoods"}, {"date": "2008-06-13T15:05:19.472732Z", "commit": "585", "message": "I've wrapped up more of SireMol!\n\n", "author": "chryswoods"}, {"date": "2008-06-13T14:41:04.061808Z", "commit": "584", "message": "I've fixed some bugs exposed as I wrapped up more of SireMol.\n\n", "author": "chryswoods"}, {"date": "2008-06-11T16:43:04.276222Z", "commit": "583", "message": "Enabling the code so that I can wrap up the other molecule view properties.\n\n", "author": "chryswoods"}, {"date": "2008-06-11T16:42:00.541103Z", "commit": "582", "message": "I've wrapped up the properties of the other molecule views.\n\n", "author": "chryswoods"}, {"date": "2008-06-11T15:34:34.477865Z", "commit": "581", "message": "I've wrapped up some of the more advanced parts of SireMol!\n\n", "author": "chryswoods"}, {"date": "2008-06-11T15:33:36.095017Z", "commit": "580", "message": "I've done some work to allow more of the advanced parts of SireMol to be wrapped in Python\n\n", "author": "chryswoods"}, {"date": "2008-06-10T21:17:45.736500Z", "commit": "579", "message": "I've added the wrappers for Atom::metadata()\n\n", "author": "chryswoods"}, {"date": "2008-06-09T15:29:49.272253Z", "commit": "578", "message": "I've managed to get the code that wraps up the atom.property() class working. This is the first\nstep to fully exposing the dynamic property system to Python.\n\n", "author": "chryswoods"}, {"date": "2008-06-09T11:40:25.795536Z", "commit": "577", "message": "I've now wrapped SireFF and have automated the wrapping of Property classes.\n\n", "author": "chryswoods"}, {"date": "2008-06-06T20:59:56.263088Z", "commit": "576", "message": "I've wrapped up SireIO and I can now load up a PDB file of molecules in python!\n\nThere is some more work to do to make the wrappers more fluid, and I still need to wrap\nSireFF and SireMM, but things are beginning to move forward now :-)\n\n", "author": "chryswoods"}, {"date": "2008-06-06T19:43:09.963245Z", "commit": "575", "message": "SireMol has now been wrapped (mostly!)\n\n", "author": "chryswoods"}, {"date": "2008-06-06T19:42:18.884701Z", "commit": "574", "message": "SireMol has now been wrapped (mostly!)\n\n", "author": "chryswoods"}, {"date": "2008-06-06T16:59:35.365700Z", "commit": "573", "message": "I'm sorting out the code so that it can be exposed to python...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-06-06T16:54:02.256784Z", "commit": "572", "message": "I'm now working on wrapping up SireMol - just some missing SireMol functions to write...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-06-06T12:11:16.592646Z", "commit": "571", "message": "The ID and Units libraries are now wrapped up. I need to add the code to expose the free\nfunctions and free operators.\n\n", "author": "chryswoods"}, {"date": "2008-06-06T11:15:29.608534Z", "commit": "570", "message": "I've added the directories to hold the wrappers for the other Sire libraries.\n\n", "author": "chryswoods"}, {"date": "2008-06-05T15:12:04.370449Z", "commit": "569", "message": "The SireCAS library is now wrapped and working!\n\n", "author": "chryswoods"}, {"date": "2008-06-05T13:56:44.796566Z", "commit": "568", "message": "I've completed the move - the python2 wrapper autogenerate and compile correctly from\ntheir new location - I've just modified svn:ignore so I am not blinded by dozens of \nauto-generated files!\n\n", "author": "chryswoods"}, {"date": "2008-06-05T13:30:09.326915Z", "commit": "567", "message": "I've added the python2 binding code to the python2 subproject directory.\n\n", "author": "chryswoods"}, {"date": "2008-06-05T13:24:42.714069Z", "commit": "566", "message": "I've created the directory structure for the python2 bindings\n\n", "author": "chryswoods"}, {"date": "2008-06-05T13:22:25.350487Z", "commit": "565", "message": "I've moved the C++ code into the corelib directory. This will allow me to separately develop Sire\nfrom the python bindings (and perhaps other bindings...)\n\n", "author": "chryswoods"}, {"date": "2008-06-05T13:17:30.282352Z", "commit": "564", "message": "Creating the directories to hold the sub-projects - Sire and the Python2 bindings\n\n", "author": "chryswoods"}, {"date": "2008-06-05T13:15:59.035614Z", "commit": "563", "message": "Committing some changes that have been sitting around in devel for ages...\n\n", "author": "chryswoods"}, {"date": "2008-06-05T13:14:46.760372Z", "commit": "562", "message": "I've written a new parser to autogenerate the python (in a separate directory) - this uses\ntags embedded in the C++ to decide which classes to expose. So far SireMaths, SireError, \nSireBase and SireVol all wrap up nicely.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-06-03T12:22:12.403067Z", "commit": "561", "message": "I'm now going to try and rebuild the python wrappers for the classes, so that I can\ninteractive testing calculations.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-06-03T07:51:51.182282Z", "commit": "560", "message": "The energy of the water box with cutoff and periodic boundaries now appears to be correct.\nHowever, it is very slow - about half the speed that I would expect, and openMP doesn't add\nanything. I think that this is because I am trashing cache and hitting memory. I'll need\nto think about how I can improve things...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-06-02T15:49:19.361268Z", "commit": "559", "message": "I'm fixing bugs in the energy routines...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-06-02T07:50:14.591446Z", "commit": "558", "message": "I've fixed the bug (forgot that it was 4 * epsilon, not just epsilon in the LJ equation) and \nnow Sire gets the same intermolecular CLJ energy as ProtoMS for the water box.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-14T07:44:01.286643Z", "commit": "557", "message": "The water test in Sire is not quite right - the coulomb energy is correct, but the LJ energy is wrong...\n\nI am debugging...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-09T09:26:48.000919Z", "commit": "556", "message": "I've fixed the problem regarding the problem of not matching templates across shared library \nboundaries, and now Sire on the Mac is able to calculate the energy.\n\nThe problem was caused because GCC implements RTTI by comparing the pointer to the \ntype_info object for the virtual class, rather than doing a string comparison of the \nname of the class (comparing type_info::name()). This breaks for a template class instantiated\nin two different dynamically shared libraries (DSO) (or in a library and the main app) as G++ creates a copy of\nthe template class in each library, each with its own type_info object. These objects have\ndifferent pointers, so G++ reports that they are different objects and dynamic_cast fails.\n\nThe problem is seen when symbol hiding is turned on, as the type_info objects created for\neach copy of the template class are not exported from the library. However, if the symbols\nfor the type_info objects were exported, then the linker would be able to see that they \nare the same, and would then fix the problem for us by merging the references. The solution,\ntherefore, is to ensure that the symbols for the type_info objects associated with \npolymorphic template classes are exported in all libraries where the template is \ninstantiated.\n\nOn Linux, gcc will export all symbols by default. Only gcc >= 4 has the ability to hide\nsymbols, and this has to be deliberately turned on. However, if gcc symbol hiding is switched\non, then you will see this problem on Linux as well. (e.g. if -fvisibility-hidden is used)\n\nOn Mac and Windows symbol hiding is the default, so this is a problem on these systems.\n\nOne solution I saw in forums was to export *all* symbols in the libraries that instantiate\nthe template. While this would work, it is hardly ideal as you lose all the benefits of\nusing symbol hiding!\n\nFortunately, an easier solution is available. All you need to do is to mark the template\nclass itself as being visible, and this with then mark all of its functions and \nancillary classes (including type_info) as being visible. So, on gcc, just change;\n\ntemplate<class T>\nclass Foo : public Bar\n{ ... };\n\nto;\n\ntemplate<class T>\nclass __attribute__((visibility(\"default\"))) Foo : public Bar\n{ ... };\n\nThis works for GCC on both Linux and Mac.\n\nOn windows, I think that you would write something like;\n\ntemplate<class T>\nclass __declspec(dllexport) Foo : public Bar\n{ ... };\n\nthough I've not tried this yet.\n\nIn Sire, I use the macro SIRE_EXPORT to identify symbols that must be exported (this is copied\nfrom Q_DECL_EXPORT provided by Qt), so in this commit I have changed the declaration of \nall polymorphic template classes to;\n\ntemplate<class T>\nclass SIRE_EXPORT Foo : public Bar\n{ ... };\n\nWhile this will all work for libraries that are linked with the executable, I am not\nsure that this fixes problems when loading libraries as a plugin (e.g. loading a \nlibrary connected to a python module). For plugins to work, I believe that the \nlibrary must be loaded with a dlopen() with RTLD_GLOBAL.\n\n", "author": "chryswoods"}, {"date": "2008-05-09T07:54:18.096832Z", "commit": "555", "message": "Small typo in CMakeLists - libFoo.h should have been libfoo.h (I hate case-insensitive filesystems...!)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-09T07:52:08.331510Z", "commit": "554", "message": "I've written a short test case in build/test_compiler that tests whether RTTI across shared library\nboundaries is working. Currently on my Mac, it isn't...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-08T10:25:51.457223Z", "commit": "553", "message": "I've fixed some bugs that prevented Sire from compiling on Linux. Now it compiles, and \nit actually seems to work. It calculates an energy of -16542.5 kcal mol-1 for the \nbox of water (I need to check if this is correct...)\n\nLinux doesn't seem to have a problem with RTTI of templates. I think I'll need to look\nat the link flags of my libraries...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-08T09:14:30.250835Z", "commit": "552", "message": "I've sorted out the bug in PropertyMap that was causing me to not find the properties (and in doing so, \nI've also added backtrace functionality support for OS X Leopard). However, I've now run into the problem\nthat RTTI of template classes is not working across shared library boundaries. This is a known problem \nwith GCC (see <http://lists.apple.com/archives/xcode-users/2006/Mar/msg00125.html>), and I'll have\nto find out how to solve it... (as I don't want to use a factory to create all of my C++ templates...)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-07T07:50:29.188730Z", "commit": "551", "message": "I'm now testing adding molecules to a forcefield and calculating the energy. Parameterising\nTIP4P seems to have worked - there is just now a little difficulty with InterCLJFF extracting\nthe right parameters...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-06T21:58:12.697828Z", "commit": "550", "message": "I'm just sketching out my ideas for the new SireDB - essentially just a holder for a more\nbasic database class (based directly on SQLite) and also a DiskCache, which will allow\nthe code to cache objects temporarily on disk, thereby allowing for better memory \nmanagement (i.e. some memory management!)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-06T21:32:16.118215Z", "commit": "549", "message": "I've renamed SireDB to SireMMDB as the classes in this directory are targetted at assigning\nMM forcefield parameters...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-06T15:52:28.399447Z", "commit": "548", "message": "I've finished updating ResProperty etc. to use ResVariantProperty etc.\n\nI've also begun work on the Trajectory class so that I can do something with the read-in\ntrajectories contained in a PDB file.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-06T11:57:26.771983Z", "commit": "547", "message": "I've updated the code to use PackedArray<QVariant> for the generic property holder (well, for \nAtomProperty only so far, but the rest aren't far behind). I've also updated the code so that\nit compiles with Qt 4.4\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-05T16:59:52.386457Z", "commit": "546", "message": "I've now got nearly all of the information in the ATOM/HETATM part of the PDB file read into \na Molecule :-)\n\nAll that is left is the alternative atoms and the other frames of any animation.\n\nThis appears to read in correctly the PDB files in test/io\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-05T10:55:00.937443Z", "commit": "545", "message": "I've added a quick and simple cache that allows the names of parts of the molecule (atom, residue etc.)\nto be re-used - so we don't have a thousand identical \"O00\" strings from a box of water!\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-05T10:36:13.350194Z", "commit": "544", "message": "I've now got the PDB reader to use customizable group cutting, and atom, residue, CutGroup,\nchain and segment name mangling.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-04T17:16:05.373212Z", "commit": "543", "message": "I'm now adding the properties/parameters control to PDB and have added a StringMangler set of classes\nthat will allow for fine control of how the atom, residue, chain and segment names are changed\nas the PDB file is read.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-04T14:25:10.012113Z", "commit": "542", "message": "The PDB reader now also sets the coordinates of the atoms (via a \"coordinates\" property!). Reading\nin all of test/io/p38.pdb takes just 0.4s, which is probably fast enough ;-)\n\nThis has also helped me debug AtomCoords and the property system a little.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-03T11:24:47.269581Z", "commit": "541", "message": "I've fixed a bug that meant that multiple residues weren't being read correctly.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-03T11:14:01.612303Z", "commit": "540", "message": "I've now got the basic layout of the molecule loading from a PDB (with apparently correct conversion\nfrom MolStructureEditor to Molecule) - try sire test/io/water.pdb\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-02T15:52:46.825892Z", "commit": "539", "message": "Fixed some bugs in the reading in of basic PDBMolecules. Now have to write the conversion\nfrom PDBMolecule to Molecule...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-05-02T07:55:22.452524Z", "commit": "538", "message": "I've written some of the basics of the PDB reader and also sorted out version numbering of MolGroup\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-28T09:36:55.318682Z", "commit": "537", "message": "I'm working on the PDB reader/writer. I am trying to make it work with PDB 2.3 and PDB 3.0 format\nfiles, extracting as much information as possible so that it can be copied into the Molecule\nobject via well-defined properties.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-27T20:56:24.321191Z", "commit": "536", "message": "I've made a start updating the PDB reader/writer so that I can load up molecules once again.\n\nI've made the IO classes into properties so that they can be passed around within the code\n(e.g. have a PDB object passed into a Simulation so that the trajectory output format\ncan be controlled).\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-27T19:50:53.409240Z", "commit": "535", "message": "All of the unresolved symbols have now been placed. SireMM now all compiles and links without error :-)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-27T10:51:59.364277Z", "commit": "534", "message": "Filling in some of the missing symbols...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-25T20:25:18.168538Z", "commit": "533", "message": "I've finished writing InternalFF, and it compiles, but there are some undefined symbols in SireMM.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-25T13:03:42.166334Z", "commit": "532", "message": "I've now written the code for the improper, stretch-bend, bend-bend and stretch-bend-torsion forces.\n\nThe only missing code is the calculation of d theta / d r for the impropers... (half derived)\n\nNow to finish off InternalFF\n\n", "author": "chryswoods"}, {"date": "2008-04-25T10:10:55.641561Z", "commit": "531", "message": "I've written the code to calculate the bond, angle, dihedral, Urey-Bradley and stretch-stretch forces.\n\nI've deliberately written readble and generic code, as this is for the generic InternalFF forcefield,\nwhich is not expected to be the bottleneck in the simulation. If it becomes the bottleneck, then a\nspecific, speed-optimised version can be written, using the generic forcefield as a check and \nbenchmark.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-23T07:54:32.807147Z", "commit": "530", "message": "I've written the code in InternalPotential to calculate all of the internal energies, and have\nalso written most of the code to calculate the bond forces.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-22T07:49:45.117817Z", "commit": "529", "message": "I've now written InternalParameters3D, which is an object that contains both the intramolecular \nparameters and the 3D coordinates of the atoms in the molecule. I think that I now have\neverything I need to write InternalPotential now (which now just has to perform simple\nloops over the parameters in InternalParameters3D)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-21T21:12:08.259752Z", "commit": "528", "message": "I've now written InternalParameters, which compiles without error.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-18T21:20:24.966385Z", "commit": "527", "message": "I'm continuing to write InternalParameters - I've nearly finished the conversion from \nmolecule properties to InternalParameters.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-18T15:48:52.715214Z", "commit": "526", "message": "I'm now writing the code to convert from the internal molecule properties to the InternalParameters\nobject used by the forcefield. I've worked out how to get intra-molecular perturbations working as\nwell, that minimise the amount of calculation.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-17T16:27:54.866109Z", "commit": "525", "message": "I'm now working on the internal parameters - I've got to work out how to store both the \nparameters and the forces...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-17T14:25:16.846327Z", "commit": "524", "message": "I've now written the molecular properties that contain the 2 atom, 3 atom and 4 atom functions\n(so all of the bond, angle, dihedral, improper, Urey-Bradley, stretch-stretch, stretch-bend,\nbend-bend and stretch-bend-torsion MM parameters!). These classes now all compile. The next\nstep is writing the code in InternalParameters that fetches these parameters and converts them\ninto a format that can be understood and processed quickly by the Internal forcefield (InternalFF)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-17T11:24:41.360574Z", "commit": "523", "message": "I'm continuing to work on the internal functions - I've just finished writing TwoAtomFunctions,\nwhich is the molecular property that holds all two atom functions (e.g. bond potentials,\nor Urey-Bradley potentials)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-15T14:50:06.096110Z", "commit": "522", "message": "I'm working on the internal forcefield, which provides all of the intramolecular molecular\nmechanics terms, e.g. bond, angle, dihedral, improper and various cross-terms.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-07T15:40:07.587645Z", "commit": "521", "message": "All of Sire now compiles and links without error (well, all of the parts that are currently enabled).\nThis means that it is possible to do some more in depth testing.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-03T07:48:27.837753Z", "commit": "520", "message": "I've nearly finished adding in all of the missing QDataStream functions so that SireMM will link...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-02T19:44:58.554288Z", "commit": "519", "message": "I've filled in lots of missing functions (mainly QDataStream serialisation functions) and am making progress\ntowards getting SireMM to compile.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-01T21:06:42.520424Z", "commit": "518", "message": "I've now written Intra2B2GFF, Intra2B2G3DFF and created IntraCLJFF and IntraGroupCLJFF (so now\nhave the code to allow perturbation of parts of molecules, e.g. residues in a protein).\n\nI've culled some files - particularly as I will now move all database files so that they\nare separate to SireFF and SireMM (as I want the core runtime to not have to depend on QtSql\nas it may not be available on compute nodes). I will therefore (eventually!) write\nSireFFDB and SireMMDB libraries that will derive from SireDB and will contain the database\ncode necessary to parameterise the molecules in SireMM and SireFF.\n\nWith the code cleaned, SireFF now compiles and links, and all of SireMM compiles,\nbut there are some unresolved symbols.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-01T16:32:52.852229Z", "commit": "517", "message": "I've now got IntraCLJFF compiling - just now IntraGroupCLJFF to go...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-04-01T14:45:19.756280Z", "commit": "516", "message": "I've made a start on the intramolecular versions of the intermolecular two body forcefields, including\nwriting all of the code in CLJPotential to allow the full intramolecular CLJ energy to be calculated\nboth for a whole molecule, and for part of a molecule interacting with another part. This will\nallow me to both only calculate the change in intramolecular CLJ energy, and will allow me to\nhave an IntraGroupCLJFF that will let me separate parts of the intramolecular CLJ energy out\n(e.g. if I want to perturb part of a molecule, or switch part of it off - think alanine scanning)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-31T21:03:26.957146Z", "commit": "515", "message": "I've now written G2FF, Inter2B2GFF, Inter2B2G3DFF and InterGroupCLJFF, and it all compiles. The\nspeed with which I've done this shows the power of this design.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-31T19:27:40.174225Z", "commit": "514", "message": "Spring cleaning redundant files...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-31T07:31:51.720335Z", "commit": "513", "message": "Ok, InterCLJFF now compiles :-)\n\nI now finally have something chemical that I can test (perhaps I could do the now traditional water\nbox test to compare the speed with the old version?)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-30T12:45:54.708209Z", "commit": "512", "message": "I have written most of Inter2BFF and Inter2B3DFF and have instantiated these as InterCLJFF (which I am now\ntrying to compile). There are a few compile errors to sort out...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-26T16:48:24.839143Z", "commit": "511", "message": "I've made a lot of progress on the common forcefield interface, and have written all of the editing\nfunctions for FF, and am now nearly finished writing the editing functions for G1FF.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-26T08:49:31.811565Z", "commit": "510", "message": "I am making quite a lot of progress sorting out the functions behind the common forcefield molecule\nediting interface - all of the add() and addIfUnique() functions have now been written in SireFF::FF.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-24T15:27:23.746246Z", "commit": "509", "message": "I've written FFMolGroup and FFMolGroupPvt - this is now quite a way towards sorting out the \nunderlying code for adding, removing and editing molecules in *all* forcefields (as it is\nnow all abstracted into a common location!)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-24T10:28:15.511859Z", "commit": "508", "message": "I've filled in the force functions of CLJPotential so that the coulomb and LJ forces can be \nevaluated separately.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-23T16:28:05.989075Z", "commit": "507", "message": "I've written the ForceTable class and worked out how the forces will be evaluated in the code\n(I've decided against taking advantage of equal-and-opposite forces and will take the hit\nof calculating force i,j and force j,i separately, as this gives better cache performance,\nsimplifies the code and makes it easier to do things like have only partial molecule forces\nevaluated - by having only parts of molecules in the forcetable).\n\nForceTable is now written and compiles without error.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-21T17:23:40.265590Z", "commit": "506", "message": "I've now written SireFF:FF, the base class of all forcefields, and it compiles without error.\n\nI've also moved MoleculeInfoBase over to using QUuid, and I will move everything that really\nrequires a unique ID over QUuid as well. This is because I really do need to ensure a \nunique UID across multiple machines, as well as time (as I can be loading and saving\nfiles over time, and also passing data between nodes in a cluster). It is important that\nonce an objects has got a UID, that it keeps it!.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-21T14:45:10.389270Z", "commit": "505", "message": "I've had to fix some of SireMol and SireBase to make sure that they can compile without error.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-21T12:12:20.260978Z", "commit": "504", "message": "I've cleared out some of the SireMM files that are no longer necessary.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-21T12:06:20.754898Z", "commit": "503", "message": "I think that I've finished CLJPotential now (at least written all of the code and it all compiles\nwithout error). I am nearly at the point when it can be tested...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-21T09:19:46.338888Z", "commit": "502", "message": "I've now got the code to parameterise the IntraCLJPotential working. All of the functions of both\nInterCLJPotential and IntraCLJPotential for energy and force evaluation, and to get all of the\nparameters are now compiling correctly without warning.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-20T17:45:55.174906Z", "commit": "501", "message": "I've now written the code that extracts the CLJ and coordinate properties from a molecule\n(or group of molecules) for use with a CLJPotential. This all compiles.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-20T11:45:21.966526Z", "commit": "500", "message": "I've got CLJPotential to fully compile now (with complete instantiation of the ancillary classes).\n\nThis is commit 500 (which is about commit 1350 in total!). Sire is so big...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-18T16:50:16.444366Z", "commit": "499", "message": "I'm continuing to work on getting CLJPotential to compile. I am now at the point of sorting out\nthe code that is used to parameterise the CLJ molecules...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-18T08:48:36.608513Z", "commit": "498", "message": "I'm now getting a lot of CLJPotential to compile (indeed all of IntraCLJPotential - now working\non IntraCLJPotential)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-16T15:09:39.076208Z", "commit": "497", "message": "I've finished the DistVector class and added functions to the volume classes that use DistVector\nto help build the vector field of distances between points in CoordGroups. This is useful\nfor the force evaluation.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-14T18:14:28.541879Z", "commit": "496", "message": "I'm now getting CLJPotential to compile, and am adding in some necessary extra classes\n(e.g. LJParameterDB to hold all of the LJParameters, and DistVector, that is used in\nthe force calculations)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-13T12:43:51.651353Z", "commit": "495", "message": "I've renamed CLJFunctional to CLJPotential\n\n", "author": "chryswoods"}, {"date": "2008-03-13T12:06:30.542062Z", "commit": "494", "message": "I've just about finished all of the ancillary classes needed by the Inter- and Intra- CLJPotentials.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-11T13:26:30.504547Z", "commit": "493", "message": "I'm now cleaning up the code behind the AtomicParameters and AtomicCoords3D. This is to help me\nclean up the design of the forcefields, as I am getting stuck in the mess (mud!)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-11T11:57:06.420293Z", "commit": "492", "message": "I've written the basic components classes.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-11T10:20:11.966522Z", "commit": "491", "message": "I'm sorting out the forcefield components at the moment...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-03T15:47:59.685089Z", "commit": "490", "message": "I'm continuing to write the CLJFunctional class (though I will rename it CLJPotential, and\nam also now splitting it into InterCLJPotential and IntraCLJPotential, which are for\nintermolecular and intramolecular energies/forces respectively)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-03T08:50:17.050923Z", "commit": "489", "message": "I'm now starting to use the FFMolecule type classes to build the CLJPotential.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-01T15:59:37.563499Z", "commit": "488", "message": "I've now written the FFMolecule3D, FFMolecules3D and FFParameters3D classes, which all\ncompile without error.\n\nI now have the framework in place to start building the Potential classes, as these will\nnow use the new template molecule classes to store all of the required information\nand do all of the difference calculation required for Monte Carlo.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-03-01T12:14:28.108675Z", "commit": "487", "message": "I've written FFMolecules (and its associated classes, FFMolecule, ChangedMolecule) and it\ncompiles without error. I now have to write FFMolecules3D and FFMolecule3D.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-29T08:55:24.872862Z", "commit": "486", "message": "I am making progress with the FFMolecules type classes. I've realised that these should\nbe attached to potentials rather than forcefields, (e.g. FFMolecule<CLJPotential>) as\nthen all forcefields using the same potential use the same molecule classes, and also\nthis allows forcefields that use multiple potentials (e.g. combined LJ and Gay-Berne)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-28T08:50:16.628032Z", "commit": "485", "message": "I am making progress filling in the FFMolecule specialised forcefield molecule classes.\n\nEventually these will form a generic collection of classes that will provide all of \nthe specialised forcefield molecules for all of the forcefields automatically\n\n(so no more CLJFF::Molecule, CLJFF::ChangedMolecule, LJFF::Molecule, LJFF::ChangedMolecule\ncode duplication!)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-27T18:37:58.254682Z", "commit": "484", "message": "I'm back working on the generic forcefield design, creating the classes that will\nholds the forcefield optimised molecule data.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-27T15:44:17.678120Z", "commit": "483", "message": "I've integrated PackedArray2D into AtomProperty and have got everything to compile.\n\nEverything up to SireMol compiles and links.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-27T12:16:28.876394Z", "commit": "482", "message": "I've finished the PackedArray2D classes, and they now all compile and some simple tests\nshow that they are working.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-27T09:18:44.869993Z", "commit": "481", "message": "I've finished renaming PackedArray to PackedArray2D\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-27T09:08:29.608550Z", "commit": "480", "message": "I've nearly finished the PackedArray classes - which I am now renaming PackedArray2D (to mirror\nthe Array2D class)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-26T22:54:00.595594Z", "commit": "479", "message": "I've made a lot of progress filling in the code for PackedArray (and its worker classes).\nI also think that I've fixed a bug in the extract() functions of CoordGroupArray and\nCoordGroup.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-26T08:51:19.045403Z", "commit": "478", "message": "I'm filling in the code for PackedArray (and all of its ancillary classes)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-25T21:40:07.993210Z", "commit": "477", "message": "I am now generalising the CLJPotential design so that I can just drop in other potentials\n(without having to duplicate too much CLJPotential code). To do this, I am having to \ncreate a generic TwoBodyMolecule class, which itself requires that I sort out the \nPackedArray class (essentially a generic container<T> that holds an array of arrays\nin a packed format similar to CoordGroupArray)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-24T17:30:39.272553Z", "commit": "476", "message": "I've been learning about molecular dynamics force shifting methods, and have now written \nthe code to calculate both inter- and intra- molecular CLJ energies and forces :-)\n\nNow that it's written, I now know what information I need to push into these functions,\nthereby helping me flesh out the rest of the forcefield design.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-22T23:20:10.644916Z", "commit": "475", "message": "I've added a 2D array class that will be useful for the pair-pair potentials (e.g. to store\nLJ parameter pairs). I've also written the CLJPotential function that calculates the \nintermolecular CLJ energy between pairs of molecules.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-22T09:46:56.515626Z", "commit": "474", "message": "I've finished the moving functions of CoordGroupArrayArray. Now everything up to SireMol compiles\nand links.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-22T09:07:58.701412Z", "commit": "473", "message": "I've fixed my openmp problem - I forgot to use the private version of the DistMatrix. Using\nthat, it now takes 2.5s to do 144M distance calculations over two cores, which is \nabout 70% faster than on one core.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-22T00:07:56.329962Z", "commit": "472", "message": "I've compared the speed of my distance routines to a basic calculation. This shows that\nmy code is really quick - 144M sqrts take 3.6s, while doing the 144M distance calculations\nusing my data structures takes 4.2s. Even better, 144M distance calculations using\na pair of simple arrays takes 8.4s, so my implementation is twice as quick :-)\n\nI've also fully integrated SireMol with the new CoordGroup and have added in extra\nfunctions to allow moving of parts of the CoordGroupArray and CoordGroupArrayArray\n(this is also more efficient than my old design). However I've not quite finished\nthe code in CoordGroupArrayArray.\n\nI've also upgrade my gcc to version 4.2.3, which meant I had to fix a few compile\nproblems in the rest of the code. gcc 4.2.3 with -march=prescott is about 0.2 to 0.3s\nfaster than gcc 4.0.1 (I think with -march=i686). I tried adding openmp code but\nthis really slowed everything down. I think I need to learn more about how\nopenmp works...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-21T00:55:09.794453Z", "commit": "471", "message": "I've merged the minor changes in CoordGroup/CoordGroupArray API into SireMol, which now all compiles\n(though doesn't link as I am missing the coordinate manipulation functions of AtomCoords...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-20T21:52:47.271719Z", "commit": "470", "message": "I've sped up the distance calculation by pairing up the sqrts (so two are done at once)\nand also adding in an SSE instruction so that both square roots are done in parallel.\n\nThis brings down the time required for the 144M distances to 4.5s.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-20T20:16:27.151221Z", "commit": "469", "message": "It was a bug in Vector (the shame - not calculating the correct distance or distance^2!!! ;-)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-20T16:48:34.123148Z", "commit": "468", "message": "I've finished moving CoordGroup2 to CoordGroup, but it doesn't work (the distances are wrong...)\n\nI'll need to debug it...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-20T16:29:13.959722Z", "commit": "467", "message": "Continuing to move CoordGroup2 to CoordGroup...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-20T16:27:15.152697Z", "commit": "466", "message": "Beginning to move CoordGroup2 to CoordGroup...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-20T15:34:00.322747Z", "commit": "465", "message": "I've played around with trying to explicitly add SSE support to my Vector class, but\nwithout much success (I always end up with something that is slower than the compiler...).\n\nI've also made the vector into a 32bit class, so it aligns better in arrays, and have\nadded some padding to the CoordGroup CGMemory which seems to have sped it up a little.\n\nThe fastest now is about 1.8s for distance^2, and 4.7s for distance().\n\n(so nearly 3s is just sqrt!)\n\nI was wrong in the last post, there are 12000 points in each group (1000 blocks\nof 3 groups or 4 points). This means that it is 144M pair calculations, therefore\nit is at least 8*144M operations. For dist2 this is about 0.65 GFLOPS, which is slightly\nmore respectable, while for distance it is 0.25 GFLOPS (although I don't know how many\noperations are in a sqrt).\n\nThis is still a way from the theoretical value of 15-20 GFLOPS for my laptop...\n\n", "author": "chryswoods"}, {"date": "2008-02-20T08:39:21.950399Z", "commit": "464", "message": "I've further tested the new CoordGroup classes and they seem to work well. For two groups of\n1000 molecules, where each molecule contains 3 groups of 4 atom (with random coords), the\ncalculation of all interatomic distance pairs between groups takes 4.8s. It takes 2.0s to\ncalculate distance^2 between all pairs. (thats 7000^2 pairs)\n\nThis compares to 5.9s and 2.9s for QVector< QVector<CoordGroup> > (which is not too bad).\nThis is a 20-30% speedup.\n\nHowever, each Vector::distance2(Vector,Vector) calculation uses about 8 double operations.\nThis means that (ignoring loop counters and double comparisons) there are just 8*(7000^2)\noperations in 2s, so just 4*(7000^2) double operations per second. This is only\n100 MFLOPS (double), which is far from the 2-4 GFLOPS that my laptop should be capable of...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-20T00:26:40.667529Z", "commit": "463", "message": "I've added CoordGroupArrayArray, and it seems to work. Using CoordGroupArrayArray as opposed to\nQVector< QVector<CoordGroup> > increases efficiency by about 20% (which is less than I'd thought...)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-19T22:57:44.479190Z", "commit": "462", "message": "I've written the CoordGroupArray class now and it seems to be working...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-19T21:03:26.454062Z", "commit": "461", "message": "I've sorted out placing CoordGroup and CoordGroupArray objects into the memory allocated\nby CGMemory (so that the CoordGroupArray and CoordGroupArrayArray containers can properly\niterate over these objects).\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-19T16:59:34.579012Z", "commit": "460", "message": "I'm moving the CoordGroup/CoordGroupArray pointers into their own arrays in CGMemory...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-19T09:35:32.527028Z", "commit": "459", "message": "I've realised that I've got to store the CoordGroup and CoordGroupArray objects in the CGArrayArrayData,\nso am modifying the code to achieve this...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-18T23:00:10.303900Z", "commit": "458", "message": "I've fixed the bug - the CoordGroup classes now use a proper shared pointer. The test shows\nthat it is working, and that it is a little faster than the original CoordGroup implementation\n(before I've even sorted out the packed array...)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-18T08:53:31.247700Z", "commit": "457", "message": "I made a silly error in forgetting which part of the CG object should be detached! Hence the bugs!\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-17T20:40:45.505086Z", "commit": "456", "message": "I've written CoordGroup2 and CoordGroupEditor2 and am in the process of debugging them\n(as the memory work for these is quite complex, and *must* be right, or Sire will have\nthe stability of an inexperienced tightrope walker)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-17T17:01:47.255100Z", "commit": "455", "message": "I've worked out how to pack all of the coordinate data together so that it will hopefully\nstay in cache more. I'm implementing the structure in CoordGroup2 and have written some\nspeed tests. It is based on the fact that memcpy is *really* quick (~1s for 500MB of data!)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-15T08:54:33.736931Z", "commit": "454", "message": "I'm still working on the skeleton of the new layout...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-14T08:51:45.554760Z", "commit": "453", "message": "I am continuing to fill in the skeleton of the revised SireFF design...\n\n", "author": "chryswoods"}, {"date": "2008-02-14T08:12:42.675019Z", "commit": "452", "message": "I'm laying out the files for the updated version of SireFF.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-13T21:12:42.759055Z", "commit": "451", "message": "I'm sketching out the plan for the updated design of the forcefields. This merges together\nthe use of MolGroup/MolGroups and also the TwoBodyFF template idea from last summer.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-13T15:46:52.445925Z", "commit": "450", "message": "I've filled in all of the functions now (except for a few marked stubs), and now SireMol\ncompiles *AND* links on OS X. It has been several months, but *at last*!\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-13T11:47:41.003307Z", "commit": "449", "message": "I'm still filling in missing SireMol functions. There are only a few to go now :-)\n\nSireMol compiles buts doesn't link\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-12T08:50:20.027334Z", "commit": "448", "message": "I'm continuing to fill in the missing SireMol functions...\n\nSireMol compiles but doesn't link\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-11T08:54:15.331122Z", "commit": "447", "message": "I'm filling in all of the missing SireMol functions...\n\nSireMol compiles but doesn't link...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-09T22:41:55.647581Z", "commit": "446", "message": "I've written the code that allows the setting and retrieval of properties for the \nStructureEditor derived classes\n\nSireMol compiles but doesn't link\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-09T16:13:04.098881Z", "commit": "445", "message": "I've finished updating AtomSelection to remove the confusing const-class behaviour, and have\nalso updated the other SireMol classes so that they are compatible with this modified API.\n\nSireMol all compiles, but fails to link\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-08T08:51:09.312577Z", "commit": "444", "message": "I'm updating the API for AtomSelection a little to remove its confusing const behaviour!\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-06T08:48:28.397230Z", "commit": "443", "message": "I've written the code that converts the editable properties back to a Properties object. I need\nto update the conversion code though to cache the MoleculeInfoData used as otherwise any\nproperties that need a MoleculeInfoData will create their own. This is inefficient, and also\neach one would have a different UID, so the properties would be incompatible!\n\nSireMol compiles, but doesn't link\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-05T21:57:22.298956Z", "commit": "442", "message": "I've written about a third of the code now that converts the editable properties\nback into a Properties() object\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-05T21:03:49.555454Z", "commit": "441", "message": "I've written the code that converts the properties into the editable format used \nby StructureEditor. It is quite cool (even doing the metadata and property metadata).\n\nNow I've just got to write the code that converts it back again...\n\nSireMol compiles but doesn't link.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-05T17:39:55.146495Z", "commit": "440", "message": "I've added the ability for the property classes (AtomProperty, ResProperty, CGProperty, \nChainProperty and SegProperty) to be converted to and from QVariants. This will ease\nthe getting and setting of properties in the StructureEditor classes (as now each\natom/CutGroup/residue/chain/segment can hold the property as a single QVariant)\n\nSireMol compiles, but doesn't link\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-05T12:59:00.933508Z", "commit": "439", "message": "I've finished writing the functions of EditMolInfo.\n\nSireMol all compiles, but doesn't link.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-04T08:49:47.680149Z", "commit": "438", "message": "I am now filling in the functions of EditMolInfo...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-03T19:45:14.328907Z", "commit": "437", "message": "I've created a standard query interface (MolInfo) that is used by all of the ID classes\n(it provides the interface for all of the .map(....) functions).\n\nI've updated MoleculeInfoData to use this interface, and am writing an EditMolInfo \nclass that will provide that interface for the StructureEditor derived classes.\n\nSireMol all compiles, but there are still missing functions.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-02T20:08:17.020894Z", "commit": "436", "message": "Ok, now I've got StructureEditor compiling, but still the properties are not being converted...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-02T12:45:00.609189Z", "commit": "435", "message": "I've written the code to convert a StructureEditor into a MoleculeData (well, not including the \nproperties), and have nearly finished the code to convert a MoleculeData into a StructureEditor\n(again, excluding the properties...)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-02-01T08:50:43.417204Z", "commit": "434", "message": "I'm continuing to fill in the functionality of StructureEditor...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-31T22:02:48.595049Z", "commit": "433", "message": "I am continuing to fill in the missing functions of StructureEditor\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-31T18:04:19.325988Z", "commit": "432", "message": "I'm working now on filling in StructureEditor functions...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-31T17:13:15.787316Z", "commit": "431", "message": "I've made quite a few big changes as I've filled in the missing functions. I've changed the \nversion system so that now MoleculeInfoData has a UID() function that uniquely identifies\na particular molecule layout. This means that the molecule number (moleculedata.number()) does\nnot have to tie a molecule to a particular layout, thereby allowing the user to use the molecule\nnumber to identify a molecule, and allowing the code to detect when the layout has changed.\n\nI've filled in quite a few functions and have propogated all of these changes within SireMol,\nand have also added the code that allows renaming of molecule views using the Editor<T>,\nrather than having to jump all of the way to a StructureEditor.\n\nSireMol all compiles, but there are still missing functions\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-30T22:55:41.080780Z", "commit": "430", "message": "I've got all of the editor classes implemented and compiling now. I've still got to implement\nthe StructureEditor base class, but now that the others are written, its API is now in place.\n\nAll of SireMol compiles, but there are missing functions.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-30T11:38:22.556456Z", "commit": "429", "message": "I am continuing to fill in the missing editor functionality - it takes a while...\n\nAlso, the code has now moved over 100k lines... That's a lot of typing!\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-29T22:50:05.403934Z", "commit": "428", "message": "I'm continuing to fill in the functions of the *Editor and *StructureEditor functions.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-29T16:45:35.618837Z", "commit": "427", "message": "I'm fleshing out the molecule editing classes. I've broken it down now into TEditor classes,\ne.g. AtomEditor, that derive from Editor<T>, and only edit data about the actual object,\nand TStructureEditor classes, which can make changes that change the structure/arrangment of\nthe molecule, e.g. AtomStructureEditor. These classes derive from StructureEditor, which \nat the moment is just a placeholder for the editor API that I will need to implement...\n\nSireMol all compiles, but lots of functions are undefined\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-29T08:52:41.447419Z", "commit": "426", "message": "I've worked out how the molecule editing API will work - it all goes through\n??Editor classes, which can change the local data for ???, and ???StructureEditor\nclasses, which can actually edit the molecular structure (i.e. add, move and remove\natoms, cutgroups, residues, chains and segments).\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-28T13:53:54.370382Z", "commit": "425", "message": "Working my way filling in the missing functions...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-28T08:47:01.665333Z", "commit": "424", "message": "SireMol now all compiles - I now have to fill in all of the missing functions so that\nit will successfully link!\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-24T16:49:55.625683Z", "commit": "423", "message": "I've nearly got all of mover.cpp to compile, though at the cost of making AtomSelection into a \nMoleculeProperty, which causes a clash with the \"mask\" function (different return types!)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-24T09:54:56.279321Z", "commit": "422", "message": "I've fixed the improper to use the right convention for atom labels!\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-24T09:33:40.331338Z", "commit": "421", "message": "I've finished the code that calculates improper angles (it calculates the *right* improper angle!)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-23T08:39:20.522557Z", "commit": "420", "message": "I've written AngleID and DihedralID (both of which compile without error)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-22T22:39:59.818167Z", "commit": "419", "message": "I've added the BondID class (which compiles) to identify the atoms in a bond\n(whether in the same molecule or between molecules)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-22T16:51:11.142493Z", "commit": "418", "message": "There's a lot more to do to mover.cpp than I originally thought - I'd forgotten that I\nhad not finished off the Connectivity class and the BondID, AngleID, DihedralID and \nImproperID functions....\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-22T10:36:58.503677Z", "commit": "417", "message": "I'm moving through SireMol to get it all to compile. I've just updated WeightFunction\nto the new Property model, and it weightfunction.cpp now compiles without error.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-20T21:23:07.589949Z", "commit": "416", "message": "I've got most of SireMol compiling now. There's a few problems with Mover.hpp that still need sorting.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-17T16:38:51.833577Z", "commit": "415", "message": "I'm having to make some fixes to the code as MolGroups etc. are not compiling on my linux\ndesktop. I've now got MolGroups compiling, so am now working through the rest of the code\n(the problem now is updating SireVol so that Space is just a pointer wrapper, rather\nthan a full function)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-16T22:11:37.103619Z", "commit": "414", "message": "MolGroups, MolGroupsBase and MolGroup all now compile :-). Things are now slowly getting there...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-16T12:26:38.750050Z", "commit": "413", "message": "I'm finishing up MolGroups and MolGroupsBase by getting them to compile. This is necessitating me \nadding more selection code to the ID classes and to PartialMolecule. It is getting there though\n(MolGroup has all of the code and now compiles, and all of the ID classes compile)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-15T22:41:51.090601Z", "commit": "412", "message": "I've nearly finished MolGroups and MolGroupsBase - this has made me extend the API of MolGroup\na little so that it can fully resolve MolID objects.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2008-01-14T12:07:05.218036Z", "commit": "411", "message": "I've filled in all of the MolGroupsBase and MolGroups code, and have also added MGNumList, which\nis an MGID that is just a list of MGNum numbers. \n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-13T18:02:09.324182Z", "commit": "410", "message": "I've filled in the query API functions for MolGroupsBase. These are quite powerful. They will\nallow the user to write python code like;\n\nfor atom in system.selectAll( AtomName(\"CA\") ):\n    atom = atom.move().translate( (1*angstrom,0,0) )\n    system.update(atom)\n\nThis code (obviously!) translates all of the atoms called \"CA\" in the system by 1 angstrom\nto the right along the x axis. How cool is that! The user can also be more selective, e.g.\n\nfor atom in system.selectAll( MGName(\"protein\") + AtomName(\"CA\") ):\n\n...or...\n\nfor atom in system.atoms( MGName(\"protein\") + MolIdx(0) + AtomName(\"CA\") ):\n\nThis last one moves all of the atoms called CA in the first protein in the \"protein\" group.\n\nWhat is even more cool is that this API is the same for *all* MolGroupsBase derived objects,\ni.e. System, ForceField and MoleculeGroups!!!\n\nCode is broken. \n\n", "author": "chryswoods"}, {"date": "2008-01-12T15:25:25.557816Z", "commit": "409", "message": "I've filled in all of the code for MolGroups, and am now sorting out the query interface\nthat is part of MolGroupsBase. This allows for the selection of individual atoms\n(or any other MoleculeView) from complex search terms within the whole set of \nMoleculeGroups. This interface is then the same (using the same code) for the \nSystem and ForceField classes as well!\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-03T18:14:20.137066Z", "commit": "408", "message": "Making progress on the MolGroupsBase and MolGroups classes. The API is set, and the search\nAPI is now very similar to that of Molecule (e.g. select() and selectAll() functions)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-01T18:01:41.756577Z", "commit": "407", "message": "I've added the streaming operators for MolGroup and have made a start on MolGroups (and\nMolGroupsBase).\n\nDinner interupts :-)\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2008-01-01T17:04:12.518691Z", "commit": "406", "message": "I've written all of ViewsOfMol, Molecules and MolGroup, and they all compile without error.\n\nI'm now going to move on to MolGroups, so that I can then finish up the whole molecule container\nhierarchy.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2008-01-01T10:20:26.646601Z", "commit": "405", "message": "I'm making good progress sorting out the api and implementation of the molecule container\nclasses. I've decided that containers will not be const classes (unlike Molecule). The\nreason is that I don't want to have to copy the container (of potentially thousands of \nmolecules) every time it is updated. The API as a const class was a bit messy.\n\nNow I have made Molecules a non-const class, and have created the code that means that\nit returns what has changed when it is modified. This will help the forcefield classes,\nwhich will use the MolGroup class (that uses Molecule) to keep track of how things\nchange. This abstracts all molecule bookkeeping code into a single place (Molecules),\nrather than as before, having it scattered across the forcefield classes.\n\nCode is still broken (yes, it has been broken for most of 2007, and is still broken\nnow that we have moved into 2008 - it will however be fixed soon, as I have a lot\nof production simulations planned that will use Sire this year!)\n\n", "author": "chryswoods"}, {"date": "2007-11-14T21:50:35.253143Z", "commit": "404", "message": "I've created the MolGroup class as the base of all MoleculeGroup type classes.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-11-13T10:00:39.926471Z", "commit": "403", "message": "I've worked out now how to relate the different Molecule group classes (MolGroup, MolGroups, MoleculeGroup, \nMoleculeGroups and ForceField/FFBase).\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-11-06T14:46:50.351197Z", "commit": "402", "message": "I've worked out nearly all of MoleculeGroups' API, and have planned how this will integrate with System\n(System will inherit from MoleculeGroups, but will reimplement the _pvt_???() functions, thereby\nallowing it to update the MoleculeGroups in the forcefields, and then copy these back to the \nMoleculeGroups object). I've also now worked out how the search API for MolID and MGID will work and\nhave now got to implement that so that MoleculeGroups will compile.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-11-05T22:51:41.481653Z", "commit": "401", "message": "I've written more of MoleculeGroups...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-11-05T12:11:04.288524Z", "commit": "400", "message": "I'm now working on MoleculeGroups - I think I've got the basics of the API for this class, and I am\nnow in the process of filling it in.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-11-04T09:42:27.786656Z", "commit": "399", "message": "I've fixed the problem in MolproFF where I'd made a mistake in the labelling of the command input.\n", "author": "chryswoods"}, {"date": "2007-11-04T09:29:40.723385Z", "commit": "398", "message": "I've manually added the wrapping for MolproFF::header and MolproFF::setHeader (as Py++ crashes out...)\n\n", "author": "chryswoods"}, {"date": "2007-11-04T09:26:15.520784Z", "commit": "397", "message": "Changing molproff so that the user can change the header.\n\n", "author": "chryswoods"}, {"date": "2007-11-03T15:15:15.735701Z", "commit": "396", "message": "MoleculeGroup is now written and it compiles without error. I think that I just have MoleculeGroups\nnow to finish and then the new SireMol will be nearly ready (and so I can get down to the hard\njob of sorting out the python wrapping and integrating it all with SireIO so that I can\nload some molecules into the new data structures)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-11-02T08:36:08.447907Z", "commit": "395", "message": "I've added a csreset before each molpro calculation in an attempt to fix a random molpro crash.\n\n", "author": "chryswoods"}, {"date": "2007-11-01T10:38:08.959922Z", "commit": "394", "message": "I've added in the changes necessary to make it work with the clearspeed accelerated version of molpro.\n\n", "author": "chryswoods"}, {"date": "2007-10-31T19:42:06.879483Z", "commit": "393", "message": "I've got the threading code working, but it still occasionally crashes...\n\n", "author": "chryswoods"}, {"date": "2007-10-31T11:06:28.910093Z", "commit": "392", "message": "I've changed the MolproSession so that it writes the output to a file, so that there is a chance of debugging molpro crashes (well a little chance - it depends on whether the output has been flushed to disk...)\n\n", "author": "chryswoods"}, {"date": "2007-10-30T14:44:24.180094Z", "commit": "391", "message": "I am debugging the segfault caused by running the MTSMC move in parallel...\n\n", "author": "chryswoods"}, {"date": "2007-10-29T22:22:56.149810Z", "commit": "390", "message": "I've filled in some of the functionality of the MoleculeGroup class.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-10-25T15:32:36.447379Z", "commit": "389", "message": "I've added code to allow parallel running of fast moves while evaluating the energy of the slow moves during an MTSMC move. It currently crashes when used on water - I wonder why?\n\n", "author": "chryswoods"}, {"date": "2007-10-24T20:00:18.749858Z", "commit": "388", "message": "I've written the Molecules class now, and have worked out how Molecules and MoleculeGroup are different\n(Molecules is the work-a-day class that is passed around and modified a lot, while MoleculeGroup\ncan assume that its contents are not as much in flux, so has more indexing, identification,\nversioning and searching functions).  Oh yes, and ViewsOfMol is a really nice little class :-)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-10-20T14:23:11.603587Z", "commit": "387", "message": "I've finished writing PartialMolecule now (and it compiles :-)\n\nI've also changed the API slightly - I've renamed mol.selectedAtoms() to mol.selection(), and have\nadded a mol.selector() function, which returns a Selector<T> that allows you to change the \nselection.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-10-20T11:40:48.233701Z", "commit": "386", "message": "I've added a ViewsOfMol class (which is now complete and compiles). This class can hold multiple arbitrary views\nof a single molecule (so is like a Selector<PartialMolecule>). This will form the basis of the Molecules\ncontainer class, thereby allowing multiple views of multiple molecules to be easily stored and passed\naround within the code. This solves the problem I had in the old design where multiple views of \na molecule couldn't be added to the same group (e.g. a user wanting to move lots of residues\nindividually from a molecule couldn't achieve it with a single MoleculeGroup, as each residue\njust got added to the single complete view of the molecule!).\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-10-18T15:26:00.811031Z", "commit": "385", "message": "Made changes to allow molpro to use clearspeed boards\n\n", "author": "chryswoods"}, {"date": "2007-10-18T09:44:58.778114Z", "commit": "384", "message": "I've created tags for the version of Sire used in the upcoming J Chem Phys 2007 paper, and\nfor the version that will be used at the Supercomputing 2007 conference in Reno.\n\n", "author": "chryswoods"}, {"date": "2007-10-17T09:31:55.322137Z", "commit": "383", "message": "I'm now up to getting MoleculeGroup to compile. Things are going well, it is just such a *slow* process\ngetting this all down in text...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-10-16T20:23:16.941000Z", "commit": "382", "message": "I've made lots of progress - AtomSelection is now complete, and I'm working through getting the rest of \nSireMol to compile (I'm up to evaluator.cpp)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-10-16T15:03:45.195670Z", "commit": "381", "message": "I've filled in a lot more of AtomSelection - this is definitely one of the largest single\nsource files in the whole of SireMol - it will probably top 2500 lines once it's done...\n\n(admittedly lots of comments!)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-10-16T12:01:29.317359Z", "commit": "380", "message": "I've made a lot of progress getting the rest of SireMol to compile - AtomSelection is now being rewritten,\nI'm happy with the comparison operators (MoleculeInfoData uses a fingerprint now for most things), and\nI've defined 'contains()' to means completely contains (containsAll()) and 'intersects()' to mean\ncontains some.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-10-13T22:09:46.204260Z", "commit": "379", "message": "All of the MoleculeView classes now compile, as do MoleculeData and MoleculeInfoData... \n\nI am getting close :-)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-10-13T15:37:14.380987Z", "commit": "378", "message": "I've take a big step towards finishing SireMol now - all of the view classes, Atom, CutGroup, Residue, \nChain and Segment all compile, as do explicitly instantiated template manipulator classes of these view :-)\n\nCode is still broken\n\n", "author": "chryswoods"}, {"date": "2007-10-12T21:03:33.393126Z", "commit": "377", "message": "I've now got atom.cpp to compile when I explicitly instantiate the atom manipulator classes\n(Mover<Atom>, Editor<Atom> and Selector<Atom>) in atom.cpp\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-10-12T20:28:01.740837Z", "commit": "376", "message": "I've finally got atom.cpp to compile without warnings or errors...!\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-10-12T16:56:40.662284Z", "commit": "375", "message": "I'm now working on getting Atom to compile. I've had to fix a problem with not being able to \ncall a template function of a template class from another template, so I've had to create\na cunning workaround by overloading template functions (see Selector::setProperty and \ndetail::set_property(Atom*,...) in atom.h).\n\nCode is still broken\n\n", "author": "chryswoods"}, {"date": "2007-10-12T13:58:08.810740Z", "commit": "374", "message": "I've added MolNum, and have also now got MoleculeData to compile (central pillar of SireMol, so pretty\nsignificant :-)\n\nCode is still broken\n\n", "author": "chryswoods"}, {"date": "2007-10-12T10:20:28.565175Z", "commit": "373", "message": "I've finished updating the API for Properties, and have tied this into the APIs of MoleculeData and MoleculeView.\nSireBase and SireID both now compile and link. SireMol is next to get working...\n\nCode is very broken, but is getting better...!\n\n", "author": "chryswoods"}, {"date": "2007-10-11T15:31:49.285314Z", "commit": "372", "message": "I've cleaned up the API of Properties so that it now matches the API of MoleculeData (as I now\nhave a very clear idea of how Properties will be used in the code). I've also upgraded\nthe version number used in MoleculeData to 64bits, so I am pretty sure now that I won't\nrun out of version numbers :-)\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-10-11T14:22:57.684887Z", "commit": "371", "message": "I'm now moving through the code to see how much I can compile. This will help me fill in the missing parts\nso that I can then test the new SireMol design (and then port over SireFF and SireMM....)\n\nCode is broken, and python wrappers are disabled.\n\n", "author": "chryswoods"}, {"date": "2007-10-11T13:18:52.219667Z", "commit": "370", "message": "I've written AtomProperty<T> and AtomCoords (an AtomProperty<Vector>) - and AtomCoords compiles without\nwarning or errors ;-)\n\nI've also now written CGProperty<T>, ResProperty<T>, ChainProperty<T> and SegProperty<T>\n\nCode is still really broken\n\n", "author": "chryswoods"}, {"date": "2007-10-11T10:58:48.358704Z", "commit": "369", "message": "I'm working on the view properties (e.g. AtomProperty, ResProperty etc.). I've worked out how this ties\nin with the views, and how to allow the user to easily set properties. For example, a user can use\nthis design to set the charges of all of the atoms in a residue via the command;\n\nmol = mol.select(ResNum(3)).atoms().edit() \\\n         .setProperty( \"charge\", [0, 0.3*mod_e, -0.3*mod_e] ) \\\n         .commit().molecule()\n\nor, spread over lots of lines (as would be more normal)\n\nres3 = mol.residue(ResNum(3))\n\neditor = res3.atoms().edit()\n\neditor.setProperty( \"charge\", [0, 0.3*mod_e, -0.3*mod_e] )\neditor.setProperty( \"coordinates\", [ (0,0,0), (1,1,1), (2,2,2) ] )\neditor.setProperty( \"lj\", [ LJ(3.5*angstrom,0.15*kcal_per_mol), \\\n                            LJ.dummy(), LJ.dummy() ] )\neditor.setProperty( \"mass\", [1.0*g_per_mol, 6*g_per_mol, 2*g_per_mol] )\n\nmol = editor.commit().molecule()\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-10-07T17:59:59.100161Z", "commit": "368", "message": "I've sorted out the molecule info classes. I've got rid of MoleculeInfo, ResInfo, SegInfo etc.,\nas they weren't actually achieving anything that wasn't already available via the \nMolecule, Residue, Segment etc. interfaces, and also there was quite a potential for\nconfusion between an 'info()' object and also '.metadata()'. \n\nCode is still very broken\n\n", "author": "chryswoods"}, {"date": "2007-10-07T14:25:41.499950Z", "commit": "367", "message": "I've pretty much finished writing all of the functions for Atom, Residue, Chain, CutGroup and Segment, and \nhave also finished off Selector<T> (which replaces AtomsInMol, ResInMol etc.)\n\nCode is still really broken, but I am soon to start compiling SireMol, so things will soon start\nbeing fixed ;-)\n\n", "author": "chryswoods"}, {"date": "2007-10-04T19:54:33.512506Z", "commit": "366", "message": "I've worked out the API for most of the molecule view derived classes and I am beginning to fill them in.\nI've also added the files for the rest of SireMol - once these are filled then the new SireMol will be\ncomplete and I'll be ready to move on to fixing SireFF/SireMM...\n\nCode is very, very broken!!!\n\n", "author": "chryswoods"}, {"date": "2007-10-04T15:45:09.013952Z", "commit": "365", "message": "I've worked out how Atom/Res/Chain/CutGroup/Seg/Mol properties will work, so I can now write code\nsuch as;\n\natom.setProperty(\"coordinates\", [1,2,3])\natom.setProperty(\"element\", Element(\"Carbon\"))\n\nmol.setProperty(\"charge\", AtomicCharges([1,2,3,4,5]))\n\nCool :-)\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-10-04T13:04:21.241244Z", "commit": "364", "message": "I've finished off the Evaluator class.\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-10-02T15:48:47.104076Z", "commit": "363", "message": "I've written a lot of Evaluator now. Still some to go though...\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-10-02T12:19:42.745927Z", "commit": "362", "message": "I've renamed PropertyExtractor to Evalutor (as mol.evaluate() is a better description than\nmol.extract()). I've also realised that I don't need this to be a template class, so\nEvaluator can be a concrete class, rather than using Evaluator<T>. This is because there\nare no T dependent parts of evaluator (as far as I can see)\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-10-02T11:28:08.591351Z", "commit": "361", "message": "I've finished filling in the code for WeightFunction\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-10-01T15:48:28.189208Z", "commit": "360", "message": "I've written most of the new WeightFunction classes, moving this over to the property framework\nand making them use the capabilities of Evaluator<T>\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-10-01T14:45:42.327493Z", "commit": "359", "message": "I've written all of Connectivity (and ConnectivityBase and ConnectivityEditor). I need to test whether this\nwill compile, and then test that it actually works!\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-10-01T07:38:24.893578Z", "commit": "358", "message": "I've renamed MoleculeBonds as Connectivity, as I want to clearly separate the concepts of atomic\nconnectivity from bonding (as the bonds and connectivity are not necessarily the same thing,\nespecially when dummy atoms are involved!)\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-09-30T17:08:25.370953Z", "commit": "357", "message": "I've created the new PropertyMap class and integrated it with Properties and MoleculeData. The new\ndesign means that I can now have default properties, can detect when a user sets a new \nproperty source, and also that the user is able to set a value of a property rather than\na source. To make this work, I have also changed the versioning of properties in MoleculeData\nso that they are separate to the properties (rather than being a piece of metadata - which to\nbe honest looked a little slow!). The default now is that a version number of 0 is returned\nwhen the molecule doesn't contain the property or if the value is held in the key, rather\nthan in the molecule. This will prevent the code from falling over if default or \nuser-supplied properties are used instead of properties held in the molecule.\n\nCode is still very broken\n\n", "author": "chryswoods"}, {"date": "2007-09-30T15:03:29.365297Z", "commit": "356", "message": "I've moved SireFF::ParameterMap to SireBase::PropertyMap, so that I can rewrite it to be the \ngeneral class that is used to map all the names of all properties\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-09-30T11:03:55.870451Z", "commit": "355", "message": "I've filled in all of the Mover<T> class. My next step is to rewrite PropertyMap and PropertyName as\nMover<T> exposed some problems with the old design (and showed how a new design solved those problems,\nas well as solving problems that I have with PropertyMap and the forcefield classes ;-)\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-09-28T08:27:13.974736Z", "commit": "354", "message": "I've worked out how properties are specified, and have written the code that allows a bond to be changed.\n\n(the internal coordinate changes are the hardest part of Mover<T> to write, so I am pleased that\n change(bond) looks clean and understandable)\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-09-27T19:48:54.762443Z", "commit": "353", "message": "I am working on Mover<T>, as this is the second-hardest to implement Manipulator (Editor<T> is the hardest), and \nif this works, then I can be happy that the Molecule design is working. So far the Mover<T> design is much\ncleaner than the old MoleculeMover class, and *so* much cleaner than the original Molecule class (which had\nhundreds of stupid overloaded moving functions - I am so pleased that I didn't stick with that old design\n - so rewriting does have its advantages!)\n\nCode is still really broken (major disadvantage of rewriting!)\n\n", "author": "chryswoods"}, {"date": "2007-09-27T15:54:32.125326Z", "commit": "352", "message": "I'm now making good progress with the design and implementation of the new molecule classes. Yes, yet another\nnew molecule class design! However, this time learns from all of the lessons before, and is more of a\nconsolidation of the ideas and half-implemented bits of code that have arisen during the development\nof this project. The new molecule design now more formally splits classes between view classes \n(Molecule, Segment, CutGroup, Chain, Residue, Atom), container view classes (SegmentsInMol,\nCutGroupsInMol, ChainsInMol, ResiduesInMol, AtomsInMol and PartialMolecule), and action classes,\nwhich are implemented as templates on top of the view and container view classes, e.g.\nMover<Molecule>, Editor<Residue>, Evaluator<ChainsInMol>, Selector<PartialMolecule>. I have to use\ntemplates so that the original view type is restored on a commit, which is required for the python\nwrappers (which don't have the same copy semantics as C++).\n\nThe new design allows code such as this to be written;\n\natoms = mol.atoms( ResName(\"ALA\") + ResNum(35) )\n\nfor i in range(0, len(atoms)):\n    atoms = atoms.move(i).translate( i*Vector(1,2,3) )\n\nmol = atoms.molecule()\n\nNote how the container view class (AtomsInMol) solves the problem of moving part of a molecule not\nupdating the rest of the objects in the container (e.g. the following code would be wrong)\n\natoms = [ list of atoms from the molecule ]\n\nfor i in range(0, len(atoms)):\n    atoms[i] = atoms[i].move().translate( i*Vector(1,2,3) )\n\nThis is because even if each of the atoms in 'atoms' are a view of the same version of the molecule\nbefore moving, they become independent and view different versions of the molecule after moving. \n\nCode is incredibly broken now!!!\n\n", "author": "chryswoods"}, {"date": "2007-09-27T09:27:21.638720Z", "commit": "351", "message": "MoleculeInfoData is now complete, and compiles without warning. Of course it has yet to be tested as the\nrest of SireMol is still really broken!\n\nCode is very broken.\n\n", "author": "chryswoods"}, {"date": "2007-09-26T09:51:38.179565Z", "commit": "350", "message": "I'm making good progress filling in all of the stubs for the ID scheme. I've completed about 2/3 of MoleculeInfoData\nnow :-)\n\nThe code is still very broken\n\n", "author": "chryswoods"}, {"date": "2007-09-25T14:37:37.679614Z", "commit": "349", "message": "I've filled in sufficient code that AtomIdentifier compiles. I've finished off the whole ID design now, and am now \njust filling in the stub code so that it will all compile (so it can be tested).\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-09-24T15:02:25.442396Z", "commit": "348", "message": "I've added some of the final parts of the ID design - the Specify and AtomsIn template classes. These allow me to write\nIDs like;\n\n//the fifth atom in the third residue called \"ALA\"\natom = mol.select( ResName(\"ALA\")[2].atom(4) )\n\n//the last five atoms of the chain called \"A\" (or the last chain called \"A\")\natoms = mol.select( ChainName(\"A\")(-5,-1) )\n\n//the first atom in the second residue identified as ALA:32\natom = mol.select( (ResName(\"ALA\") + ResNum(32))[1].atom(0) )\n\n//the first atom called \"CA\" with number 25\natom = mol.select( (AtomName(\"CA\")+AtomNum(25))[0] )\n\n//all of the atoms in the second \"CYS\" residue in chain \"B\"\natoms = mol.selectAll( (ChainName(\"B\")+ResName(\"CYS\"))[1].atoms() )\n\nCode is still very broken\n\n", "author": "chryswoods"}, {"date": "2007-09-24T14:08:21.928039Z", "commit": "347", "message": "I am making lots of progress now with the ID classes, having now resolved most of the issues with the design,\nand having now got a clear idea of how it all fits together.\n\nCode is still very broken\n\n", "author": "chryswoods"}, {"date": "2007-09-22T11:16:28.683353Z", "commit": "346", "message": "I'm making good progress implementing the ID classes and MoleculeInfoData - see ideas/atom_id_classes for a more concrete\nvision of how the ID classes will work, and how they interoperate with the Molecule Manipulator classes \n(Mover, Extractor, Editor, Selector)\n\nCode is still very broken\n\n", "author": "chryswoods"}, {"date": "2007-09-21T12:21:36.519226Z", "commit": "345", "message": "I've realised that I shouldn't have CGNum and SegNum, and that I also have to have ChainName and ChainIdx - the info class\nnow identifies residues using the combination of ChainName,ResName,ResNum and even then, this doesn't have to be unique,\ne.g. ChainName(\"A\")+ResName(\"ALA\")+ResNum(5)+ResIdx(0) is the first ALA-5 residue found in chain A.\n\nThe same thing works with atoms as well, so now names don't need to be unique, so AtomName(\"CA\")+AtomIdx(3) is the \nfourth atom called CA found in the molecule.\n\n", "author": "chryswoods"}, {"date": "2007-09-20T15:38:36.268100Z", "commit": "344", "message": "I've finished upgrading the sqlite driver - the new driver compiles and links properly - I still need to test it.\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-09-20T15:21:03.772276Z", "commit": "343", "message": "Upgrading the SQLITE driver plugin from 3.2 to 3.3 (the version that comes with Qt 4.3.1)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-09-20T10:46:38.623313Z", "commit": "342", "message": "I'm working on the new MoleculeInfo class that will work with the new ID classes. Everything will be based on \nMoleculeInfoData (edited by MoleculeInfoDataEditor). I have only sketched out the header of this class - \nreally only just the data that must be stored and how it will be stored.\n\nCode is very broken.\n\n", "author": "chryswoods"}, {"date": "2007-09-19T13:00:39.164469Z", "commit": "341", "message": "I've got SireID compiling, and have got many of the files associated with the new ID scheme in SireMol to compile. The \nnext step is to update SireMol to use this new ID scheme (by rewriting MoleculeInfo/ResidueInfo)\n\n", "author": "chryswoods"}, {"date": "2007-09-13T11:17:51.903614Z", "commit": "340", "message": "I've fleshed out all of the ID classes used with a Molecule. I have also sorted out how the Identifier classes\nwork as well (these derived from ID, so can also be ID classes). I now need to test to see if all of this will\ncompile, and then test to see if it will work as well!\n\nCode is still extremely broken\n\n", "author": "chryswoods"}, {"date": "2007-09-13T09:20:14.041472Z", "commit": "339", "message": "I've moved NewAtom to Atom - this was an experiment that worked ;-)\n\nCode is still really broken!\n\n", "author": "chryswoods"}, {"date": "2007-09-13T09:18:31.602104Z", "commit": "338", "message": "I'm cleaning out SireMol and removing all files that are from the old design, so that I have the space to finish up the \nnew design. In particular, I am now committing myself to making Atom, Bond, Angle, Dihedral, Improper all views\nof a Molecule, and also I am going to rewrite MoleculeBonds and ResidueBonds so that they are part of the\nMoleculeInfo and ResidueInfo objects (so can use CGAtomIDs). In addition, I have removed EditMol/EditRes as they\nno longer fit in with the design - I am going to write a MoleculeEditor, ResidueEditor, CutGroupEditor etc. classes.\n\n(so yes, CutGroup will become a view as well, as will Segment. I will also have a user-visible MoleculeBonds and\nResidueBonds like pair of classes that are also views - thereby allowing themselves to be split into two - returning\na GroupedMolecule class, that is a view of a molecule that contains two sub-views - thereby allowing the editing\nof one sub-view to also update the other)\n\nCode is now extremely broken\n\n", "author": "chryswoods"}, {"date": "2007-09-13T08:58:38.638652Z", "commit": "337", "message": "I've added all of the AtomIDCombo based objects. The IDs now make a lot more sense now that I am saying that everything \nis a view into the molecule (so even Atom is a view into a Molecule). This removes the need for Atom to contain\nthe residue number, and means that Residue is now no more special than (the as yet unwritten) Segment.\n\nCode is still very broken.\n\n", "author": "chryswoods"}, {"date": "2007-09-12T15:45:36.594886Z", "commit": "336", "message": "I've added the SireID library that holds the base classes of all of the ID types, as my ideas on how to ID atoms (and \nindeed objects) are now becoming more concrete. There is still a lot to do to realise it all however...\n\nCode is very broken.\n\n", "author": "chryswoods"}, {"date": "2007-09-10T20:58:19.829666Z", "commit": "335", "message": "I've added the code so that SparseMatrix can be set to be symmetric or asymmetric, and also so that it is very quick \nto take the transpose (very useful for the AtomPairs - AtomPairs still needs to be updated to work with this).\n\nI've also been working on how to map atoms from one molecule to another (useful for aligning molecules or copying\nparameters) - this will require me to finally sort out the AtomID type classes. I've written a plan on how\nto do this in ideas/atom_id_classes\n\nThe code that compiles now does work on my mac in python. The problems I was experiencing (bus errors mainly) \nwere caused by me using a boost python library that was linked against python2.3 while Sire was compiled \nagainst python2.5 - so it didn't work in either the python2.3 or python2.5 interpreters. I reinstalled \nboost::python so that it is now linked against python 2.5. Also, I had to ensure that DYLD_LIBRARY_PATH\nincluded my ~/local/lib directory that contained the sire libraries.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-09-07T13:35:35.998289Z", "commit": "334", "message": "Continuing to fix matrix4 - this is a commit from Linux - the code compiles and runs, though the alignment code does not produce the expected output.\n\n", "author": "chryswoods"}, {"date": "2007-09-07T13:34:02.108596Z", "commit": "333", "message": "Fixing some bugs in calculateaxes and matrix4 - bugs not fully fixed yet though...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-09-07T09:12:39.330221Z", "commit": "332", "message": "I've now got everything compiling on my mac (well, I've disable SireMM and everything based on SireMM as I still \nhave to sort out the metaforcefields). There are some installation problems though on my mac, as the python\nmodules can't find the Sire libraries - perhaps I have some form of config problem. This means that I haven't\nyet tested anything, so the code must still be assumed to be broken. I am going to load this all up in\nlinux and see what happens...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-09-06T21:15:17.409825Z", "commit": "331", "message": "This is the first commit from my mac. I have been porting the code (well, mainly build system) over to OS X. I'm\nnot yet finished, and I then have to fix everything that I have broken...\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-08-05T16:15:16.902206Z", "commit": "330", "message": "I've fixed the wrapping of Cartesian and PeriodicBox - they now work very well with SireBase::Properties!\n\nCode is still broken.\n\n", "author": "chryswoods"}, {"date": "2007-08-05T13:13:43.011195Z", "commit": "329", "message": "I've updated SireVol Volume classes to use the new Property class, and have wrapped up Properties so that it works. I've had to change how some of the wrapping works as I was getting Python typeerrors, as every single base class needs adding to each derived class (including recursive bases)\n\nCode is still broken\n\n", "author": "chryswoods"}, {"date": "2007-08-04T21:21:23.965071Z", "commit": "328", "message": "I've added the python wrapping for Properties, and am in the process of debugging it.\n\nCode is still broken.\n\n", "author": "chryswoods"}, {"date": "2007-08-04T11:55:49.532830Z", "commit": "327", "message": "SireBase now compiles - I've added most of the Properties functions, and have removed version number from Properties (as versioning doesn't work, as you can't guarantee correctness if you remove a property, then re-add it).\n\nCode is still very broken.\n\n", "author": "chryswoods"}, {"date": "2007-08-03T15:48:12.014362Z", "commit": "326", "message": "I've been working on sorting out the properties, and have now begun work on a Properties class, which holds a set of properties, together with version and metadata.\n\n", "author": "chryswoods"}, {"date": "2007-08-02T16:02:32.020959Z", "commit": "325", "message": "In sorting out the new base hierarchy of the forcefields I have decided to make everything that is virtual into a property. This has meant that I am now redesigning the property system as well - I just can't leave well enough alone!\n\n", "author": "chryswoods"}, {"date": "2007-07-29T13:33:58.959834Z", "commit": "324", "message": "I am moving all of the 2-body forcefields to use a set of template classes as a base. This will make it much easier to provide complete converage of lots of different two-body functional forms.\n\nCode is extremely broken.\n\n", "author": "chryswoods"}, {"date": "2007-07-26T15:35:56.500646Z", "commit": "323", "message": "I'm continuing to work on the intramolecular CLJ energies. I'm coming to the conclusion that the nb scaling parameters should be part of CLJMolecule.\n\nCode is very broken\n\n", "author": "chryswoods"}, {"date": "2007-07-25T14:52:55.537585Z", "commit": "322", "message": "I am now starting work on the foundations of the intramolecular forcefield classes.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-06-12T07:53:55.479146Z", "commit": "321", "message": "I've fixed a couple of bugs in RDFMonitor and MolproSession.\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-06-06T09:39:29.499859Z", "commit": "320", "message": "I've fixed a bug in PairMatrix that meant that it went to the wrong matrix position when passed an index when it had a different number of rows and columns. Silly bug - made the TIP4P with TIP5P energies all wrong!\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-06-04T15:17:01.854290Z", "commit": "319", "message": "I've simplified the wrapping of Space now as well (it also now automatically converts to the derived class in python ;-)\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-06-04T12:46:00.871248Z", "commit": "318", "message": "I've cleaned up the python wrapping of the Move and Moves class hierarchies and have also made the Moves class slightly simpler to use.\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-06-03T15:34:04.342251Z", "commit": "317", "message": "I've fixed a bug in the RDF code that meant that it was calculating RDFs that were 75% too small!\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-06-02T09:13:15.293327Z", "commit": "316", "message": "I've updated the MTSMC script to record the RDFs between the QM and MM regions. I am testing it at the moment...\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-06-02T08:35:29.552995Z", "commit": "315", "message": "Ok, I think that the RDF code is now working - I'm running a test script (test/SireMove/rdf.py) that is calculating the RDF of the LJ box.\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-06-01T21:39:03.614793Z", "commit": "314", "message": "The RDF code doesn't work too well as I forgot that AtomIndex is not the best Atom ID (especially as I use residue number as a way of numbering solvent molecules...). As a quick fix I have fixed the code in EditMol to allow renumbering of residues, and I have also fixed some of the wrapping of RDF and RDFMonitor. There is now just the problem that the python wrapping is unhappy with a hash of tuple of qset of AtomIndexes, as it can't hash it.... (rather unsurprisingly, bad design on my part!)\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-06-01T15:57:32.695896Z", "commit": "313", "message": "I've added an RDFMonitor so that I can monitor RDFs during a running simulation. I will use this with my QM/MM simulations to see what the RDF is like around QM water molecules using different basis sets and different MM models. The RDFMonitor still needs to be tested (job for this weekend ;-)\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-06-01T07:53:14.461720Z", "commit": "312", "message": "This is a commit to note that this version of the code has now been validated against ProtoMS for an NPT box of 125 LJ particles. Both Sire and ProtoMS generated the same ensemble, saw the same phase transition and got the same average and fluctuation of the energy and volume. The only downside was that Sire was nearly four times slower than ProtoMS on this system...\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-31T17:32:07.480468Z", "commit": "311", "message": "I am now testing the volume moves using test/SireMove/volumemove.py which runs an NPT simulation of a box of 125 LJ particles.\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-29T19:55:42.223118Z", "commit": "310", "message": "I've finished writing the VolumeMove and associated classes. It still all needs testing...\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-29T15:50:31.466714Z", "commit": "309", "message": "I have nearly finished writing the volume move now (though still needs testing). It is a very general class, which uses two function classes (MolMappingFunction and VolChangingFunction) to allow specialisation to lots of different use cases.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-05-29T10:53:39.689647Z", "commit": "308", "message": "I am still working on the VolumeMove class. I have come to the decision that I will take the performance hit at each volume move of ensuring that each molecule is moved into the central box (though is not actually mapped). This is the best compromise, as I can then guarantee that all molecules are in the central box at all times, and the user also has the ability to map just a subset of molecules (with the unmapped molecules just moved into the central box without any mapping). Taking the performance pain at each volume move is better than risking molecules drifting out the box, and having to periodically map them all back in.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-05-28T16:01:38.043220Z", "commit": "307", "message": "I've fixed the bugs in the MappingFunctions (can now successfully map between periodic boxes). I am working on MolMappingFunction to allow volume changes. I am thinking about using a light touch, namely that the system does not manage the space at all, but rather leaves that up to the simulation.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-05-26T17:35:35.112532Z", "commit": "306", "message": "I've added the code to allow changes in the size and position of the PeriodicBox space. In tests it doesn't look like it works though...\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-25T13:05:58.161002Z", "commit": "305", "message": "I've added a hierarchy of MappingFunctions that will be used by the volume moves to map molecules from one space into another. I've added the python wrappers as well, though it has yet to be tested...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-05-24T19:37:28.157038Z", "commit": "304", "message": "I have added the WeightedMoves class, that allows a simulation to contain a range of moves which are chosen at random (with the probability of being chosen based on the move's weight). I've yet to test this class.\n\nThe code compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-24T18:23:38.076488Z", "commit": "303", "message": "I've added the ability to easily change the Molpro program used to calculate the energy, and also to change the basis set. I've updated MolproSession so that it can get the energy from the initial calculation, rather than from a second, unnecessary calculation.\n\nCode compiles, links and runs and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-24T10:30:46.638232Z", "commit": "302", "message": "I've fixed the HarmonicFF forcefield and have written a unit test for it. I have now used HarmonicFF to verify that both RigidBodyMC and MTSMC both converge the average energy for a particle in an harmonic well to the correct answer (3/2 kT). This is good, as it shows that my Monte Carlo code is working, and that my the high acceptance ratio for the MTSMC QM/MM steps was real.\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-23T21:59:50.575321Z", "commit": "301", "message": "I'm testing HarmonicFF and it doesn't work... test/test.py gives the wrong answers...\n\nCode compiles, links and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-23T15:57:50.226428Z", "commit": "300", "message": "I've added a HarmonicFF which adds harmonic restraints to molecules or parts of molecules. I will use this forcefield to test the Monte Carlo code. (I haven't tested it yet though).\n\nCode compiles and links, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-22T10:25:36.651924Z", "commit": "299", "message": "I've found and fixed the source of the memory leak. The problem was in CoordGroup, where I copied the contents of the storage array, forgetting that this copied the value of the reference count. Incrementing this copied reference count then meant that it could never be set to zero, so the CoordGroup was never deleted. I've fixed this by setting the reference count equal to 1 in the copy, and the tests I have run show that the total memory used by the program is conserved during a simulation.\n\nCode compiles, links and runs, but the molproff tests still fail\n\n", "author": "chryswoods"}, {"date": "2007-05-17T16:00:44.935381Z", "commit": "298", "message": "I have fleshed out the SystemMonitor class so that I can now monitor average energies during a simulation. I have also fixed a bug in Squire that led to crashes after 1024 energy evaluations as I wasn't closing the network connection! I have also added automatic conversion from SystemMonitor to the correct derived type.\n\nCode compiles, links and runs, squire siretest fails, but I am using this code to run the methane and water test QM simulations.\n\n", "author": "chryswoods"}, {"date": "2007-05-16T15:29:16.951255Z", "commit": "297", "message": "I've debugged MolproFF and MTSMC and am now using this version of the code to run a couple of test QM/MM Monte Carlo simulations on water in a water box, and methane in a water box. Annoyingly, the slowest part of the calculation are the MM MC moves...! Oh well...\n\nCode compiles, links and runs, but I still need to fix some of the molproff unit tests, so siretest fails.\n\n\n", "author": "chryswoods"}, {"date": "2007-05-15T15:52:19.994552Z", "commit": "296", "message": "It's too late in the day to do some serious debugging, so I've been building the foundation of the monitor classes that must be implemented so that I can average energy differences to obtain free energies....\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-05-15T14:11:04.720444Z", "commit": "295", "message": "I am currently testing the MTSMC class (test/test.py). It looks like it is working. In testing it I have unconvered other bugs that have now been fixed. I will certainly be looking at how forcefield components are combined at a later date, as I have really gone off the SireCAS::Function class and FFExpression, and instead would like to just associated functions with symbols... However, I've got no time for that now.\n\nCode compiles, links and runs, siretest completes without error, though test/test.py is revealing a bug in the MM molecule array of MolproFF - it randomly causes an assertation failure or an array bounds failure.\n\n", "author": "chryswoods"}, {"date": "2007-05-13T20:56:25.913314Z", "commit": "294", "message": "I've written the MTSMC code and added its python wrapping. MTSMC still needs testing.\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-13T11:57:51.279245Z", "commit": "293", "message": "The simulation last night appeared to work (stable energy, PDBs looked good, stable ~40% acceptance ratio)\n\nI'm now writing the multiple time step Monte Carlo move. To do this I have changed ForceFields and ForceField to use a static 'total' energy symbol to represent the total energy.\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-12T21:59:05.406306Z", "commit": "292", "message": "I'd forgotten that I needed to set the system space! I've added it in a basic manner, but I will need to work on the code that changes it when I write the volume move code...\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-12T21:16:14.212347Z", "commit": "291", "message": "I've got the code working with a simple Monte Carlo script that I will use to run a 10M step MC simulation of the water box tonight (test/test.py)\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-12T17:56:24.250538Z", "commit": "290", "message": "I've now got a fully working Monte Carlo simulation of a water box!!! In getting it all working I have removed SireMaths::Angle and replaced it with SireUnits::Dimension::Angle. The reason MC was not working before was because I was having a maximum move size of 5A! Silly me - it should only have been 0.15A at most - no wonder all of the moves were rejected!\n\nI've looked at the results of 1000 MC moves, and it looks good. I'll run a longer simulation overnight and see how that holds up.\n\nThe code compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-12T11:24:20.899423Z", "commit": "289", "message": "I've fixed the problems with the MoleculeGroupID.\n\nCode compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-12T09:58:40.122506Z", "commit": "288", "message": "I've fixed nearly all of the remaining problems with the python wrapping of temperatures (they weren't converting implicitly as they should). The only small problem now is the implicit conversion of generalunit (kelvin) to TempBase (celsius and fahrenheit). I'll sort that out some other time....\n\nI've added some tests of the python unit wrappers - test/SireUnits/testunits.py\n\nCode compiles, links and runs, with siretest giving the same errors as for the last few revisions.\n\n", "author": "chryswoods"}, {"date": "2007-05-11T22:39:58.813315Z", "commit": "287", "message": "I've added an Angle dimension, and it all appears to be working :-)\n\nCode compiles, links and runs, though I still have the same failure in siretest regarding the MoleculeGroupID.\n\n", "author": "chryswoods"}, {"date": "2007-05-11T21:56:49.149832Z", "commit": "286", "message": "I've now implemented more sophisticated python wrapping of the units classes - I now have dynamic run-time checking of units in python, with compile time checking in C++ - this is the best of both worlds ;-)\n\nThe only thing remaining with the units now is to add an 'Angle' dimension, and then update the code to replace SireMM::ChargeParameter with SireUnits::Dimension::Charge and SireMaths::Angle with SireUnits::Dimension::Angle.\n\nThe code compiles, links and runs, and siretest mostly completes without error (still problems with MoleculeGroupID...)\n\n", "author": "chryswoods"}, {"date": "2007-05-11T15:54:10.873597Z", "commit": "285", "message": "I've added the wrapping of the temperature functions, and am beginning work on more sophisticated wrapping that will allow dimension-safe unit conversions in python as well.\n\nCode compiles, links and runs, though there are some problems in siretest\n\n", "author": "chryswoods"}, {"date": "2007-05-11T14:34:08.971749Z", "commit": "284", "message": "I've got the updated SireUnits library working, and have provided a primitive python wrapping (which mostly works). I think that I will eventually need a more sophisticated python wrapper that mirrors the units classes rather than wrapping them (as the dimension checking is a compile time thing, which is tricky to wrap in python!).\n\nThe code compiles, links and runs, most of siretest completes without error, but there are still problems caused by ID numbers.\n\n", "author": "chryswoods"}, {"date": "2007-05-10T22:07:06.570808Z", "commit": "283", "message": "Working out base units is a lot harder than I thought...\n\ncode is broken\n\n", "author": "chryswoods"}, {"date": "2007-05-10T15:48:00.980600Z", "commit": "282", "message": "I have generalised the units code that I wrote yesterday so that it will work with combinations of units (thereby allowing me to add quite a bit of units type safety to my code ;-)\n\nI am still implementing it, so the code is broken.\n\n", "author": "chryswoods"}, {"date": "2007-05-09T15:42:54.524111Z", "commit": "281", "message": "I've added the python wrapping for the system and move classes, and am now beginning to test them (I have got a python script that actually performs some monte carlo for real now - see test/test.py). However, it doesn't yet seem to work....\n\nI've also run into some problems with ID numbers (related to the switch that IDMajMinVersion doesn't increment the ID in its constructor...) - this has caused a failure in siretest\n\nCode compiles, links and runs, but there are errors in siretest and test/test.py does not work as expected.\n\n", "author": "chryswoods"}, {"date": "2007-05-09T14:07:04.569287Z", "commit": "280", "message": "I've cleaned up the automatic conversions of the new SireUnits classes (now they work well - after moving mole from being a raw number into being a Quantity). I have also added the wrapping of the maths free functions, variables and operators.\n\nThe code compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-09T11:05:02.625124Z", "commit": "279", "message": "I have now got RigidBodyMC and MonteCarlo to compile (though they still need to be tested). In doing so I realised that my SireUnits library was pretty rubbish as it couldn't handle temperature conversions (e.g. celsius to kelvin). I've completely rewritten SireUnits, and have also finally got its wrappers working with Py++ - so now I have completely automated and symmetric units in C++ and python!\n\nCode is broken (though you can do some cool unit conversions now!)\n\n", "author": "chryswoods"}, {"date": "2007-05-08T15:49:22.653828Z", "commit": "278", "message": "I'm writing the Monte Carlo classes, and have pretty much finished RigidBodyMC\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-05-08T14:04:08.226783Z", "commit": "277", "message": "I've fixed some of the problems with the sampler test. I've also completely written PrefSampler (though it is not tested yet) and I have filled in the missing functionality required by PrefSampler. I have also cleaned up the API of RanGenerator, and have completely replaced MoleculeVersion with Version (indeed, MoleculeVersion has now been removed - at last!)\n\nThe code compiles, links and runs, though there are still errors when running siretest that are caused by the serialisation and deserialisation of the class...\n\n", "author": "chryswoods"}, {"date": "2007-05-07T21:23:56.386865Z", "commit": "276", "message": "I've been looking at how preferential sampling should work, and think that I've now got it right (tested algorithm in techdocs/prefprob.pl)\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-05-06T21:07:36.433753Z", "commit": "275", "message": "I am working on the preferential sampling sampler (PrefSampler)\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-05-06T16:01:16.211706Z", "commit": "274", "message": "I'm working on the Sampler class (I've written UniformSampler and am writing tests for it). There is a crash after deserialising the sampler - I think that this is related to deserialising the RanGenerator.\n\nCode compiles, links and runs, though siretest crashes after deserialising a UniformSampler.\n\n", "author": "chryswoods"}, {"date": "2007-05-06T12:19:43.002613Z", "commit": "273", "message": "I've fixed the bugs :-)\n\nThe code compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-05T22:11:45.497739Z", "commit": "272", "message": "Still testing and fixing bugs in ForceFields...\n\nCode compiles, links and runs, but there are two errors when running siretest\n\n", "author": "chryswoods"}, {"date": "2007-05-05T14:06:28.511438Z", "commit": "271", "message": "Woops - deleted _Mol.main.cpp by mistake!\n\nThis version compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-05T13:46:46.004054Z", "commit": "270", "message": "I've fixed the bugs in the group forcefields, and have added more \"change\" molecule tests. In doing so I have also added all of the move fnctions to a basic form of MoleculeMover, and in doing so removed all of the move functions from Molecule, Residue, NewAtom, EditMol and EditRes. This has allowed me to simplify the python wrappers for these classes.\n\nCode compiles, links and runs well, with siretest completing without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-05T06:25:39.813063Z", "commit": "269", "message": "I've finished updating all of the code to use the new Molecules class. It seems to work quite well, and I like the new syntax and API of the class (it makes things a lot more straightforward).\n\nI've been playing with changing molecules in the forcefields, and there is now a failure with the InterGroupLJFF - I think that the problem is that my change code does not take into account that the molecule may exist in more than one group at the same time. I will need to update all three of the InterGroup???FF classes to take account of this.\n\nCode compiles, links and runs, and siretest has two errors, both related to InterGroupLJFF.\n\n", "author": "chryswoods"}, {"date": "2007-05-03T16:09:55.195379Z", "commit": "268", "message": "Adding tests for changing molecules has thrown up the problem of me having no good container for molecules (e.g. I am using QVector<PartialMolecule>, QHash<MoleculeID,PartialMolecule>, QList<Molecule> etc.). This is a pain, as it means that I am over-cluttering my functions with various overloads. I've decided to bite the bullet and add a small, light-weight Molecules class, which holds molecules indexed by their ID, and has converting constructors so that implicit conversions can be used instead of lots of overloaded functions.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-05-03T14:35:06.864275Z", "commit": "267", "message": "I've added yet more tests of ForceFields, and have fixed more bugs!\n\nCode compiles, links and runs, and siretest runs without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-03T12:34:50.220177Z", "commit": "266", "message": "I've added more unit tests for the forcefields and have fixed the bugs that were thrown up.\n\nThe code compiles, links and runs, and siretest completes without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-02T20:54:35.271316Z", "commit": "265", "message": "I've rounded out the forcefields unit tests (they all work ;-), though I have still more to do.\n\nCode compiles, links and runs well, and siretest runs without error.\n\n", "author": "chryswoods"}, {"date": "2007-05-02T15:49:51.095124Z", "commit": "264", "message": "I am now unit testing the forcefield classes - and am fixing bugs!\n\nI've also added some syntactic sugar that allows easy addition of containers of lots of partial molecules.\n\nCode compiles, links and runs, though some of the new tests fail.\n\n", "author": "chryswoods"}, {"date": "2007-05-02T07:24:47.211487Z", "commit": "263", "message": "Merging the users/chryswoods branch into devel.\n\nThis merge;\n\n* Fits PartialMolecule into a new molecule design, based around MoleculeView\n* Adds the MoleculeView class hierarchy\n* Makes PartialMolecule into a const-class, with controller classes\n  used to change it (PropertyExtractor, MoleculeMover, AtomSelector)\n* Moves all of the forcefields over to this new design\n* Adds more unit tests, cleans up the unit test library a little\n* Changes CoordGroup over to using placement new so that the \n  shared pointer is also the pointer to the coordinate array\n* Updates lots of SireSystem!\n* Changes PairMatrix so that it uses a plain array\n\nCode compiles, links and runs well, with siretest completing without error.\n\nThe command to perform this merge was;\n\nsvn merge -r 219:262 ../users/chryswoods/ ./\n\nI have verified that this code is now identical to version 262 of users/chryswoods\n\n", "author": "chryswoods"}, {"date": "2007-05-02T06:55:59.272719Z", "commit": "262", "message": "I've fixed the bug that was causing what I thought was an infinite loop in water_mc_speed.py - I had not cleared the 'need_total_recalc' flag in InterGroupCoulombFF, so it was calculating the energy from scratch for each move!\n\nI have writen new unit tests to discover the problem with MolproFF. Indoing so, I have added a skeleton unit test, to speed up the creation of new ones, and have also moved the addition of tests torun into SireUnitTest, so that they don't all need to be included in the siretest executable.\n\nUsing this, and some more debugging, I have fixed MolproFF which now produces the correct energies.\n\nCode compiles, links and runs, and siretest completes without error. The code is finally working again (well, at least as well as it was before Easter!)\n\n", "author": "chryswoods"}, {"date": "2007-04-30T20:59:48.606730Z", "commit": "261", "message": "I've finished updating everything to use the new CoordGroup and CoordGroupEditor classes. Things seem to work (siretest completes without error, though there are still problems with some of the example scripts). The new class doesn't appear to have had any impact on the speed of the code (it seems to now be marginally slower!)\n\nThe results from water_mc_speed.py on my laptop is below...\n\nLoading the molecules...\n... took 345 ms\nParametising the molecules...\n... took 1068 ms\n(859 molecules in group A, 820 in group B)\nCalculating the energy...\nInterCLJFF  -16364.0932341 kcal mol-1\nCoulomb =  -19298.4644394\nLJ =  2934.3712053\n... took 3547 ms\nInterCoulombFF  -19298.4644394 kcal mol-1\nCoulomb =  -19298.4644394\n... took 1645 ms\nInterLJFF  2934.3712053 kcal mol-1\nLJ =  2934.3712053\n... took 1615 ms\nCalculating the energy...\nCLJ_partials  -16364.0932341 kcal mol-1\nCoulomb =  -19298.4644394\nLJ =  2934.3712053\n... took 3248 ms\nLJ_partials  2934.3712053 kcal mol-1\n... took 1627 ms\nCoulomb partials  -19298.4644394 kcal mol-1\n... took 1552 ms\nInterCLJFF  -16364.0932341 kcal mol-1\n... took 84 ms (11904.761905 moves per second)\nChanging took 1 ms\nInterCLJFF  -16213.2669612 kcal mol-1\nCoulomb =  -19298.7820661\nLJ =  3085.51510489\n... took 6 ms\nInterLJFF  3085.51510489 kcal mol-1\nLJ =  3085.51510489\n... took 4 ms\n1000 moves of InterCLJFF took 5998 ms\n1000 moves of InterCoulombFF took 4941 ms\n1000 moves of InterLJFF took 4733 ms\n1000 moves of CLJ_partials took 6290 ms\nCode entered infinite loop here...\n\n\n", "author": "chryswoods"}, {"date": "2007-04-30T19:43:54.302823Z", "commit": "260", "message": "I've moved the new CoordGroup classes into position...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-04-30T19:42:39.099279Z", "commit": "259", "message": "Committing the removal of the old version of CoordGroup...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-04-30T19:41:35.556064Z", "commit": "258", "message": "I've nearly finished making the new CoordGroup and CoordGroupEditor classes. The tests run well, though I need to now put the code in the right place as I think that it is getting confused with having two copies of CoordGroup! (I am getting a weird segfault in the last test).\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-04-30T15:55:44.979182Z", "commit": "257", "message": "I have created a new version of the CoordGroup class that uses placement new to allow the same pointer to refer both to the metadata about the coordgroup and to point at the array of coordinates - this should improve performance as it removes pointer-of-a-pointer lookups.\n\nI'm adding this code to SireUnitTest as I am writing unit tests for the new CoordGroup class. Once it is ready, and fully tested, I will replace the existing CoordGroup class.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-04-30T13:37:22.525122Z", "commit": "256", "message": "\nAll of the code now compiles, links and runs, and siretest completes without error. There are however\nsome problems with some of the scripts, which I will have to fix. The speed of the code also \nseems a bit low - here are the results of water_mc_speed.py running on my Pentium M 1.4GHz laptop...\n\nLoading the molecules...\n... took 322 ms\nParametising the molecules...\n... took 1064 ms\n(875 molecules in group A, 804 in group B)\nCalculating the energy...\nInterCLJFF  -16364.0932341 kcal mol-1\nCoulomb =  -19298.4644394\nLJ =  2934.3712053\n... took 2077 ms\nInterCoulombFF  -19298.4644394 kcal mol-1\nCoulomb =  -19298.4644394\n.. took 1593 ms\nInterLJFF  2934.3712053 kcal mol-1\nLJ =  2934.3712053\n... took 1477 ms\nCalculating the energy...\nCLJ_partials  -16364.0932341 kcal mol-1\nCoulomb =  -19298.4644394\nLJ =  2934.3712053\n... took 1977 ms\nLJ_partials  2934.3712053 kcal mol-1\n... took 1404 ms\nCoulomb partials  -19298.4644394 kcal mol-1\n... took 1518 ms\nInterCLJFF  -16364.0932341 kcal mol-1\n... took 86 ms (11627.906977 moves per second)\nChanging took 0 ms\nInterCLJFF  -16213.2669612 kcal mol-1\nCoulomb =  -19298.7820661\nLJ =  3085.51510489\n... took 6 ms\nInterLJFF  3085.51510489 kcal mol-1\nLJ =  3085.51510489\n... took 4 ms\n1000 moves of InterCLJFF took 5908 ms\n1000 moves of InterCoulombFF took 4808 ms\n1000 moves of InterLJFF took 4559 ms\n1000 moves of CLJ_partials took 6265 ms\nScript froze at 100% CPU utilization here...\n\n\n", "author": "chryswoods"}, {"date": "2007-04-30T10:42:15.627695Z", "commit": "255", "message": "I have fixed the failures of the SharedPolyPointer tests. The cause was me not correctly handling assignment when my pointer was null - I used;\n\nqAtomicAssign(d, ptr);\n\nThis requires that 'd' is non-null (as it will do d->ref().unref())\n\nI've changed it to;\n\nif (d)\n  qAtomicAssign(d, ptr);\nelse\n{\n  d = ptr;\n  d->ref.ref();\n}\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-04-30T08:46:53.238393Z", "commit": "254", "message": "I am seriously debugging the SharedPolyPointer class....\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-04-29T15:40:04.046581Z", "commit": "253", "message": "I've fixed the unit test failures for AtomSelection - they were all caused by the move to it being a const-class!\n\nThere is still an error with SharedPolyPointer, which is causing me grief!\n\nCode compiles, links and runs, though fails tests.\n\n", "author": "chryswoods"}, {"date": "2007-04-29T12:31:58.544873Z", "commit": "252", "message": "I've fixed a bug in SharedPolyPointer which was causing a segfault when using the assignment operator - essentially in template<class S>operator=(const S*) I was calling operator=<T>(T*), which called template<class S> version rather than the non-template operator=(T*) version. \n\nI've also fixed a segfault when running siretest caused by MoleculeInfo::shared_null not being initialised before MolDataView::shared_null - I will have to change all of my shared_null initialisors so that they use functions, thereby removing the reliance on the order of initialisation of static variables (something I should have remembered is unreliable!)\n\nCode compiles, links and runs, though doesn't work, and siretest fails with errors in the AtomSelection tests...\n\n", "author": "chryswoods"}, {"date": "2007-04-26T15:48:27.911763Z", "commit": "251", "message": "The code now all compiles and links! It doesn't work though - siretest crashes with a segfault in SharedPolyPointer<PropertyBase>::operator==(const PropertyBase&)....\n\nAlso, some of the test/example scripts may need to be updated.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-04-25T10:22:47.052576Z", "commit": "250", "message": "I've now updated most of SireSystem, with it nearly all compiling now. My next step will be sorting out where the Sampler class should go - I'd really like it to be part of MoleculeGroup, but I am having trouble figuring out how to achieve that...\n\nCode is still broken\n\n", "author": "chryswoods"}, {"date": "2007-04-23T14:26:52.253830Z", "commit": "249", "message": "I am now back to fixing and coding SireSystem - at least it now feels like I am making progress ;-)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-04-23T13:47:47.559495Z", "commit": "248", "message": "SireMM and Squire now compile and link, as do their python wrappers. I am now exactly back to where I was at the beginning of last week, with just SireSystem to sort out :-)\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-04-22T20:49:16.561748Z", "commit": "247", "message": "SireMol's python wrapping compiles and links, as does SireFF and its wrapping. I have to update SireMM and Squire, then I think that I will be back where I was at the beginning of this week....!\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-04-22T15:45:07.118081Z", "commit": "246", "message": "I've changed PartialMolecule now fully over to being a const-class and have fleshed out the AtomSelector class. I have added the space wra\npping function to MoleculeMover and have also created a test program that uses placement new to achieve the design I have in mind for the\nCoordGroup class (to avoid pointer-to-a-pointer problems - see techdocs/testplacementnew.cpp)\n\nSireMol compiles and links, and the python wrapping looks like it is compiling well as well :-)\n\nOf course the rest of the code is now even more broken... Why can I not ever just fix it all and get it all working???\n\n", "author": "chryswoods"}, {"date": "2007-04-20T15:40:53.855326Z", "commit": "245", "message": "Cleaning up the SimSystem and SireSystem APIs has forced me to further refine the SireMol APIs. I've changed AtomSelection to be a const-class, have added MolDataView as a base class to all MoleculeViews, have added AtomSelector and MoleculeMover as the classes that will select parts of a molecule and move parts of a molecule, and I plan to make all MoleculeView classes (including Molecule, PartialMolecule, NewAtom and Residue) into const classes.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-04-19T19:54:59.708824Z", "commit": "244", "message": "I'm making good progress with SimSystem and SystemData. I've cleaned up the code so that now adding to the SystemData will map the molecule into the system box, then returning the result so that it can be used when adding to ForceFields.\n\nI've made a small change to the behaviour of the FFBase::add() functions - now the whole molecule is changed whenever a difference is noticed when adding a molecule to an existing molecule. The reason for this is to prevent errors whereby a small part of a molecule with a totally different version is added - the user will use the selection to say what is being added, not what has changed, so using the selection would be a mistake in this case.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-04-19T15:39:18.925860Z", "commit": "243", "message": "I am cleaning up the API of SimSystem (by adding CheckPoint and QuerySystem), and have also added the stubs for the SystemMonitors class.\n\nI've decided to remove constraints from the SimSystem class because they were too complicated to add there - constraints need move information, and I think are better off placed as part of moves (meaning that the user will need to be careful that they use constrained moves on the parts of the system that they wish to be constrained!)\n\nCode is still broken\n\n", "author": "chryswoods"}, {"date": "2007-04-19T11:01:54.330641Z", "commit": "242", "message": "All of Squire and its python wrappers now compile and link. Finally I am onto fixing SireSystem.\n\nCode is still broken.\n\n", "author": "chryswoods"}, {"date": "2007-04-18T15:50:06.926584Z", "commit": "241", "message": "I am *still* working on MolproFF - it is taking forever! However, I have cleaned up a lot of code, especially by adding MoleculeView (common base class of all classes that are views of a molecule) and also by adding PropertyExtractor, which will be used to extract all properties from molecule view objects. \n\nI have nearly finished MolproFF now, having finally sorted out my issues with CutGroupID!\n\nCode is still broken.\n\n", "author": "chryswoods"}, {"date": "2007-04-17T14:58:45.587667Z", "commit": "240", "message": "I'm still working on MolproFF - it's slow going but I am slowly getting there. I had a fright with the way that PartialMolecule returned CoordGroups and AtomicProperties, as the CutGroupIDs of the returned groups are unusable (as CutGroups that have no selected atoms are not returned). I thought that this may impact the SireMM forcefields, but it doesn't. It does however affect the current iteration of MolproFF, so I will need to think more about how to write it...\n\nCode is still broken.\n\n", "author": "chryswoods"}, {"date": "2007-04-16T16:33:00.849446Z", "commit": "239", "message": "I've finished SireMM and am now working on Squire. MolproSession, MolproCalculator and MolproProcessor are complete, and the interface for MolproFF is pretty complete - I am now just filling in MolproFF functions\n\n(and then must do SireSystem..!)\n\nI've updated MoleculeGroup and MoleculeGroups to better work with PartialMolecule.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-04-15T22:16:45.218148Z", "commit": "238", "message": "SireMM (and PyWrap_SireMM) now compiles and links. SireMol compiles and links, though there are some missing functions preventing PyWrap_SireMol from linking. From the looks of it, only SireSystem and Squire are now still broken :-)\n\nCode is still broken.\n\n", "author": "chryswoods"}, {"date": "2007-04-15T16:20:40.548182Z", "commit": "237", "message": "I've now got CLJFF, CoulombFF, LJFF, InterCLJFF, InterCoulombFF, InterLJFF and InterGroupCLJFF compiling!\n\nCode is still broken.\n\n", "author": "chryswoods"}, {"date": "2007-04-15T09:54:59.692930Z", "commit": "236", "message": "Making good progress with SireMM. I've fully updated CLJFF and CoulombFF, and have got most of InterCLJFF working. I've added \"need_total_recalc\" to InterCLJFF so that a complete energy recalculation can be required. This also prevents the caching of change-data, which could be useful for moves that move a lot (e.g. MD) or for the local copy of remote forcefields (as the local copy will not be used for an energy calculation, so should not cache change-data).\n\nCode is still broken.\n\n", "author": "chryswoods"}, {"date": "2007-04-14T21:58:57.624073Z", "commit": "235", "message": "So... very... nearly...  there... !\n\nI've updated PartialMolecule so that it can perform the job of masking properties and coordinates according to the atoms selected - this mremoves this code from all of the forcefields ;-)\n\nI've got SireMol, SireFF and lots of SireMM compiling now - I've just done CLJFF and have reached InterCLJFF. Not too much more to go now :-)\n\nCode is still broken.\n\n", "author": "chryswoods"}, {"date": "2007-04-13T10:25:11.325774Z", "commit": "234", "message": "I've now got FFCalculator compiling and linking - just FFWorker (FFLocalWorker, FFThreadWorker) to go, and then I can move on to SireMM.\n\nCode is still broken...\n\n", "author": "chryswoods"}, {"date": "2007-04-10T16:25:32.281882Z", "commit": "233", "message": "I have now got ForceFieldsBase and ForceFields to compile, and have completed a lot of SireFF now. The only remaining parts are filling in the missing functions of FFCalculator, FFLocalWorker, FFWorker and FFThreadWorker.\n\nI have yet to move on to fixing SireMM...\n\nCode is still broken\n\n", "author": "chryswoods"}, {"date": "2007-04-08T22:11:14.472754Z", "commit": "232", "message": "Still implementing the ForceFields class....\n\nCode is still broken\n\n", "author": "chryswoods"}, {"date": "2007-04-07T22:20:23.609326Z", "commit": "231", "message": "I am continuing to fix the code. I've updated the ForceFields API and am implementing the updated functions. I have also switched PairMatrix over to using a C array (hopefully will improve its speed!) and have updated CLJFF and InterCLJFF to use the PartialMolecule interface. I am currently in two minds over whether CLJFF should be split from FFBase so that forcefields can multiply inherit from it if they want CLJ functionality (e.g. can inherit from CLJFF if want CLJ in bond/angle/dihedral forcefield, though perhaps the best solution is to create combined forcefields, as it is not efficient to build CLJ from Coul + LJ, so it would probably not be efficient to do bond/angle/dihedral/CLJ from the combination of each of those...)\n\nCode is still broken....\n\n", "author": "chryswoods"}, {"date": "2007-04-06T15:36:56.206609Z", "commit": "230", "message": "Now that SireMol compiles and links I am working on getting SireFF working again. I have completed up to ForceFields...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-03-30T15:49:26.435578Z", "commit": "229", "message": "I am still fixing the code - I have now got SireMol compiling and linking without problems, and am\nnow working on the Python wrapping of SireMol.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-03-26T13:57:44.296269Z", "commit": "228", "message": "I am now fixing the rest of the code so that is works with the new PartialMolecule bias and also so that it will work with the new ForceField interface (and new SireBase::Property) - what a lot of changes all at once ;-)\n\nThe code is broken.\n\n", "author": "chryswoods"}, {"date": "2007-03-26T11:10:00.519062Z", "commit": "227", "message": "I've updated SwitchingFunction, CombiningRules and Space to all be derived from Property.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-03-26T08:51:09.806359Z", "commit": "226", "message": "Moved Property to SireBase and added MoleculeProperty to SireMol (a Molecule-specialised version of Property). This will allow Space and SwitchingFunction to be made into properties as well.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-03-23T15:43:50.911128Z", "commit": "225", "message": "PartialMolecule is a lot more useful than I thought - I've realised when updating the SystemData API that I could use PartialMolecule in MoleculeGroup, rather than using Molecule. This will allow moves to be performed on parts of molecules using the same code base as moves performed on whole molecules! In particular, RigidBodyMC could do rigid body translation and rotation of individual residues or atoms using the same code as for molecules. And if the deltas are held as molecular properties, then the different MC moves could use different properties for each type.\n\nAlso I've realised that the easiest way to do grand canonical would be to have the move add or remove atoms from the MoleculeGroup that it was passed.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-03-22T16:48:31.243071Z", "commit": "224", "message": "I am still working on extending the ForceField API across to the entire program.\n\nA key change now is that I have created PartialMolecule, which can represent any part of a molecule all the way from an Atom, through Residue to a Molecule, with everything in between. This has very much simplified the ForceField API, which is now beginning to look a little less oppressive than it did! \n\nThe hierarchy of classes are;\n\nFFBase forcefields (do the work)\n    |\nForceField - provides implicit sharing and consistent interface\n    |\nFFCalculator - provides the server-side handle for a forcefield,\n    |          used on the server side of a Processor\n    |          (e.g. MolproCalculator). A calculator performs\n    |          the work for the forcefield in the current thread\n    |\nFFWorker - provides the client-side handle for a forcefield\n    |      and calls the forcefield via the FFCalculator\n    |      (e.g. FFThreadWorker). A worker can run the work\n    |      of the forcefield in a background or remote thread\n    |\nForceFields - provides the interface to collections of forcefields,\n              either interfaced directly via ForceField objects, or \n              interfaced on remote threads/processors via FFWorker objects.\n              (e.g. ForceFields vs. ClusterForceFields)\n\n", "author": "chryswoods"}, {"date": "2007-03-21T22:37:24.444303Z", "commit": "223", "message": "I am taking the API from FFBase and am beginning to transpose it to ForceField, FFWorker, FFCalculator and ForceFields\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-03-21T16:46:09.854194Z", "commit": "222", "message": "I am now cleaning up and filling in the complete forcefield interface so that I can complete the FFCalculator, FFWorker and FFProcessor classes.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-03-20T14:03:16.168682Z", "commit": "221", "message": "There was a bug in SireUnits, where the conversion from bohr radii to angstrom was 1 / 0.529, rather than 0.529. There was also another bug in MolproFF, where the point charges for the lattice used coordinates in angstrom (as specified in the molpro manual) but really needed to be in bohr radii. There was also another set of bugs in the InterGroup*FF forcefields, where the delta energy calcualtion set the total energy to the delta value, rather than changing the total energy by the delta value.\n\nOnce these bugs were fixed, I have finally got a correct and working MolproFF forcefield, and can compare it to a classical electrostatic approximation! This is great, as it means that I have now been able to show that Tip4P is a good approximation for the QM electrostatic energy, thereby showing that my idea may actually work ;-)  (see test/Squire/molproff.py for this test)\n\nCode compiles, links and runs well\n\n", "author": "chryswoods"}, {"date": "2007-03-20T09:28:08.555711Z", "commit": "220", "message": "I've added some more units to the python SireUnits file, and have also added python versions of the unit conversion functions. I am currently investigating problems in MolproFF, where I may be using the wrong units for the lattice points in the command file...\n\n", "author": "chryswoods"}, {"date": "2007-03-20T09:26:36.989952Z", "commit": "219", "message": "These two files did not merge correctly, for some weird reason? I'm committing these now to fix the last merge.\n\n", "author": "chryswoods"}, {"date": "2007-03-19T23:13:54.357353Z", "commit": "218", "message": "Merging the users/chryswoods branch into devel.\n\nThis merge;\n\n* Moves all forcefields over to using a common design\n* Adds InterGroupCLJFF, and Coulomb and LJ versions of the forcefields\n* Adds automatic C++ to python container conversions\n* Adds automatic C++ copy constructor to python copy.copy() function\n* Adds several new python tests, include MC-like tests\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-03-19T10:08:39.129416Z", "commit": "217", "message": "I've cleaned up some of the python tests - they now show Sire doing some pretty cool things!\n\ntest/speed/water_mc_speed.py  - this is the old test/test.py, with a few cleanings\ntest/SireCluster/threadff.py  - this has been fixed, and more forcefields have been added.\n                                This runs three forcefields in parallel!\ntest/Squire/threadmolpro.py   - this is a MolproFF version of threadff.py - two Molpro  \n                                instances are run in parallel!\n\nCode compiles, links and runs well\n\n", "author": "chryswoods"}, {"date": "2007-03-16T21:51:59.828567Z", "commit": "216", "message": "I have finished updating the CLJ forcefields (CLJFF, InterCLJFF, InterGroupCLJFF) and they are now all wrapped in python, and all appear to give the right energy when tested in test/test.py.\n\nThey are a bit slower than the old InterCLJFF, but I have some ideas of how to profile it and improve things a bit! ;-)\n\nCode compiles, links and appears to run well.\n\n", "author": "chryswoods"}, {"date": "2007-03-16T16:44:22.418108Z", "commit": "215", "message": "I am now switching the CLJ forcefields over to use the same design pattern as the Coulomb and LJ forcefields. I have updated CLJFF and InterCLJFF and now just need to do InterGroupCLJFF. There is a lot of similarity between LJFF, CoulombFF and CLJFF, so perhaps I should at some point in the future look at how common code can be abstracted into a shared base or template?\n\nI am still coding, so the code is broken!\n\n", "author": "chryswoods"}, {"date": "2007-03-16T15:09:11.304668Z", "commit": "214", "message": "I have added coulomb equivalents of the LJ specific forcefields (added CoulombFF, InterCoulombFF, InterGroupCoulombFF). The addition was quite straightforward, and the new forcefields have been wrapped in Python and tested in test/test.py (giving the same coulomb energy as the coulomb component of InterCLJFF).\n\nCode compiles, links and runs well\n\n", "author": "chryswoods"}, {"date": "2007-03-16T11:51:30.262010Z", "commit": "213", "message": "I've updated the python wrapping to add a __copy__ function that uses the copy constructor (so that my classes now work with copy.copy).\n\nI have wrapped up InterGroupLJFF, fixed its used of FFBase::Groups, and have updated the test/test.py script to test that a set of InterGroupLJFF forcefields return the same energy as a single InterLJFF forcefield, which itself gives the same energy as the LJ component of InterCLJFF! Also, 1000 moves on the combination of InterGroupLJFF forcefields takes the same time as 1000 moves on InterLJFF, so I am pretty pleased!\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-03-15T17:20:59.465912Z", "commit": "212", "message": "I've fixed some bugs and added a little extra python wrapping that allowed me to use Sire to do a real calculation - well, it could correctly orientate frames from a ProtoMS trajectory of NMA in water, and it could map waters to periodic boundaries and remove waters beyond the cutoff.\n\nThere was a small bug in the the quaternion code expected to be passed a normalised vector, but didn't complain if it didn't. I now check, and normalise if necessary.\n\nCode compiles, links and runs and works well.\n\n", "author": "chryswoods"}, {"date": "2007-03-09T16:41:29.952915Z", "commit": "211", "message": "I have written the InterGroupLJFF and it now compiles and links. I've still got to wrap it in python and test it, but the code seems clean and straightforward.\n\nCode compiles, links and runs.\n\n", "author": "chryswoods"}, {"date": "2007-03-09T09:08:02.621876Z", "commit": "210", "message": "This is a commit of code that has been speed-tested compared to ProtoMS. \n\nBox of water, periodic boundaries, time to complete 1000 MC moves\n(Sire is still using semi-fake moves, though is calculating the\n change in energy correctly)\n\nTest conducted on my work desktop (PentiumD 3.4GHz)\n\n(version numbers for Sire are the gcode respository numbers)\n\nCutoff  Sire(209)              ProtoMS2.1(724)    Relative speed\n        cljff     ljff                           cljff    ljff\n5.0     1269      1378         448                35%     32%\n10.0    1717      1871         892                51%     47%\n15.0    2845      2990         1832               64%     61%\n20.0    4601      5036         3350               72%     66%\n40.0    5660      6256         8772              154%    140%\n80.0    5824      6413         9665              165%    150%\n\nThese results show that Sire is within the same ballpark as ProtoMS,\nbut that optimisation work still needs to be performed. In addition,\nthis also suggests that there may be some inefficiencies in the\ncutoff with Sire, as it rapidly overtakes ProtoMS when fewer\ninteractions are discarded. Also, LJFF is consistently slower than\nCLJFF despite it doing less work! (though LJFF does not use hard\ncoded geometric combining rules)\n\nPart of the reason for the poor performance is that the energy calculations\nare much slower than they could be. My optimised Tip4PFF can calculate\nthe energy for the water box in 250ms, while InterCLJFF takes 1055ms and\nInterLJFF takes 1182ms. There is thus a theoretical 4x improvement\npossible (though all of this will not be realised in a general forcefield).\n\nAlso, I have updated test/test.py to checkpoint the InterLJFF object at\neach move (so that it's more like a normal MC move). Checkpointing \nand restoring InterLJFF 1000 times had only a small impact on the run time\n\n(without checkpointing, 1000 moves took 2998-3157ms, while with \n checkpointing it takes 3214-3264ms)\n\nThe cost is about 200ms per 1000 moves, which is acceptable given how\ncheckpointing allows the energy difference calculation to use a single\npass rather than two passes (which I believe would cost more than 0.2ms \nper move). Also, this is only an extra 4 minutes per million moves, and\njust 40 minutes for 10M moves, which is of the order number of moves\nthat I anticipate being most common.\n\nCode compiles, links and runs well\n\n", "author": "chryswoods"}, {"date": "2007-03-08T22:26:11.663495Z", "commit": "209", "message": "Beginning work on the InterGroupLJFF forcefield, used to calculate the LJ energies between two groups of molecules.\n\nCode compiles, links and runs.\n\n", "author": "chryswoods"}, {"date": "2007-03-08T21:07:51.343452Z", "commit": "208", "message": "The InterLJFF forcefield appears to work, giving the same energy as the LJ component of the InterCLJFF forcefield, and it is pretty quick (the individual moves are as fast as InterCLJFF, though it is about 20-30% slower than ProtoMS - though the moves are in python).\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-03-08T17:42:24.201998Z", "commit": "207", "message": "I've written InterLJFF (LJFF equivalent of InterCLJFF) that uses the up-to-date design, and looks pretty clean (if I do say so myself ;-)\n\nI've wrapped it up in Python, and it now needs to be tested.\n\nUnlike InterCLJFF, InterLJFF is now complete, and has complete functionality for adding, removing or changing any part of any molecules (and even allow partial molecules).\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-03-08T12:35:12.907424Z", "commit": "206", "message": "I've got LJFF to compile (though needs testing) and have also added LJPair to represent a combined pair of LJParameters. I've also provided the Py++ wrapping of both of these new classes.\n\nCode compiles, links and appears to run well.\n\n", "author": "chryswoods"}, {"date": "2007-03-07T16:40:45.504341Z", "commit": "205", "message": "I am writing the LJFF (forcefield for only LJ interactions). This will complement MolproFF and will allow for a full QM/MM interaction energy to be calculated. I am writing LJFF using what I have learned from writing CLJFF and MolproFF, and am happy now that its design represents the best I could do, and therefore I plan to use this design to rework CLJFF.\n\nCode is broken (I've got to break now so I can catch my bus!)\n\n", "author": "chryswoods"}, {"date": "2007-03-06T11:28:51.020784Z", "commit": "204", "message": "I've added the code to convert from Molpro energy units (hartrees) to Sire energy units (kcal mol-1) and have also added the origin energy (so that Molpro QM energies are of the same magnitude as the MM energies).\n\nThe Molpro QM energies appear to be very insensitive to moving the QM molecule - indeed, the difference in energy between just the QM molecule and the QM molecule surrounded by MM lattice points is only 0.0002 hartrees (~0.1 kcal mol-1). This seems really small to me, and is probably a result of an error on my part.\n\nCode compiles, links and runs\n\n", "author": "chryswoods"}, {"date": "2007-03-04T17:39:30.422224Z", "commit": "203", "message": "The deadlocking issue effects both Qt 4.1 and 4.2, so I have upgraded to Qt 4.2 on my laptop and this will be a minimum requirement if the user wants to include Molpro support. I have added code to make this fix portable.\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-03-02T11:29:41.435246Z", "commit": "202", "message": "After much painful debugging I have got the MolproFF working, and producing what I think is the right energy. The deadlocking problem was caused by the small output buffer of QProcess. Basically;\n\n(1) Sire uses RPC to request an energy calculation\n(2) Molpro performs the calculation, then writes lots of status output to stdout\n(3) The QProcess stdout buffer becomes full\n(4) Molpro blocks on a write, waiting for the stdout buffer to be cleared or read\n(5) Sire is still blocked waiting for Molpro's response, so is unable to clear or read the buffer\n\nMy solution was to ignore stdout and to send the information I need to stderr (and to read that instead). It's not the best solution.\n\nI think that QProcess may have gone through some changes between Qt 4.1 and Qt 4.2 as I didn't see this behaviour on my laptop (Qt 4.1) while I did no my desktop (Qt 4.2). Also, 4.2 introduces new input/output functions for QProcess, which may have lead to a change in code. I'll take a look at this at home when I can get back on my laptop. If this is not the case, then the fix I have introduced works only for Qt 4.2 (and currently Unix as well) so I will need to investigate another more robust solution.\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-03-01T16:46:18.513680Z", "commit": "201", "message": "I've now got MolproFF appearing to work, and appearing to give the right energy (a test script that converts the molpro command file to PDB shows the right structure). However, I am not totally happy as it does freeze for some unknown reason - lots of bughunting to do still...!\n\nCode compiles, links and works in a fashion..!\n\n", "author": "chryswoods"}, {"date": "2007-02-28T16:46:35.714414Z", "commit": "200", "message": "I'm trying to get MolproFF to give the right energy....\n\nCode compiles, links and runs, but MolproFF still does not work\n\n", "author": "chryswoods"}, {"date": "2007-02-26T16:45:46.289421Z", "commit": "199", "message": "I've finally integrated Molpro deeply within Sire. MolproFF can now call Molpro to calculate a QM/MM energy. Of course, it is still a fake energy, but this is better than nothing :-)\n\nNote to self - QTextStream and QProcess don't seem to work well together\n             - *Do not* use QProcess::environment() - this is empty. Use\n               QProcess::systemEnvironment() instead!\n\nCode compiles, links and runs. python test/test.py gives the wrong answer.\n\n", "author": "chryswoods"}, {"date": "2007-02-26T08:35:52.137620Z", "commit": "198", "message": "I am now testing MolproFF - The code compiles, but test/test.py causes a segfault.\n\nCode compiles, links but MolproFF doesn't work.\n\n", "author": "chryswoods"}, {"date": "2007-02-25T11:27:29.096303Z", "commit": "197", "message": "I've fixed some compile errors on my laptop (Qt4.1 and gcc4) and have also fixed the errors in SireCAS that I'd written unit tests for at the last commit.\n\nI've moved the Qt wrappers back so that they are compatible with Qt4.1 (they were originally for >= Qt4.2). There may be some compile errors now on Qt4.2 due to the renaming of the \"readLink\" function to \"symLinkTarget\".\n\nCode compiles, links and appears to run well.\n\n", "author": "chryswoods"}, {"date": "2007-02-23T16:48:41.076085Z", "commit": "196", "message": "I've added the SireCAS operators, and also uncovered a bug in SireCAS which I've added a test case for (which fails!)\n\nI'll fix the bug before the next version!\n\nCode compiles, links, but siretest has failures.\n\n", "author": "chryswoods"}, {"date": "2007-02-20T14:19:29.933136Z", "commit": "195", "message": "I've finished adding QDataStream and __str__ operators to all of the python wrappers.\n\nI've also fixed some compile and link problems that had snuck into the last version\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-02-19T16:44:49.615669Z", "commit": "194", "message": "I've added the ability for the Py++ generator to automatically expose __str__ and the QDataStream streaming operators. The wrappers are now becoming pretty functional!\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-02-19T12:28:47.624101Z", "commit": "193", "message": "I've added Python (Py++) wrapping of Squire, and have also switched to using Py++ to wrap up Qt classes.\n\nCode compiles, links and runs well\n\n", "author": "chryswoods"}, {"date": "2007-02-18T17:34:26.477333Z", "commit": "192", "message": "I have finished off adding explicit implicitly_convertible sections, and from/to python container conversions for all Sire modules. The only remaining things that now need to be done for the python wrapping are exposing SireCAS operators and exposing \"__str__\" functions.\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-02-17T22:44:12.260474Z", "commit": "191", "message": "Silly me - I added a temp file by mistake - this commit removes it!\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-02-17T22:38:49.515447Z", "commit": "190", "message": "I've added the automatic custom rvalues conversions to/from Qt containers and Python containers for most of the Sire python modules! This has really improved the quality of the user interface!\n\nI have also cleaned up the SireMaths::Vector header file, moving some code around, moving comments to the cpp file, and using qMemCopy for the copy assignment and copy constructor.\n\nCode compiles, links and runs well!\n\n", "author": "chryswoods"}, {"date": "2007-02-17T11:22:40.250711Z", "commit": "189", "message": "I've exposed lots of SireMol containers to python - the to/from python converters are really nice and easy to use, and make it very easy to manage exposed containers, very easy for the user to use those containers, and also the resulting code doesn't require much memory to compile (< 200 MB, compared to >500MB for the fully exposed containers).\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-02-16T23:04:07.796003Z", "commit": "188", "message": "I have fixed some compile errors for gcc4 and Qt 4.1, and have also added some explicit implicitly_convertible lines to the python wrapping.\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-02-16T16:44:00.543068Z", "commit": "187", "message": "I've been switching the python wrappers of Qt templates over to use to/from python container converters. This, I believe, leads to a more natural user interface in python, as the user should not worry about converting a vector to a list, or a tuple to a set etc.\n\nI've also applied the same logic to the ParameterMap, which is now created from a dictionary - this is much nicer than trying to use logic operators (what was I on!?)\n\nCode compiles, links and runs well :-)\n\n", "author": "chryswoods"}, {"date": "2007-02-14T19:24:56.968944Z", "commit": "186", "message": "Merging the users/chryswoods branch into devel.\n\nThis merge;\n\n* Adds Molpro forcefields (QM/MM at last!)\n* Adds Processors and workers so that calculations can run in parallel\n* Uses NewAtom a lot - I will switch over to NewAtom from Atom (eventually)\n* Adds a copyright and license notice to each source file\n* Replaces nearly all hand-wrapped python with Py++ auto-generated wrappers\n\nThe command to perform this merge was;\n\nsvn merge -r 143:185 ../users/chryswoods/ ./\n\nThere then had to be a lot of fixing, as there were several conflicts (why? I couldn't work it out).\n\nI've verified that this copy is identical to version 185 of users/chryswoods.\n\n", "author": "chryswoods"}, {"date": "2007-02-14T11:29:03.388811Z", "commit": "185", "message": "I have now finished the rough wrapping of all of the Sire modules! :-)\n\nThey now all compile, link and work, and the most important test python scripts also now work again (e.g. test/test.py and test/SireCluster/threadff.py). The wrappers are very, very nice, and I am very impressed with the quality of Py++.\n\nThere are now only a few remaining issues, all of which should be straightforward to fix once I have the time (...if I ever have the time ;-)\n\n(1) SireCAS operators still need wrapping - e.g. Symbol + Symbol, Integer * Expression\n\n(2) I need to work out how to expose the polymorphism of ForceField and other SharedPolyPointer classes to python... I am thinking about creating a new \"held_type\" holder in python that will be able to see that ForceField is really a SharedPolyPointer...\n\n(3) I need to expose automatic list -> class conversions, e.g. list -> ParameterMap etc.\n\n(4) I need to expose SireDB operators (atom0_name == \"CA\" && res0_num == 32)\n\n(5) There are a load of Qt template classes that need to be exposed, including QVector<CoordGroup>, QVector<Atom> etc.\n\nI have yet to decide how I will wrap the Qt template classes - I could use Py++, though I think that then I would have to heavily customise the wrappers to ensure that they do not produce different output for different Qt versions (I want to remain source compatible with Qt 4.1.0 if possible).\n\nDespite all of this, the code compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-02-14T09:27:42.859795Z", "commit": "184", "message": "SireMM is now auto-wrapped (including all of those annoying bond/angle/dihedral template classes!). I've now broken the back of learning Py++ and have to say that Py++ is very, very good. Now that I understand the code, I am able to excercise a lot of control over the generated bindings. I have even now sorted the problem of including base classes from different namespaces, and having class specific includes.\n\nCode compiles, links and runs, but python scripts don't yet run\n\n", "author": "chryswoods"}, {"date": "2007-02-13T16:39:18.856892Z", "commit": "183", "message": "I'm filling in the wrappers of missing template classes so that the python scripts will one day run again :-)\n\nIt's not quite there yet however....\n\n", "author": "chryswoods"}, {"date": "2007-02-13T15:43:54.283311Z", "commit": "182", "message": "I have filled in more of the auto-wrappers, and have also worked out how to force Py++ to add base classes that have not been exposed to python (I do like how easy it is in python to completely replace annoying functions! ;-)\n\nCode compiles, links and runs, though python scripts are broken\n\n", "author": "chryswoods"}, {"date": "2007-02-12T16:41:56.104290Z", "commit": "181", "message": "I've now auto-wrapped SireIO, SireFF, SireMaths and SireMM.\n\nThere are some problems with SireMM - InterCLJFF is wrapped as noncopyable!\n\nCode compiles, links and runs, but the scripts are broken.\n\n", "author": "chryswoods"}, {"date": "2007-02-12T11:46:03.388916Z", "commit": "180", "message": "I've added the auto-wrappers for SireCluster and SireDB now as well.\n\nCode compiles, links and runs\n\n", "author": "chryswoods"}, {"date": "2007-02-12T10:46:09.840993Z", "commit": "179", "message": "I've now added the auto-wrapping of SireCAS. The operators for SireCAS have yet to be wrapped, but otherwise things look ok (though the auto-conversion of ExBase to Expression is broken, and also the auto-conversion of x==3 to SymbolValue is broken - it converts to SymbolExpression!)\n\nCode compiles, links and runs\n\n", "author": "chryswoods"}, {"date": "2007-02-12T09:26:35.006572Z", "commit": "178", "message": "I've added the missing wrapper for QList<Molecule>, and now the main python test scripts work (test/test.py and test/SireCluster/threadff.py).\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-02-12T09:16:45.136546Z", "commit": "177", "message": "The automatic Py++ wrapping of SireMol, SireSystem and SireBase now works. I've still got a few problems to fix, but it is now good enough for me to move through the rest of the modules and switch them over as well.\n\nCode compiles, links and runs, but the python tests will not work.\n\n", "author": "chryswoods"}, {"date": "2007-02-11T19:28:16.787815Z", "commit": "176", "message": "I have now got all of the Sire.Mol wrappers compiling and linking. There are quite a few issues to fix though;\n\n(1) Base classes that are not wrapped are not included in the wrappers (e.g. SireMaths::Vector is not wrapped with SireMol::Atom!)\n\n(2) For some reason, ID types are implicitly convertible from ints, even though they have explicit constructors\n\n(3) I am missing a load of template classes\n\n(4) I need to wrap up the other modules, as they are needed so that the python test scripts still work\n\nCode compiles, links and still runs (though python scripts don't work)\n\n", "author": "chryswoods"}, {"date": "2007-02-11T16:58:39.117756Z", "commit": "175", "message": "This should move the SireMol and SireSystem Py++ wrappers into PyWrap\n\n", "author": "chryswoods"}, {"date": "2007-02-11T16:54:46.219109Z", "commit": "174", "message": "Reorganising the directory - I've realised that it is silly to put the python wrappers into a directory named after the tool I am using to make the actual wrappers.\n\n", "author": "chryswoods"}, {"date": "2007-02-11T16:52:14.492095Z", "commit": "173", "message": "I am making progress learning Py++ and getting the auto-generated wrappers working.\n\nCode is still broken though.\n\n", "author": "chryswoods"}, {"date": "2007-02-09T13:57:48.570921Z", "commit": "172", "message": "Time to be ambitious! I'm now adding Py++ wrappers of SireMol. If Py++ works here, then it will work everywhere!\n\nWhile Molecule.pypp.cpp is created and compiles, I need QSet_AtomIndex_, which is a little broken.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-02-09T12:49:26.314475Z", "commit": "171", "message": "I've begun to use Py++ to generate the python bindings for my classes. I've done this only for SireSystem so far, but the bindings seem to be right, which fills me with hope.\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-02-07T16:40:31.227956Z", "commit": "170", "message": "I've updated MajVersion so that it was the version I'd written at Bristol. I've also added the python wrapping of System and SystemData. I perhaps now should automate the python wrapping, as it takes far to long, and it a barrier to changing my APIs...\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-02-04T16:48:56.663313Z", "commit": "169", "message": "I have now filled in most of MolproFF and its support classes. More surprisingly, I have finally done enough so that Squire will now compile. Of course it won't yet work, and needs testing, but significant progress nonetheless!\n\nCode compiles, links and appears to run well.\n\n", "author": "chryswoods"}, {"date": "2007-01-28T17:24:14.474714Z", "commit": "168", "message": "I've made a lot of progress with MolproFF. I've written the code that calculates the qm_coords array and mm_coords_and_charges array, and have also written the code that deals with moving QM or MM molecules, or adding or removing QM or MM molecules. I've also written the code used to stream MolproFF to and from a bytearray and also to use a MolproFF without a MolproProcessor (it just starts and uses a temporary MolproSession). There's still lots to do, but I have to now go and cook dinner ;-)\n\nCode is still broken.\n\n", "author": "chryswoods"}, {"date": "2007-01-25T10:39:52.766282Z", "commit": "167", "message": "I've noticed that my code is now popping up on source search sites, when it is often out of context (and without a specified license, or sometimes even copyright). This has been my fault as I didn't copyright and license mark each file. I have written a script that does this, have applied it to all of the source files, and should now have copyright and license terms on each file.\n\nCode is works when SIRE_BUILD_MOLPRO is off (or if you don't have MolproClient installed)\n\n", "author": "chryswoods"}, {"date": "2007-01-24T15:57:37.953794Z", "commit": "166", "message": "Not a lot changed - still thinking about MolproFF \n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2007-01-21T17:36:12.275252Z", "commit": "165", "message": "Beginning work to reintegrate the Molpro based forcefield again...\n\nAll code works except for Squire.\n\n", "author": "chryswoods"}, {"date": "2007-01-21T14:10:00.603139Z", "commit": "164", "message": "Fixing a small bug that prevented compilation of the code on other computers (so why did it work on my laptop?)\n\nCode compiles, links and runs well\n\n", "author": "chryswoods"}, {"date": "2007-01-21T14:03:21.487750Z", "commit": "163", "message": "I have filled in a lot of functionality and the code now all compiles, links and runs. I still need to write more to actually run a simulation, and still need to python wrap and test the code, but at least it all compiles and runs now..!\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-01-20T20:40:27.849078Z", "commit": "162", "message": "I now really have a strong handle on how the System, SystemData and SimSystem classes are working, and am making good progress with the SimSystem class in particular. \n\nSystem is the user-facing class, which allows the user to construct and edit a System.\n\nSystemData holds all metadata about a system, except for any forcefield data.\n\nForceFields holds all of the forcefield information, including expression information.\n\nSimSystem is a noncopyable class that holds a simulated System, and synchronises SystemData and ForceFields throughout the simulation. SimSystem also does the work necessary to ensure that each move is atomic (state changes are complete)\n\nForceFields is a virtual class, allowing derived classes to spread the forcefields across different processors. ForceFields is the only virtual class, thus making things clean and nice.\n\nCode is still broken.\n\n", "author": "chryswoods"}, {"date": "2007-01-20T11:19:48.777089Z", "commit": "161", "message": "MoleculeGroup and MoleculeGroups now compile, and SireMol successfully links. Just now got to sort out System and SimSystem...\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-01-19T22:30:28.564638Z", "commit": "160", "message": "I've got ForceFields now fully implemented and fully compiling, with the entire SireFF library now linking correctly. I've still got to fix SireMol::MoleculeGroup and SireMol::MoleculeGroups, the python wrapping, and SireSystem...\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-01-19T16:22:57.999298Z", "commit": "159", "message": "I have spent today filling in most of the functionality of ForceFields. It was definitely the right call to move this out of SystemData and into a specific object in SireFF - the code is now much more clean and straightforward. \n\nThe code is still really broken...!\n\n", "author": "chryswoods"}, {"date": "2007-01-18T19:18:08.718951Z", "commit": "158", "message": "The design of MoleculeGroups and ForceFields is now becoming clear - this does clean up the code in SystemData. Its not quite right yet, as I don't like what is happening with the ForceFields pointer in SystemData (which perhaps ought to be renamed SystemBase). \n\nAlso, I think that I have worked out the role of System - it is to be the checkpoint and editable front end. SystemData/Base has functions that may only be called during a normal move. An editing type of move will have to convert to System, make the change, then set from System, rather than rollback the checkpoint.\n\nCode is very broken.\n\n", "author": "chryswoods"}, {"date": "2007-01-18T17:47:10.813749Z", "commit": "157", "message": "Moving classes to their new homes...\n\nCode is still broken.\n\n", "author": "chryswoods"}, {"date": "2007-01-18T17:41:46.120171Z", "commit": "156", "message": "I've realised that I should group all of the MoleculeGroup objects together into a single MoleculeGroups object, and also all of the ForceField objects (with equations) into a ForceFields object. This will clean things up, and also will allow the forcefield code to be moved out of SystemData (the current implementation is messy!).\n\nCode is very broken.\n\n", "author": "chryswoods"}, {"date": "2007-01-18T11:39:11.314263Z", "commit": "155", "message": "I've filled in sufficient functionality now that the code compiles links and runs. I still need to add some more functionality, wrap up the new objects in python and test everything...\n\nCode compiles, links and runs well\n\n", "author": "chryswoods"}, {"date": "2007-01-17T22:08:26.403833Z", "commit": "154", "message": "I've been filling in the missing functionality of the System, SystemData and LocalSimSystem classes that I have been writing.\n\nCode is still broken...!\n\n", "author": "chryswoods"}, {"date": "2007-01-17T16:46:20.300238Z", "commit": "153", "message": "Making progress with the System and SystemData classes - have now sorted out how forcefield equations are added and managed and have also formalised the separation between System, SystemData and SimSystem.\n\nCode is still broken.\n\n", "author": "chryswoods"}, {"date": "2007-01-16T16:37:43.184488Z", "commit": "152", "message": "I am still working on the System and SystemData classes. I have added functions and classes that allow the SystemData class to control the evaluation of the energy of complex and arbitrary functions (including functions that depend on other functions!).\n\n", "author": "chryswoods"}, {"date": "2007-01-14T20:13:50.933567Z", "commit": "151", "message": "I am still filling in the classes necessary for a simulation. \n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-01-12T16:41:03.894211Z", "commit": "150", "message": "Added a 'Moves' class that allows multiple moves on a System to be grouped and run together (in a thread-safe manner, complete with pause, stop, restart and rerun functions - and snapshot/streaming!)\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-01-11T22:01:37.709405Z", "commit": "149", "message": "I've filled in a lot of the functionality of the move classes (though they are still not finished). Saving and restoring the state of a RanGenerator and streaming of it is still broken.\n\nCode compiles, links and runs.\n\n", "author": "chryswoods"}, {"date": "2007-01-11T16:56:56.436039Z", "commit": "148", "message": "Implemented the RanGenerator class - this is explicitly shared, streamable and thread-safe. It is based on a fast BSD implementation of the Mersenne twister algorithm, which is good enough for what I want. \n\nWhile it is streamable, the set and get state functions appear broken, so I am not yet trusting the streaming!\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2007-01-10T16:46:20.289580Z", "commit": "147", "message": "Still working on the simulation classes... I've added a random number generator class that should have the behaviour I want (shared generator that doesn't reset all of the time, and also is streamable to/from a binary bytearray).\n\nCode is broken!\n\n", "author": "chryswoods"}, {"date": "2007-01-10T14:00:22.914335Z", "commit": "146", "message": "Committing work before my window is fixed\n\nCode is broken!\n\n", "author": "chryswoods"}, {"date": "2007-01-08T20:05:59.659020Z", "commit": "145", "message": "I've worked out a way to define flexible groups that allow different ways of moving molecules. It's based on creating groups that move in different ways (much like ForceField are groups that calculate energies in different ways). Just like ForceFields need forcefield parameters, so the move groups need parameters to help the move (e.g. zmatrix, momenta/acceleration etc.)\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-01-08T14:02:50.570092Z", "commit": "144", "message": "I've added an API to FFBase for the addition and removal of individual atoms, and also for the addition of molecules/residues/atoms to parrticular groups within the forcefield (e.g. QM region or MM region).\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-01-05T23:14:16.508178Z", "commit": "143", "message": "Merging the users/chryswoods branch to devel.\n\nThis merge;\n\n* Adds a generic atom ID class so that I can simplify overloaded atom functions\n* Adds generic properties to the Molecule class\n* Supplies atomic properties, e.g. AtomicCharges and AtomicLJs\n* Provides an improved API for ForceField that uses molecular properties\n* Adds a new class that allows time- and memory efficient generic\n  atom selections within a molecule.\n* Moves SireCAS over to using SharedPolyPointer and removes RegisterExpression\n* Completely removes DynamicSharedPtr and replaces all uses with SharedPolyPointer\n* Adds the NewAtom class that will eventually replace Atom\n\nThe command used to perform this merge was;\n\nsvn merge -r 118:142 ../users/chryswoods/ ./\n\n", "author": "chryswoods"}, {"date": "2007-01-05T16:38:39.376497Z", "commit": "142", "message": "I've added a test of the code to extract sub-expressions of a particular type from the SireCAS::Expression. Compilation required that the assignment operator of ExBase was made public (it used to be private when sharing was made possible via boost::shared_ptr, but now that I use SharedPolyPointer that restriction is no longer required). I may need to update the assignment operators of other SireCAS classes.\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-01-05T16:14:19.521710Z", "commit": "141", "message": "I've made a small change to SharedPolyPointer that prevents cloning of an object when it is actually already held by another SharedPolyPointer. This should prevent over-copying of objects, especially in SireCAS (as all of the classes derived from ExBase like to return Expression(*this), which performed a clone() in the last version, but now don't clone if the ExBase is not on the stack).\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-01-05T15:14:28.722012Z", "commit": "140", "message": "I have added a function to SireCAS::Expression that lets me to easily extract all of the sub-expressions of type 'T' - in doing this I finally moved SireCAS over to using SharedPolyPointer, which was also the trigger to completely remove the ghosts of DynamicSharedPtr. SharedPolyPointer is now used for everything, I have removed RegisterExpression (streaming of SireCAS objects is now done using QMetaType) and I have fixed bugs in the streaming of SireCAS objects (the streaming functions weren't streaming parent classes).\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-01-04T20:49:03.001297Z", "commit": "139", "message": "Fixing the code so that is will compile with gcc4 (missing qHash) and Qt4.1 (no qRegisterMetaType() function)\n\nCode compiles, links and runs well\n\n", "author": "chryswoods"}, {"date": "2007-01-04T19:11:55.737378Z", "commit": "138", "message": "I have finished implementing the basics of NewAtom, including the ability to return generic properties for the atom (via a new AtomicProperties property that is placed between PropertyBase and AtomicCharges/AtomicLJs). I have wrapped up NewAtom in python and it appears to work :-)\n\nCode compiles, links and runs well\n\n", "author": "chryswoods"}, {"date": "2007-01-04T14:21:52.195314Z", "commit": "137", "message": "Big commit... I've started work on a NewAtom class that will eventually replace Atom. NewAtom is basically the same as Atom, but contains a shared pointer to the MoleculeData of the containing molecule, and is more robust than Atom (it cannot be changed except via its own interface, while Atom can be changed via the Vector, AtomIndex, Element or AtomInfo interfaces, which is too general for what I want to achieve).\n\nWriting NewAtom made me realise that I needed to move my MetaType class into sireglobal.h as I shouldn't have a dependency of SireStream in all of my code. This forced me to clean up my MetaType classes, which are now just a very thin, convienient wrapper around the qMetaType functions. \n\nMaking this change meant that I had to update all of the classes that used the old RegisterMetaType, hence the large commit...\n\nAll of the code compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-01-04T09:22:40.296799Z", "commit": "136", "message": "I have added a more complete unit test of AtomSelection (which passes!) and have added some more types of random number generators to SireMaths/maths.h (different types of integers)\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-01-03T21:09:01.808585Z", "commit": "135", "message": "I have added the python wrapping of AtomSelection, which appears to work well, and have also added a unit test for AtomSelection (though its coverage needs to be improved)\n\nI've also fixed some compile bugs for gcc4.\n\nCode compiles, links and appears to run well.\n\n", "author": "chryswoods"}, {"date": "2007-01-03T16:46:09.245817Z", "commit": "134", "message": "I finally had an idea of how to represent atom selections in a Molecule. I have now written the resulting code (AtomSelection), which compiles, though still needs unit testing.\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-01-03T12:21:52.565796Z", "commit": "133", "message": "I have finished updating the code for the modified ForceField API and it now all works correctly. I have updated FFComponent so that it can accept symbols in its constructor (as I have also done to SireCAS::Function) and have wrapped these up accordingly. I have also updated FFBase::Components so that the total energy can be made a function of any symbols that are passed down to it.\n\nI have also added a short document stating the rules used for ID and version numbers of Molecule and ForceField.\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2007-01-02T19:10:43.397614Z", "commit": "132", "message": "I have been working propogating the change in API from FFBase up through to InterCLJFF. This has lead to significant cleaning of InterCLJFF and MolCLJInfo (and ChangedMolCLJInfo).\n\nInterupted by dinner :-)\n\nSireFF compiles (as does its basic python wrapping), but SireMM doesn't yet compile (InterCLJFF is broken)\n\n", "author": "chryswoods"}, {"date": "2007-01-01T22:22:19.099603Z", "commit": "131", "message": "I've fixed some compile problems for gcc4 and have added FFComponent (SireCAS::Function specialised to include information about the forcefield that contains the represented component) and am in the process of updating the forcefield classes (also to include the updated API for moving / changing / adding / removing and replacing molecules / residues.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2006-12-22T13:55:40.265860Z", "commit": "130", "message": "I have been working on Squire and have now got the design right for the division of work between the principal Molpro classes.\n\nI have also updated SharedPolyPointer and moved some code around so that SireError/errors.h is not included in most files.\n\nCode compiles, links and runs well without SQUIRE\n\n", "author": "chryswoods"}, {"date": "2006-12-21T16:28:23.288024Z", "commit": "129", "message": "I have updated the version number classes (IDPair, IDMajMinVersion etc.) to make them a bit cleaner, ease the return of a Version object, and to add binary streaming operators.\n\nI have added version numbers to FFBase, though they are not yet integrated with InterCLJFF or Tip4PFF.\n\nI am working on the MolproFF and MolproCalculator, and am beginning to clean up that code as I now have a more clear idea for the separation of the calculation into control, data and process.\n\nCode compiles, links and runs well (without SQUIRE)\n\n", "author": "chryswoods"}, {"date": "2006-12-21T12:59:17.352428Z", "commit": "128", "message": "I have fixed the code so that now InterCLJFF and Tip4PFF both use molecular properties to obtain the charge and LJ parameters :-)\n\nThe code compiles, links and runs well (without SQUIRE)\n\n", "author": "chryswoods"}, {"date": "2006-12-20T16:34:46.894587Z", "commit": "127", "message": "Have to stop as going home - updating InterCLJFF to use properties rather than needing CLJ parameters to be passed explicitly.\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2006-12-20T15:09:56.774998Z", "commit": "126", "message": "I have updated all of the forcefield objects to use FFBase::Components and FFBase::Parameters. I have also cleaned up the code.\n\nCode compiles, links and runs well (without SQUIRE)\n\n", "author": "chryswoods"}, {"date": "2006-12-20T11:14:05.987688Z", "commit": "125", "message": "I have finished ParameterName, ParameterSource and ParameterMap and have wrapped them up in python. These classes will allow me to write code like;\n\n  cljff.add( mol, [cljff.parameters().coulomb() == \"charges\" \\\n                   cljff.parameters().lj() == \"ljs\"] )\n\nThe code compiles, links and runs well without Squire.\n\n", "author": "chryswoods"}, {"date": "2006-12-19T21:16:59.662585Z", "commit": "124", "message": "Fixed some problems preventing compilation with symbol hiding. Added FFBase::Parameters so that I can now write code like;\n\nclj.add( mol, [clj.parameters().coulomb() == \"charges\", clj.parameters().lj() == \"ljs\"] )\n\nI've wrapped FFBase::Parameters in python, though haven't wrapped up ParameterMap, ParameterName or ParameterSource.\n\nCode compiles, links and runs well (without SQUIRE)\n\n", "author": "chryswoods"}, {"date": "2006-12-19T16:35:46.287368Z", "commit": "123", "message": "I have created the AtomicLJs class to hold atomic LJ parameters, and have wrapped this, and AtomicCharges, in python. I *can* now write;\n\nmol.setProperty( \"charges\", AtomicCharges( [0.0, 0.52, 0.52, -1.04] ) )\n\nI have also begun work on a new way of holding and referring to forcefield energy components. This removes the need for unique integers to refer to components, and also cleans up the forcefield interface. Instead of writing;\n\ncljff.coulomb(), cljff.lj()\n\nI now write\n\ncljff.components().coulomb(), cljff.components().lj()\n\nThis makes a big difference, as it stops name pollution of cljff, and it allows the same idea to be used to refer to parameter types, e.g. I will have\n\ncljff.parameters().coulomb() and cljff.parameters().lj()\n\nCode compiles, links and runs well (with SQUIRE off)\n\n", "author": "chryswoods"}, {"date": "2006-12-19T09:57:16.990268Z", "commit": "122", "message": "I have finished off implementing properties of a molecule and have wrapped them up in python. I can now successfully add QVariant properties to a molecule (and retrieve them!). The next step is to python wrap AtomicCharges and to provide AtomicLJs.\n\nCode compiles, links and runs well (without SQUIRE)\n\n", "author": "chryswoods"}, {"date": "2006-12-18T20:42:22.738333Z", "commit": "121", "message": "I have cleaned up the classes that implement molecular properties. My last design was a bit silly...! Now my design is much more lightweight and straightforward (I can sometimes overthink and overdesign basic things!). I've written the class to hold atomic charges (AtomicCharges). Hopefully, once wrapped, I will be able to write python code like this;\n\nmol.setProperty( \"charges\", AtomicCharges( [ 0.0, 0.52, 0.52, -1.04 ] ) )\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2006-12-18T16:28:05.213090Z", "commit": "120", "message": "I have bitten the bullet and have decided that molecules do indeed need to have extra data associated with them. The reason is that this is the easiest and most reliable way to pass information between forcefields and the system, ensuring that the data doesn't become separated from the molecule. I am implementing the extra data as a set of properties that may be added to the molecule. This will allow a very general metaproperty system to be developed.\n\nCode compiles, links and runs well (with no SQUIRE)\n\n", "author": "chryswoods"}, {"date": "2006-12-17T15:23:03.929003Z", "commit": "119", "message": "I have created the IDMolAtom class which allows the simplification of functions that take atom IDs for arguments. Instead of requiring a different function for each atom ID, now only a single function is required, which takes an IDMolAtomID, and it is this object that then resolves the ID back to the standard CGAtomID which is the primary ID type of a Molecule.\n\nThe code compiles, links and works well (if SIRE_BUILD_SQUIRE is off)\n\n", "author": "chryswoods"}, {"date": "2006-12-16T21:39:17.769410Z", "commit": "118", "message": "Merging the users/chryswoods branch to devel.\n\nThis merge;\n\n* adds working CLJ forcefields\n* adds processors (background threads and beginning of QM/MM molpro link)\n* added thread-safe version classes\n* fixed lots of python wrapping\n\nThe command to perform this merge was;\n\nsvn merge -r 85:117 ../users/chryswoods/ ./\n\n", "author": "chryswoods"}, {"date": "2006-12-16T21:06:23.288397Z", "commit": "117", "message": "I've wrapped up the ID classes in python and they appear to work.\n\n", "author": "chryswoods"}, {"date": "2006-12-15T10:19:44.408383Z", "commit": "116", "message": "I have finished off creating the IDVersion and IDMajMinVersion classes and have written some units tests for these (including the MajMinVersion class as well). These all pass and the classes appear to work well.\n\nI have also created a SireError::version_error exception class that is inherited by SireStream::version_error, so I can more clearly distinguish between general version errors and binary format version errors. I have also added a SireError::id_error class to highlight errors of ID number.\n\nAs a point of interest, on my desktop (Pentium D 3.4GHz) the timings for incrementing the versions 100000 times are;\n\nMajMinVersion:   major() == 38ms, minor() == 3 ms\nIDVersion:       ID() == 37ms, version() == 4 ms\nIDMinMajVersion: ID() == 93ms, major() == 37ms, minor() == 4ms\n\nCode compiles, links and runs well if SIRE_BUILD_SPIER is off.\n\n", "author": "chryswoods"}, {"date": "2006-12-14T20:34:26.717872Z", "commit": "115", "message": "I have generalised the code from MajMinVersion into IDPair and IDTriple so that I can later create MajMinVersion, IDMajMinVersion and IDVesion classes (for different use-cases).\n\nAlso, I've compiled and tested on scruffy (amd64 3700+), and this does 100000 minor increments in 1ms, and 100000 major increments in 13ms.\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2006-12-13T23:09:06.724219Z", "commit": "114", "message": "I've written a new MajMinVersion class that allows thread-safe unique identification of unique versions of unique objects based on the q_atomic atomic integer functions. I've written a small unit test for this new class (not that that's finished yet) which includes timing - it does about 100000 increments in 3ms, and about 100000 major increments in 85ms (which is quite fast enough!).\n\nCode compiles, links and runs well (as long as SIRE_BUILD_SPIER is off)\n\n", "author": "chryswoods"}, {"date": "2006-12-13T20:29:58.890276Z", "commit": "113", "message": "Added some more unit tests for periodic box which test that the 'getCopiesWithin' function is working correctly. It seems to..!\n\nCode is compiling, linking and working well (with SIRE_BUILD_SPIER off)\n\n", "author": "chryswoods"}, {"date": "2006-12-13T11:21:58.901670Z", "commit": "112", "message": "I have written some unit tests for PeriodicBox and fixed the bugs that I mentioned in the last commit (the molecules being moved in the wrong direction). I have also cleaned up the unit tests by changing them over to using BOOST_CHECK_CLOSE for floating point comparisons. This has helped me fix the test failures caused by machine precision problems.\n\nWith SIRE_BUILD_SPIER off, the code compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2006-12-12T16:48:03.134968Z", "commit": "111", "message": "I have added the code necessary to get periodic copies of molecules from the simulation Space, and have wrapped this up in python so that I can begin testing it. Initial tests show that I am adding deltas rather than subtracting them, so the code doesn't work yet and is buggy.\n\nIf SIRE_BUILD_MOLPRO is off, then the code compiles, links and runs. The Squire code is still broken.\n\n", "author": "chryswoods"}, {"date": "2006-12-11T21:05:03.690794Z", "commit": "110", "message": "I've updated the code so that it compiles properly with gcc4 on my laptop. As this doesn't have Molpro, it compiles and runs correctly, and the threading code works well (test/test.py).\n\nExcept for Squire, the code compiles and works well.\n\n", "author": "chryswoods"}, {"date": "2006-12-11T20:17:51.341176Z", "commit": "109", "message": "Still working on MolproFF... I have had to work out how to use periodic boundary conditions with the QM forcefield - the problem is that a single molecule may need to be represented multiple times in the QM forcefield. How will that work?\n\n(also, for the record, today I attended the talk about Boa. It is a very nice looking code and the authors should be congratulated for getting something working :-)\n\nCode is broken... as normal!\n\n", "author": "chryswoods"}, {"date": "2006-12-08T13:16:09.287334Z", "commit": "108", "message": "I am working on MolproFF, MolproProcessor and MolproCalculator. The code is still in progress, so is not finished and does not yet compile. I have to stop now as I am going on an afternoon course and I will be late if I continue...!\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2006-12-07T15:38:19.879481Z", "commit": "107", "message": "I have finished writing the processors that calculate generic forcefields in the main thread and in a background thread. I have also wrapped up all of the user-facing classes in python, and have tested them via test/test.py, which calculates the energy of the water box in the main thread and, simultaeneously, in the background thread. The framework is quite nice, and is finally intuitive to use from python. The best thing about this is that the threading is completely hidden inside ThreadProcessor, so there is no need for any other code to have to worry about mutexes or threads. This also means that the user won't need to touch python threads.\n\nThe code compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2006-12-06T13:36:40.315051Z", "commit": "106", "message": "I am still sorting out the implementation of parallel processors. I have now almost fully fleshed out the design, and now need to write some tests and get it all to compile and link.\n\nI have slightly changed the design so that now the forcefield calculation itself has been separated from the network model used (i.e. now I have a class hierarchy based on FFCalculator, which is used to calculate FF energies, and another, separate class hierarchy based on ProcessorBase that is used to represent the remote processor). This allows different ways of calculating a forcefield to be more easily combined with different network models, e.g. now MolproFF can use MolproCalculator to get the energy, and FFThreadProcessor to do this in a separate thread, or FFMPIProcessor to do this on a separate MPI node (not that I have FFMPIProcessor yet....)\n\nCode is definitely broken.\n\n", "author": "chryswoods"}, {"date": "2006-12-04T20:40:52.434587Z", "commit": "105", "message": "I am working on the processor class... I've mapped out a design and am now implementing it. To do this I have added SireCluster, which is a library that will hold all of the threading and multi-processor parts of the code.\n\nCode is probably broken...\n\n", "author": "chryswoods"}, {"date": "2006-11-30T17:26:17.812928Z", "commit": "104", "message": "I am working on Squire, building the MolproFF and MolproProcessor that will be used to link Sire to Molpro for QM/MM calculations.\n\n", "author": "chryswoods"}, {"date": "2006-11-29T16:50:09.780768Z", "commit": "103", "message": "Made some changes to Sire.IO to allow the writing of EditMols as well as Molecules. \n\nCode compiles, links and appears to run well.\n\n", "author": "chryswoods"}, {"date": "2006-11-27T21:50:02.196559Z", "commit": "102", "message": "I am working out the API of System, Simulation and Processor - I have already planned how I will sort out the apparent dischord between the implicit shared System class and the single, uncopyable Simulation and Processor classes...\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2006-11-22T21:19:14.394447Z", "commit": "101", "message": "The code can do Monte Carlo (well in python anyway!). The energy appears to be recalculated correctly after each move. The code can only do about 600 moves per second, which appears to be better than ProtoMS2.1, which I've just calculated to do about 450 moves per second. I think that Sire is faster because it calculates the change in energy in a single pass, compared to two passes for ProtoMS.\n\nCode compiles, links and appears to run well.\n\n", "author": "chryswoods"}, {"date": "2006-11-20T21:35:36.952560Z", "commit": "100", "message": "I have added the code to allow quick recalculation of the energy for MC moves, so now the code is in theory capable of performing fast Monte Carlo. Of course this now needs testing... :-)\n\nCode compiles, links and appears to run well.\n\n", "author": "chryswoods"}, {"date": "2006-11-20T15:22:56.140046Z", "commit": "99", "message": "I've updated the code to allow successful compilation using gcc4 symbol visibility hiding. This reduces the size of the python wrapper libraries by about a third (e.g. SireMol goes down from 31MB to 18MB). The size of the wrappers is still ridiculous, but at least its a start...!\n\nAlso, Tip4PFF is now faster than Sire(493)! The old prototype took 560ms to calculate the energy, while Tip4PFF takes 540ms on my laptop. The correct InterCLJFF takes about 800ms, so is about 50-60% too slow, but at least now this is looking like an achievable goal.\n\nI've also now filled in the missing functions for the recalulate delta energy. I've realised that it is best for the current configuration to be the new configuration, as then the forcefield will publically display only a single state. The old configuration is stored in the ChangedMolCLJInfo objects. I've also fixed a bug in the algorithm that would have missed the energy change of molecules that are removed.\n\nThe code compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2006-11-17T16:46:55.943576Z", "commit": "98", "message": "Filling in the classes, but must leave now to catch my bus..!\n\n", "author": "chryswoods"}, {"date": "2006-11-17T14:53:07.432655Z", "commit": "97", "message": "I have worked out the algorithm to calculate the change in energy associated with moving a molecule in the InterCLJFF forcefield (remembering that this forcefield does not include IntraCLJ components!). I've written the algorithm, and now need to fill in some necessary helper classes.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2006-11-17T10:52:33.801954Z", "commit": "96", "message": "The speed of the code is now a little better - explicitly calculating CLJ parameters in the pair loop does seem to have sped things up. For the moment I will keep going down this route, and will look for a different way of handling CLJ parameters later...\n\nCode compiles, runs and produces correct energies.\n\n", "author": "chryswoods"}, {"date": "2006-11-17T10:19:20.081721Z", "commit": "95", "message": "I've realised that part of the problem was the CLJ parameters. I have separated these into charge and LJ and have removed the generic combining rules (currently geometric rules are hard-coded into the pair loop). This has improved the speed a lot, and while InterCLJFF is still not yet fast enough, Tip4PFF is beginning to approach its correct speed.\n\n", "author": "chryswoods"}, {"date": "2006-11-16T21:54:46.528465Z", "commit": "94", "message": "Still not found out where the problem is - maybe it is my use of references? When I changed double return to const double& the program slowed down by about 100%. I'll need to play around some more...\n\n", "author": "chryswoods"}, {"date": "2006-11-16T19:02:48.131956Z", "commit": "93", "message": "I've tracked down the problem to very inefficient combination of CLJ parameters. Quite why this is inefficient remains to be seen...\n\n", "author": "chryswoods"}, {"date": "2006-11-16T14:28:27.141556Z", "commit": "92", "message": "I have made some progress speeding the code up. I've also switched Space, CombiningRules and SwitchingFunction over to using SharedPolyPointer rather than DynamicSharedPtr.\n\nSee techdocs/progress_on_speed for info on how I am doing improving the efficiency of the code...\n\n", "author": "chryswoods"}, {"date": "2006-11-15T22:01:15.285907Z", "commit": "91", "message": "I've made some progress speeding the code up. Tonight I've gone from 1304ms on my laptop to 1266ms (ok, not too much faster), while Tip4PFF is now 1042 ms. Its not great though, compared to Sire(480), which did the same calculation in 565 ms on my laptop. Its annoying as the code path for Tip4PFF is much simpler than that in Sire(480), so I am a bit stumped as to why it is so slow...\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2006-11-15T20:05:00.292265Z", "commit": "90", "message": "Changing from compiling with no optimisations to compiling with -O2 has sped the code up by 3.5 - 3.8 times! Optimisation is clearly important.\n\n", "author": "chryswoods"}, {"date": "2006-11-15T16:40:33.180831Z", "commit": "89", "message": "I am speed testing the code. I've realised that CMake has not set any compiler flags, so I have actually been speed testing with no compiler optimisations!!! I've changed the CMakeLists.txt file to add compiler flag definitions, and am now recompiling the code.\n\nThe code compiles and works well.\n\n", "author": "chryswoods"}, {"date": "2006-11-15T11:56:57.313020Z", "commit": "88", "message": "I will investigate the theoretical maximum speed of the calculation by creating an optimised forcefield that will just be for TIP4P water molecules. So far I have just cloned InterCLJFF, but this works well. I will now set about hacking this forcefield so I can get an idea of how fast I could possibly make the calculation...\n\nCode compiles, links and runs well.\n\n", "author": "chryswoods"}, {"date": "2006-11-15T11:08:31.034603Z", "commit": "87", "message": "Sire can now load and calculate the energy of a box of molecules again. While it gets the right energy, it is really slow!!!\n\nFrom the script test/test.py, Sire currently gets;\n\n80 A cutoff:  Energy = -14468.6539004 kcal mol-1 in 10746 ms\n15 A cutoff:  Energy = -14467.270807 kcal mol-1 in 2763 ms\n\nThis compares to that reported in ideas/current_speed for Sire(480) being;\n\n80 A cutoff:  Energy = -14468.7 kcal mol-1 in 2530 ms\n15 A cutoff:  Energy = -14467.3 kcal mol-1 in 563 ms\n\nFor the cartesian box, current Sire is about five times slower than Sire(480).\n(even worse, the timings for Sire(480) were on a 1.4 GHz Pentium M, while the\ncurrent timings are on a 3.4 GHz Pentium D - I'll do a proper comparison on \nthe pentium M tonight).\n\nFor the periodic box;\n\n80 A cutoff:  Energy = -16379.6119722 kcal mol-1 in 12388 ms\n15 A cutoff:  Energy = -16364.0932341 kcal mol-1 in 5289 ms\n\nThis compares to Sire(480) being;\n\n80 A cutoff:  Energy = -16379.6 kcal mol-1 in 2731 ms\n15 A cutoff:  Energy = -16364.1 kcal mol-1 in 1033 ms\n\nAgain, current Sire is about five times slower than Sire(480) on faster hardware...\n\nDespite that, the code compiles, runs and calculates the right energy. Its time for some optimisation :-)\n\n", "author": "chryswoods"}, {"date": "2006-11-14T09:56:28.388626Z", "commit": "86", "message": "Added a temporary function to InterCLJFF to allow the direct adding of molecules with their charge and LJ parameters. This will allow me to get back to work on calculating energies and doing Monte Carlo, even though I have not yet finished cleaning up the ParameterTable umbrella class.\n\n", "author": "chryswoods"}, {"date": "2006-11-13T22:36:26.414800Z", "commit": "85", "message": "Merging the users/chryswoods branch to devel.\n\nThis merge;\n\n* fixes reading of PDB files\n* adds Py++ wrapping of several classes (including Molecule and Residue)\n* adds a basic CLJ forcefield\n* adds switching functions, combining rules and Spaces\n* adds a more efficient version of DynamicSharedPtr (SharedPolyPointer)\n* adds unit tests for SharedPolyPointer\n\nThe command to perform the merge was;\n\nsvn merge -r 71:84 ../users/chryswoods/ ./\n\n", "author": "chryswoods"}, {"date": "2006-11-13T22:00:46.872498Z", "commit": "84", "message": "Created the SharedPolyPointer class, and have added some test cases for this class. One day I will move my DynamicSharedPtr classes over to using SharedPolyPointer.\n\nCode compiles, links and runs :-)\n\n", "author": "chryswoods"}, {"date": "2006-11-13T15:51:04.867130Z", "commit": "83", "message": "Fixed a small bug in MoleculeInfo (indexing for AtomID) and am working on making a more efficient DynamicSharedPtr (will rename as SharedPolymorphicPointer)\n\n", "author": "chryswoods"}, {"date": "2006-11-12T20:14:03.772714Z", "commit": "82", "message": "Fixed the code so that I can now finally read molecules again, and convert them to Molecules!\n\nAlso I have deleted old ideas\n\nCode compiles, links and runs.\n\n", "author": "chryswoods"}, {"date": "2006-11-10T16:43:04.316713Z", "commit": "81", "message": "Fixing bugs that prevented the loading of molecules....\n\n", "author": "chryswoods"}, {"date": "2006-10-30T22:27:32.829963Z", "commit": "80", "message": "Added wrapper for QList_SireMol_ and have been working on PDB so I can load molecules again (it still doesn't work - some bug somewhere - the molecules load, but there null molecules are returned...)\n\nCode compiles, links and runs, but it won't load a molecule!\n\n", "author": "chryswoods"}, {"date": "2006-10-30T12:25:35.232063Z", "commit": "79", "message": "Added the python wrapping of FFBase, CLJFF and InterCLJFF. Code compiles and works.\n\n", "author": "chryswoods"}, {"date": "2006-10-29T20:31:49.278367Z", "commit": "78", "message": "I have added lots of code to calculate CLJ energies, and InterCLJFF and CLJFF are now nearly complete (well, except for me working out exactly how to store molecules within a forcefield, but that is a problem for another day!).\n\nSome of the functionality of InterCLJFF is missing, and it is not yet possible to add any molecules to this forcefield (quite important requirement, you'd think...!), and the python wrappers need writing, but otherwise, it all compiles and runs.\n\nI've made some changes to SireCAS to allow operator= for Function and Symbol. This is probably a bad thing to do. I've realised that SireCAS should use DynamicSharedPtr rather than boost::shared_ptr, as this would simplify the lifetime management, allow operator= for all SireCAS objects, simplify serialisation (as would use DynamicSharedPtr serialisation) and would make the code more robust. This is a change for another day.\n\nCode is working again. (probably not for long)\n\n", "author": "chryswoods"}, {"date": "2006-10-28T21:41:06.343891Z", "commit": "77", "message": "The switching function and combining rules classes are now written, and fully compile without errors. They still need to be tested.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2006-10-26T21:19:34.103404Z", "commit": "76", "message": "Providing the framework for switching and combining functions - yes - finally coding some computational chemistry again ;-)\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2006-10-26T15:44:43.773730Z", "commit": "75", "message": "I am now working on the mechanics of calculating the CLJ energy. I think that I can move most of the machinery into the CLJFF class. I have also realised that I don't need the \"worker/editor\" forcefield design, as adding and removing molecules from a forcefield should be allowed during a running simulation. (especially as now everything is self-managing, so there is no worry about the user doing this behind the back of the simulation!)\n\n", "author": "chryswoods"}, {"date": "2006-10-24T15:27:23.975100Z", "commit": "74", "message": "I am back to working on my branch, and have begun working on the CLJ forcefield again. I hope to get some energy calculations ready within the next couple of days, so that I can finally(!) perform some Monte Carlo.\n\nCode is broken (see, working code was just a temporary illusion!)\n\n", "author": "chryswoods"}, {"date": "2006-10-17T15:45:47.010369Z", "commit": "73", "message": "I have now fully merged my 'branches/users/chryswoods' branch into 'branches/devel'.\n\nThis was accomplished via two svn merge commands;\n\nsvn merge -r 12:31 ../users/chryswoods/ .\nsvn merge -r 35:71 ../users/chryswoods/ ./\n\nLots and lots of changes have been brought in by this merge. See the commit messages for the chryswoods branch for more details, but, in summary, they revolve around a complete change in the internal representation of Molecule and a completely new MoleculeInfo class. Lots of code cleaning and bug fixing as well.\n\n", "author": "chryswoods"}, {"date": "2006-10-17T15:08:53.012112Z", "commit": "72", "message": "Merging the 'devel' branch into 'trunk' via;\n\nsvn merge -r 9:31 ../branches/devel/ .\n\nThis upgrades the trunk to use CMake to control compilation. CMake is superior to QMake, and has been used now very successfully with the 'devel' and 'chryswoods' branches.\n\nAs well as adding CMake support, this version also includes general fixes that make the code more portable across different linux distributions. I have successfully compiled this version on Redhat WWS 4, Gentoo (and Gentoo64) and Fedora Core 5.\n\n", "author": "chryswoods"}, {"date": "2006-10-17T14:50:28.836277Z", "commit": "71", "message": "I have wrapped up Molecule, Residue, EditMol and EditRes using Py++, which seems to work really well. I've had to manually edit the wrapping, but that's probably just down to me not understanding the tool fully.\n\nI've filled in missing functions, and *shock horror* this version of the code actually compiles! And runs! It is not particularly usable, but it is enough that I can now move all of this over to the devel branch.\n\n", "author": "chryswoods"}, {"date": "2006-10-16T19:40:36.574611Z", "commit": "70", "message": "Filled in the missing functions in MoleculeInfo and ResidueInfo and have wrapped up ChargeTable and LJTable. I have started the wrapping of Molecule, and realised that it needs to be automated. I started writing my own simple script, then, thinking better of it, I have investigated what already exists. Py++ appears to be a good solution (and it does documentation as well), so I will download it, and use it to see if I can wrap Molecule.\n\n", "author": "chryswoods"}, {"date": "2006-10-14T21:59:02.512390Z", "commit": "69", "message": "I have filled in the missing AtomTable functions, so that classes wrappers now compile and link. I have also now written the wrappers for MoleculeInfo and ResidueInfo, which compile, but have exposed some missing functions from MoleculeInfo and ResidueInfo (and thus won't link).\n\n", "author": "chryswoods"}, {"date": "2006-10-13T15:20:53.680545Z", "commit": "68", "message": "I have made a lot of progress. Earlier today I had all of the code compiling and linking. Now I have wrapped up the AtomTypeTable in Python there are a few unresolved functions, but other than that, it is all up and running again. So ... nearly ... there ... !\n\n", "author": "chryswoods"}, {"date": "2006-10-12T20:34:35.465173Z", "commit": "67", "message": "I have been working through SireMM to get it to compile. Just small changes really (coping with type safety of GroupID, Index etc. and changing over to use MoleculeInfo). I have disabled some key features, namely assigning of parameters. This is because I don't want to fix code that I will eventually change (the code to select and create tables within ParameterTable).\n\n", "author": "chryswoods"}, {"date": "2006-10-12T15:49:33.707059Z", "commit": "66", "message": "A lot of code is now compiling (SireMol, SireDB, SireFF and wrappers). I am working on getting the rest to compile so that I can test the new design, and move on to getting the forcefields up and running again :-)\n\n", "author": "chryswoods"}, {"date": "2006-10-11T21:34:39.720754Z", "commit": "65", "message": "Working on updating the ParameterTable class - I've updated it to use the self-managed object design, though this does make editing slighly more cumbersome...\n\n", "author": "chryswoods"}, {"date": "2006-10-11T15:33:44.639142Z", "commit": "64", "message": "I have written the new AtomTable classes, and have finished AtomTypeTable. I am quite pleased with the design, as it now caches the transformation from a QHash of parameters to a QVector. There is also now a nice combination with AtomInfoGroup and AtomInfo (i.e. to make ParameterGroup and AtomParameter).\n\nCode is still broken. One day it may not be...\n\n", "author": "chryswoods"}, {"date": "2006-10-10T15:42:16.151412Z", "commit": "63", "message": "I am now working on SireDB to integrate it with the new method of indexing atoms. \n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2006-10-10T13:22:32.721333Z", "commit": "62", "message": "By using stubs I have got the SireMol library to compile and link. I really need to be getting the SireFF and SireMM libraries working so that I can run some simulations. I will come back to SireMolonce I have some running simulations!\n\n", "author": "chryswoods"}, {"date": "2006-10-09T20:19:37.913704Z", "commit": "61", "message": "I have filled in a lot of the missing functions, and now just have some from EditMolData and MoleculeBonds to go.\n\n", "author": "chryswoods"}, {"date": "2006-10-08T16:23:08.094415Z", "commit": "60", "message": "EditRes and EditMol (and the rest of SireMol) now compile, but undefined functions mean that it doesn't yet link.\n\n", "author": "chryswoods"}, {"date": "2006-10-08T15:02:28.700155Z", "commit": "59", "message": "I have filled in the APIs of EditMol and EditRes. I still need to compile and test these functions however (they are unlikely to compile now!).\n\nThe API of EditMol and EditRes is missing a nice function for editing an Atom (e.g. changing the atom's element, CutGroupNum or AtomNum).\n\n", "author": "chryswoods"}, {"date": "2006-10-06T15:44:49.213402Z", "commit": "58", "message": "I have been creating and filling in the APIs of EditMol and EditRes. This has confirmed that EditMolData is fit for purpose.\n\n", "author": "chryswoods"}, {"date": "2006-10-05T15:29:23.623838Z", "commit": "57", "message": "Fixing the cmake and build errors from the last revision caused by not cleaning everything up when I removed some files...!\n\n", "author": "chryswoods"}, {"date": "2006-10-05T15:25:52.587424Z", "commit": "56", "message": "I have filled in nearly all of the EditMolData API and have written most of the EditMol API. I have worked out how to convert from an EditMol to a Molecule (via SireMol::detail::MolData), and this allows me to remove the ID and version from the EditMol. I have also now sorted out how the various cutting schemes are implemented (molecule, residue or atom-based cutting). They are now implemented via a function object (CuttingFunction) which is stored in the EditMol, and which calculates the CutGroupNum of each atom as it is added. This is something that has only become possible now that I have CutGroupNum, as it would not have worked with CutGroupID (as deleting CutGroups or atoms would have broken everything!).\n\nSireMol compiles and links.\n\n", "author": "chryswoods"}, {"date": "2006-10-05T12:50:17.358503Z", "commit": "55", "message": "I have filled in nearly all of the API for EditMolData, and SireMol now fully compiles and links.\n\n", "author": "chryswoods"}, {"date": "2006-10-03T12:47:26.465175Z", "commit": "54", "message": "I have filled in more of the EditMolData functions, including the translation and rotation functions, and some of the setCoordinates functions.\n\nCode is still broken...\n\n", "author": "chryswoods"}, {"date": "2006-10-02T15:34:57.479806Z", "commit": "53", "message": "I am filling in the API for EditMolData. I am making good progress, despite the limited time I had to work on this today. I am modelling a lot of the implementation on MoleculeData - especially the use of MoveWorkspace to ensure that the invariant is maintained.\n\n", "author": "chryswoods"}, {"date": "2006-10-01T16:48:58.782666Z", "commit": "52", "message": "Working on the EditMol class - I am updating EditMolData so that it has a similar interface to Molecule. This should help users learn the interface as both classes will be made to work in consistently the same way.\n\n", "author": "chryswoods"}, {"date": "2006-09-29T15:37:41.935644Z", "commit": "51", "message": "I have realised that I need to have a CutGroupNum identifier as well as a CutGroupID index. This prevents confusion as to what the CutGroupID means (sometimes I was using it as an index, sometimes as an ID), and also allows the user to add CutGroupNum identifiers to an EditMol, so that I can get rid of conversion functions! I am working (eventually) towards an EditMol being pretty invisible, and that you would get back Molecule objects. You then edit the Molecule objects via;\n\nEditMol editer = mol.edit();\n\nediter.addAutoBonds();\nediter.setName(\"My Molecule\");\nediter.doThis();\nediter.doThat();\n\nmol = editer.commit();\n\nThis follows the same usage as other classes, and should help the user learn through consistency.\n\n", "author": "chryswoods"}, {"date": "2006-09-28T21:19:32.352139Z", "commit": "50", "message": "I have filled in the functions for the ParameterGroup class.\n\n", "author": "chryswoods"}, {"date": "2006-09-28T15:35:55.245376Z", "commit": "49", "message": "Now that SireMol works, I am updating SireDB to match the new SireMol API. Mostly this involves using the new MoleculeInfo, ResidueInfo, AtomInfo objects as the metadata for the parameter tables. This simplifies things a lot, and means that I can now get rid of a lot of the ugliness of the old code.\n\nI am partially through writing classes, as I need to catch the bus home... \n\nCode is always broken...\n\n", "author": "chryswoods"}, {"date": "2006-09-28T08:57:49.905526Z", "commit": "48", "message": "SireMol now compiles and links! I am finally beginning to make progress back to a working piece of code :-)\n\nI updated CoordGroup so that it is a complete const-class - to edit it you must now use CoordGroupEditor.\nI have also updated CoordGroupEditor so that it knows when the coordinates have been changed so that\nit doesn't recalculate the bounding box unnecessarily. This helps when the coordinates are\ncopied directly from another CoordGroup.\n\nI have added in all of the MoleculeData::setCoordinates functions. All of this now needs to be tested, but only\nonce I have updated the rest of the code so that I can recompile everything.\n\n", "author": "chryswoods"}, {"date": "2006-09-27T16:46:40.093041Z", "commit": "47", "message": "Making progress - nearly filled in all of MoleculeData now! \n\n", "author": "chryswoods"}, {"date": "2006-09-26T14:49:42.766479Z", "commit": "46", "message": "I have filled in most of the SireMol API - just now MoleculeData to go, (though EditMol/Res/Data has been completely blanked out).\n\n", "author": "chryswoods"}, {"date": "2006-09-25T21:06:26.416422Z", "commit": "45", "message": "I have been working on filling in the API of Residue. I have mirrored the API of Residue from Molecule, so that there is some consistency.\n\nCode is still broken\n\n", "author": "chryswoods"}, {"date": "2006-09-24T20:50:40.229670Z", "commit": "44", "message": "Making lots of progress now - I have filled in MoleculeInfo, ResidueInfo and AtomInfoGroup. These all have very similar APIs, and all follow the object design philosophy that I have previous stated. These all compile, and I now must move on to fill in missing functions in MoleculeData, Molecule and Residue.\n\nCode is still broken.\n\n", "author": "chryswoods"}, {"date": "2006-09-24T14:27:21.707230Z", "commit": "43", "message": "Fixed some compilation errors on my laptop (gcc4 vs. work desktops gcc3). Working on MoleculeInfo. I have mapped the API of Molecule onto MoleculeInfo, so that it behaves in the same manner. I am filling in this API, and am making good progress. Molecule and MoleculeInfo really demonstrate my philosophy of minimising the amount of information in a class, but maximising the number of ways of accessing and using that information.\n\nCode is still broken. One day it will run again...\n\n", "author": "chryswoods"}, {"date": "2006-09-22T15:50:51.388299Z", "commit": "42", "message": "I have cleaned up the SireVol classes (now based on DynamicSharedPtr, updated to work with CoordGroups, and renamed Space rather than SimVolume).\n\nI have also been filling in the missing functions in SireMol. SireMol all compiles, but now that I have turned on the check for unresolved symbols, SireMol doesn't link. (lots of undefined symbols to fill in!)\n\nThe code is slowly getting better, but it is a long process.\n\n", "author": "chryswoods"}, {"date": "2006-09-21T18:30:39.003973Z", "commit": "41", "message": "Pruning the tree of dead files....\n\n", "author": "chryswoods"}, {"date": "2006-09-21T15:23:24.334759Z", "commit": "40", "message": "I have been working on getting the SireMol library to compile. This has mostly involved finishing up the modification of the Molecule class, then updating everything obvious in SireMol and commenting out everything more complicated! There are several missing functions...!\n\nThe code is still very broken. One day it will compile and run again...\n\n", "author": "chryswoods"}, {"date": "2006-09-15T15:25:38.348260Z", "commit": "39", "message": "I am still working on getting the new Molecule class working. I have removed the now unnecessary MoleculeDataPvt class and have instead got Molecule (and eventually Residue) holding MoleculeData directly. This stops me from stupidly copying the API three times... :-)\n\nI have finished writing most of the code of MoleculeData and the API is now pretty much finished. I have mapped this to Molecule and am now pretty pleased with the result. The functions of Molecule now all fall into either state querying functions or state changing functions, and all of the state changing functions are atomic (they either totally work or they do nothing). The main work left to do now is to fill in the stubs and try and get it all compiled.\n\nI've added a few more source directories - these are mainly stubs so that I can add API to missing classes and get Molecule / MoleculeData compiling without complaining about missing header files.\n\n", "author": "chryswoods"}, {"date": "2006-09-15T09:12:23.370951Z", "commit": "38", "message": "I have worked through most of MoleculeDataPvt and have updated it to the meet the requirements of self-managed objects. I am pleased with the MoveWorkspace class that is now used for all moves, as this ensures that each move function maintains state (e.g. a move will either complete fully or will not do anything - the molecule cannot be left in a half-moved state :-)\n\nCode is still broken...\n\n", "author": "chryswoods"}, {"date": "2006-09-14T15:41:10.623732Z", "commit": "37", "message": "I have made my way back to some actual programming(!). I am working on Molecule and MoleculeData, and am updating theirinternals to;\n\n(1) Fit in with the self-managed objects model, whereby functions either query the state or predictably change the stage\n(2) Fit in with the implicit sharing model, with optimised copying for the most common case - namely moving a molecule\n(3) Fit in with the maintain-state model, whereby a function should make a complete change or make no change - objects should never be left in a half-way state (this is 'maintain the invariant'?)\n\nThe code in my branch is so broken it is embarassing...!\n\n\n", "author": "chryswoods"}, {"date": "2006-09-13T14:15:12.476866Z", "commit": "36", "message": "First commit after the merge (the problem was with configure.pri which was causing the delta error)\n\nI am removing all trace of the qmake .pro files, so that I can switch fully over to cmake\n\n", "author": "chryswoods"}, {"date": "2006-09-13T13:51:42.099254Z", "commit": "35", "message": " *** RESULT OF SVN MERGE ***\nWorkingCopy Branch:  branches/users/chryswoods\nMergeFrom Branch:    branches/devel\nCommand:             svn merge -r 12:31 ../../devel/ .\n\nMerging the change to CMakeLists.txt files for cmake-based building, and also\nfixes related to getting the code to work on RedHat.\n\n( I am having to break this merge down into parts as I am having problems with subversion\n  reporting \"Delta source ended unexpectedly\" ) \n\n", "author": "chryswoods"}, {"date": "2006-09-13T13:48:17.318640Z", "commit": "34", "message": " *** RESULT OF SVN MERGE ***\nWorkingCopy Branch:  branches/users/chryswoods\nMergeFrom Branch:    branches/devel\nCommand:             svn merge -r 12:31 ../../devel/ .\n\nMerging the change to CMakeLists.txt files for cmake-based building, and also\nfixes related to getting the code to work on RedHat.\n\n( I am having to break this merge down into parts as I am having problems with subversion\n  reporting \"Delta source ended unexpectedly\" ) \n\n", "author": "chryswoods"}, {"date": "2006-09-13T13:44:14.344762Z", "commit": "33", "message": " *** RESULT OF SVN MERGE ***\nWorkingCopy Branch:  branches/users/chryswoods\nMergeFrom Branch:    branches/devel\nCommand:             svn merge -r 12:31 ../../devel/ .\n\nMerging the change to CMakeLists.txt files for cmake-based building, and also\nfixes related to getting the code to work on RedHat.\n\n( I am having to break this merge down into parts as I am having problems with subversion\n  reporting \"Delta source ended unexpectedly\" ) \n\n", "author": "chryswoods"}, {"date": "2006-09-13T13:32:40.187848Z", "commit": "32", "message": "*** RESULT OF SVN MERGE ***\nWorkingCopy Branch:  branches/users/chryswoods\nMergeFrom Branch:    branches/devel\nCommand:             svn merge -r 12:31 ../../devel/ .\n\nMerging the change to CMakeLists.txt files for cmake-based building, and also\nfixes related to getting the code to work on RedHat.\n\n( I am having to break this merge down into parts as I am having problems with subversion\n  reporting \"Delta source ended unexpectedly\" )\n\n", "author": "chryswoods"}, {"date": "2006-09-13T12:20:31.559320Z", "commit": "31", "message": "I have done it - the python modules now compile and work via cmake on redhat. The problem was all caused by a missing symbolic link! Redhat had libboost_python.so.1, but did not have the symbolic link to libboost_python.so\n\nThis meant that the linker linked each python module to libboost_python.a - the static library! This caused a headache, as it probably screwed up the registry of types across the modules. While I had resolved most of the problems by separating the wrappers from the module definition, it didn't solve everything.\n\nMy solution (or should I say hack!) is to add the symbolic link from /usr/lib/libboost_python.so.1 to /usr/lib/libboost_python.so manually, and to then add a configure test to the CMakeLists.txt file that checks to see if the shared library has been found (if not, it dies with an error).\n\n", "author": "chryswoods"}, {"date": "2006-09-12T14:44:05.016793Z", "commit": "30", "message": "I have now added Cmake support to all of the python wrapper modules. Also found most of the problem with poor linking on redhat- I need to separate the wrappers from the module definition so that other modules can link to the wrappers that they use. This prevents different modules using different copies of the same wrapper. I have made this change in the cmake wrappers and most things now work. The only problem now is that Sire.Mol won't load as it doesn't think that SireMaths::Vector has been wrapped (despite the fact that it patently has!!)\n\n", "author": "chryswoods"}, {"date": "2006-09-11T19:33:37.863911Z", "commit": "29", "message": "Beginning work on getting the python wrapping compiling and linking using cmake. Also updated the script to find the python version so that I can also get the python installation directory.\n\n", "author": "chryswoods"}, {"date": "2006-09-11T14:04:19.751681Z", "commit": "28", "message": "siretest, testlink and spier now compile and link using cmake.\n\n", "author": "chryswoods"}, {"date": "2006-09-11T11:32:56.853971Z", "commit": "27", "message": "Added more CMake files. Most of the code now compiles using cmake - I am now resolving some missing symbols when linking.\n\n", "author": "chryswoods"}, {"date": "2006-09-11T08:11:54.035069Z", "commit": "26", "message": "Adding CMakeLists files for other modules. Also added a copy of FindBoost.cmake as this was not available with the version of cmake that comes with gentoo.\n\n", "author": "chryswoods"}, {"date": "2006-09-08T15:37:59.159045Z", "commit": "25", "message": "Trying to get Sire running on Redhat WS 4 is more hassle than it should be, and has shown how poor my build system was! I have thus been learning cmake (after evaluating scons) and have begun updating the build system to use cmake. I have to work in devel as branches/chryswoods is too completely broken!\n\n", "author": "chryswoods"}, {"date": "2006-09-02T13:30:20.488948Z", "commit": "24", "message": "I have been working on the classes used to prevent over-streaming of implicitly shared data. \n\nI have also written a presentation for my meeting at Celltech on Tuesday.\n\n", "author": "chryswoods"}, {"date": "2006-08-31T15:53:38.080295Z", "commit": "23", "message": "I am working on integrating the split CoordGroup/CutGroup into Molecule. I have realised that a Molecule is just the combination of a CoordGroup with some metainfo, while in contrast, an AtomTable is just a combination of a ParamGroup with the same metainfo. This solves the problem of my messy MoleculeCGInfo class, that never seemed up to the job. I am now working on a new MoleculeInfo class that can be combined with any data store that saves things arranged by CGAtomID. Molecule will thus contain a CoordGroup, a MoleculeInfo and MoleculeBonds, while an AtomTypeTable will contain a QHash<CutGroupID,QVector<AtomType>> and a MoleculeInfo. MoleculeInfo is implicitly shared, thus improving copying speed and memory efficiency. Also, by making this split, I am not doing too much copying in molecule whenever I update its coordinates :-)\n\nCode is very broken\n\n(you would never guess that I am working to a deadline that says that I must get something stable out by Monday....)\n\n", "author": "chryswoods"}, {"date": "2006-08-30T16:04:59.464768Z", "commit": "22", "message": "I have now updated CutGroup and made it into a class that holds a QVector of AtomInfo objects, together with a CoordGroup. It is now much more efficient to change coordinates, and to separate the coordinates from the atoms.\n\nI have decided that CutGroup will not index its contents - it just contains a collection of atoms. The MoleculeInfo object is responsible for indexing a CutGroup, and allows mapping of an AtomIndex to a CGAtomID. There is no need for this functionality (or data) to be present in CutGroup as well.\n\nCode is broken (still need to merge AABox and new CutGroup into the rest of the code)\n\n", "author": "chryswoods"}, {"date": "2006-08-30T13:18:15.323849Z", "commit": "21", "message": "I have written the code for CoordGroup and have also moved AABox from SireMol into SireVol. I will need to update CutGroup and EditMol to make them aware of the changes, but that should be ok. SireVol no longer depends on SireMol :-)\n\nCode is broken\n\n", "author": "chryswoods"}, {"date": "2006-08-29T22:14:36.333603Z", "commit": "20", "message": "I begun work on MovedParts and realised that the coordinate copying from a CutGroup was inefficient (as it involved copying all of the Atotm information even though only the coordinates were changing). I have thus updated the inheritance hierarchy for Atom to inherit from Vector and AtomInfo, so now I can split the Atom into 'information' and 'coordinates'. I will use this with the new CoordGroup class that I am writing, so that I can have the coordinates in the implicitly shared CoordGroup class, which can be a parent class of CutGroup (which itself contains the QVector of AtomInfo objects). Copying a CutGroup into a MovedParts record will now only involve copying the CoordGroup part of the CutGroup, thus involving only an implicit copy of the CoordGroup, and not touching the rest of the atom. Writing to the CoordGroup will cause a copy of only the array of Vector objects, which as these are movable, allows the use of the more efficient memcpy routine.\n\nCoordGroup is in SireVol. My plan is to make SireVol work only with CoordGroup, and to move AABox into SireVol. I can then remove the dependency of SireVol on SireMol, and thus make SireVol into a purely geometric library.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2006-08-28T15:52:02.914167Z", "commit": "19", "message": "Working on the classes used to record how a molecule moves. I am designing a polymorphic class system that will use different classes to record different pieces of information, but which has a common class front-end (ChangeRecord) which provides a constant interface to the user.\n\nCode is broken.\n\n", "author": "chryswoods"}, {"date": "2006-08-27T17:14:49.754486Z", "commit": "18", "message": "Forgot to include an update to the README file for the repository...\n\n", "author": "chryswoods"}, {"date": "2006-08-27T17:13:31.122388Z", "commit": "17", "message": "Cleaned up the automatic API documentation generation, and the output now looks pretty good. The output is fully integrated with the style of the rest of the site, and directory-based documentation looks a lot more organised and easy-to-follow :-)\n\n", "author": "chryswoods"}, {"date": "2006-08-26T22:51:37.173582Z", "commit": "16", "message": "I have written a python script that can be used to generate the doxygen-based API documentation for each Sire library. This produces a cleaner output, as it means that the documentation for each library is self-contained, and thus generates more quickly, and is more coherent (as I think that the docs should reflect the organisation of the source code)\n\n", "author": "chryswoods"}, {"date": "2006-08-25T11:26:14.241781Z", "commit": "15", "message": "I have started work on the forcefield classes, and have come up with a design for the forcefields (see http://doc.siremol.org/doku.php/modules/siremm/components/clj_forcefields) and also for how this will fit in with the simulation (http://doc.siremol.org/doku.php/modules/siresim/components/simulation) and system (http://doc.siremol.org/doku.php/modules/siresystem/components/system). \n\nIn addition, I have sorted out the molecular numbering scheme (see http://doc.siremol.org/doku.php/modules/siremol/concepts/moleculeid) and have added version numbering to Molecule.\n\nI have also worked out how to record the movement of molecules, and am beginning work on those classes (see http://doc.siremol.org/doku.php/modules/sireff/concepts/moving_molecules).\n\nThis code is highly broken and won't compile. I am commiting now just to keep a backup of what I have done so far.\n\n", "author": "chryswoods"}, {"date": "2006-08-08T21:01:50.457586Z", "commit": "14", "message": "I have fixed several bugs in the code used to assign parameters - there was a major bug in NameDB, whereby names and nameIDs were stored in the wrong columns! Also residue aliases were not searched for correctly as it searched for name and number, as opposed to name and/or number.\n\nI have got to move on now from SireDB and onto SireMM and running simulations. I have written a TODO list that contains outstanding problems and needed work which I will return to at a later date.\n\n", "author": "chryswoods"}, {"date": "2006-08-08T16:02:41.675032Z", "commit": "13", "message": "I have fixed the problem with the code ignoring parameters that were assigned user ID '0'. The problem was nothing to do with the core code (e.g. RelateID = 0 being used to indicate a missing parameter). The problem was merely that the ProtoMS reader had not associated the parameter with user ID \"0\" to anything, and thus the parameter was not found. I have modified the ProtoMS reader to assign the global parameters whenever it reads in a file, i.e. it associates dummy parameters for each of the parameter types with the user ID \"0\". Now the sb2 example assigns the correct atom parameters for both the reference and perturbed states (though there still appears to be a problem with the internals not being assigned...)\n\n", "author": "chryswoods"}, {"date": "2006-08-08T11:32:14.878078Z", "commit": "12", "message": "Added the GPL text to all of the current branches. They are now all in sync. I will work on branches/users/chryswoods, and from now will then merge into branches/devel, and then from here to trunk if branches/devel is stable.\n\n", "author": "chryswoods"}, {"date": "2006-08-08T11:29:03.823418Z", "commit": "11", "message": "I have planned how I will be managing the repository. I have described the layout in README.txt\n\n", "author": "chryswoods"}, {"date": "2006-08-07T17:51:17.324851Z", "commit": "10", "message": "Set up kdevelop to now work from the devel branch of Sire.\n\n", "author": "chryswoods"}, {"date": "2006-08-07T17:45:51.011029Z", "commit": "9", "message": "I have now correctly created the 'devel' branch. All development must occur in this branch, with periodic merging back to 'trunk' used to ensure that 'trunk' contains the latest version of Sire that is known to compile, link, run, and pass all tests.\n\n", "author": "chryswoods"}, {"date": "2006-08-07T17:41:17.227591Z", "commit": "8", "message": "Removing the old devel directory as, after reading the subversion book, I've seen that there is a better way to create it!\n\n", "author": "chryswoods"}, {"date": "2006-08-07T17:29:18.435398Z", "commit": "7", "message": "Made a mistake with the svn cp...\n\n", "author": "chryswoods"}, {"date": "2006-08-07T17:28:08.646119Z", "commit": "6", "message": "Copying the trunk to 'devel'. All development should now be conducted on 'devel' with svn merge used to update 'trunk' between stable versions.\n\n", "author": "chryswoods"}, {"date": "2006-08-07T17:19:55.512641Z", "commit": "5", "message": "Creating the branches/users directory that will be used to hold user-specific versions of Sire. A user can create their own branch and Sire and I will trust them to manage it any way they wish.\n\n", "author": "chryswoods"}, {"date": "2006-08-07T17:18:40.082002Z", "commit": "4", "message": "Creating the branches/devel directory that will contain development versions of Sire. The idea is that devel will contain versions of sire that are in development, and may not compile or run, while 'trunk' will contain the latest version of Sire that compiles, runs and passes certain tests. This should enforce good repository manners, and we can then take snapshots of 'trunk' to turn into releases.\n\n", "author": "chryswoods"}, {"date": "2006-08-07T17:05:10.428021Z", "commit": "3", "message": "I have downloaded the last revision from the google repository and have checked that it compiles and runs correctly :-)\n\nI have now modified the svn:ignore properties for all of the code directories so that svn ignores all of the auto-generated files.\n\nI have also now created three mailing lists for Sire;\n\nsire-users@googlegroups.com  for Sire users (when I eventually get some!)\nsire-developers@googlegroups.com  for Sire developers (ditto!)\nsire-svn@googlegroups.com  to monitor commits to the subversion repository.\n\n", "author": "chryswoods"}, {"date": "2006-08-07T15:59:09.935761Z", "commit": "2", "message": "This is the initial commit of Sire to the google code repository. This is actually revision 831 of my personal svn repository.\n\nSome extra files have been removed to keep the repository size down. I will eventually place the complete dump of my own repository online once google code allows file hosting. (its a 13MB bz2 file). If you want the original files before then, then please email me (chryswoods@gmail.com) and I will be happy to send you a copy.\n\nSire has been in development now for over a year and will be very powerful. However, it is still in an early developmental stage and is not ready for use. If you are interested in getting or developing sire then please email me, or look for the links for the sire mailing lists.\n\n==========================================================================================\nr831 | chris | 2006-07-25 21:55:38 +0100 (Tue, 25 Jul 2006) | 5 lines\n\nI have fixed some bugs in the assignment of parameters and now the sb2 example works a little more (test/SireDB/assign_sb2.py). It even assigns the atom parameters for the perturbed state. However, this has highlighted a major logic error on my part. At the moment I am using parameter number '0' to signify dummy and not-found. This is a problem, as when the user sets the parameter 0, the db reports it as not found and will then try to find a better parameter (hence why sb2 perturbed state has a total charge of 0.315 - the three supposedly dummy hydrogens have been assigned reference state parameters, with charges of 0.105 each). I will need to change the code so it uses 0 for dummy, and -1 for not found. Such a change is best not attempted at 10pm - it would lead to too many tired bugs...\n\nOtherwise the code compiles, links and appears to run well :-)\n\n", "author": "chryswoods"}, {"date": "2006-08-07T13:56:31.313486Z", "commit": "1", "message": "Initial directory structure."}]}