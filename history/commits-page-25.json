{"Page":25,"TotalPages":28,"commits":[{"author":"chryswoods","date":"2007-10-12T16:56:40.662284Z","commit":"375","message":"I'm now working on getting Atom to compile. I've had to fix a problem with not being able to \ncall a template function of a template class from another template, so I've had to create\na cunning workaround by overloading template functions (see Selector::setProperty and \ndetail::set_property(Atom*,...) in atom.h).\n\nCode is still broken\n\n"},{"author":"chryswoods","date":"2007-10-12T13:58:08.810740Z","commit":"374","message":"I've added MolNum, and have also now got MoleculeData to compile (central pillar of SireMol, so pretty\nsignificant :-)\n\nCode is still broken\n\n"},{"author":"chryswoods","date":"2007-10-12T10:20:28.565175Z","commit":"373","message":"I've finished updating the API for Properties, and have tied this into the APIs of MoleculeData and MoleculeView.\nSireBase and SireID both now compile and link. SireMol is next to get working...\n\nCode is very broken, but is getting better...!\n\n"},{"author":"chryswoods","date":"2007-10-11T15:31:49.285314Z","commit":"372","message":"I've cleaned up the API of Properties so that it now matches the API of MoleculeData (as I now\nhave a very clear idea of how Properties will be used in the code). I've also upgraded\nthe version number used in MoleculeData to 64bits, so I am pretty sure now that I won't\nrun out of version numbers :-)\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-10-11T14:22:57.684887Z","commit":"371","message":"I'm now moving through the code to see how much I can compile. This will help me fill in the missing parts\nso that I can then test the new SireMol design (and then port over SireFF and SireMM....)\n\nCode is broken, and python wrappers are disabled.\n\n"},{"author":"chryswoods","date":"2007-10-11T13:18:52.219667Z","commit":"370","message":"I've written AtomProperty\u003cT\u003e and AtomCoords (an AtomProperty\u003cVector\u003e) - and AtomCoords compiles without\nwarning or errors ;-)\n\nI've also now written CGProperty\u003cT\u003e, ResProperty\u003cT\u003e, ChainProperty\u003cT\u003e and SegProperty\u003cT\u003e\n\nCode is still really broken\n\n"},{"author":"chryswoods","date":"2007-10-11T10:58:48.358704Z","commit":"369","message":"I'm working on the view properties (e.g. AtomProperty, ResProperty etc.). I've worked out how this ties\nin with the views, and how to allow the user to easily set properties. For example, a user can use\nthis design to set the charges of all of the atoms in a residue via the command;\n\nmol = mol.select(ResNum(3)).atoms().edit() \\\n         .setProperty( \"charge\", [0, 0.3*mod_e, -0.3*mod_e] ) \\\n         .commit().molecule()\n\nor, spread over lots of lines (as would be more normal)\n\nres3 = mol.residue(ResNum(3))\n\neditor = res3.atoms().edit()\n\neditor.setProperty( \"charge\", [0, 0.3*mod_e, -0.3*mod_e] )\neditor.setProperty( \"coordinates\", [ (0,0,0), (1,1,1), (2,2,2) ] )\neditor.setProperty( \"lj\", [ LJ(3.5*angstrom,0.15*kcal_per_mol), \\\n                            LJ.dummy(), LJ.dummy() ] )\neditor.setProperty( \"mass\", [1.0*g_per_mol, 6*g_per_mol, 2*g_per_mol] )\n\nmol = editor.commit().molecule()\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-10-07T17:59:59.100161Z","commit":"368","message":"I've sorted out the molecule info classes. I've got rid of MoleculeInfo, ResInfo, SegInfo etc.,\nas they weren't actually achieving anything that wasn't already available via the \nMolecule, Residue, Segment etc. interfaces, and also there was quite a potential for\nconfusion between an 'info()' object and also '.metadata()'. \n\nCode is still very broken\n\n"},{"author":"chryswoods","date":"2007-10-07T14:25:41.499950Z","commit":"367","message":"I've pretty much finished writing all of the functions for Atom, Residue, Chain, CutGroup and Segment, and \nhave also finished off Selector\u003cT\u003e (which replaces AtomsInMol, ResInMol etc.)\n\nCode is still really broken, but I am soon to start compiling SireMol, so things will soon start\nbeing fixed ;-)\n\n"},{"author":"chryswoods","date":"2007-10-04T19:54:33.512506Z","commit":"366","message":"I've worked out the API for most of the molecule view derived classes and I am beginning to fill them in.\nI've also added the files for the rest of SireMol - once these are filled then the new SireMol will be\ncomplete and I'll be ready to move on to fixing SireFF/SireMM...\n\nCode is very, very broken!!!\n\n"},{"author":"chryswoods","date":"2007-10-04T15:45:09.013952Z","commit":"365","message":"I've worked out how Atom/Res/Chain/CutGroup/Seg/Mol properties will work, so I can now write code\nsuch as;\n\natom.setProperty(\"coordinates\", [1,2,3])\natom.setProperty(\"element\", Element(\"Carbon\"))\n\nmol.setProperty(\"charge\", AtomicCharges([1,2,3,4,5]))\n\nCool :-)\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-10-04T13:04:21.241244Z","commit":"364","message":"I've finished off the Evaluator class.\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-10-02T15:48:47.104076Z","commit":"363","message":"I've written a lot of Evaluator now. Still some to go though...\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-10-02T12:19:42.745927Z","commit":"362","message":"I've renamed PropertyExtractor to Evalutor (as mol.evaluate() is a better description than\nmol.extract()). I've also realised that I don't need this to be a template class, so\nEvaluator can be a concrete class, rather than using Evaluator\u003cT\u003e. This is because there\nare no T dependent parts of evaluator (as far as I can see)\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-10-02T11:28:08.591351Z","commit":"361","message":"I've finished filling in the code for WeightFunction\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-10-01T15:48:28.189208Z","commit":"360","message":"I've written most of the new WeightFunction classes, moving this over to the property framework\nand making them use the capabilities of Evaluator\u003cT\u003e\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-10-01T14:45:42.327493Z","commit":"359","message":"I've written all of Connectivity (and ConnectivityBase and ConnectivityEditor). I need to test whether this\nwill compile, and then test that it actually works!\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-10-01T07:38:24.893578Z","commit":"358","message":"I've renamed MoleculeBonds as Connectivity, as I want to clearly separate the concepts of atomic\nconnectivity from bonding (as the bonds and connectivity are not necessarily the same thing,\nespecially when dummy atoms are involved!)\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-09-30T17:08:25.370953Z","commit":"357","message":"I've created the new PropertyMap class and integrated it with Properties and MoleculeData. The new\ndesign means that I can now have default properties, can detect when a user sets a new \nproperty source, and also that the user is able to set a value of a property rather than\na source. To make this work, I have also changed the versioning of properties in MoleculeData\nso that they are separate to the properties (rather than being a piece of metadata - which to\nbe honest looked a little slow!). The default now is that a version number of 0 is returned\nwhen the molecule doesn't contain the property or if the value is held in the key, rather\nthan in the molecule. This will prevent the code from falling over if default or \nuser-supplied properties are used instead of properties held in the molecule.\n\nCode is still very broken\n\n"},{"author":"chryswoods","date":"2007-09-30T15:03:29.365297Z","commit":"356","message":"I've moved SireFF::ParameterMap to SireBase::PropertyMap, so that I can rewrite it to be the \ngeneral class that is used to map all the names of all properties\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-09-30T11:03:55.870451Z","commit":"355","message":"I've filled in all of the Mover\u003cT\u003e class. My next step is to rewrite PropertyMap and PropertyName as\nMover\u003cT\u003e exposed some problems with the old design (and showed how a new design solved those problems,\nas well as solving problems that I have with PropertyMap and the forcefield classes ;-)\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-09-28T08:27:13.974736Z","commit":"354","message":"I've worked out how properties are specified, and have written the code that allows a bond to be changed.\n\n(the internal coordinate changes are the hardest part of Mover\u003cT\u003e to write, so I am pleased that\n change(bond) looks clean and understandable)\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-09-27T19:48:54.762443Z","commit":"353","message":"I am working on Mover\u003cT\u003e, as this is the second-hardest to implement Manipulator (Editor\u003cT\u003e is the hardest), and \nif this works, then I can be happy that the Molecule design is working. So far the Mover\u003cT\u003e design is much\ncleaner than the old MoleculeMover class, and *so* much cleaner than the original Molecule class (which had\nhundreds of stupid overloaded moving functions - I am so pleased that I didn't stick with that old design\n - so rewriting does have its advantages!)\n\nCode is still really broken (major disadvantage of rewriting!)\n\n"},{"author":"chryswoods","date":"2007-09-27T15:54:32.125326Z","commit":"352","message":"I'm now making good progress with the design and implementation of the new molecule classes. Yes, yet another\nnew molecule class design! However, this time learns from all of the lessons before, and is more of a\nconsolidation of the ideas and half-implemented bits of code that have arisen during the development\nof this project. The new molecule design now more formally splits classes between view classes \n(Molecule, Segment, CutGroup, Chain, Residue, Atom), container view classes (SegmentsInMol,\nCutGroupsInMol, ChainsInMol, ResiduesInMol, AtomsInMol and PartialMolecule), and action classes,\nwhich are implemented as templates on top of the view and container view classes, e.g.\nMover\u003cMolecule\u003e, Editor\u003cResidue\u003e, Evaluator\u003cChainsInMol\u003e, Selector\u003cPartialMolecule\u003e. I have to use\ntemplates so that the original view type is restored on a commit, which is required for the python\nwrappers (which don't have the same copy semantics as C++).\n\nThe new design allows code such as this to be written;\n\natoms = mol.atoms( ResName(\"ALA\") + ResNum(35) )\n\nfor i in range(0, len(atoms)):\n    atoms = atoms.move(i).translate( i*Vector(1,2,3) )\n\nmol = atoms.molecule()\n\nNote how the container view class (AtomsInMol) solves the problem of moving part of a molecule not\nupdating the rest of the objects in the container (e.g. the following code would be wrong)\n\natoms = [ list of atoms from the molecule ]\n\nfor i in range(0, len(atoms)):\n    atoms[i] = atoms[i].move().translate( i*Vector(1,2,3) )\n\nThis is because even if each of the atoms in 'atoms' are a view of the same version of the molecule\nbefore moving, they become independent and view different versions of the molecule after moving. \n\nCode is incredibly broken now!!!\n\n"},{"author":"chryswoods","date":"2007-09-27T09:27:21.638720Z","commit":"351","message":"MoleculeInfoData is now complete, and compiles without warning. Of course it has yet to be tested as the\nrest of SireMol is still really broken!\n\nCode is very broken.\n\n"},{"author":"chryswoods","date":"2007-09-26T09:51:38.179565Z","commit":"350","message":"I'm making good progress filling in all of the stubs for the ID scheme. I've completed about 2/3 of MoleculeInfoData\nnow :-)\n\nThe code is still very broken\n\n"},{"author":"chryswoods","date":"2007-09-25T14:37:37.679614Z","commit":"349","message":"I've filled in sufficient code that AtomIdentifier compiles. I've finished off the whole ID design now, and am now \njust filling in the stub code so that it will all compile (so it can be tested).\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-09-24T15:02:25.442396Z","commit":"348","message":"I've added some of the final parts of the ID design - the Specify and AtomsIn template classes. These allow me to write\nIDs like;\n\n//the fifth atom in the third residue called \"ALA\"\natom = mol.select( ResName(\"ALA\")[2].atom(4) )\n\n//the last five atoms of the chain called \"A\" (or the last chain called \"A\")\natoms = mol.select( ChainName(\"A\")(-5,-1) )\n\n//the first atom in the second residue identified as ALA:32\natom = mol.select( (ResName(\"ALA\") + ResNum(32))[1].atom(0) )\n\n//the first atom called \"CA\" with number 25\natom = mol.select( (AtomName(\"CA\")+AtomNum(25))[0] )\n\n//all of the atoms in the second \"CYS\" residue in chain \"B\"\natoms = mol.selectAll( (ChainName(\"B\")+ResName(\"CYS\"))[1].atoms() )\n\nCode is still very broken\n\n"},{"author":"chryswoods","date":"2007-09-24T14:08:21.928039Z","commit":"347","message":"I am making lots of progress now with the ID classes, having now resolved most of the issues with the design,\nand having now got a clear idea of how it all fits together.\n\nCode is still very broken\n\n"},{"author":"chryswoods","date":"2007-09-22T11:16:28.683353Z","commit":"346","message":"I'm making good progress implementing the ID classes and MoleculeInfoData - see ideas/atom_id_classes for a more concrete\nvision of how the ID classes will work, and how they interoperate with the Molecule Manipulator classes \n(Mover, Extractor, Editor, Selector)\n\nCode is still very broken\n\n"},{"author":"chryswoods","date":"2007-09-21T12:21:36.519226Z","commit":"345","message":"I've realised that I shouldn't have CGNum and SegNum, and that I also have to have ChainName and ChainIdx - the info class\nnow identifies residues using the combination of ChainName,ResName,ResNum and even then, this doesn't have to be unique,\ne.g. ChainName(\"A\")+ResName(\"ALA\")+ResNum(5)+ResIdx(0) is the first ALA-5 residue found in chain A.\n\nThe same thing works with atoms as well, so now names don't need to be unique, so AtomName(\"CA\")+AtomIdx(3) is the \nfourth atom called CA found in the molecule.\n\n"},{"author":"chryswoods","date":"2007-09-20T15:38:36.268100Z","commit":"344","message":"I've finished upgrading the sqlite driver - the new driver compiles and links properly - I still need to test it.\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-09-20T15:21:03.772276Z","commit":"343","message":"Upgrading the SQLITE driver plugin from 3.2 to 3.3 (the version that comes with Qt 4.3.1)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-09-20T10:46:38.623313Z","commit":"342","message":"I'm working on the new MoleculeInfo class that will work with the new ID classes. Everything will be based on \nMoleculeInfoData (edited by MoleculeInfoDataEditor). I have only sketched out the header of this class - \nreally only just the data that must be stored and how it will be stored.\n\nCode is very broken.\n\n"},{"author":"chryswoods","date":"2007-09-19T13:00:39.164469Z","commit":"341","message":"I've got SireID compiling, and have got many of the files associated with the new ID scheme in SireMol to compile. The \nnext step is to update SireMol to use this new ID scheme (by rewriting MoleculeInfo/ResidueInfo)\n\n"},{"author":"chryswoods","date":"2007-09-13T11:17:51.903614Z","commit":"340","message":"I've fleshed out all of the ID classes used with a Molecule. I have also sorted out how the Identifier classes\nwork as well (these derived from ID, so can also be ID classes). I now need to test to see if all of this will\ncompile, and then test to see if it will work as well!\n\nCode is still extremely broken\n\n"},{"author":"chryswoods","date":"2007-09-13T09:20:14.041472Z","commit":"339","message":"I've moved NewAtom to Atom - this was an experiment that worked ;-)\n\nCode is still really broken!\n\n"},{"author":"chryswoods","date":"2007-09-13T09:18:31.602104Z","commit":"338","message":"I'm cleaning out SireMol and removing all files that are from the old design, so that I have the space to finish up the \nnew design. In particular, I am now committing myself to making Atom, Bond, Angle, Dihedral, Improper all views\nof a Molecule, and also I am going to rewrite MoleculeBonds and ResidueBonds so that they are part of the\nMoleculeInfo and ResidueInfo objects (so can use CGAtomIDs). In addition, I have removed EditMol/EditRes as they\nno longer fit in with the design - I am going to write a MoleculeEditor, ResidueEditor, CutGroupEditor etc. classes.\n\n(so yes, CutGroup will become a view as well, as will Segment. I will also have a user-visible MoleculeBonds and\nResidueBonds like pair of classes that are also views - thereby allowing themselves to be split into two - returning\na GroupedMolecule class, that is a view of a molecule that contains two sub-views - thereby allowing the editing\nof one sub-view to also update the other)\n\nCode is now extremely broken\n\n"},{"author":"chryswoods","date":"2007-09-13T08:58:38.638652Z","commit":"337","message":"I've added all of the AtomIDCombo based objects. The IDs now make a lot more sense now that I am saying that everything \nis a view into the molecule (so even Atom is a view into a Molecule). This removes the need for Atom to contain\nthe residue number, and means that Residue is now no more special than (the as yet unwritten) Segment.\n\nCode is still very broken.\n\n"},{"author":"chryswoods","date":"2007-09-12T15:45:36.594886Z","commit":"336","message":"I've added the SireID library that holds the base classes of all of the ID types, as my ideas on how to ID atoms (and \nindeed objects) are now becoming more concrete. There is still a lot to do to realise it all however...\n\nCode is very broken.\n\n"},{"author":"chryswoods","date":"2007-09-10T20:58:19.829666Z","commit":"335","message":"I've added the code so that SparseMatrix can be set to be symmetric or asymmetric, and also so that it is very quick \nto take the transpose (very useful for the AtomPairs - AtomPairs still needs to be updated to work with this).\n\nI've also been working on how to map atoms from one molecule to another (useful for aligning molecules or copying\nparameters) - this will require me to finally sort out the AtomID type classes. I've written a plan on how\nto do this in ideas/atom_id_classes\n\nThe code that compiles now does work on my mac in python. The problems I was experiencing (bus errors mainly) \nwere caused by me using a boost python library that was linked against python2.3 while Sire was compiled \nagainst python2.5 - so it didn't work in either the python2.3 or python2.5 interpreters. I reinstalled \nboost::python so that it is now linked against python 2.5. Also, I had to ensure that DYLD_LIBRARY_PATH\nincluded my ~/local/lib directory that contained the sire libraries.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-09-07T13:35:35.998289Z","commit":"334","message":"Continuing to fix matrix4 - this is a commit from Linux - the code compiles and runs, though the alignment code does not produce the expected output.\n\n"},{"author":"chryswoods","date":"2007-09-07T13:34:02.108596Z","commit":"333","message":"Fixing some bugs in calculateaxes and matrix4 - bugs not fully fixed yet though...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-09-07T09:12:39.330221Z","commit":"332","message":"I've now got everything compiling on my mac (well, I've disable SireMM and everything based on SireMM as I still \nhave to sort out the metaforcefields). There are some installation problems though on my mac, as the python\nmodules can't find the Sire libraries - perhaps I have some form of config problem. This means that I haven't\nyet tested anything, so the code must still be assumed to be broken. I am going to load this all up in\nlinux and see what happens...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-09-06T21:15:17.409825Z","commit":"331","message":"This is the first commit from my mac. I have been porting the code (well, mainly build system) over to OS X. I'm\nnot yet finished, and I then have to fix everything that I have broken...\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-08-05T16:15:16.902206Z","commit":"330","message":"I've fixed the wrapping of Cartesian and PeriodicBox - they now work very well with SireBase::Properties!\n\nCode is still broken.\n\n"},{"author":"chryswoods","date":"2007-08-05T13:13:43.011195Z","commit":"329","message":"I've updated SireVol Volume classes to use the new Property class, and have wrapped up Properties so that it works. I've had to change how some of the wrapping works as I was getting Python typeerrors, as every single base class needs adding to each derived class (including recursive bases)\n\nCode is still broken\n\n"},{"author":"chryswoods","date":"2007-08-04T21:21:23.965071Z","commit":"328","message":"I've added the python wrapping for Properties, and am in the process of debugging it.\n\nCode is still broken.\n\n"},{"author":"chryswoods","date":"2007-08-04T11:55:49.532830Z","commit":"327","message":"SireBase now compiles - I've added most of the Properties functions, and have removed version number from Properties (as versioning doesn't work, as you can't guarantee correctness if you remove a property, then re-add it).\n\nCode is still very broken.\n\n"},{"author":"chryswoods","date":"2007-08-03T15:48:12.014362Z","commit":"326","message":"I've been working on sorting out the properties, and have now begun work on a Properties class, which holds a set of properties, together with version and metadata.\n\n"},{"author":"chryswoods","date":"2007-08-02T16:02:32.020959Z","commit":"325","message":"In sorting out the new base hierarchy of the forcefields I have decided to make everything that is virtual into a property. This has meant that I am now redesigning the property system as well - I just can't leave well enough alone!\n\n"},{"author":"chryswoods","date":"2007-07-29T13:33:58.959834Z","commit":"324","message":"I am moving all of the 2-body forcefields to use a set of template classes as a base. This will make it much easier to provide complete converage of lots of different two-body functional forms.\n\nCode is extremely broken.\n\n"},{"author":"chryswoods","date":"2007-07-26T15:35:56.500646Z","commit":"323","message":"I'm continuing to work on the intramolecular CLJ energies. I'm coming to the conclusion that the nb scaling parameters should be part of CLJMolecule.\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2007-07-25T14:52:55.537585Z","commit":"322","message":"I am now starting work on the foundations of the intramolecular forcefield classes.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-06-12T07:53:55.479146Z","commit":"321","message":"I've fixed a couple of bugs in RDFMonitor and MolproSession.\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-06-06T09:39:29.499859Z","commit":"320","message":"I've fixed a bug in PairMatrix that meant that it went to the wrong matrix position when passed an index when it had a different number of rows and columns. Silly bug - made the TIP4P with TIP5P energies all wrong!\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-06-04T15:17:01.854290Z","commit":"319","message":"I've simplified the wrapping of Space now as well (it also now automatically converts to the derived class in python ;-)\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-06-04T12:46:00.871248Z","commit":"318","message":"I've cleaned up the python wrapping of the Move and Moves class hierarchies and have also made the Moves class slightly simpler to use.\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-06-03T15:34:04.342251Z","commit":"317","message":"I've fixed a bug in the RDF code that meant that it was calculating RDFs that were 75% too small!\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-06-02T09:13:15.293327Z","commit":"316","message":"I've updated the MTSMC script to record the RDFs between the QM and MM regions. I am testing it at the moment...\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-06-02T08:35:29.552995Z","commit":"315","message":"Ok, I think that the RDF code is now working - I'm running a test script (test/SireMove/rdf.py) that is calculating the RDF of the LJ box.\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-06-01T21:39:03.614793Z","commit":"314","message":"The RDF code doesn't work too well as I forgot that AtomIndex is not the best Atom ID (especially as I use residue number as a way of numbering solvent molecules...). As a quick fix I have fixed the code in EditMol to allow renumbering of residues, and I have also fixed some of the wrapping of RDF and RDFMonitor. There is now just the problem that the python wrapping is unhappy with a hash of tuple of qset of AtomIndexes, as it can't hash it.... (rather unsurprisingly, bad design on my part!)\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-06-01T15:57:32.695896Z","commit":"313","message":"I've added an RDFMonitor so that I can monitor RDFs during a running simulation. I will use this with my QM/MM simulations to see what the RDF is like around QM water molecules using different basis sets and different MM models. The RDFMonitor still needs to be tested (job for this weekend ;-)\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-06-01T07:53:14.461720Z","commit":"312","message":"This is a commit to note that this version of the code has now been validated against ProtoMS for an NPT box of 125 LJ particles. Both Sire and ProtoMS generated the same ensemble, saw the same phase transition and got the same average and fluctuation of the energy and volume. The only downside was that Sire was nearly four times slower than ProtoMS on this system...\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-31T17:32:07.480468Z","commit":"311","message":"I am now testing the volume moves using test/SireMove/volumemove.py which runs an NPT simulation of a box of 125 LJ particles.\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-29T19:55:42.223118Z","commit":"310","message":"I've finished writing the VolumeMove and associated classes. It still all needs testing...\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-29T15:50:31.466714Z","commit":"309","message":"I have nearly finished writing the volume move now (though still needs testing). It is a very general class, which uses two function classes (MolMappingFunction and VolChangingFunction) to allow specialisation to lots of different use cases.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-05-29T10:53:39.689647Z","commit":"308","message":"I am still working on the VolumeMove class. I have come to the decision that I will take the performance hit at each volume move of ensuring that each molecule is moved into the central box (though is not actually mapped). This is the best compromise, as I can then guarantee that all molecules are in the central box at all times, and the user also has the ability to map just a subset of molecules (with the unmapped molecules just moved into the central box without any mapping). Taking the performance pain at each volume move is better than risking molecules drifting out the box, and having to periodically map them all back in.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-05-28T16:01:38.043220Z","commit":"307","message":"I've fixed the bugs in the MappingFunctions (can now successfully map between periodic boxes). I am working on MolMappingFunction to allow volume changes. I am thinking about using a light touch, namely that the system does not manage the space at all, but rather leaves that up to the simulation.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-05-26T17:35:35.112532Z","commit":"306","message":"I've added the code to allow changes in the size and position of the PeriodicBox space. In tests it doesn't look like it works though...\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-25T13:05:58.161002Z","commit":"305","message":"I've added a hierarchy of MappingFunctions that will be used by the volume moves to map molecules from one space into another. I've added the python wrappers as well, though it has yet to be tested...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-05-24T19:37:28.157038Z","commit":"304","message":"I have added the WeightedMoves class, that allows a simulation to contain a range of moves which are chosen at random (with the probability of being chosen based on the move's weight). I've yet to test this class.\n\nThe code compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-24T18:23:38.076488Z","commit":"303","message":"I've added the ability to easily change the Molpro program used to calculate the energy, and also to change the basis set. I've updated MolproSession so that it can get the energy from the initial calculation, rather than from a second, unnecessary calculation.\n\nCode compiles, links and runs and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-24T10:30:46.638232Z","commit":"302","message":"I've fixed the HarmonicFF forcefield and have written a unit test for it. I have now used HarmonicFF to verify that both RigidBodyMC and MTSMC both converge the average energy for a particle in an harmonic well to the correct answer (3/2 kT). This is good, as it shows that my Monte Carlo code is working, and that my the high acceptance ratio for the MTSMC QM/MM steps was real.\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-23T21:59:50.575321Z","commit":"301","message":"I'm testing HarmonicFF and it doesn't work... test/test.py gives the wrong answers...\n\nCode compiles, links and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-23T15:57:50.226428Z","commit":"300","message":"I've added a HarmonicFF which adds harmonic restraints to molecules or parts of molecules. I will use this forcefield to test the Monte Carlo code. (I haven't tested it yet though).\n\nCode compiles and links, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-22T10:25:36.651924Z","commit":"299","message":"I've found and fixed the source of the memory leak. The problem was in CoordGroup, where I copied the contents of the storage array, forgetting that this copied the value of the reference count. Incrementing this copied reference count then meant that it could never be set to zero, so the CoordGroup was never deleted. I've fixed this by setting the reference count equal to 1 in the copy, and the tests I have run show that the total memory used by the program is conserved during a simulation.\n\nCode compiles, links and runs, but the molproff tests still fail\n\n"},{"author":"chryswoods","date":"2007-05-17T16:00:44.935381Z","commit":"298","message":"I have fleshed out the SystemMonitor class so that I can now monitor average energies during a simulation. I have also fixed a bug in Squire that led to crashes after 1024 energy evaluations as I wasn't closing the network connection! I have also added automatic conversion from SystemMonitor to the correct derived type.\n\nCode compiles, links and runs, squire siretest fails, but I am using this code to run the methane and water test QM simulations.\n\n"},{"author":"chryswoods","date":"2007-05-16T15:29:16.951255Z","commit":"297","message":"I've debugged MolproFF and MTSMC and am now using this version of the code to run a couple of test QM/MM Monte Carlo simulations on water in a water box, and methane in a water box. Annoyingly, the slowest part of the calculation are the MM MC moves...! Oh well...\n\nCode compiles, links and runs, but I still need to fix some of the molproff unit tests, so siretest fails.\n\n\n"},{"author":"chryswoods","date":"2007-05-15T15:52:19.994552Z","commit":"296","message":"It's too late in the day to do some serious debugging, so I've been building the foundation of the monitor classes that must be implemented so that I can average energy differences to obtain free energies....\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-05-15T14:11:04.720444Z","commit":"295","message":"I am currently testing the MTSMC class (test/test.py). It looks like it is working. In testing it I have unconvered other bugs that have now been fixed. I will certainly be looking at how forcefield components are combined at a later date, as I have really gone off the SireCAS::Function class and FFExpression, and instead would like to just associated functions with symbols... However, I've got no time for that now.\n\nCode compiles, links and runs, siretest completes without error, though test/test.py is revealing a bug in the MM molecule array of MolproFF - it randomly causes an assertation failure or an array bounds failure.\n\n"},{"author":"chryswoods","date":"2007-05-13T20:56:25.913314Z","commit":"294","message":"I've written the MTSMC code and added its python wrapping. MTSMC still needs testing.\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-13T11:57:51.279245Z","commit":"293","message":"The simulation last night appeared to work (stable energy, PDBs looked good, stable ~40% acceptance ratio)\n\nI'm now writing the multiple time step Monte Carlo move. To do this I have changed ForceFields and ForceField to use a static 'total' energy symbol to represent the total energy.\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-12T21:59:05.406306Z","commit":"292","message":"I'd forgotten that I needed to set the system space! I've added it in a basic manner, but I will need to work on the code that changes it when I write the volume move code...\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-12T21:16:14.212347Z","commit":"291","message":"I've got the code working with a simple Monte Carlo script that I will use to run a 10M step MC simulation of the water box tonight (test/test.py)\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-12T17:56:24.250538Z","commit":"290","message":"I've now got a fully working Monte Carlo simulation of a water box!!! In getting it all working I have removed SireMaths::Angle and replaced it with SireUnits::Dimension::Angle. The reason MC was not working before was because I was having a maximum move size of 5A! Silly me - it should only have been 0.15A at most - no wonder all of the moves were rejected!\n\nI've looked at the results of 1000 MC moves, and it looks good. I'll run a longer simulation overnight and see how that holds up.\n\nThe code compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-12T11:24:20.899423Z","commit":"289","message":"I've fixed the problems with the MoleculeGroupID.\n\nCode compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-12T09:58:40.122506Z","commit":"288","message":"I've fixed nearly all of the remaining problems with the python wrapping of temperatures (they weren't converting implicitly as they should). The only small problem now is the implicit conversion of generalunit (kelvin) to TempBase (celsius and fahrenheit). I'll sort that out some other time....\n\nI've added some tests of the python unit wrappers - test/SireUnits/testunits.py\n\nCode compiles, links and runs, with siretest giving the same errors as for the last few revisions.\n\n"},{"author":"chryswoods","date":"2007-05-11T22:39:58.813315Z","commit":"287","message":"I've added an Angle dimension, and it all appears to be working :-)\n\nCode compiles, links and runs, though I still have the same failure in siretest regarding the MoleculeGroupID.\n\n"},{"author":"chryswoods","date":"2007-05-11T21:56:49.149832Z","commit":"286","message":"I've now implemented more sophisticated python wrapping of the units classes - I now have dynamic run-time checking of units in python, with compile time checking in C++ - this is the best of both worlds ;-)\n\nThe only thing remaining with the units now is to add an 'Angle' dimension, and then update the code to replace SireMM::ChargeParameter with SireUnits::Dimension::Charge and SireMaths::Angle with SireUnits::Dimension::Angle.\n\nThe code compiles, links and runs, and siretest mostly completes without error (still problems with MoleculeGroupID...)\n\n"},{"author":"chryswoods","date":"2007-05-11T15:54:10.873597Z","commit":"285","message":"I've added the wrapping of the temperature functions, and am beginning work on more sophisticated wrapping that will allow dimension-safe unit conversions in python as well.\n\nCode compiles, links and runs, though there are some problems in siretest\n\n"},{"author":"chryswoods","date":"2007-05-11T14:34:08.971749Z","commit":"284","message":"I've got the updated SireUnits library working, and have provided a primitive python wrapping (which mostly works). I think that I will eventually need a more sophisticated python wrapper that mirrors the units classes rather than wrapping them (as the dimension checking is a compile time thing, which is tricky to wrap in python!).\n\nThe code compiles, links and runs, most of siretest completes without error, but there are still problems caused by ID numbers.\n\n"},{"author":"chryswoods","date":"2007-05-10T22:07:06.570808Z","commit":"283","message":"Working out base units is a lot harder than I thought...\n\ncode is broken\n\n"},{"author":"chryswoods","date":"2007-05-10T15:48:00.980600Z","commit":"282","message":"I have generalised the units code that I wrote yesterday so that it will work with combinations of units (thereby allowing me to add quite a bit of units type safety to my code ;-)\n\nI am still implementing it, so the code is broken.\n\n"},{"author":"chryswoods","date":"2007-05-09T15:42:54.524111Z","commit":"281","message":"I've added the python wrapping for the system and move classes, and am now beginning to test them (I have got a python script that actually performs some monte carlo for real now - see test/test.py). However, it doesn't yet seem to work....\n\nI've also run into some problems with ID numbers (related to the switch that IDMajMinVersion doesn't increment the ID in its constructor...) - this has caused a failure in siretest\n\nCode compiles, links and runs, but there are errors in siretest and test/test.py does not work as expected.\n\n"},{"author":"chryswoods","date":"2007-05-09T14:07:04.569287Z","commit":"280","message":"I've cleaned up the automatic conversions of the new SireUnits classes (now they work well - after moving mole from being a raw number into being a Quantity). I have also added the wrapping of the maths free functions, variables and operators.\n\nThe code compiles, links and runs, and siretest completes without error.\n\n"},{"author":"chryswoods","date":"2007-05-09T11:05:02.625124Z","commit":"279","message":"I have now got RigidBodyMC and MonteCarlo to compile (though they still need to be tested). In doing so I realised that my SireUnits library was pretty rubbish as it couldn't handle temperature conversions (e.g. celsius to kelvin). I've completely rewritten SireUnits, and have also finally got its wrappers working with Py++ - so now I have completely automated and symmetric units in C++ and python!\n\nCode is broken (though you can do some cool unit conversions now!)\n\n"},{"author":"chryswoods","date":"2007-05-08T15:49:22.653828Z","commit":"278","message":"I'm writing the Monte Carlo classes, and have pretty much finished RigidBodyMC\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-05-08T14:04:08.226783Z","commit":"277","message":"I've fixed some of the problems with the sampler test. I've also completely written PrefSampler (though it is not tested yet) and I have filled in the missing functionality required by PrefSampler. I have also cleaned up the API of RanGenerator, and have completely replaced MoleculeVersion with Version (indeed, MoleculeVersion has now been removed - at last!)\n\nThe code compiles, links and runs, though there are still errors when running siretest that are caused by the serialisation and deserialisation of the class...\n\n"},{"author":"chryswoods","date":"2007-05-07T21:23:56.386865Z","commit":"276","message":"I've been looking at how preferential sampling should work, and think that I've now got it right (tested algorithm in techdocs/prefprob.pl)\n\nCode is broken.\n\n"}]}