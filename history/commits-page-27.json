{"Page":27,"TotalPages":28,"commits":[{"author":"chryswoods","date":"2007-02-11T16:58:39.117756Z","commit":"175","message":"This should move the SireMol and SireSystem Py++ wrappers into PyWrap\n\n"},{"author":"chryswoods","date":"2007-02-11T16:54:46.219109Z","commit":"174","message":"Reorganising the directory - I've realised that it is silly to put the python wrappers into a directory named after the tool I am using to make the actual wrappers.\n\n"},{"author":"chryswoods","date":"2007-02-11T16:52:14.492095Z","commit":"173","message":"I am making progress learning Py++ and getting the auto-generated wrappers working.\n\nCode is still broken though.\n\n"},{"author":"chryswoods","date":"2007-02-09T13:57:48.570921Z","commit":"172","message":"Time to be ambitious! I'm now adding Py++ wrappers of SireMol. If Py++ works here, then it will work everywhere!\n\nWhile Molecule.pypp.cpp is created and compiles, I need QSet_AtomIndex_, which is a little broken.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-02-09T12:49:26.314475Z","commit":"171","message":"I've begun to use Py++ to generate the python bindings for my classes. I've done this only for SireSystem so far, but the bindings seem to be right, which fills me with hope.\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-02-07T16:40:31.227956Z","commit":"170","message":"I've updated MajVersion so that it was the version I'd written at Bristol. I've also added the python wrapping of System and SystemData. I perhaps now should automate the python wrapping, as it takes far to long, and it a barrier to changing my APIs...\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-02-04T16:48:56.663313Z","commit":"169","message":"I have now filled in most of MolproFF and its support classes. More surprisingly, I have finally done enough so that Squire will now compile. Of course it won't yet work, and needs testing, but significant progress nonetheless!\n\nCode compiles, links and appears to run well.\n\n"},{"author":"chryswoods","date":"2007-01-28T17:24:14.474714Z","commit":"168","message":"I've made a lot of progress with MolproFF. I've written the code that calculates the qm_coords array and mm_coords_and_charges array, and have also written the code that deals with moving QM or MM molecules, or adding or removing QM or MM molecules. I've also written the code used to stream MolproFF to and from a bytearray and also to use a MolproFF without a MolproProcessor (it just starts and uses a temporary MolproSession). There's still lots to do, but I have to now go and cook dinner ;-)\n\nCode is still broken.\n\n"},{"author":"chryswoods","date":"2007-01-25T10:39:52.766282Z","commit":"167","message":"I've noticed that my code is now popping up on source search sites, when it is often out of context (and without a specified license, or sometimes even copyright). This has been my fault as I didn't copyright and license mark each file. I have written a script that does this, have applied it to all of the source files, and should now have copyright and license terms on each file.\n\nCode is works when SIRE_BUILD_MOLPRO is off (or if you don't have MolproClient installed)\n\n"},{"author":"chryswoods","date":"2007-01-24T15:57:37.953794Z","commit":"166","message":"Not a lot changed - still thinking about MolproFF \n\nCode is broken\n\n"},{"author":"chryswoods","date":"2007-01-21T17:36:12.275252Z","commit":"165","message":"Beginning work to reintegrate the Molpro based forcefield again...\n\nAll code works except for Squire.\n\n"},{"author":"chryswoods","date":"2007-01-21T14:10:00.603139Z","commit":"164","message":"Fixing a small bug that prevented compilation of the code on other computers (so why did it work on my laptop?)\n\nCode compiles, links and runs well\n\n"},{"author":"chryswoods","date":"2007-01-21T14:03:21.487750Z","commit":"163","message":"I have filled in a lot of functionality and the code now all compiles, links and runs. I still need to write more to actually run a simulation, and still need to python wrap and test the code, but at least it all compiles and runs now..!\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-01-20T20:40:27.849078Z","commit":"162","message":"I now really have a strong handle on how the System, SystemData and SimSystem classes are working, and am making good progress with the SimSystem class in particular. \n\nSystem is the user-facing class, which allows the user to construct and edit a System.\n\nSystemData holds all metadata about a system, except for any forcefield data.\n\nForceFields holds all of the forcefield information, including expression information.\n\nSimSystem is a noncopyable class that holds a simulated System, and synchronises SystemData and ForceFields throughout the simulation. SimSystem also does the work necessary to ensure that each move is atomic (state changes are complete)\n\nForceFields is a virtual class, allowing derived classes to spread the forcefields across different processors. ForceFields is the only virtual class, thus making things clean and nice.\n\nCode is still broken.\n\n"},{"author":"chryswoods","date":"2007-01-20T11:19:48.777089Z","commit":"161","message":"MoleculeGroup and MoleculeGroups now compile, and SireMol successfully links. Just now got to sort out System and SimSystem...\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-01-19T22:30:28.564638Z","commit":"160","message":"I've got ForceFields now fully implemented and fully compiling, with the entire SireFF library now linking correctly. I've still got to fix SireMol::MoleculeGroup and SireMol::MoleculeGroups, the python wrapping, and SireSystem...\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-01-19T16:22:57.999298Z","commit":"159","message":"I have spent today filling in most of the functionality of ForceFields. It was definitely the right call to move this out of SystemData and into a specific object in SireFF - the code is now much more clean and straightforward. \n\nThe code is still really broken...!\n\n"},{"author":"chryswoods","date":"2007-01-18T19:18:08.718951Z","commit":"158","message":"The design of MoleculeGroups and ForceFields is now becoming clear - this does clean up the code in SystemData. Its not quite right yet, as I don't like what is happening with the ForceFields pointer in SystemData (which perhaps ought to be renamed SystemBase). \n\nAlso, I think that I have worked out the role of System - it is to be the checkpoint and editable front end. SystemData/Base has functions that may only be called during a normal move. An editing type of move will have to convert to System, make the change, then set from System, rather than rollback the checkpoint.\n\nCode is very broken.\n\n"},{"author":"chryswoods","date":"2007-01-18T17:47:10.813749Z","commit":"157","message":"Moving classes to their new homes...\n\nCode is still broken.\n\n"},{"author":"chryswoods","date":"2007-01-18T17:41:46.120171Z","commit":"156","message":"I've realised that I should group all of the MoleculeGroup objects together into a single MoleculeGroups object, and also all of the ForceField objects (with equations) into a ForceFields object. This will clean things up, and also will allow the forcefield code to be moved out of SystemData (the current implementation is messy!).\n\nCode is very broken.\n\n"},{"author":"chryswoods","date":"2007-01-18T11:39:11.314263Z","commit":"155","message":"I've filled in sufficient functionality now that the code compiles links and runs. I still need to add some more functionality, wrap up the new objects in python and test everything...\n\nCode compiles, links and runs well\n\n"},{"author":"chryswoods","date":"2007-01-17T22:08:26.403833Z","commit":"154","message":"I've been filling in the missing functionality of the System, SystemData and LocalSimSystem classes that I have been writing.\n\nCode is still broken...!\n\n"},{"author":"chryswoods","date":"2007-01-17T16:46:20.300238Z","commit":"153","message":"Making progress with the System and SystemData classes - have now sorted out how forcefield equations are added and managed and have also formalised the separation between System, SystemData and SimSystem.\n\nCode is still broken.\n\n"},{"author":"chryswoods","date":"2007-01-16T16:37:43.184488Z","commit":"152","message":"I am still working on the System and SystemData classes. I have added functions and classes that allow the SystemData class to control the evaluation of the energy of complex and arbitrary functions (including functions that depend on other functions!).\n\n"},{"author":"chryswoods","date":"2007-01-14T20:13:50.933567Z","commit":"151","message":"I am still filling in the classes necessary for a simulation. \n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-01-12T16:41:03.894211Z","commit":"150","message":"Added a 'Moves' class that allows multiple moves on a System to be grouped and run together (in a thread-safe manner, complete with pause, stop, restart and rerun functions - and snapshot/streaming!)\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-01-11T22:01:37.709405Z","commit":"149","message":"I've filled in a lot of the functionality of the move classes (though they are still not finished). Saving and restoring the state of a RanGenerator and streaming of it is still broken.\n\nCode compiles, links and runs.\n\n"},{"author":"chryswoods","date":"2007-01-11T16:56:56.436039Z","commit":"148","message":"Implemented the RanGenerator class - this is explicitly shared, streamable and thread-safe. It is based on a fast BSD implementation of the Mersenne twister algorithm, which is good enough for what I want. \n\nWhile it is streamable, the set and get state functions appear broken, so I am not yet trusting the streaming!\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2007-01-10T16:46:20.289580Z","commit":"147","message":"Still working on the simulation classes... I've added a random number generator class that should have the behaviour I want (shared generator that doesn't reset all of the time, and also is streamable to/from a binary bytearray).\n\nCode is broken!\n\n"},{"author":"chryswoods","date":"2007-01-10T14:00:22.914335Z","commit":"146","message":"Committing work before my window is fixed\n\nCode is broken!\n\n"},{"author":"chryswoods","date":"2007-01-08T20:05:59.659020Z","commit":"145","message":"I've worked out a way to define flexible groups that allow different ways of moving molecules. It's based on creating groups that move in different ways (much like ForceField are groups that calculate energies in different ways). Just like ForceFields need forcefield parameters, so the move groups need parameters to help the move (e.g. zmatrix, momenta/acceleration etc.)\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-01-08T14:02:50.570092Z","commit":"144","message":"I've added an API to FFBase for the addition and removal of individual atoms, and also for the addition of molecules/residues/atoms to parrticular groups within the forcefield (e.g. QM region or MM region).\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-01-05T23:14:16.508178Z","commit":"143","message":"Merging the users/chryswoods branch to devel.\n\nThis merge;\n\n* Adds a generic atom ID class so that I can simplify overloaded atom functions\n* Adds generic properties to the Molecule class\n* Supplies atomic properties, e.g. AtomicCharges and AtomicLJs\n* Provides an improved API for ForceField that uses molecular properties\n* Adds a new class that allows time- and memory efficient generic\n  atom selections within a molecule.\n* Moves SireCAS over to using SharedPolyPointer and removes RegisterExpression\n* Completely removes DynamicSharedPtr and replaces all uses with SharedPolyPointer\n* Adds the NewAtom class that will eventually replace Atom\n\nThe command used to perform this merge was;\n\nsvn merge -r 118:142 ../users/chryswoods/ ./\n\n"},{"author":"chryswoods","date":"2007-01-05T16:38:39.376497Z","commit":"142","message":"I've added a test of the code to extract sub-expressions of a particular type from the SireCAS::Expression. Compilation required that the assignment operator of ExBase was made public (it used to be private when sharing was made possible via boost::shared_ptr, but now that I use SharedPolyPointer that restriction is no longer required). I may need to update the assignment operators of other SireCAS classes.\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-01-05T16:14:19.521710Z","commit":"141","message":"I've made a small change to SharedPolyPointer that prevents cloning of an object when it is actually already held by another SharedPolyPointer. This should prevent over-copying of objects, especially in SireCAS (as all of the classes derived from ExBase like to return Expression(*this), which performed a clone() in the last version, but now don't clone if the ExBase is not on the stack).\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-01-05T15:14:28.722012Z","commit":"140","message":"I have added a function to SireCAS::Expression that lets me to easily extract all of the sub-expressions of type 'T' - in doing this I finally moved SireCAS over to using SharedPolyPointer, which was also the trigger to completely remove the ghosts of DynamicSharedPtr. SharedPolyPointer is now used for everything, I have removed RegisterExpression (streaming of SireCAS objects is now done using QMetaType) and I have fixed bugs in the streaming of SireCAS objects (the streaming functions weren't streaming parent classes).\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-01-04T20:49:03.001297Z","commit":"139","message":"Fixing the code so that is will compile with gcc4 (missing qHash) and Qt4.1 (no qRegisterMetaType() function)\n\nCode compiles, links and runs well\n\n"},{"author":"chryswoods","date":"2007-01-04T19:11:55.737378Z","commit":"138","message":"I have finished implementing the basics of NewAtom, including the ability to return generic properties for the atom (via a new AtomicProperties property that is placed between PropertyBase and AtomicCharges/AtomicLJs). I have wrapped up NewAtom in python and it appears to work :-)\n\nCode compiles, links and runs well\n\n"},{"author":"chryswoods","date":"2007-01-04T14:21:52.195314Z","commit":"137","message":"Big commit... I've started work on a NewAtom class that will eventually replace Atom. NewAtom is basically the same as Atom, but contains a shared pointer to the MoleculeData of the containing molecule, and is more robust than Atom (it cannot be changed except via its own interface, while Atom can be changed via the Vector, AtomIndex, Element or AtomInfo interfaces, which is too general for what I want to achieve).\n\nWriting NewAtom made me realise that I needed to move my MetaType class into sireglobal.h as I shouldn't have a dependency of SireStream in all of my code. This forced me to clean up my MetaType classes, which are now just a very thin, convienient wrapper around the qMetaType functions. \n\nMaking this change meant that I had to update all of the classes that used the old RegisterMetaType, hence the large commit...\n\nAll of the code compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-01-04T09:22:40.296799Z","commit":"136","message":"I have added a more complete unit test of AtomSelection (which passes!) and have added some more types of random number generators to SireMaths/maths.h (different types of integers)\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-01-03T21:09:01.808585Z","commit":"135","message":"I have added the python wrapping of AtomSelection, which appears to work well, and have also added a unit test for AtomSelection (though its coverage needs to be improved)\n\nI've also fixed some compile bugs for gcc4.\n\nCode compiles, links and appears to run well.\n\n"},{"author":"chryswoods","date":"2007-01-03T16:46:09.245817Z","commit":"134","message":"I finally had an idea of how to represent atom selections in a Molecule. I have now written the resulting code (AtomSelection), which compiles, though still needs unit testing.\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-01-03T12:21:52.565796Z","commit":"133","message":"I have finished updating the code for the modified ForceField API and it now all works correctly. I have updated FFComponent so that it can accept symbols in its constructor (as I have also done to SireCAS::Function) and have wrapped these up accordingly. I have also updated FFBase::Components so that the total energy can be made a function of any symbols that are passed down to it.\n\nI have also added a short document stating the rules used for ID and version numbers of Molecule and ForceField.\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2007-01-02T19:10:43.397614Z","commit":"132","message":"I have been working propogating the change in API from FFBase up through to InterCLJFF. This has lead to significant cleaning of InterCLJFF and MolCLJInfo (and ChangedMolCLJInfo).\n\nInterupted by dinner :-)\n\nSireFF compiles (as does its basic python wrapping), but SireMM doesn't yet compile (InterCLJFF is broken)\n\n"},{"author":"chryswoods","date":"2007-01-01T22:22:19.099603Z","commit":"131","message":"I've fixed some compile problems for gcc4 and have added FFComponent (SireCAS::Function specialised to include information about the forcefield that contains the represented component) and am in the process of updating the forcefield classes (also to include the updated API for moving / changing / adding / removing and replacing molecules / residues.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2006-12-22T13:55:40.265860Z","commit":"130","message":"I have been working on Squire and have now got the design right for the division of work between the principal Molpro classes.\n\nI have also updated SharedPolyPointer and moved some code around so that SireError/errors.h is not included in most files.\n\nCode compiles, links and runs well without SQUIRE\n\n"},{"author":"chryswoods","date":"2006-12-21T16:28:23.288024Z","commit":"129","message":"I have updated the version number classes (IDPair, IDMajMinVersion etc.) to make them a bit cleaner, ease the return of a Version object, and to add binary streaming operators.\n\nI have added version numbers to FFBase, though they are not yet integrated with InterCLJFF or Tip4PFF.\n\nI am working on the MolproFF and MolproCalculator, and am beginning to clean up that code as I now have a more clear idea for the separation of the calculation into control, data and process.\n\nCode compiles, links and runs well (without SQUIRE)\n\n"},{"author":"chryswoods","date":"2006-12-21T12:59:17.352428Z","commit":"128","message":"I have fixed the code so that now InterCLJFF and Tip4PFF both use molecular properties to obtain the charge and LJ parameters :-)\n\nThe code compiles, links and runs well (without SQUIRE)\n\n"},{"author":"chryswoods","date":"2006-12-20T16:34:46.894587Z","commit":"127","message":"Have to stop as going home - updating InterCLJFF to use properties rather than needing CLJ parameters to be passed explicitly.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2006-12-20T15:09:56.774998Z","commit":"126","message":"I have updated all of the forcefield objects to use FFBase::Components and FFBase::Parameters. I have also cleaned up the code.\n\nCode compiles, links and runs well (without SQUIRE)\n\n"},{"author":"chryswoods","date":"2006-12-20T11:14:05.987688Z","commit":"125","message":"I have finished ParameterName, ParameterSource and ParameterMap and have wrapped them up in python. These classes will allow me to write code like;\n\n  cljff.add( mol, [cljff.parameters().coulomb() == \"charges\" \\\n                   cljff.parameters().lj() == \"ljs\"] )\n\nThe code compiles, links and runs well without Squire.\n\n"},{"author":"chryswoods","date":"2006-12-19T21:16:59.662585Z","commit":"124","message":"Fixed some problems preventing compilation with symbol hiding. Added FFBase::Parameters so that I can now write code like;\n\nclj.add( mol, [clj.parameters().coulomb() == \"charges\", clj.parameters().lj() == \"ljs\"] )\n\nI've wrapped FFBase::Parameters in python, though haven't wrapped up ParameterMap, ParameterName or ParameterSource.\n\nCode compiles, links and runs well (without SQUIRE)\n\n"},{"author":"chryswoods","date":"2006-12-19T16:35:46.287368Z","commit":"123","message":"I have created the AtomicLJs class to hold atomic LJ parameters, and have wrapped this, and AtomicCharges, in python. I *can* now write;\n\nmol.setProperty( \"charges\", AtomicCharges( [0.0, 0.52, 0.52, -1.04] ) )\n\nI have also begun work on a new way of holding and referring to forcefield energy components. This removes the need for unique integers to refer to components, and also cleans up the forcefield interface. Instead of writing;\n\ncljff.coulomb(), cljff.lj()\n\nI now write\n\ncljff.components().coulomb(), cljff.components().lj()\n\nThis makes a big difference, as it stops name pollution of cljff, and it allows the same idea to be used to refer to parameter types, e.g. I will have\n\ncljff.parameters().coulomb() and cljff.parameters().lj()\n\nCode compiles, links and runs well (with SQUIRE off)\n\n"},{"author":"chryswoods","date":"2006-12-19T09:57:16.990268Z","commit":"122","message":"I have finished off implementing properties of a molecule and have wrapped them up in python. I can now successfully add QVariant properties to a molecule (and retrieve them!). The next step is to python wrap AtomicCharges and to provide AtomicLJs.\n\nCode compiles, links and runs well (without SQUIRE)\n\n"},{"author":"chryswoods","date":"2006-12-18T20:42:22.738333Z","commit":"121","message":"I have cleaned up the classes that implement molecular properties. My last design was a bit silly...! Now my design is much more lightweight and straightforward (I can sometimes overthink and overdesign basic things!). I've written the class to hold atomic charges (AtomicCharges). Hopefully, once wrapped, I will be able to write python code like this;\n\nmol.setProperty( \"charges\", AtomicCharges( [ 0.0, 0.52, 0.52, -1.04 ] ) )\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2006-12-18T16:28:05.213090Z","commit":"120","message":"I have bitten the bullet and have decided that molecules do indeed need to have extra data associated with them. The reason is that this is the easiest and most reliable way to pass information between forcefields and the system, ensuring that the data doesn't become separated from the molecule. I am implementing the extra data as a set of properties that may be added to the molecule. This will allow a very general metaproperty system to be developed.\n\nCode compiles, links and runs well (with no SQUIRE)\n\n"},{"author":"chryswoods","date":"2006-12-17T15:23:03.929003Z","commit":"119","message":"I have created the IDMolAtom class which allows the simplification of functions that take atom IDs for arguments. Instead of requiring a different function for each atom ID, now only a single function is required, which takes an IDMolAtomID, and it is this object that then resolves the ID back to the standard CGAtomID which is the primary ID type of a Molecule.\n\nThe code compiles, links and works well (if SIRE_BUILD_SQUIRE is off)\n\n"},{"author":"chryswoods","date":"2006-12-16T21:39:17.769410Z","commit":"118","message":"Merging the users/chryswoods branch to devel.\n\nThis merge;\n\n* adds working CLJ forcefields\n* adds processors (background threads and beginning of QM/MM molpro link)\n* added thread-safe version classes\n* fixed lots of python wrapping\n\nThe command to perform this merge was;\n\nsvn merge -r 85:117 ../users/chryswoods/ ./\n\n"},{"author":"chryswoods","date":"2006-12-16T21:06:23.288397Z","commit":"117","message":"I've wrapped up the ID classes in python and they appear to work.\n\n"},{"author":"chryswoods","date":"2006-12-15T10:19:44.408383Z","commit":"116","message":"I have finished off creating the IDVersion and IDMajMinVersion classes and have written some units tests for these (including the MajMinVersion class as well). These all pass and the classes appear to work well.\n\nI have also created a SireError::version_error exception class that is inherited by SireStream::version_error, so I can more clearly distinguish between general version errors and binary format version errors. I have also added a SireError::id_error class to highlight errors of ID number.\n\nAs a point of interest, on my desktop (Pentium D 3.4GHz) the timings for incrementing the versions 100000 times are;\n\nMajMinVersion:   major() == 38ms, minor() == 3 ms\nIDVersion:       ID() == 37ms, version() == 4 ms\nIDMinMajVersion: ID() == 93ms, major() == 37ms, minor() == 4ms\n\nCode compiles, links and runs well if SIRE_BUILD_SPIER is off.\n\n"},{"author":"chryswoods","date":"2006-12-14T20:34:26.717872Z","commit":"115","message":"I have generalised the code from MajMinVersion into IDPair and IDTriple so that I can later create MajMinVersion, IDMajMinVersion and IDVesion classes (for different use-cases).\n\nAlso, I've compiled and tested on scruffy (amd64 3700+), and this does 100000 minor increments in 1ms, and 100000 major increments in 13ms.\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2006-12-13T23:09:06.724219Z","commit":"114","message":"I've written a new MajMinVersion class that allows thread-safe unique identification of unique versions of unique objects based on the q_atomic atomic integer functions. I've written a small unit test for this new class (not that that's finished yet) which includes timing - it does about 100000 increments in 3ms, and about 100000 major increments in 85ms (which is quite fast enough!).\n\nCode compiles, links and runs well (as long as SIRE_BUILD_SPIER is off)\n\n"},{"author":"chryswoods","date":"2006-12-13T20:29:58.890276Z","commit":"113","message":"Added some more unit tests for periodic box which test that the 'getCopiesWithin' function is working correctly. It seems to..!\n\nCode is compiling, linking and working well (with SIRE_BUILD_SPIER off)\n\n"},{"author":"chryswoods","date":"2006-12-13T11:21:58.901670Z","commit":"112","message":"I have written some unit tests for PeriodicBox and fixed the bugs that I mentioned in the last commit (the molecules being moved in the wrong direction). I have also cleaned up the unit tests by changing them over to using BOOST_CHECK_CLOSE for floating point comparisons. This has helped me fix the test failures caused by machine precision problems.\n\nWith SIRE_BUILD_SPIER off, the code compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2006-12-12T16:48:03.134968Z","commit":"111","message":"I have added the code necessary to get periodic copies of molecules from the simulation Space, and have wrapped this up in python so that I can begin testing it. Initial tests show that I am adding deltas rather than subtracting them, so the code doesn't work yet and is buggy.\n\nIf SIRE_BUILD_MOLPRO is off, then the code compiles, links and runs. The Squire code is still broken.\n\n"},{"author":"chryswoods","date":"2006-12-11T21:05:03.690794Z","commit":"110","message":"I've updated the code so that it compiles properly with gcc4 on my laptop. As this doesn't have Molpro, it compiles and runs correctly, and the threading code works well (test/test.py).\n\nExcept for Squire, the code compiles and works well.\n\n"},{"author":"chryswoods","date":"2006-12-11T20:17:51.341176Z","commit":"109","message":"Still working on MolproFF... I have had to work out how to use periodic boundary conditions with the QM forcefield - the problem is that a single molecule may need to be represented multiple times in the QM forcefield. How will that work?\n\n(also, for the record, today I attended the talk about Boa. It is a very nice looking code and the authors should be congratulated for getting something working :-)\n\nCode is broken... as normal!\n\n"},{"author":"chryswoods","date":"2006-12-08T13:16:09.287334Z","commit":"108","message":"I am working on MolproFF, MolproProcessor and MolproCalculator. The code is still in progress, so is not finished and does not yet compile. I have to stop now as I am going on an afternoon course and I will be late if I continue...!\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2006-12-07T15:38:19.879481Z","commit":"107","message":"I have finished writing the processors that calculate generic forcefields in the main thread and in a background thread. I have also wrapped up all of the user-facing classes in python, and have tested them via test/test.py, which calculates the energy of the water box in the main thread and, simultaeneously, in the background thread. The framework is quite nice, and is finally intuitive to use from python. The best thing about this is that the threading is completely hidden inside ThreadProcessor, so there is no need for any other code to have to worry about mutexes or threads. This also means that the user won't need to touch python threads.\n\nThe code compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2006-12-06T13:36:40.315051Z","commit":"106","message":"I am still sorting out the implementation of parallel processors. I have now almost fully fleshed out the design, and now need to write some tests and get it all to compile and link.\n\nI have slightly changed the design so that now the forcefield calculation itself has been separated from the network model used (i.e. now I have a class hierarchy based on FFCalculator, which is used to calculate FF energies, and another, separate class hierarchy based on ProcessorBase that is used to represent the remote processor). This allows different ways of calculating a forcefield to be more easily combined with different network models, e.g. now MolproFF can use MolproCalculator to get the energy, and FFThreadProcessor to do this in a separate thread, or FFMPIProcessor to do this on a separate MPI node (not that I have FFMPIProcessor yet....)\n\nCode is definitely broken.\n\n"},{"author":"chryswoods","date":"2006-12-04T20:40:52.434587Z","commit":"105","message":"I am working on the processor class... I've mapped out a design and am now implementing it. To do this I have added SireCluster, which is a library that will hold all of the threading and multi-processor parts of the code.\n\nCode is probably broken...\n\n"},{"author":"chryswoods","date":"2006-11-30T17:26:17.812928Z","commit":"104","message":"I am working on Squire, building the MolproFF and MolproProcessor that will be used to link Sire to Molpro for QM/MM calculations.\n\n"},{"author":"chryswoods","date":"2006-11-29T16:50:09.780768Z","commit":"103","message":"Made some changes to Sire.IO to allow the writing of EditMols as well as Molecules. \n\nCode compiles, links and appears to run well.\n\n"},{"author":"chryswoods","date":"2006-11-27T21:50:02.196559Z","commit":"102","message":"I am working out the API of System, Simulation and Processor - I have already planned how I will sort out the apparent dischord between the implicit shared System class and the single, uncopyable Simulation and Processor classes...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2006-11-22T21:19:14.394447Z","commit":"101","message":"The code can do Monte Carlo (well in python anyway!). The energy appears to be recalculated correctly after each move. The code can only do about 600 moves per second, which appears to be better than ProtoMS2.1, which I've just calculated to do about 450 moves per second. I think that Sire is faster because it calculates the change in energy in a single pass, compared to two passes for ProtoMS.\n\nCode compiles, links and appears to run well.\n\n"},{"author":"chryswoods","date":"2006-11-20T21:35:36.952560Z","commit":"100","message":"I have added the code to allow quick recalculation of the energy for MC moves, so now the code is in theory capable of performing fast Monte Carlo. Of course this now needs testing... :-)\n\nCode compiles, links and appears to run well.\n\n"},{"author":"chryswoods","date":"2006-11-20T15:22:56.140046Z","commit":"99","message":"I've updated the code to allow successful compilation using gcc4 symbol visibility hiding. This reduces the size of the python wrapper libraries by about a third (e.g. SireMol goes down from 31MB to 18MB). The size of the wrappers is still ridiculous, but at least its a start...!\n\nAlso, Tip4PFF is now faster than Sire(493)! The old prototype took 560ms to calculate the energy, while Tip4PFF takes 540ms on my laptop. The correct InterCLJFF takes about 800ms, so is about 50-60% too slow, but at least now this is looking like an achievable goal.\n\nI've also now filled in the missing functions for the recalulate delta energy. I've realised that it is best for the current configuration to be the new configuration, as then the forcefield will publically display only a single state. The old configuration is stored in the ChangedMolCLJInfo objects. I've also fixed a bug in the algorithm that would have missed the energy change of molecules that are removed.\n\nThe code compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2006-11-17T16:46:55.943576Z","commit":"98","message":"Filling in the classes, but must leave now to catch my bus..!\n\n"},{"author":"chryswoods","date":"2006-11-17T14:53:07.432655Z","commit":"97","message":"I have worked out the algorithm to calculate the change in energy associated with moving a molecule in the InterCLJFF forcefield (remembering that this forcefield does not include IntraCLJ components!). I've written the algorithm, and now need to fill in some necessary helper classes.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2006-11-17T10:52:33.801954Z","commit":"96","message":"The speed of the code is now a little better - explicitly calculating CLJ parameters in the pair loop does seem to have sped things up. For the moment I will keep going down this route, and will look for a different way of handling CLJ parameters later...\n\nCode compiles, runs and produces correct energies.\n\n"},{"author":"chryswoods","date":"2006-11-17T10:19:20.081721Z","commit":"95","message":"I've realised that part of the problem was the CLJ parameters. I have separated these into charge and LJ and have removed the generic combining rules (currently geometric rules are hard-coded into the pair loop). This has improved the speed a lot, and while InterCLJFF is still not yet fast enough, Tip4PFF is beginning to approach its correct speed.\n\n"},{"author":"chryswoods","date":"2006-11-16T21:54:46.528465Z","commit":"94","message":"Still not found out where the problem is - maybe it is my use of references? When I changed double return to const double\u0026 the program slowed down by about 100%. I'll need to play around some more...\n\n"},{"author":"chryswoods","date":"2006-11-16T19:02:48.131956Z","commit":"93","message":"I've tracked down the problem to very inefficient combination of CLJ parameters. Quite why this is inefficient remains to be seen...\n\n"},{"author":"chryswoods","date":"2006-11-16T14:28:27.141556Z","commit":"92","message":"I have made some progress speeding the code up. I've also switched Space, CombiningRules and SwitchingFunction over to using SharedPolyPointer rather than DynamicSharedPtr.\n\nSee techdocs/progress_on_speed for info on how I am doing improving the efficiency of the code...\n\n"},{"author":"chryswoods","date":"2006-11-15T22:01:15.285907Z","commit":"91","message":"I've made some progress speeding the code up. Tonight I've gone from 1304ms on my laptop to 1266ms (ok, not too much faster), while Tip4PFF is now 1042 ms. Its not great though, compared to Sire(480), which did the same calculation in 565 ms on my laptop. Its annoying as the code path for Tip4PFF is much simpler than that in Sire(480), so I am a bit stumped as to why it is so slow...\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2006-11-15T20:05:00.292265Z","commit":"90","message":"Changing from compiling with no optimisations to compiling with -O2 has sped the code up by 3.5 - 3.8 times! Optimisation is clearly important.\n\n"},{"author":"chryswoods","date":"2006-11-15T16:40:33.180831Z","commit":"89","message":"I am speed testing the code. I've realised that CMake has not set any compiler flags, so I have actually been speed testing with no compiler optimisations!!! I've changed the CMakeLists.txt file to add compiler flag definitions, and am now recompiling the code.\n\nThe code compiles and works well.\n\n"},{"author":"chryswoods","date":"2006-11-15T11:56:57.313020Z","commit":"88","message":"I will investigate the theoretical maximum speed of the calculation by creating an optimised forcefield that will just be for TIP4P water molecules. So far I have just cloned InterCLJFF, but this works well. I will now set about hacking this forcefield so I can get an idea of how fast I could possibly make the calculation...\n\nCode compiles, links and runs well.\n\n"},{"author":"chryswoods","date":"2006-11-15T11:08:31.034603Z","commit":"87","message":"Sire can now load and calculate the energy of a box of molecules again. While it gets the right energy, it is really slow!!!\n\nFrom the script test/test.py, Sire currently gets;\n\n80 A cutoff:  Energy = -14468.6539004 kcal mol-1 in 10746 ms\n15 A cutoff:  Energy = -14467.270807 kcal mol-1 in 2763 ms\n\nThis compares to that reported in ideas/current_speed for Sire(480) being;\n\n80 A cutoff:  Energy = -14468.7 kcal mol-1 in 2530 ms\n15 A cutoff:  Energy = -14467.3 kcal mol-1 in 563 ms\n\nFor the cartesian box, current Sire is about five times slower than Sire(480).\n(even worse, the timings for Sire(480) were on a 1.4 GHz Pentium M, while the\ncurrent timings are on a 3.4 GHz Pentium D - I'll do a proper comparison on \nthe pentium M tonight).\n\nFor the periodic box;\n\n80 A cutoff:  Energy = -16379.6119722 kcal mol-1 in 12388 ms\n15 A cutoff:  Energy = -16364.0932341 kcal mol-1 in 5289 ms\n\nThis compares to Sire(480) being;\n\n80 A cutoff:  Energy = -16379.6 kcal mol-1 in 2731 ms\n15 A cutoff:  Energy = -16364.1 kcal mol-1 in 1033 ms\n\nAgain, current Sire is about five times slower than Sire(480) on faster hardware...\n\nDespite that, the code compiles, runs and calculates the right energy. Its time for some optimisation :-)\n\n"},{"author":"chryswoods","date":"2006-11-14T09:56:28.388626Z","commit":"86","message":"Added a temporary function to InterCLJFF to allow the direct adding of molecules with their charge and LJ parameters. This will allow me to get back to work on calculating energies and doing Monte Carlo, even though I have not yet finished cleaning up the ParameterTable umbrella class.\n\n"},{"author":"chryswoods","date":"2006-11-13T22:36:26.414800Z","commit":"85","message":"Merging the users/chryswoods branch to devel.\n\nThis merge;\n\n* fixes reading of PDB files\n* adds Py++ wrapping of several classes (including Molecule and Residue)\n* adds a basic CLJ forcefield\n* adds switching functions, combining rules and Spaces\n* adds a more efficient version of DynamicSharedPtr (SharedPolyPointer)\n* adds unit tests for SharedPolyPointer\n\nThe command to perform the merge was;\n\nsvn merge -r 71:84 ../users/chryswoods/ ./\n\n"},{"author":"chryswoods","date":"2006-11-13T22:00:46.872498Z","commit":"84","message":"Created the SharedPolyPointer class, and have added some test cases for this class. One day I will move my DynamicSharedPtr classes over to using SharedPolyPointer.\n\nCode compiles, links and runs :-)\n\n"},{"author":"chryswoods","date":"2006-11-13T15:51:04.867130Z","commit":"83","message":"Fixed a small bug in MoleculeInfo (indexing for AtomID) and am working on making a more efficient DynamicSharedPtr (will rename as SharedPolymorphicPointer)\n\n"},{"author":"chryswoods","date":"2006-11-12T20:14:03.772714Z","commit":"82","message":"Fixed the code so that I can now finally read molecules again, and convert them to Molecules!\n\nAlso I have deleted old ideas\n\nCode compiles, links and runs.\n\n"},{"author":"chryswoods","date":"2006-11-10T16:43:04.316713Z","commit":"81","message":"Fixing bugs that prevented the loading of molecules....\n\n"},{"author":"chryswoods","date":"2006-10-30T22:27:32.829963Z","commit":"80","message":"Added wrapper for QList_SireMol_ and have been working on PDB so I can load molecules again (it still doesn't work - some bug somewhere - the molecules load, but there null molecules are returned...)\n\nCode compiles, links and runs, but it won't load a molecule!\n\n"},{"author":"chryswoods","date":"2006-10-30T12:25:35.232063Z","commit":"79","message":"Added the python wrapping of FFBase, CLJFF and InterCLJFF. Code compiles and works.\n\n"},{"author":"chryswoods","date":"2006-10-29T20:31:49.278367Z","commit":"78","message":"I have added lots of code to calculate CLJ energies, and InterCLJFF and CLJFF are now nearly complete (well, except for me working out exactly how to store molecules within a forcefield, but that is a problem for another day!).\n\nSome of the functionality of InterCLJFF is missing, and it is not yet possible to add any molecules to this forcefield (quite important requirement, you'd think...!), and the python wrappers need writing, but otherwise, it all compiles and runs.\n\nI've made some changes to SireCAS to allow operator= for Function and Symbol. This is probably a bad thing to do. I've realised that SireCAS should use DynamicSharedPtr rather than boost::shared_ptr, as this would simplify the lifetime management, allow operator= for all SireCAS objects, simplify serialisation (as would use DynamicSharedPtr serialisation) and would make the code more robust. This is a change for another day.\n\nCode is working again. (probably not for long)\n\n"},{"author":"chryswoods","date":"2006-10-28T21:41:06.343891Z","commit":"77","message":"The switching function and combining rules classes are now written, and fully compile without errors. They still need to be tested.\n\nCode is broken.\n\n"},{"author":"chryswoods","date":"2006-10-26T21:19:34.103404Z","commit":"76","message":"Providing the framework for switching and combining functions - yes - finally coding some computational chemistry again ;-)\n\nCode is broken.\n\n"}]}