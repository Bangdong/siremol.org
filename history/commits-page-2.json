{"Page":2,"TotalPages":28,"commits":[{"author":"julienmich","date":"2014-08-13T13:27:14.392539Z","commit":"2675","message":"Epic partial merge of devel.  \n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-13T10:55:44.161272Z","commit":"2674","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-13T10:53:13.175353Z","commit":"2673","message":"Updated InterGroupFF to support use of a grid and also use of multiple\nCLJFunctions. This is now almost a complete copy of InterFF, with\nchanges made to support two CLJGroups.\n\nNeeds python wrapping and testing\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-13T10:26:29.538222Z","commit":"2672","message":"I've fixed bugs revealed by the unit test of multiple CLJFunctions in a single\nInterFF forcefield. The code is now working and the unit test passes without\nproblem.\n\nCode compiles, links, runs and passes all unit tests\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-13T10:25:43.618525Z","commit":"2671","message":"Added in a unit test for using multiple CLJFunctions in a single InterFF forcefield\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-12T16:57:18.300817Z","commit":"2670","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-12T16:53:06.620330Z","commit":"2669","message":"I've updated InterFF and CLJFunction to work with multiple functions\nsimultaneously. This now needs to be wrapped and tested...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-12T16:19:33.045222Z","commit":"2668","message":"Fixed missing assert function\n\nCode compiles, links, runs and passes all unit tests\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-12T16:15:04.227175Z","commit":"2667","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-12T16:11:37.934387Z","commit":"2666","message":"I've added in MultiCLJComponent and MultiCLJEnergy classes that will simplify\nthe addition of named addition components to CLJ forcefields, e.g.\nyou will soon be able to add a \"forwards\" and \"backwards\" CLJ component,\nwhich would be useful for soft core forcefields in free energy\ncalculations\n\n"},{"author":"julienmich","date":"2014-08-12T15:38:18.004821Z","commit":"2665","message":"Merged python/scripts from devel. Renamed sommmd to somd (too many m's ! )\n\njulien@ubuntu:~/software/devel/sirejulien/python2/python/scripts$ svn merge https://sire.googlecode.com/svn/python/branches/devel/python/scripts .\n--- Merging r2423 through r2663 into '.':\nA    ligandswap.py\nA    align.py\nA    transform.py\nU    waterswap.py\nA    waterview.py\nA    analyse_reti.py\nU    quantomm.py\nA    analyse_freenrg.py\n\n\n"},{"author":"julienmich","date":"2014-08-12T15:35:46.262974Z","commit":"2664","message":"Merged devel/corelib/src/libs/SireAnalysis into my branch \n\njulien@ubuntu:~/software/devel/sirejulien/corelib/src/libs/SireAnalysis$ svn merge https://sire.googlecode.com/svn/corelib/branches/devel/src/libs/SireAnalysis .\n--- Merging r2391 through r2663 into '.':\nU    fep.h\nU    ticomponents.cpp\nU    bennetts.cpp\nU    bennetts.h\nU    fep.cpp\nConflict discovered in 'ti.cpp'.\nSelect: (p) postpone, (df) diff-full, (e) edit,\n        (mc) mine-conflict, (tc) theirs-conflict,\n        (s) show all options: tc\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-12T13:50:36.222264Z","commit":"2663","message":"Completed and debugged the InterGroupFF forcefield. This passes its unit tests\nbut is slightly slower than InterGroupCLJFF. I will optimise this at another\ntime...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-12T13:49:53.979635Z","commit":"2662","message":"Added in the unit tests for InterGroupFF - which all pass :-)\n\n(although the InterGroupFF forcefield is slightly slower than the \nInterGroupCLJFF forcefield...)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-12T10:59:55.263318Z","commit":"2661","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-12T10:56:02.434814Z","commit":"2660","message":"Cleaned up the private API of InterFF and have written InterGroupFF.\nThis was very quick to write, showing that the CLJGroup API works\nvery well :-). InterGroupFF compiles, but I now need to add python\nwrappers and proper unit tests\n\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-12T10:18:19.397170Z","commit":"2659","message":"I found the cause behind the weird slow code - it was that cljexts was very\nbig so the implicit \"detach()\" when writing (copy on write) was very slow,\nof the order of 20-30ms. Changing cljexts from a QHash to ChunkedHash\nhas solved the problem and now the new InterFF code is very fast.\n\nCode is working and passes all unit tests\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-11T16:53:34.703212Z","commit":"2658","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-11T16:50:31.880779Z","commit":"2657","message":"Fixed code used to extract by cutgroup. Now debugging a really weird slowdown in the\ncode caused when I access a CLJExtractor by molecule number...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-11T15:48:30.992682Z","commit":"2656","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-11T15:43:06.606656Z","commit":"2655","message":"I'm updating CLJExtractor so that it can extract atoms by CutGroup. This should\nbe faster than extracting by residue\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-11T15:15:50.943598Z","commit":"2654","message":"Committing code that passes all of the unit tests :-). However, optimisation\nhas revealed that CLJExtractor should be working per CutGroup not per\nResidue, so I will need to update it...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-11T14:05:42.912421Z","commit":"2653","message":"Fixed a bug in the unit test!\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-11T14:05:13.107296Z","commit":"2652","message":"Optimised the CLJ functions a little... Units tests all appear to be working\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-11T11:01:58.492598Z","commit":"2651","message":"Fixed the cause of the exception in test_interff_residue.py, which now completes,\nbut gives a different energy for the \"optimised moves\" systems...\n\nCode compiles, links and runs and most unit tests pass\n\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-11T11:00:33.254843Z","commit":"2650","message":"Fixed problems with the test_interff_residue unit test\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-08T14:27:40.912942Z","commit":"2649","message":"Found the cause of exceptions causing a segfault - it seems to be that\n-fomit-frame-pointer causes problems on a mac when the exception moves from\nC++ to python. I've removed this option from the CMakeFiles.\n\nI have also turned back on backtraces and added code to exception so that\n'slow' exceptions can be disabled. This allows code that throws lots\nof exceptions (correctly, and are handled correctly) to run quickly\nwithout being slowed down by the need to generate backtraces or other\nhuman-useful information\n\nFound the cause of the segfault in the test_interff_residue.py unit\ntest. The segfault was because of an unhandled exception. The exception\nis because something is going wrong in CLJExtractor::_pvt_update when\npart of a multi-residue molecule is changed.\n\nCode compiles, links and runs, but the test_interff_residue.py\nunit test fails\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-06T16:09:59.212307Z","commit":"2648","message":"Updated the test_cljdelta.py unit test to match the new CLJDelta API\n"},{"author":"chryswoods@gmail.com","date":"2014-08-06T15:54:25.767607Z","commit":"2647","message":"Python wrappers for last commits\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-06T15:50:47.811896Z","commit":"2646","message":"Temporarily removing the test in test_interff_residue.py so that\nI can use sire_test to check that everything else is working...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-06T15:47:38.988395Z","commit":"2645","message":"I've fixed more bugs and parallelised the delta energy calculation. This\nnow speeds up the calculation even more. Most of the unit tests are now\npassing, with the exception of test_interff_residue.py\n\nCode compiles, links and runs, but fails some unit tests\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-06T15:43:41.469291Z","commit":"2644","message":"Updated the unit test\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-06T13:45:54.829041Z","commit":"2643","message":"I've found the cause of the new code's lethargy - I was implicitly creating\nlots of PartialMolecules when I was testing whether or not the move had\nremoved the molecule. This costed about 0.8 s per thousand moves! I've fixed\nthe code and now the new forcefield is twice as fast as the old forcefield\n\ntest_interff.py works, as does test_optimise.py, but the parallel code\nis slower (because I think it is creating new CLJBoxes)\n\ntest_interff_residue.py still segfaults\n\nCode compiles, links and runs, but fails the unit tests\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-06T11:20:35.515053Z","commit":"2642","message":"Continued to fix bugs. Now the test_interff.py unit test passes without\nproblems. The new energy code is twice as fast as the old code, but the\nupdate code is extremely slow, negating any speedup. However, it now works,\nso I am able to optimise it. test_optimise.py works, but test_interff_residue.py\nsegfaults...\n\nCode compiles, links and runs but fails unit tests\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-06T11:19:17.276897Z","commit":"2641","message":"Updates to the unit tests\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-05T16:49:06.295509Z","commit":"2640","message":"Updated unit tests and exposed tuple\u003cCLJAtoms,CLJAtoms,CLJAtoms\u003e\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-05T16:48:44.330126Z","commit":"2639","message":"Continuing to work through the failed unit tests... I am definitely\nleaking energy, although it seems to be somewhere in InterFF rather\nthan CLJGroup (which passes its tests)\n\nCode compiles, links and runs but fails unit tests\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-05T16:03:46.814618Z","commit":"2638","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-05T16:00:43.917135Z","commit":"2637","message":"Had to update the API as I had not accounted for cases where the \nchanging atoms interact with one another. I am still moving through\nthe unit tests fixing things as I go...\n\nCode compiles and links but fails unit tests\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-05T14:31:23.097737Z","commit":"2636","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-05T14:27:57.250021Z","commit":"2635","message":"Added in missing comparison operators for Molecule\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-05T14:16:04.789443Z","commit":"2634","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-05T14:11:30.562870Z","commit":"2633","message":"Fixing bugs and adding extract functions to the API that allow for more in-depth\nunit testing\n\nCode compiles and links but fails tests\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-05T11:06:39.024524Z","commit":"2632","message":"Working on fixing bugs in the new CLJGroup/InterFF. Currently total energies\nare correct but the unit tests are failing on calculating energy differences.\nI have an energy leak...\n\nCode compiles and links but fails unit tests\n\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-05T09:18:43.121175Z","commit":"2631","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-05T09:15:04.698519Z","commit":"2630","message":"Filled in missing functions in the API\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-04T16:33:43.121037Z","commit":"2629","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-04T16:23:18.337923Z","commit":"2628","message":"Filled in all of the functionality and updated InterFF to use CLJGroup. This has\nsignificantly simplified the code and paves the way to re-use CLJGroup in\nInterGroupFF, IntraFF and IntraGroupFF. Now need to create the python wrappers\nand to check that the InterFF unit tests still work...\n\nCode compiles but code is broken\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-04T11:07:59.248835Z","commit":"2627","message":"I've filled in a lot of the functionality of CLJGroup, CLJWorkspace and CLJExtractor.\nThey should all now be working with each other. I now need to update InterFF\nto use CLJGroup.\n\nCode is very broken\n\n"},{"author":"chryswoods@gmail.com","date":"2014-08-01T16:27:36.516736Z","commit":"2626","message":"I'm putting down the design of the code used to manage updates to molecules\nwhen in CLJ forcefields. This is quite complex and new code and I am still\nin the process of writing it. \n\nCode is very broken\n\n"},{"author":"julienmich","date":"2014-08-01T11:03:00.554877Z","commit":"2625","message":"Creating a branch of python nividic"},{"author":"julienmich","date":"2014-08-01T11:01:15.075826Z","commit":"2624","message":"Creating a branch of nividic"},{"author":"chryswoods@gmail.com","date":"2014-07-29T15:39:13.142615Z","commit":"2623","message":"Added a unit test for the parallel and MC optimised moves versus the \nnon-optimised serial moves. Test passes and the parallel optimised\ncode is about 30% faster than the non-parallel non-optimised code\n(equal contributions from parallel and from optimisation)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-07-29T15:01:57.656796Z","commit":"2622","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-07-29T14:43:51.723541Z","commit":"2621","message":"Adding in options to turn on or off the parallel calculation in the new forcefields,\nto turn on or off the reproducible parallel energy sum algorithm, and to also\nturn on of off the optimised MC moves that are potentially buggy, but will\nprevent repeated memory allocation and deallocation. Providing a switch\nwill allow me to write unit test python scripts that will test the code\nwith the optimised moves on, versus code with the optimised moves off.\n\n"},{"author":"julienmich","date":"2014-07-25T15:32:28.805879Z","commit":"2620","message":"Removed some debug statements for easier use in production runs\n"},{"author":"nividic73","date":"2014-07-25T13:27:30.552373Z","commit":"2619","message":"restart file bug fixed"},{"author":"nividic73","date":"2014-07-25T10:25:23.497970Z","commit":"2618","message":"fixed compilation error with old compiler"},{"author":"nividic73","date":"2014-07-25T10:21:27.685163Z","commit":"2617","message":"fixed compilation error with old compiler"},{"author":"nividic73","date":"2014-07-25T10:11:29.388959Z","commit":"2616","message":"Glycam support has been added to the free energy. 0^0 bug has been fixed- the code is broken restart file is not working"},{"author":"nividic73@googlemail.com","date":"2014-07-21T11:01:59.309068Z","commit":"2615","message":"update"},{"author":"nividic73","date":"2014-07-21T10:47:51.089454Z","commit":"2614","message":"code broken - do not used it"},{"author":"chryswoods@gmail.com","date":"2014-07-18T09:31:12.039109Z","commit":"2613","message":"Updated version string from 2014.2 to 2014.3\n\n"},{"author":"chryswoods@gmail.com","date":"2014-07-18T09:27:03.733863Z","commit":"2612","message":"Merged branches/devel into trunk \n\n"},{"author":"chryswoods@gmail.com","date":"2014-07-18T09:22:42.977338Z","commit":"2611","message":"Last commit of devel before merging back to trunk for the 2014.2 release\n\n"},{"author":"chryswoods@gmail.com","date":"2014-07-02T10:51:41.376332Z","commit":"2610","message":"Updated the reflection volume code so that it can build reflection volumes\nusing the atomic mass property (if the atom element property is not available)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-30T14:09:36.251274Z","commit":"2609","message":"Updated WSRC so that I can add a buffer to the LJ lambda scaling to try to\nremove the discontinuity in the PMF caused by lambda = 0 and lambda = 1\n(or the discharged equivalents) sampling configurations where there is\nsignificant atomic overlap between the reference and perturbed states.\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-30T13:41:59.523262Z","commit":"2608","message":"Updated quantomm to use the new parameters and capabilities exposed. Added\nthe \"--intermolecular-only\" option and the \"--scale-charges\" option and \nhave updated its documentation\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-30T13:21:03.944545Z","commit":"2607","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-30T13:18:03.713171Z","commit":"2606","message":"Added in 'toString' operators so that more information is available to the user\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-30T11:10:58.614643Z","commit":"2605","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-30T11:08:49.814421Z","commit":"2604","message":"Added in support for scaling the MM charges in the QM/MM interaction\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-30T10:40:40.061028Z","commit":"2603","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-30T10:37:32.543087Z","commit":"2602","message":"Fixed some bugs in the QM/MM script related to the handling of periodic boundaries,\nhave added in support for the intermolecularOnly option, and have added a simple\nscript to analyse the RETI trajectory from a restart file\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-30T10:36:48.295881Z","commit":"2601","message":"I've added an \"intermolecularOnly\" option to QMMMFF that sets the QM/MM forcefield\nto only calculate the intermolecular energy between the QM and MM atoms. This is \nuseful to overcome the problem of sometimes the QM and MM bond lengths disagree,\nleading to a lower than expected acceptance ratio for the QM model.\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-27T16:20:30.570480Z","commit":"2600","message":"I've added code to detect when there are too many MM atoms for SQM and to \n\"fix\" the problem by removing atoms starting from those that are furthest\naway. This is not great, but it is the best that can be done until the\ninput file size limit is lifted. I print a warning for the user and also\nhave set options to remove this check if SQM is fixed.\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-27T13:30:51.435075Z","commit":"2599","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-27T13:25:30.392011Z","commit":"2598","message":"Updated the API of QMProgram so that it can report the maximum number of MM atoms\nthat it can support. Added in code to SQM to detect when this maximum has been\nexceeded.\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-27T13:24:58.725377Z","commit":"2597","message":"Updated the QuantumToMM and quantomm scripts so that they can use SQM, and\nhave switched over to using SQM as default. Currently have a problem that\nSQM only supports command files with 1000 lines, so there is a limit on the\nnumber of MM atoms...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-27T10:33:21.616240Z","commit":"2596","message":"Added a unit test for the SQM interface\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-27T10:32:59.781574Z","commit":"2595","message":"Fixed bugs in SQM so that it now works :-). Also updated Process so that it\nchecks whether a process has finished every 20 ms rather than every second\n(SQM processes are very quick!)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-26T14:04:53.104794Z","commit":"2594","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-26T13:59:41.466979Z","commit":"2593","message":"I've added an interface for the SQM package that comes free with AmberTools14.\nThis provides a complete semiempirical and DFTB QM package that can be used\nfor QM/MM calculations :-)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-25T15:57:51.129272Z","commit":"2592","message":"I've fixed a couple of small bugs in the waterswap module that meant caused\nthe (obviously) incorrect Bennetts and FEP free energies, and I have also\ntweaked the discharging Hamiltonian so that the user can choose to \ndischarge a percent of the charge (rather than all of it)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-23T16:01:45.947335Z","commit":"2591","message":"Python wrappers for the last commit, together with some tests that exceptions\ncan be thrown without segfaults from each of the modules\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-23T16:00:56.007623Z","commit":"2590","message":"Updated Amber so that the exception thrown when the files don't exist doesn't cause\na segfault on mac. The problem seems to be caused by the exception being thrown\nfrom within a function that is too big(!). I found that shrinking the function\nstopped the segfault. I thought this was due to running out of stack space, but\nincreasing the stack didn't fix the problem. Instead, I now check that the files\nexist in a small wrapper function, and then call the larger function if they\ndo exist. It is not an elegant fix, but until I understand the problem it is \nthe best that I can do...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-06T17:02:52.142014Z","commit":"2589","message":"Final commit for the release of Sire 2014.2\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-06T15:14:14.236099Z","commit":"2588","message":"Merged devel/corelib and devel/python into trunk/corelib and trunk/python. sire_test\ncompletes successfully for the devel branch. I am now compiling the trunk on OS X\nand will need to do this on Linux too as a test.\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-06T14:43:56.644294Z","commit":"2587","message":"Adding descriptions and cleaning up all of the apps in preparation for the 2014.2 release\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-06T14:43:20.742330Z","commit":"2586","message":"Updating the source in preparation for the 2014.2 release\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-05T10:25:18.746874Z","commit":"2585","message":"Fixed some bugs in the new waterswap Hamiltonians (they were blatantly wrong!)\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-04T12:22:54.110244Z","commit":"2584","message":"Re-enabling RETI moves for WSRC. They work well in ligandswap and will help\nwith sampling when I am discharging and recharging\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-04T12:06:32.946863Z","commit":"2583","message":"I've fixed a small bug in the calculation of lambda values when discharging\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-04T11:54:16.050154Z","commit":"2582","message":"Rewrote the hamiltonians in waterswap so that I can discharge the ligand and swap\nwater cluster before swapping (and then recharge them after swapping).\n\nTesting all of this now...\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-03T14:15:47.145503Z","commit":"2581","message":"Added a sphere pair volume test to the sphere unit tests\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-03T10:11:39.295003Z","commit":"2580","message":"Python wrappers for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-06-03T10:05:14.011087Z","commit":"2579","message":"Added code to return the reflection volume and to calculate the volume of that space\nin RigidBodyMC\n\n"},{"author":"chryswoods@gmail.com","date":"2014-05-30T15:26:44.869298Z","commit":"2578","message":"Python wrappers and unit test for the last commit\n\n"},{"author":"chryswoods@gmail.com","date":"2014-05-30T15:26:27.206918Z","commit":"2577","message":"I've added the MC volume calculator and have also filled in the special cases\nfor the analytic triple intersection code. I've added unit tests (next commit)\nand have been debugging. So far, it looks like the code performs well, except\nfor when the spheres are heavily overlapping (when there are large disagreements\nbetween the MC and analytic code, and the MC code looks more correct...).\n\n"},{"author":"chryswoods@gmail.com","date":"2014-05-30T11:51:41.681992Z","commit":"2576","message":"Python wrapper for the last commit\n\n"}]}