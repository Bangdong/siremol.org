{"Page":15,"TotalPages":28,"commits":[{"author":"chryswoods","date":"2010-11-04T21:42:10.413183Z","commit":"1375","message":"I have to first remove the julienmich branches before I can copy back\nthe changes from the devel branch. I apologise if this causes any\ndifficulties - I couldn't see online any other better way of doing\nthis...\n\n"},{"author":"chryswoods","date":"2010-11-04T15:42:48.784622Z","commit":"1374","message":"I've updated a lot of Julien's new classes so that they merge better with the\nrest of the Sire code. I've updated test/SireIO/amber.py and test/SireIO/ambersim.py\nto use the modified APIs (I've changed the API a bit to make it more consistent).\n\nCode seems to work well :-)\n\n"},{"author":"chryswoods","date":"2010-11-03T13:18:17.787827Z","commit":"1373","message":"I've cleaned up some of the code and auto-generated the python wrappers. All of the\nmerged code now compiles and links - though I do not yet know if anything works...\n\n"},{"author":"chryswoods","date":"2010-11-03T11:23:25.925132Z","commit":"1372","message":"Initial commit of me merging Julien's branch into the devel branch, using the command;\n\nsvn merge -r 1309:1371 ../users/julienmich/ ./\n\n(also sorting out movermove.h and movermove.cpp that caused tree conflicts)\n\nCode is almost certainly broken!\n\n"},{"author":"chryswoods","date":"2010-11-02T21:23:06.133718Z","commit":"1371","message":"I've finished writing, wrapping and testing the Get*Point classes, and have also\nupdated RigidBodyMC to use these classes to find the center of rotation of the\nmolecules.\n\nI've updated the test/SireMove/bbmove.py test to perform ProtoMS-style backbone\nmoves correctly, and have added a peptide.pdb file that provides a short peptide\nchain for the backbone test.\n\n"},{"author":"julienmich","date":"2010-11-02T14:21:57.998147Z","commit":"1370","message":"Cleaned up and documented the test scripts and added the parameter file \namber.zmatrices. \n\n"},{"author":"chryswoods","date":"2010-11-01T22:12:03.717811Z","commit":"1369","message":"I've begun work on adding code to allow Sire to perform ProtoMS-style protein\nbackbone moves. These will be supported by modifying RigidBodyMC so that the\nuser can specify the center about which to rotate the atoms - see \ntest/SireMove/bbmove.py for how this enables the backbone moves.\n\nCode is broken\n\n"},{"author":"julienmich","date":"2010-11-01T19:38:17.131566Z","commit":"1368","message":"Added a maximumvariables parameter to a flexibility template. Up to maximumvariables\ninternals will be changed by a call to MoverMove.move(). I have also written a sireflex.py \nscript which attempts to guess reasonable default delta values for sampled dofs. \n\nzmatmaker.py now proceeds from loading a top file to a MC simulation. The only missing part \nis backbone moves for the protein. \n\n"},{"author":"julienmich","date":"2010-10-30T19:59:51.543926Z","commit":"1367","message":"Create a flexibility property which can be applied to a molecule\nusing flexibilitymaker. Modified movermove so that it uses the \ninformation stored by flexibility to sample bonds, angle and \ndihedrals in a molecule. \n\n"},{"author":"julienmich","date":"2010-10-29T17:59:08.836918Z","commit":"1366","message":"The first version of zmatrixmaker does what it it supposed to. I can now move protein \nsidechains using ZMatMove(). \n\nStarted working on a similar flexibilitymaker object. There is \na lot of similarity between these two and perhaps they should be merged. \n\nAlso I have decided that property \"flexibility\" will also hold information about the rigid \nbody translations and rotations of the molecule, this will let me write templates for \nsolvent molecules as well.\n\n"},{"author":"julienmich","date":"2010-10-28T18:46:39.212321Z","commit":"1365","message":"Created a set of templates to describe the flexibility of protein residues. \nWrote code to read this into Sire. Must now write code to apply the templates\nto a protein.\n\n"},{"author":"julienmich","date":"2010-10-25T15:49:36.455862Z","commit":"1364","message":"The energies are now virtually identical to those produced by sander. For a test system of a protein-ligand\n complex embedded in a box (ca 22k atoms), with periodic boundaries turned off and no cutoff I get an energy \nof -47012.8 kcal/mol versus -47010.2 kcal/mol with Sander. Of the 2.6 kcal/mol of difference, 2.3 kcal/mol comes \nfrom the coulombic because sander and Sire have a different constant for one_over_fourpieps0 (332.052217 and 332.063709 \nkcal/mol respectively). The remaining difference is on the order of 1 ppm which is acceptable by my standards.\n\nI have also optimized the speed of loading a top file by vastly reducing the construction of unneeded Sire objects. \nLoading the 22k system is now ~5 times faster. \n\n"},{"author":"julienmich","date":"2010-10-22T22:09:22.797719Z","commit":"1363","message":"The amber parser works, but the dihedral energies are wrong (compared with the energies \nfor the same top file read by sander) and I am still chasing the bug.  \nAlso, realised the implementation has trouble reading top files that contains molecules without periodic boundaries. \n\n"},{"author":"julienmich","date":"2010-10-22T14:41:34.111223Z","commit":"1362","message":"Commit of the latest python wrappers\n"},{"author":"julienmich","date":"2010-10-21T23:01:56.665935Z","commit":"1361","message":"The amber parser now returns (almost) all the information necessary to compute the energy of the system. \nThere are some order N**2 operations which could be optimised so loading is faster. \nThe code is broken.\n\n"},{"author":"julienmich","date":"2010-10-20T23:38:19.103826Z","commit":"1360","message":"More work on the amber parser. Can now read atom coordinates, atom force field parameters, bonds, angles.\nNeeds more work to read dihedrals and impropers and excluded atoms.\n\n"},{"author":"julienmich","date":"2010-10-19T23:33:50.901004Z","commit":"1359","message":"More work on the amber parser\n"},{"author":"chryswoods","date":"2010-10-16T22:52:59.629818Z","commit":"1358","message":"I've added a \"parameters\" directory to Julien's branch and have edited CMakeLists.txt\nso that the contents are installed into CMAKE_INSTALL_PREFIX/share. I've also add\na Sire/Config module that defines Sire installation variables\n\n"},{"author":"chryswoods","date":"2010-10-16T22:14:49.656220Z","commit":"1357","message":"I've filled in the code for FFParameters and FFParametersArray, with\nAtomicFFParameters and AtomicFFParametersArray. As part of this I have\nadded some functionality to PackedArray2D, fixed a few bugs and added\nmissing functions to this class, and have also added some python wrapped\ninstantiations of this class, together with a python test file\n\n"},{"author":"julienmich","date":"2010-10-15T22:09:10.837625Z","commit":"1356","message":"Working on the amber parser. \n"},{"author":"chryswoods","date":"2010-10-15T11:31:38.584853Z","commit":"1355","message":"I've finished the Patching classes (and BoxPatching) and have added a quick test script. \nNext step is to build patching into FastInterCLJFF...\n\nCode compiles, links and runs again :-)\n\n"},{"author":"chryswoods","date":"2010-10-06T07:57:32.188683Z","commit":"1354","message":"I'm in the process of filling in the code for the SireVol::Patching classes\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-10-05T20:18:39.964342Z","commit":"1353","message":"I've added the various classes that are needed to allow for the implementation\nof domain decomposition in Sire - these are just the header files, as I am \nsketching out the APIs and object relationships. The design is now becoming\nclear, with Sire's intermolecular forcefields now being designed around the\nidea of beads (which are arbitrary CutGroups), with a forcefield holding\nthe beads in groups (Patch objects) managed as a Patches object (or multiple\nPatches objects). These objects hold the beads in each patch, while\na SireVol::Patching describes the geometry of the patches. In addition,\nto remove the need for lots of template classes, I've added FFParameters\nand FFParametersArray as virtual classes (with AtomicFFParameters as the\nconcrete atomic version) so that Patch can hold the bead parameters for\nany forcefield via a virtual pointer. This is fast as the forcefield classes\ncan perform a static test at the start of the energy evaluation and then\ncan safely static_cast the pointers as it will be known that they will\nall be correct.\n\nCode is broken  (as the header files are being sketched)\n\n"},{"author":"chryswoods","date":"2010-10-01T16:08:58.664969Z","commit":"1352","message":"Committing the updated wrappers as well (forgot!)\n\n"},{"author":"chryswoods","date":"2010-10-01T16:07:33.986829Z","commit":"1351","message":"I've been thinking about how to introduce domain decomposition into Sire, and\nhave realised that the molecule and forcefield classes need rewriting. This\nwill be performed as part of the Siren rewrite (as detailed in TODO). I've\nalso made a few design decisions, in terms of limiting Sire (rather than\nletting it simulate *anything*, and have also added a document describing\nsome of the names of projects derived from Sire.\n\nRather than wait for the Siren rewrite, I have also begun adding a new\nfaster version of InterCLJFF, which will act as a sandpit/prototype of\nthe new Siren forcefield code.\n\n"},{"author":"chryswoods","date":"2010-08-26T19:54:13.848506Z","commit":"1350","message":"I've added the VersionID.. type code to the DofID reading function. This fixes\nthe magic_error exception\n\n"},{"author":"julienmich","date":"2010-08-26T17:44:27.114674Z","commit":"1349","message":"Adding wrappers for DofID\n"},{"author":"julienmich","date":"2010-08-26T15:26:35.542187Z","commit":"1348","message":"Commit of the new python wrappers\n"},{"author":"julienmich","date":"2010-08-26T15:26:11.356604Z","commit":"1347","message":"Fixed a bug in the reading of MoverMove objects from a binary datastream\n"},{"author":"julienmich","date":"2010-08-24T22:31:24.378647Z","commit":"1346","message":"Increased the maximum number of alpha values for a softcore force field. I have done this so that I \ncould use different alpha parameters to soften serially the lennard jones and coulombic interactions of a solute\n"},{"author":"chryswoods","date":"2010-08-23T14:33:52.576450Z","commit":"1345","message":"I've committed the version of the code used to perform the simulations in the\nWSRC paper (just submitted to J Chem Phys). This branch will be updated as\nnecessary to allow others to reproduce the simulations described in this\npaper.\n\n"},{"author":"julienmich","date":"2010-08-23T00:11:33.273955Z","commit":"1344","message":"Looks like movermove is doing what I want on dimedone. \n\n"},{"author":"julienmich","date":"2010-08-22T20:59:19.794661Z","commit":"1343","message":"AngleDeltas were not working because I had forgotten to add the corresponding QHash to SireMove_containers.cpp...\n"},{"author":"julienmich","date":"2010-08-22T20:42:15.582377Z","commit":"1342","message":"Added angle_deltas to MoverMove. Code appears to work for bond_deltas but not angle_deltas.\n"},{"author":"julienmich","date":"2010-08-20T14:37:11.158516Z","commit":"1341","message":"Commit of test job of movermove dimedone with dofid objects\n"},{"author":"julienmich","date":"2010-08-19T22:05:41.105317Z","commit":"1340","message":"Commit of the latest wrappers\n"},{"author":"julienmich","date":"2010-08-19T21:50:57.582288Z","commit":"1339","message":"Now working on adding bond_deltas and angle_deltas to MoverMove. Created a DofID class \nto index the variable dofs of MoverMove. Code compiles but wrappers do not workx\n\n"},{"author":"chryswoods","date":"2010-08-18T15:21:30.190576Z","commit":"1338","message":"I've changed the \"at\" function of ChunkedVector to remove bounds checking and\nhave switched the intermolecular forcefields over to using \nChunkedVector::at rather than ChunkedVector::operator[]. This has improved\nthe speed of the energy calculations by about 25-30% \n(see test/SireMove/bigbox.py).\n\nHowever, I am still performing a distance check between all pairs of \nmolecules, which means that I still have an O(n) cost in the \nenergy evaluation. This is painful, especially as this is evaluated\nvia a virtual function call (as it is Space dependent). I need\nto think of some way of creating patches and breaking the system\ndown into patches (to remove the O(n) scaling).\n\n"},{"author":"chryswoods","date":"2010-08-16T10:06:58.809757Z","commit":"1337","message":"I've fixed the bug in LJPotential that meant that recent versions of Sire \n(which have not been used for any production calculations) calculated the\nwrong LJ energy. It was a stupid error in LJFunction where I used\nsigma^6/r^6 = pow_3(sigma/r^2) rather than the correct pow_3(sigma^2/r^2)\n\n"},{"author":"chryswoods","date":"2010-08-13T14:20:38.322381Z","commit":"1336","message":"I've fixed a bug in RestraintFF that meant that it was not saving its \"space\"\nproperty correctly. This caused errors to be thrown as RestraintFF forcefields\nthen had different spaces to non-RestraintFF forcefields.\n\n"},{"author":"chryswoods","date":"2010-07-21T09:38:52.326376Z","commit":"1335","message":"I've added an example of how to create a simple harmonic restraint\nbetween an atom and a point\n\n"},{"author":"chryswoods","date":"2010-07-19T21:16:04.236983Z","commit":"1334","message":"I've fixed a bug in CovalentBondHunter whereby it never found any bonds\nbecause it used a too small covalent radius - it now uses the bond order\nradius. I've added an anchors example script to show how anchors are supposed\nto work.\n\nI am also trying now to speed up the code for large numbers of molecules,\nin particular getting rid of some unnecessary order-N bits of code which\nwere seriously destroying the performance of the code for large water\nboxes (hence the bigbox.py added example).\n\nWhile this version compiles and runs, I wouldn't trust it yet - I've\ndone too much to the core and need to run a lot of tests.\n\n"},{"author":"julienmich","date":"2010-07-19T18:26:17.606434Z","commit":"1333","message":"Still working on movermove\n"},{"author":"chryswoods","date":"2010-06-21T19:48:08.696110Z","commit":"1332","message":"Removing the debug comments...\n"},{"author":"chryswoods","date":"2010-06-21T19:43:47.874394Z","commit":"1331","message":"I've added the code to allow the QM/MM potential to be used to polarise\nthe polarisable MM model\n\n"},{"author":"chryswoods","date":"2010-06-21T10:48:07.244867Z","commit":"1330","message":"I've added a convergence limit to the PolariseCharges constraint so that the\npolarisation iterations can exit once the charges have sufficiently stabilised.\n\n"},{"author":"chryswoods","date":"2010-06-21T09:12:49.328332Z","commit":"1329","message":"I've fixed a bug in MoleculeGroup that meant that it incorrectly threw an exception\nwhen molecules or another molecule group were added.\n\n"},{"author":"chryswoods","date":"2010-06-18T12:55:38.552582Z","commit":"1328","message":"I've added a function that lets you get the protoms command file used\nfor parameterisation\n\n"},{"author":"chryswoods","date":"2010-06-16T15:54:23.972368Z","commit":"1327","message":"I've added the code to calculate potentials on QM lattice charges and\nhave worked out how to map these back to the MM atoms in the QM/MM calculation.\nI've just now got to write the last piece of this code that finishes \nthe mapping...\n\n"},{"author":"chryswoods","date":"2010-06-15T12:52:08.629228Z","commit":"1326","message":"I think that I've got the Molpro potential code working - I am running some\ntests where I calculate the potential around a water molecule.\n\nI'm also committing this breakfast's work on moving the LJ calculation into\none set of functions - I've done this for a few of the LJPotential functions,\nbut there are still loads to go.\n\n"},{"author":"chryswoods","date":"2010-06-14T20:35:01.959794Z","commit":"1325","message":"I've updated the python wrappers for Siren and am also committing my work on testing\nthe force calculation. At the moment, the LJPotential-based forcefields are giving\nthe wrong forces, and also apparently the wrong energies.\n\n"},{"author":"chryswoods","date":"2010-06-14T15:46:41.994915Z","commit":"1324","message":"I've updated the version of Siren in devel to match the latest version\nfrom branches/users/chryswoods. The merge command was;\n\nsvn merge -r 1110:1323 ../users/chryswoods/src/libs/Siren src/libs/Siren\n\nThis is so that the fixes to Siren so that it compiles with Qt 4.2 would\nwork, and also so that the latest version of Siren is available in \ndevel in preparation for me to backport the new SireCluster to devel.\n\nThe corelib code all compiles and runs, but this code needs to have\nthe updated python Siren wrappers.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-06-12T23:21:32.601701Z","commit":"1323","message":"I've added the \"Within\" class that lets me select atoms based on their\ndistance from points or other atoms, e.g.\n\ncox2 = PDB().readMolecule(\"test/io/cox2.pdb\")\n\natoms = cox2.selectAll( Within(5*angstrom, AtomName(\"ca\")) )\n\nor\n\natoms = cox2.selectAll( Within(3*angstrom, Vector(23,6,10)) )\n\nCool :-)\n\n"},{"author":"chryswoods","date":"2010-06-12T19:14:00.554179Z","commit":"1322","message":"I've updated the selection code so that selecting atoms etc. can use information\nfrom the molecule via passed PropertyMaps. I've moved all of the selection\ncode into MoleculeView and Editor, so that it is consistent across all\nof the different views (which makes things easier to learn).\n\nI've also added ResWithAtoms, CGsWithAtoms, ChainsWithRes etc.\nso that residues etc. can be selected that contain atoms, \ne.g. to select all residues that contain \"CA\" atoms, you \nwould do;\n\nSelector\u003cResidue\u003e residues = mol.select( AtomName(\"CA\").residues() );\n\nor, in Python you can write;\n\nfor residue in mol.select( AtomName(\"CA\").residues() ):\n    do something with residue\n\nCode should be working - the python wrappers are compiling now\n(obviously, they are pretty much all being recompiled.... yawn!)\n\n"},{"author":"chryswoods","date":"2010-06-12T11:31:03.139993Z","commit":"1321","message":"I've got the multi-bead rigid body code working and have added an example\n(a 2-bead ethane molecule - test/SireMove/intra_rbdynamics.cpp).\n\nThere was an issue with the last version - I've fixed it now.\n\nCode is all working again\n\n"},{"author":"chryswoods","date":"2010-06-12T09:53:01.221529Z","commit":"1320","message":"I've added an AtomBeading property, and BeadNum class, so that it is possible\nto arbitrarily assign atoms to beads. I've added support for this in the \nRBWorkspace, so hopefully, I will soon be able to test if multi-bead molecules\nwork :-)\n\nPython wrappers are compiling now, but they should all work.\n\n"},{"author":"chryswoods","date":"2010-06-11T23:38:22.216259Z","commit":"1319","message":"I've fixed RBWorkspace - I had broken it by calculating the moments of inertia\nusing the bead mass rather than using the atomic masses. It now all works.\nTomorrow I will test the multi-bead molecule code :-)\n\n"},{"author":"chryswoods","date":"2010-06-11T22:45:08.592894Z","commit":"1318","message":"Continuing to work to fix rbworkspace...\n\n"},{"author":"chryswoods","date":"2010-06-11T22:35:09.987360Z","commit":"1317","message":"I've updated RBWorkspace to support multi-bead molecules. It all compiles, links and works,\nalthough the resulting dynamics is broken (just like it was broken before I finally\ndebugged and fixed the single-bead simulations). I just now need to work out how\nI broke it, so I can then fix it again...!\n\n"},{"author":"chryswoods","date":"2010-06-11T17:00:47.192922Z","commit":"1316","message":"I've fixed a bug in NMatrix (multiplication by a scalar was just plain wrong) and\nalso fixed a bug in PolariseCharges (the off-diagonal terms of X^T X should have\nbeen multiplied by 1/alpha).\n\nI'm also committing my continuing work on beading up the rigid body dynamics\nworkspace.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-06-07T21:04:01.781455Z","commit":"1315","message":"I've fixed a bug in restraintff.cpp that meant that in rare circumstances \nuser supplied values for the restraints weren't being properly updated.\n\nI'm also committing the beginning of my work to allow a molecule to contain\nmultiple beads.\n\n"},{"author":"chryswoods","date":"2010-06-05T22:49:22.651571Z","commit":"1314","message":"I've debugged the bond, angle and dihedral force calculations. They now seem to\nwork (see test/SireMove/intra_dynamics.py) although numerical error means\nthat bond lengths to hydrogens change during integration (growing in one\ndirection, then shrinking in the other, until the molecule eventually blows\nup)\n\n"},{"author":"julienmich","date":"2010-06-04T16:55:07.322300Z","commit":"1313","message":"Fixed a bug in movermove, done tests to check that the results are correct on toy systems. \nTests on more complex molecules are now needed to optimize movermove for efficiency.\n\n"},{"author":"chryswoods","date":"2010-06-03T19:20:00.416085Z","commit":"1312","message":"Fixed a compile error in the python wrappers \n\n"},{"author":"chryswoods","date":"2010-06-03T15:29:41.382678Z","commit":"1311","message":"I've removed these files that are no longer needed as these classes are no longer\nexposed to python\n\n"},{"author":"chryswoods","date":"2010-06-03T15:16:58.348407Z","commit":"1310","message":"I am compiling the updated Python wrappers that accompany the merged version\nof the devel branch into the users/julienmich branch\n\n"},{"author":"chryswoods","date":"2010-06-03T14:43:51.074657Z","commit":"1309","message":"I've merged the corelib/branches/devel branch into corelib/branches/users/julienmich using\n\nsvn merge -r 1270:1308\n\nThis updates this branch so that it is equivalent to revision 1308 of the devel branch.\n\nI've also fixed a couple of small compile bugs in src/libs/SireMove/movermove.cpp\n\n"},{"author":"chryswoods","date":"2010-06-03T14:05:06.439573Z","commit":"1308","message":"I've implemented all of the stub code so that everything cmopiles and \nlinks again properly, and I'm also committing the updated python wrappers.\n\nSire should be working again :-)\n\n"},{"author":"chryswoods","date":"2010-06-03T11:48:18.475039Z","commit":"1307","message":"By using Shark (excellent Apple profiling tool) I found that the slowdown was\nnot because of the monitors, but because of the constraints. There were two problems;\n\n(1) Updating a constant in forcefields caused reindexing the all forcefields\n    (this has now been fixed)\n\n(2) Checking whether an atom point would be changed, and then changing that\n    atom point caused several molecule copies (these have been fixed)\n\nMaking these changes reduced the time for 10 000 moves from 5.5 seconds to\n3.1 seconds. The time without monitors or constraints is 2.5 seconds, so there\nis still some way to go, but at least it is an improvement.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-06-03T10:50:28.076529Z","commit":"1306","message":"I've fixed the second bug found by Julien - this was caused by the operator== code\nfor the GeometryComponent classes incorrectly saying they were equal. This was because\nof a silly typo, e.g.\n\nbool DistanceComponent::operator==(const DistanceComponent \u0026other) const\n{\n    return this != \u0026other or ...;\n}\n\nshould be\n\n    return this == \u0026other or ...;\n\nI've scanned the code to see if I made this error anywhere else, and fortunately\nI hadn't. I've fixed this bug in all of the GeometryComponent classes and now\nthe script works. It is interesting to note however that the time to run\n10000 moves of test/SireSystem/testmonitors.py increase from 4.5 to 5.5 seconds\nwhen I add the third monitor. I will performance debug this now...\n\nNote that the code is still broken because of the work in progress for the\nQM forcefields.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-06-03T07:52:08.155189Z","commit":"1305","message":"I've added Julien's triatomic monitor test script that reveals a performance bug\nin RecordValues. I've fixed this by changing the QVector\u003cdouble\u003e (which holds all\nof the recorded values in a single array, so is very expensive to copy when it gets\nbig) with a SireBase::ChunkedVector\u003cdouble\u003e, which holds the data as a series of\nQVectors, so is doesn't copy everything. This now means that running 1 M moves\nin test/SireSystem/testmonitors.py takes only 10 times longer than running\n100 k moves (46 seconds versus 4.6 seconds).\n\nI'm also committing my progress of adding field and potential support to \nthe QM forcefields - this code is still work in progress\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-06-01T15:50:00.317725Z","commit":"1304","message":"I'm committing the afternoon's work on adding force, field and potential support to the\nQM forcefields so that Ewa can run QM dynamics, and Katie can run QM/MM_{polarised}\ncalculations...\n\nCode is broken\n\n"},{"author":"julienmich","date":"2010-06-01T04:31:17.034236Z","commit":"1303","message":"Trying to get movermove to work on bonds (code is broken)\n"},{"author":"julienmich","date":"2010-05-31T23:31:50.527368Z","commit":"1302","message":"Finished the API for getBonds, getAngles, getDihedrals. Appears to work for ethane, but \nmore tests are needed and should involve mono,di,tri-atomic molecules and ring structures\n"},{"author":"chryswoods","date":"2010-05-31T22:54:26.677973Z","commit":"1301","message":"I've got the rigid body MD code working now - the water example (rigidbodymd.py)\nconserves energy and produces a reasonable trajectory, as does the ion\nexample. Cool :-)\n\n"},{"author":"chryswoods","date":"2010-05-31T22:26:11.551175Z","commit":"1300","message":"I've now got the ions example working (test/SireMove/rbdynamics.py), and have\nadded code to print out the principal axes of the molecules being moved\n\n"},{"author":"chryswoods","date":"2010-05-31T16:25:25.203831Z","commit":"1299","message":"I'm still getting there - I've worked out that part of the problem was that when\nthere was a zero eigenvalue that the principal axes could come out as\na mirror (left-hand) form - I've added code to detect this and correct\nthe axes to a right-hand form. This hasn't fixed the waters though...\n\n"},{"author":"chryswoods","date":"2010-05-31T13:11:42.599040Z","commit":"1298","message":"I'm nearly there with the rigid body dynamics integrator - I've fixed a bug in the cross\nproduct calculation and have worked out that the error now is that sometimes there\nis a problem with the torque calculation and that the negative of the torque is needed.\nThis implies that I have either a problem with my axis set for the internal frame\nof some molecules, or I am doing something to screw up the torque calculation...\n\n"},{"author":"chryswoods","date":"2010-05-31T12:01:09.673594Z","commit":"1297","message":"I've fixed a bug in the matrix multiplication code that was the cause of rotations\naround the y axis leading to scaling.\n\nI've also now got the rigid body integrator working such that a set torque\nresults in the molecules spinning up correctly (see test/SireMove/rbdynamics.py\nand test/SireMove/rigidbodymd.py with the torque set in \nsrc/libs/SireMove/rbworkspace.cpp). This also now all works with quaternions\nfor rotations (which produce the same result as when I originally\nimplemented it using matricies)\n\n"},{"author":"julienmich","date":"2010-05-31T02:56:18.238214Z","commit":"1296","message":"Merged devel changes to bond/angle/dihedralid.cpp(h) using for each file\nsvn merge -r 1292:HEAD https://sire.googlecode.com/svn/corelib/branches/devel/src/libs/SireMol/dihedralid.h\n"},{"author":"chryswoods","date":"2010-05-30T11:11:43.266120Z","commit":"1295","message":"I've added \".mirror()\" functions to the BondID, AngleID and DihedralID classes so\nthat it is easy to get the reverse bond, angle and dihedral IDs. This lets you\neasily build a unique set of bonds etc. if you know that BondID(atom0,atom1) is\nthe same as BondID(atom1,atom0), e.g.\n\nQSet\u003cBondID\u003e bonds;\n\nforeach (BondID bond, list_of_bonds)\n{\n    if ( not (bonds.contains(bond) or bonds.contains(bond.mirror())) )\n    {\n        bonds.insert(bond);\n    }\n}\n\n\n"},{"author":"chryswoods","date":"2010-05-30T10:42:31.856695Z","commit":"1294","message":"I've finally worked out how to convert SireError::invalid_index exceptions\ninto Python StopIteration exceptions. This means that the for x in y: iterations\nin python now work, e.g.\n\n--------------------------\nfrom Sire.IO import *\n\nwater = PDB().readMolecule(\"test/io/water.pdb\")\n\nfor atom in water.atoms():\n    print atom, atom.property(\"coordinates\")\n\n-------------------------\n\nThis also works for all of the sub-seletions, e.g. to calculate the\ncenter of mass of the \"CA\" atoms in a protein, type\n\n-------------------------\nfrom Sire.IO import *\nfrom Sire.Mol import *\nfrom Sire.Maths import *\nfrom Sire.ID import *\n\nprotein = PDB().readMolecule(\"test/io/cox2.pdb\")\n\nmass = 0\ncom = Vector(0)\n\nfor atom in protein.atoms( AtomName(\"CA\", CaseInsensitive) ):\n    com += atom.property(\"coordinates\") * atom.property(\"element\").mass().value()\n    mass += atom.property(\"element\").mass().value()\n\nprint \"Center of mass = %s\" % (com / mass)\n\n-------------------------\n\nCool :-)\n\n"},{"author":"julienmich","date":"2010-05-30T05:17:37.098143Z","commit":"1293","message":"Committing the wrappers which appear messed up for now\n"},{"author":"julienmich","date":"2010-05-30T05:15:54.227735Z","commit":"1292","message":"Working on getBonds(), getAngles() in connectivity and also the movermove class. Not yet working. \n\n"},{"author":"chryswoods","date":"2010-05-29T18:37:19.982441Z","commit":"1291","message":"I've fixed a bug in the PolariseCharges constraint in that it was not passing\non the specified energy component to the System. I've tested it an now\nthe values look sensible, although more detailed debugging is required.\n\n"},{"author":"chryswoods","date":"2010-05-29T17:59:25.240031Z","commit":"1290","message":"Forgot to add the wrappers for the SingleComponent class...!\n\n"},{"author":"chryswoods","date":"2010-05-29T17:30:20.432765Z","commit":"1289","message":"I've added the MonitorProperty class, which is now working (and wrapped) and have\nalso added the code to calculate the self-polarisation energy from the \nPolariseCharges constraint (the energy is calculated by an accompanying \nforcefield that uses the energies that are placed into the self_polnrg property\nby the PolariseCharges constraint itself - this stops me from having to \ndouble-calculate the polarisation, and is a trick I may adopt for the\nQM charge calculators to stop me from having to double-perform the \nQM calculations)\n\nCode all appears to compile and work. I am currently debugging the\nnew self polarisation code...\n\n"},{"author":"chryswoods","date":"2010-05-28T15:06:31.292243Z","commit":"1288","message":"I've fixed a bug in PolariseCharges that meant that it was never satisfied,\nand (from last night) I continued to debug the rigid body code,\nand (finally!) I've added the beginning of my work on the MonitorProperty\nclass to monitor system, forcefield or molecule properties during a simulation.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2010-05-26T23:05:26.980209Z","commit":"1287","message":"I've added another test of the rigid body dynamics code and have been trying to \nsort out the integrator - the code isn't right - the integration for water\nis not stable at all, and looks wrong. The rbdynamics.py script is tests\nsome ions and ion pairs, and this looks better, but there is still a lot to do...\n\n"},{"author":"chryswoods","date":"2010-05-25T21:09:42.327893Z","commit":"1286","message":"I've committed more work on the rigid body integrator, and also a fix for the\npython2 wrapper autogeneration error caused by an undeclared uint32_t in \nmaths.h\n\n"},{"author":"chryswoods","date":"2010-05-24T22:18:59.098479Z","commit":"1285","message":"I've switched the orientation and integration over to use quaterions. This has stabilised\nthe structures, although they all start with one hydrogen in a slightly wrong place.\nDespite this, the rest of it looks ok, so the next step is to calculate the kinetic\nenergy so I can monitor energy conservation, and to then debug this hydrogen position...\n\n"},{"author":"chryswoods","date":"2010-05-24T21:55:14.787564Z","commit":"1284","message":"I've added the rotational integration code - this appears to work (to an extent).\nNumerical inprecision destroys the rotation matrix after several iterations,\nalthough before then, the motion of the water looks realistic.\n\n"},{"author":"chryswoods","date":"2010-05-24T21:31:23.825747Z","commit":"1283","message":"I've written the code that integrates the positions of the rigid body beads.\nThis appears to work (the dynamics of the rigid waters looks correct, although\nI still need to check that the total energy is being conserved). \n\nThe next job is to integrate the orientations...\n\n"},{"author":"chryswoods","date":"2010-05-23T20:52:00.701555Z","commit":"1282","message":"I've added some public domain code to quickly calculate the eigenvectors and \neigenvalues of the 3x3 matrix class without resorting to BLAS (which may\nnot be available). I've also continued working on filling in the code\nof the rigid body dynamics workspace - I've calculated the center of\nmass, principle moments of inertia and the coordinates of the atoms\nin the center of mass / inertia tensor frame.\n\n"},{"author":"chryswoods","date":"2010-05-23T15:34:55.452915Z","commit":"1281","message":"I've begun work on the rigid body integrator. I am writing a rigid body integrator\nthat can be used to move solvent molecules, and also for hybrid rigid body monte carlo.\n\nThe rigid body integrator is tested in test/SireMove/rigidbodymd.py, although\nat the moment it doesn't work as the code is just a stub.\n\n"},{"author":"chryswoods","date":"2010-05-23T12:30:08.105089Z","commit":"1280","message":"I've debugged the hybrid MC move and have added a hybrid MC equilivalent\nof the dynamics example (e.g. test/SireMove/hybridmc.py is the equivalent\nsimulation to test/SireMove/dynamics.py)\n\n"},{"author":"chryswoods","date":"2010-05-22T21:42:48.941701Z","commit":"1279","message":"I've cleaned up the API for the MolecularDynamics class and have written\nand wrapped a Hybrid Monte Carlo (HybridMC) class (and added some \ndocuments I wrote when I was a postdoc at Southampton about \nhybrid MC and random number generation). It all compiles and links.\nI've designed it so that different hybrid MC algorithms can be \nachieved by changing the HMC velocity generator.\n\n"},{"author":"chryswoods","date":"2010-05-22T12:52:44.486779Z","commit":"1278","message":"I've fixed a few small bugs in the calculation of forces.\n\n"},{"author":"chryswoods","date":"2010-05-22T12:39:45.486222Z","commit":"1277","message":"I've got the dynamics code working!!! :-)\n\ntest/SireMove/dynamics.py runs 10 ps of dynamics of a cube of salt (5x5x5). The\nenergy is conserved, the dynamics looks good, and things are great!\n\nIn being able to do dynamics, Sire has taken a big step beyond just being\na better version of ProtoMS. The API for dynamics is quite cool too, \nas it cleanly separates the dynamics integrator from the MoleculeDynamics\nmove class, and classes that are used to manage the system. The only down-side\nis that the updates to the system could end up being very slow...\n\n"},{"author":"chryswoods","date":"2010-05-22T11:13:02.301325Z","commit":"1276","message":"I've got the dynamics code running - the code now all compiles and links without errors.\nThe script test/SireMove/dynamics.py runs dynamics on a 6x6x6 box of neon. The \nintegration at the moment is wrong, as the trajectory is rubbish and the total\nenergy is not conserved... Time for some debugging.\n\n"}]}