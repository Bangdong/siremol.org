{"Page":21,"TotalPages":28,"commits":[{"author":"chryswoods","date":"2008-11-03T15:35:54.659062Z","commit":"775","message":"I've forced the streaming save/load functions to reserve some space in which to write the\ndata as on bluecrystal I am seeing occasional QBuffer memory allocation errors, which I think\nmay be caused by QBuffer not being able to reallocate memory while saving the new replicas.\n\n"},{"author":"chryswoods","date":"2008-11-02T15:59:01.472126Z","commit":"774","message":"I think that I've got the QM/MM RETI simulation working now. The last problem was that\nthere was no comparison operator in RigidBodyMC move so that solvent moves were not being\nadded correctly.\n\n"},{"author":"chryswoods","date":"2008-11-02T14:16:39.937787Z","commit":"773","message":"I've fixed the bug that was causing rigidbodymc.py to be wrong. Now the two MC simulations\nagree completely :-)\n\nThe problem was in inter2b2gff.hpp, where I passed a 'false' value as an argument\nto mols.change(...) when I should have passed a 'true'...\n\nCode is now working\n\n"},{"author":"chryswoods","date":"2008-11-02T12:46:42.278068Z","commit":"772","message":"I'm still debugging the wrong MC energy problem...\n\n"},{"author":"chryswoods","date":"2008-11-02T11:04:11.719756Z","commit":"771","message":"I am debugging the Monte Carlo moves. In test/SireMove/rigidbodymc.py I have two MC simulations;\nOne has the box of water using a single InterCLJFF forcefield, while the other has the\nsame box split over two InterCLJFF forcefields and a InterGroupCLJFF forcefield. Both\nsystems have the same energy (hence the forcefields are working), but the MC trajectories\nare different, because the combination of forcefields does not appear to be updating \ncorrectly.\n\nIn looking at this I've changed the code so that I can print out the SwitchingFunction,\nand also so that I can set the random number generator used by a collection of moves\n(hence now, for the first time, I have completely deterministic and repeatable MC \nsimulations - the first ten steps of the water box should have energies;\n\nInitial energy = -16364.5 M L^2 T-2 Q-1\nEnergy = -16363.6 M L^2 T-2 Q-1\nEnergy = -16363.2 M L^2 T-2 Q-1\nEnergy = -16363 M L^2 T-2 Q-1\nEnergy = -16363 M L^2 T-2 Q-1\nEnergy = -16361.8 M L^2 T-2 Q-1\nEnergy = -16362.4 M L^2 T-2 Q-1\nEnergy = -16362.4 M L^2 T-2 Q-1\nEnergy = -16362.3 M L^2 T-2 Q-1\nEnergy = -16362.4 M L^2 T-2 Q-1\nEnergy = -16362.3 M L^2 T-2 Q-1\nFinal energy = -16362.3 M L^2 T-2 Q-1\nnAccepted() == 8, nRejected() == 2  (80.000000 %)\n\n\n"},{"author":"chryswoods","date":"2008-11-01T23:44:42.672403Z","commit":"770","message":"I've changed the streaming of RanGenerator so that it is shared when it is saved and loaded.\nThis ensures that one shared RanGenerator isn't turned into lots of identical copies\n(all then serving the same sequence of random numbers!)\n\nThe code is working (on Linux and OS X - on Linux the symbol hiding is working as well, although\nit doesn't appear to reduce the wrapper size much - _Mol.so is 70 MB!)\n\n"},{"author":"chryswoods","date":"2008-11-01T21:34:24.565811Z","commit":"769","message":"I've fixed a typo in IDOrSet (it was printing \"A and B\" rather than \"A or B\") and I have\nadded operator\u0026 and operator| to the ID types in the hope that these will get exported\ncorrectly to python (as operator\u0026\u0026 and operator|| don't - it is also nice that all\nversions of +, and, \u0026\u0026 and \u0026 do the same thing, and *, or, || and |)\n\nCode seems to be working\n\n"},{"author":"chryswoods","date":"2008-11-01T16:03:41.440947Z","commit":"768","message":"Really fixed the compilation problem...!\n\n"},{"author":"chryswoods","date":"2008-11-01T16:02:38.668644Z","commit":"767","message":"Fixed another compilation bug...\n\n"},{"author":"chryswoods","date":"2008-11-01T15:48:06.480113Z","commit":"766","message":"I've fixed a few problems that were preventing compilation of the python wrappers.\n\n"},{"author":"chryswoods","date":"2008-11-01T15:27:27.150238Z","commit":"765","message":"I think that I've finished updating all of the ID types now - we'll just have to see if they\nall compile (and all of the python wrappers work - compilation takes forever!)\n\nCode is possible broken\n\n"},{"author":"chryswoods","date":"2008-11-01T12:24:36.051467Z","commit":"764","message":"I've nearly finished updating all of the ID types.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-11-01T10:33:22.936643Z","commit":"763","message":"Adding idandset.hpp\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-11-01T10:32:58.585760Z","commit":"762","message":"Renaming idset.hpp to idorset.hpp\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-11-01T10:31:36.867422Z","commit":"761","message":"I'm now taking the fixed ID classes and propogating them to the rest of the code...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-11-01T09:09:25.633110Z","commit":"760","message":"I've moved all of the inline functions from the SireMol ID classes into the .cpp files, as\nI was getting a weird link error on Linux with symbol hiding (AMD64) (relocation R_X86_64_PC32\nfor the inline MGNum::hash() symbol, which was solved by moving that function out of line).\n\nDespite that, on my mac the RETI simulation appears to be working :-)\n\n"},{"author":"chryswoods","date":"2008-10-31T22:48:42.494069Z","commit":"759","message":"I've finished updating the ID classes in SireMol (and have even added the IDSet class so\nthat I can now perform \"or\" matching as well as \"and\" matching, e.g.\nMolIdx(0) and (AtomName(\"H01\") and AtomName(\"H02\")) to match the two hydrogens\nin the first water molecule in a box).\n\nSire compiles, links and runs, and I am now in the process of recompiling the \npython wrappers.\n\n"},{"author":"chryswoods","date":"2008-10-31T08:55:06.120777Z","commit":"758","message":"I've finished adding all of the streaming functions to the SireMol classes. I've still got the\nother modules to do though... (though SireMol contains by far the most ID types).\n\nI've also realised that I should change the IDNumList classes into IdentifierList classes,\nso that I can implement 'or' matching (in addition to the 'and' matching that I can \nalready do).\n\nCode is probably broken!\n\n"},{"author":"chryswoods","date":"2008-10-30T22:03:07.348066Z","commit":"757","message":"I'm continuing to add the streaming functions for the identifier classes - there are rather\na lot to write...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-30T16:55:56.653475Z","commit":"756","message":"I've just seen that there's actually quite a lot of work to do to load and save the various\nidentifiers used in SireMol... (and beyond). I've made a start, but I can see that this will\ntake a long night or two of coding to finish...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-30T14:57:16.051936Z","commit":"755","message":"I'm now very nearly ready to run some water QM/MM free energy calculations. I've removed\nthe debugging statements, fixed the crash and am about to go. The only problem now\nis that I've hit a SireError::incomplete_code as I haven't written the code to save and load\nthe AtomIdentifiers  (or indeed any of the identifiers)\n\n"},{"author":"chryswoods","date":"2008-10-30T13:29:25.271140Z","commit":"754","message":"I've finished writing the PrefSampler preferential sampling class and it appears to be working.\nI have also updated the API of MoleculeGroup a bit so that I can query the molecule and view\nindicies without having to copy the molecules. This has allowed PrefSampler to update the \nweights without requiring any molecule copies (which can be a little expensive, en-masse!)\n\n"},{"author":"chryswoods","date":"2008-10-30T08:53:30.673565Z","commit":"753","message":"I am making progress implementing the PrefSampler preferential sampling class.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-29T20:00:14.179173Z","commit":"752","message":"I'm working on writing the new preferential sampling class. When writing the new RETI\nscript I realised that I hadn't got around to writing this sampler!\n(partially because of the old difficulty of sampling different views of the same\nmolecule, something that the ViewsOfMol class now solves)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-29T15:38:45.649177Z","commit":"751","message":"Removed a broken assertation in VolumeMove (note to self - don't assert on a comparison of\nfloating point numbers!!!!)\n\n"},{"author":"chryswoods","date":"2008-10-29T15:09:49.116423Z","commit":"750","message":"I've added a 'clearStatistics()' function to Move, Moves, SystemMonitor, SystemMonitors,\nReplica and Replicas so that it is now easy to clear the statistics of a running\nsimulation (e.g. to reset the statistics between replica exchange moves)\n\n"},{"author":"chryswoods","date":"2008-10-29T14:09:33.074780Z","commit":"749","message":"I've fixed more bugs, added a toString() to the Move classes, and am at a point now\nwhere the RepExReplicas save and load apparently correctly, and the simulation\nis almost ready to run...\n\n"},{"author":"chryswoods","date":"2008-10-29T13:36:05.714407Z","commit":"748","message":"I've fixed a bug in ViewsOfMol where an assertation failed when a view was removed\n(this was caused by a typo - if (views.isEmpty() == 0) which should be \nif (views.isEmpty() - annoying!)\n\nI've also updated the API of System and MoleculeGroup to make them easier to use.\n\n"},{"author":"chryswoods","date":"2008-10-29T11:24:45.697433Z","commit":"747","message":"I've found the cause of the missing components bug - the problem was that I was not \nproperly serialising the Values class - I was saving the SymbolID numbers when I should\nhave been saving the System names (as the IDs can change, but the names stay the same)\n\n"},{"author":"chryswoods","date":"2008-10-29T11:03:52.406485Z","commit":"746","message":"I've fixed the first bug - it was caused by not copying the tmp RepExReplica object that\nwas being loaded into the permanent RepExReplica object (in the QDataStream \u003e\u003e operator)\n\nNow the problem is that I have lost the energy component symbols...\n\n"},{"author":"chryswoods","date":"2008-10-29T08:57:19.504402Z","commit":"745","message":"I've added a toString() function to the FileHeader class, and am debugging the problem that a\nReplicas object is not being properly loaded back up from a datastream (all of the systems\nare null)\n\n"},{"author":"chryswoods","date":"2008-10-28T23:09:10.848170Z","commit":"744","message":"I've made more progress writing a RETI simulation script (not committed to Sire), and\nin the process of doing so I have fixed a few bugs and cleaned up the API.\n\nI also updated the physical constants in the last update so that they match the latest\nvalues obtained from the NIST website.\n\n"},{"author":"chryswoods","date":"2008-10-28T16:53:34.478958Z","commit":"743","message":"I've been fixing bugs and cleaning up the API as I've been writing the new RETI script.\n\n"},{"author":"chryswoods","date":"2008-10-28T08:37:31.467369Z","commit":"742","message":"I've fixed a bug in AtomIdentifier in that it wasn't calling the correct virtual\nfunctions to select atoms from Molecules, MoleculeGroup and MoleculeGroups objects.\n\n"},{"author":"chryswoods","date":"2008-10-27T22:40:21.400796Z","commit":"741","message":"Forgot a function in ViewsOfMol...\n\nThe Python wrappers for SireMol now compile and work correctly.\n\n"},{"author":"chryswoods","date":"2008-10-27T22:23:25.010198Z","commit":"740","message":"I've finished writing SpecifyMol and now all of Sire compiles. I'm now compiling the python\nwrappers (to see if they can!) so that I can test MolAtomID.\n\n"},{"author":"chryswoods","date":"2008-10-27T16:56:42.695043Z","commit":"739","message":"I've added a MolAtomID class, that has necessitated adding MolMolID and SpecifyMol...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-26T22:29:12.666948Z","commit":"738","message":"I've fixed RDFMonitor so that it takes the system space into account when it calculates\nthe interatomic distances. I've also optimised the distance calculations, so that they\nare now at least twenty times faster than before (generating a complete O-O and O-H RDF\non my water box takes just a second, compared to around twenty seconds before - and that\nwas without periodic boundaries). - see test/SireSystem/rdf.py\n\n\n"},{"author":"chryswoods","date":"2008-10-26T19:28:31.379744Z","commit":"737","message":"I've finished the RDFMonitor class and written a test for it (test/SireSystem/rdf.py) - it\nappears now to do exactly what I want (though it is a little inefficient - this stems\nfrom the atom selection code being very slow!)\n\n"},{"author":"chryswoods","date":"2008-10-26T16:52:04.554519Z","commit":"736","message":"I've implemented most of the RDF monitor. The only thing missing is the part that actually\nscans the system for atoms and calculates the interatomic distances!\n\n"},{"author":"chryswoods","date":"2008-10-26T12:43:00.682565Z","commit":"735","message":"I've extended the Histogram class so that it can be derived into template specialised\nclasses (so that I can have a histogram of Lengths, or Energies). This will lead\nto better type safety when using the histogram's public API.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-25T17:14:48.601085Z","commit":"734","message":"I've added an RDF class that will be used to collect and calculate an RDF. This is based\non top of the HistogramRange and Histogram classes.\n\n"},{"author":"chryswoods","date":"2008-10-24T22:45:33.860488Z","commit":"733","message":"I've added a Histogram class (with helpers) so that I can begin implementing the RDF\nclass. I've added my own histogram as I want to have a nice API, and couldn't\nfind any existing APIs that I liked.\n\n"},{"author":"chryswoods","date":"2008-10-24T15:42:25.622347Z","commit":"732","message":"I've seen one Molpro crash, so I've applied a fix where the output file is read a second\ntime if the output line is not found (thereby giving a chance to write the file fully to\ndisc if this is a buffer problem), and I've also added a change to API to allow\nmultiple attempts to get the QM energy (with a default of 5 attempts).\n\nSo far, I've run hundreds of QM jobs now without error (or indeed, so far, without\nany retries either).\n\n"},{"author":"chryswoods","date":"2008-10-24T13:53:18.962481Z","commit":"731","message":"I've rewritten the Molpro controller to use std::system and to read and write files. The modifications\nseem to work - the test/Squire/molproff.py script runs 100 Molpro jobs in succession without any\ncrashes. I think one of my problems may have been that I used QFile.readAll(), which perhaps\nwasn't returning the entire file, which was what I assumed.\n\nI've also fixed a bug in Move, where the space and coordinates property names weren't being\ncopied, and in PropPtr, which used operator= to do comparison (instead of operator==) (!!!)\n\n"},{"author":"chryswoods","date":"2008-10-24T10:20:48.170948Z","commit":"730","message":"I've changed the molpro interface over to use std::system, and so that it writes out the input\nfile to disc, writes the output to disc, then reads output from disc. This is to try and remove\nthe weird errors I had when Sire thought that molpro had finished when it patently hadn't. Also,\nI hope that this will allow Sire to work with OpenMPI (which deadlocked with QProcess)\n\n"},{"author":"chryswoods","date":"2008-10-24T08:14:26.855984Z","commit":"729","message":"I've fixed the problem with PeriodicBox - I'd got the boxes the wrong way around when I was changing\nthe positions of the molecules. It all looks ok now.\n\n"},{"author":"chryswoods","date":"2008-10-23T15:20:35.565069Z","commit":"728","message":"I've got the PDB writer working, but this has shown me that the volume changes are not\nworking (test/SireVol/changevolume.py produces some weird output - all of the waters\nget pushed up into the corners of the box - this will need fixing)\n\n\n"},{"author":"chryswoods","date":"2008-10-23T09:47:41.267810Z","commit":"727","message":"I've written quite a lot of the PDB writer now - it can now write most of what it can read\n(the reader can read a *lot* from a PDB file!)\n\nThe code is now compiling, but it needs testing.\n\nCode may be broken\n\n"},{"author":"chryswoods","date":"2008-10-23T07:55:51.687860Z","commit":"726","message":"During testing of the volume move classes I've realised that I haven't written the new PDB writer!\nI am no writing the PDB writer...\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-22T18:53:39.455060Z","commit":"725","message":"I've now written (and wrapped) the VolumeMove class. It needs testing, but I think that I am\nnow back where I was last year, in terms of functionality - I should now be able to run\nNPT MTSMC QM/MM Monte Carlo free energy simulations again!\n\n"},{"author":"chryswoods","date":"2008-10-22T11:11:38.732465Z","commit":"724","message":"I've updated the volume and move classes so that moves work by mapping from the current space\ninto an infinite cartesian space - then they perform the move in the infinite space - then\nthey map back to the original space before updating the molecule in the system.\n\nThis now needs to be tested.\n\n"},{"author":"chryswoods","date":"2008-10-22T07:54:18.788562Z","commit":"723","message":"I've finished changing the property access functions in System and ForceFields so that it is\nnow possible to cleanly get and set properties using these interfaces. This will make the \nvolume move class easier to write! (and also the space mapping functions of the other\nmoves, which are necessary to map the molecules back into the box after every move)\n\n\n"},{"author":"chryswoods","date":"2008-10-21T19:49:53.405966Z","commit":"722","message":"I've added a FreeEnergyAverage class to simplify the accumulation of free energy averages,\nand I am now working on sorting out the property system to get the system space so I can\nperform volume moves. I'm rewriting the ForceFields properties() type functions so that\nthey return just the property, validating that it is the same in all forcefields. This way,\nI can set and retrieve the space property from the System interface and know that the\nspace is the same in all forcefields (which it kind of has to be, otherwise mapping the\nmolecule from one side of the box to the other could really screw up the forcefield if\nit had a different space!)\n\nI will probably want to rewrite this at a future date as this is not totally satisfactory\n(it is not as flexible as I'd like), but for now, with deadline looming, it is the\nbest course of action.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-21T12:52:34.457368Z","commit":"721","message":"I've now written and tested the new accumulator classes (and have wrapped them\nin Python - well Py++ wrapped them - Py++ is excellent!)\n\n"},{"author":"chryswoods","date":"2008-10-21T09:51:22.839214Z","commit":"720","message":"I've written the code to calculate an average (it seems like a lot of code for such a simple\noperation - oh well ;-)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-21T07:53:50.629626Z","commit":"719","message":"I am now writing the classes that will allow for the monitoring of system components\n(e.g. to accumulate the average energy difference which can then be converted into\na relative free energy)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-20T21:26:48.396151Z","commit":"718","message":"I've adapted the code so that it swaps systems between replicas, but leaves the system \nmonitors behind (this was achieved by updating the API of System to give\ndirect access to the SystemMonitors, ForceFields and MoleculeGroups objects\nthat make up the system).\n\nI've also updated the SystemMonitors API a little to make it more usable\n(in particular, I can now finally query the frequency of a monitor!)\n\n"},{"author":"chryswoods","date":"2008-10-20T20:44:47.715365Z","commit":"717","message":"The replica exchange code and test appears to be working correctly (see test/SireMove/retimoves.py).\n\nThe python interface is quite nice, though at the moment the MPI code deadlocks before it\nsubmits any jobs.\n\nI have run into two design problems though;\n\n(1) What should be swapped between replicas? I can't just swap the System() objects, as\n    this would also swap the system monitors, which should remain at the same replica level\n    (as things like the free energy average need to be collected at a fixed lambda value).\n\n    The replica exchange move is a *coordinate* swap move - molecular coordinates are\n    swapped. This is what I have now implemented. However, there are certain coordinates\n    that may be constrained with lambda, so a straight coordinate swap is also not\n    suitable (also - things like the system box needs to move with the coordinates\n    as well - this could get messy!)\n\n(2) There isn't any way yet to record the history of the replicas. Again, this comes\n    back to what exactly is being swapped, and how that is tagged.\n\nI think, having just thought about it, that it may be best to swap the systems after \nall, and to swap the monitors back. \n\nThe history problem can then be solved by making the user name each system. This provides\nan ID that the user can track as and when they want (as they can plot the different \nlambda values of a particular system ID).\n\n"},{"author":"chryswoods","date":"2008-10-20T15:56:49.397594Z","commit":"716","message":"I've written the generic replica exchange test - needs to be compiled and tested\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-20T11:36:40.279792Z","commit":"715","message":"I've fixed the deadlock - it was caused because the global mutex wasn't recursive, so when\none global object was created that needed another global object, it tried to lock the \nmutex twice in the same thread, and so deadlocked. I've changed the global mutex to\nmake it recursive.\n\n(also, the previous version of Sire is currently compiling on my linux desktop, so\nit looks like the large changes in Property were portable).\n\n"},{"author":"chryswoods","date":"2008-10-20T11:02:21.438541Z","commit":"714","message":"I've added warnings to the create_wrappers.py script that tell the user if they\nhaven't set the necessary environmental variables to find the Qt, boost and GSL\nheader files.\n\n"},{"author":"chryswoods","date":"2008-10-18T00:45:11.115846Z","commit":"713","message":"Some fixes were necessary, but now all of the python wrappers compile and the code appears\nto be working. Some simple playing with Ensemble in ipython shows that it is doing what\nI expect. There is an infinite loop bug though when trying to create some RepExReplicas.\n\n"},{"author":"chryswoods","date":"2008-10-17T23:47:05.001336Z","commit":"712","message":"I've finished propogating the changes in Property throughout the rest of the code, and it\nall compiles and seems to work (the 'sire' application runs and returns the right energy).\n\nOk, so I'll admit that this change took longer than I thought (I thought it would be \nabout an hour or so to do, but it was more involved than I thought as it involved\nrenaming lots of important classes, e.g. MoleculeGroup, ForceField etc.).\n\nCode seems to be working, but the Python wrappers need to be regenerated and tested\n\n"},{"author":"chryswoods","date":"2008-10-17T17:17:24.295254Z","commit":"711","message":"While writing the ReplicaRunner class I noticed that the syntax and use of the Property\nclasses wasn't quite right. I've refactored the Property classes so that Property is now\nthe base class, and PropPtr\u003cT\u003e is now the pointer. This makes it a lot more logical, and\nsolves my many naming problems (e.g. there are no more SpaceBase objects, and I've got\nrid of MolGroup and MolGroups, so that I can have MoleculeGroup and MoleculeGroups)\n\nI'm propogating the changes up through the rest of the code.\n\nCode is very broken\n\n"},{"author":"chryswoods","date":"2008-10-17T12:07:49.451648Z","commit":"710","message":"I've updated RepExReplica and RepExReplicas to use the ensemble class - this has made things\nmuch cleaner and easier. I still need to work out how I will get, and what I mean by the \nsimulation space (given every forcefield can have a different space...)\n\nNow need to fill in ReplicaRunner so I can compile, link and test everything.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-16T16:30:27.773293Z","commit":"709","message":"I've added an Ensemble class that allows me to describe the ensemble that would be generated\nby a Move (e.g. NVE, NPT etc.). I've also now updated Move so that it will return and use\nthe ensemble when setting parameters (e.g. an NVT move won't let you set the pressure).\n\nThis is all so that the replica exchange moves will know which test to perform when they\ncompare a pair of replicas.\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-16T08:37:48.362798Z","commit":"708","message":"I'm working on the interface that allows the thermodynamic parameters of moves (e.g. temperature,\npressure) to be set and queried (e.g. move.isConstantTemperature(), move.temperature() etc.)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-15T23:36:13.873233Z","commit":"707","message":"I've implemented most of the new replica exchange design. There is now a clear separation between\nthe replica data (in Replica, Replicas, RepExReplica and RepExReplicas), the code to perform sampling \nof the replicas (in ReplicaRunner, BasicRepRunner, MPIRepRunner), and the code to actually perform\nthe replica exchange moves (will be in RepExMove)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-14T15:47:34.999818Z","commit":"706","message":"I've written most of the replica exchange code...\n\nHowever, I've realised that the design is not right - the information about the move is in the wrong\nplace and this is not extendable to generic replica exchange moves over temperature, pressure etc.\n\nI've worked out a new design, which will replace pretty much everything that I have just written.\n\nC'est la vie\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-07T15:48:14.111617Z","commit":"705","message":"I'm now adding the code that will let me run replica exchange simulations from\nwithin Sire (rather than having to do it all using messy python+ssh scripts!)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-10-06T15:58:44.306808Z","commit":"704","message":"I've finished the MTSMC class, but have run into difficulties with molpro crashing, or\nthe MPI deadlocking etc.\n\nComputers can be annoying.\n\n"},{"author":"chryswoods","date":"2008-10-06T07:49:48.272464Z","commit":"703","message":"I've written most of the new MTSMC multiple timestep Monte Carlo move class. It is is classes\nsuch as this that the power of Sire is evident (it is so clear what is happening, which is\nmore than can be said for the MTSMC implementation in ProtoMS)\n\n"},{"author":"chryswoods","date":"2008-10-05T16:33:53.278318Z","commit":"702","message":"I've got QM/MM working on a remote node on my Mac!!!!!\n\nThere are now no lockups, QMutex errors or weird events - it just does what I expect.\n\nI have also confirmed that binary files written using 64bit linux are readable by\n32bit Mac.\n\nI have also confirmed that I get a deadlock using OpenMPI on Linux 32bit and Linux 64bit,\nso I have switched to mpich2, which doesn't deadlock.\n\nI've fixed a bug in QMFF and QMMMFF whereby the FF wasn't been set as dirty,\nso the energy wasn't being recalculated. Now QM and QM/MM simulations appear to\nwork properly.\n\nThe only problem now is the reappearance of the old template casting problem - \nAtomProperties\u003cElement\u003e created in Squire is not seen as the same as\nAtomProperties\u003cElement\u003e created in SireMol. I've turned off symbol hiding,\nbut this doesn't seem to have fixed the problem. AtomProperties\u003cElement\u003e is\nfully instantiated in libSireMol, so something weird is occuring. This problem\nwill probably cause me the biggest difficulty with portability and testing...\n\n"},{"author":"chryswoods","date":"2008-10-05T16:26:29.382988Z","commit":"701","message":"I've changed create_wrappers.py so that it gets the paths to the Qt, boost and GSL header\nfiles from environmental variables\n\n"},{"author":"chryswoods","date":"2008-10-05T15:01:25.402698Z","commit":"700","message":"I've added configure tests to see if lseek64 is available, and if not, then a stub function\nis used (thereby removing the symbol unavailable dlopen errors when using mpich2).\n\nI have also fixed the QMutex errors on exit by switching over to using Q_GLOBAL_STATIC \nand making sure that the functions check whether or not the static objects\nstill exist. The cause of the error was NodeDeleter, which was running a background\nthread that was checking a global static mutex. I've moved this global static\nmutex so that it is a local mutex in a global NodeDeleter object, and have added\na QThread::wait() in the destructor so the mutex won't be deleted until the \nbackground NodeDeleter thread has exited (and thus stoped using the mutex).\n\n"},{"author":"chryswoods","date":"2008-10-05T11:29:36.219746Z","commit":"699","message":"The code now compiles and runs on Fedora 9 (64 bit, compiled with gcc 4.3). I needed to make a few\nmodifications to fix some compile bugs.\n\nI've also switched mpinode to use Q_GLOBAL_STATIC for the QMutex pointers, in an attempt to \nfix the QMutex errors on shutdown. I can't test it though, as I deadlock on linux, and \nhave lseek64 symbol errors on my mac again!\n\n"},{"author":"chryswoods","date":"2008-10-03T16:08:40.463927Z","commit":"698","message":"Sire compiles and runs on Linux (though while an MPI job works, it deadlocks when the results\nare returned). Linux doens't have the lseek64 problem.\n\n"},{"author":"chryswoods","date":"2008-10-03T15:19:47.073243Z","commit":"697","message":"Had to do Mol as well!\n\nAll of the modules compile and link, though when running it crashes with an error because\nSireMPI can't find the symbol lseek64\n\n"},{"author":"chryswoods","date":"2008-10-03T15:12:33.362672Z","commit":"696","message":"I've fixed a couple of missing link libraries for the Qt and Units modules.\n\n"},{"author":"chryswoods","date":"2008-10-03T14:46:27.429959Z","commit":"695","message":"I've updated the build system to enhance portability - and have *finally* written a FindSire.cmake\n(that uses the cmake EXPORT to write the files, so it should hopefully be portable). Sire builds \nand links, and the python wrappers are now busy building...\n\n"},{"author":"chryswoods","date":"2008-10-03T07:55:58.223628Z","commit":"694","message":"I've had to move the MPI library finder into the main CMakeLists file as it is needed by \nthe MPI module too. I need to write a FindSire that gets all of its dependent libraries\nautomatically.\n\n"},{"author":"chryswoods","date":"2008-10-02T22:57:30.916221Z","commit":"693","message":"I've updated FindPython and copied the new FindBoost so that the python wrappers compile and link\non Linux. Now to test that they still work on my Mac.\n\n"},{"author":"chryswoods","date":"2008-10-02T15:54:22.427689Z","commit":"692","message":"I've updated FindPython.cmake to hopefully make it work better on Linux\n\n"},{"author":"chryswoods","date":"2008-10-02T07:54:44.171503Z","commit":"691","message":"I've tried the code using mpich2 (version 1.0.7 - mpich2-1.0.7) and that doesn't lock up when a process\nexits. The only requirement now is that \u003cmpi.h\u003e is included before anything else. I've made this change\nand now Molpro is run correctly on a remote process. The simulation doesn't appear to make any moves\nthough, so I will need to investigate that...\n \n"},{"author":"chryswoods","date":"2008-10-01T20:42:33.775664Z","commit":"690","message":"I've found that the combination of QThread, MPI and QProcess leads to a lock-up - this is \nbecause QProcess is not told that the sub-process has finished, so QProcess::waitForFinished()\nblocks forever. I've written a test that confirms this (techdocs/testthreadprocess.cpp),\nwhich shows that you get lock up if MPI::Recv is called in a background thread, while\nanother thread runs the QProcess. (it also locks up if MPI::Probe or Iprobe are used).\n\nI'll need to look deeper to find the exact cause of the problem.\n\nI am using Mac OS X 10.5.5, gcc 4.2.1 (apple 5564), Qt 4.4.0 and OpenMPI 1.2.3\n\n"},{"author":"chryswoods","date":"2008-10-01T15:34:10.453335Z","commit":"689","message":"I've written the code to merge CoordGroupArrays and CoordGroupArrayArrays into a single CoordGroup\nand now the QM/MM energies are being calculated correctly. I've also timed the different parts\nof the calculation for a single QM TIP4P in a box of TIP4P (periodic boundaries, 15 A cutoff,\nHF vdz basis) and the results show that writing the command file from scratch, then parsing the \noutput takes a negligable time compared to the actual runtime of molpro (see below). You can\ngenerate this by running \"python test/Squire/molproff.py\"\n\nLoading and parameterising the molecules...\n... took 569 ms\nWriting the command file took 1 ms \nTo start process took 4 ms \nTo finish writing command file took 4 ms \nTo close write channel took 4 ms \nTo finish molpro took 595 ms \nTo read all output took 596 ms \nParsing output took 0 ms \n-47707.5 M L^2 T-2\nGenerating lattice charges took 2 ms \nWriting the command file took 18 ms \nTo start process took 3 ms \nTo finish writing command file took 4 ms \nTo close write channel took 4 ms \nTo finish molpro took 1908 ms \nTo read all output took 1909 ms \nParsing output took 0 ms \n-47729.8 M L^2 T-2\n-22.2902 M L^2 T-2\n\n"},{"author":"chryswoods","date":"2008-10-01T07:52:02.630178Z","commit":"688","message":"I've written most of the code now to add lattice point charges to the QM command file.\nI've just got to finish writing the code to allow merging of CoordGroupArrays and \nCoordGroupArrayArrays back into a single CoordGroup.\n\n"},{"author":"chryswoods","date":"2008-09-30T21:35:56.931976Z","commit":"687","message":"I've nearly finished writing the code to allow QM/MM using Molpro in Sire (the new version\nof Sire - QM/MM using the old version was done over a year ago). This is now much more\nflexible than the old version, and more easily extendable to support other QM programs.\n\nThe code works, but the lattice point function is just a stub, so it is still just QM.\n\n"},{"author":"chryswoods","date":"2008-09-30T12:54:33.262701Z","commit":"686","message":"I've allowed the user to change the temporary directory of Molpro by letting them\nset the TMPDIR environmental variable for the Molpro process.\n\n"},{"author":"chryswoods","date":"2008-09-30T12:48:06.225843Z","commit":"685","message":"I've fixed the TempDir class (it now removes the files correctly) and I have added this class to\nMolpro so that its output is now completely hidden.\n\n"},{"author":"chryswoods","date":"2008-09-30T07:55:04.390130Z","commit":"684","message":"I've added a TempDir class so that I can hide away output files that are created by the QM programs.\nIt works (a little), but TempDir is not being correctly removed.\n\n"},{"author":"chryswoods","date":"2008-09-29T15:50:05.213413Z","commit":"683","message":"I've got the QMFF working - test/Squire/molproff.py shows a working QMFF that uses Molpro to \ncalculate the energy of a single water. This is all wrapped up in Python as well :-)\n\n"},{"author":"chryswoods","date":"2008-09-27T21:51:43.647982Z","commit":"682","message":"I am now fleshing out the 'Molpro' QM program handle. Using QM program handles is much easier\nthan writing a new QM forcefield for each different program (and version!). It works\nas QM energies take so long the virtual function call is insignificant (maybe I could do\nthe same thing with the MM energies?)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-09-27T15:59:07.580599Z","commit":"681","message":"I've updated create_all_wrappers.py to add the new modules\n\n"},{"author":"chryswoods","date":"2008-09-27T15:55:00.541849Z","commit":"680","message":"I've put most of QMFF and QMMMFF together now, and they seem to compile. I've decided to separate\nthe mechanics of running the QM program out into the QMProgram hierarchy of classes (so that\nQMFF and QMMMFF can then work with lots of different QM programs / program versions). I have\njust scoped out the names of these classes, and will try to write more of them after dinner!\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-09-26T22:09:34.191878Z","commit":"679","message":"I've written the Coulomb and LJ potential classes, and created all of the variants of the \nforcefields (InterCoulombFF, IntraLJFF, InterGroupLJFF etc.). Aren't templates wonderful!\n\nI am now compiling the python wrappers so that I can compile them (well I am really going\nto bed - I will test it tomorrow morning)\n\n"},{"author":"chryswoods","date":"2008-09-26T15:51:02.609451Z","commit":"678","message":"I'm now working on sorting out the QM forcefields so that I can run QM/MM simulations again. These\nshould now be straightforward to write, as they are just extensions of the core forcefield\nclasses. I have written a QMPotential, which will be used for QM only calculations. I am now\nin the process of writing CoulombPotential and LJPotential which will be used for the QM/MM\ninteraction (these are based heavily on CLJPotential - and will also be turned into forcefields\nonce they are ready - e.g. InterCoulombFF, IntraLJFF, InterGroupLJFF etc.)\n\nCode is broken\n\n"},{"author":"chryswoods","date":"2008-09-26T09:55:38.519478Z","commit":"677","message":"I've fixed the problem of incorrect energies on the remote node. It was caused by CLJParameter using\nan ID number to identify LJ parameters (via a global LJParameter database). These ID numbers\nwere not portable between nodes, so I have changed the streaming functions for CLJParameter to\nstream the actual LJParameter, rather than the LJParameter ID.\n\nNow I've done that, the remote node looks like it is calculating the right energy and performing the\nsimulation correctly. I still however have problems with invalid QMutex errors when the program\nexits.\n\n"},{"author":"chryswoods","date":"2008-09-25T22:14:15.626109Z","commit":"676","message":"Ok, I've done this for both mutexes in mpinode.cpp, and it hasn't got rid of the mutex lock error...\n\nOh well, time for bed.\n\n"}]}